// Copyright 2022 syzkaller project authors. All rights reserved.
// Use of this source code is governed by Apache 2 LICENSE that can be found in the LICENSE file.

// File autogenerated by genseccomp.py from Android U - edit at your peril!!

const struct sock_filter x86_64_system_filter[] = {
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 0, 0, 100),
BPF_JUMP(BPF_JMP|BPF_JEQ|BPF_K, 202, 98, 0), //futex
BPF_JUMP(BPF_JMP|BPF_JEQ|BPF_K, 16, 97, 0), //ioctl
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 203, 49, 0),
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 93, 25, 0),
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 44, 13, 0),
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 32, 7, 0),
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 17, 3, 0),
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 8, 1, 0),
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 6, 91, 90), //read|write|open|close|stat|fstat
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 16, 90, 89), //lseek|mmap|mprotect|munmap|brk|rt_sigaction|rt_sigprocmask|rt_sigreturn
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 24, 1, 0),
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 21, 88, 87), //pread64|pwrite64|readv|writev
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 29, 87, 86), //sched_yield|mremap|msync|mincore|madvise
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 38, 3, 0),
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 35, 1, 0),
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 33, 84, 83), //dup
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 37, 83, 82), //nanosleep|getitimer
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 43, 82, 81), //setitimer|getpid|sendfile|socket|connect
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 79, 5, 0),
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 72, 3, 0),
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 58, 1, 0),
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 57, 78, 77), //sendto|recvfrom|sendmsg|recvmsg|shutdown|bind|listen|getsockname|getpeername|socketpair|setsockopt|getsockopt|clone
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 64, 77, 76), //vfork|execve|exit|wait4|kill|uname
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 78, 76, 75), //fcntl|flock|fsync|fdatasync|truncate|ftruncate
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 91, 3, 0),
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 89, 1, 0),
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 82, 73, 72), //getcwd|chdir|fchdir
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 90, 72, 71), //readlink
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 92, 71, 70), //fchmod
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 155, 11, 0),
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 135, 5, 0),
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 112, 3, 0),
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 95, 1, 0),
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 94, 66, 65), //fchown
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 111, 65, 64), //umask|gettimeofday|getrlimit|getrusage|sysinfo|times|ptrace|getuid|syslog|getgid|setuid|setgid|geteuid|getegid|setpgid|getppid
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 132, 64, 63), //setsid|setreuid|setregid|getgroups|setgroups|setresuid|getresuid|setresgid|getresgid|getpgid|setfsuid|setfsgid|getsid|capget|capset|rt_sigpending|rt_sigtimedwait|rt_sigqueueinfo|rt_sigsuspend|sigaltstack
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 140, 3, 0),
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 137, 1, 0),
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 136, 61, 60), //personality
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 139, 60, 59), //statfs|fstatfs
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 153, 59, 58), //getpriority|setpriority|sched_setparam|sched_getparam|sched_setscheduler|sched_getscheduler|sched_get_priority_max|sched_get_priority_min|sched_rr_get_interval|mlock|munlock|mlockall|munlockall
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 175, 5, 0),
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 169, 3, 0),
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 157, 1, 0),
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 156, 55, 54), //pivot_root
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 167, 54, 53), //prctl|arch_prctl|adjtimex|setrlimit|chroot|sync|acct|settimeofday|mount|umount2
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 172, 53, 52), //reboot|sethostname|setdomainname
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 186, 3, 0),
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 179, 1, 0),
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 177, 50, 49), //init_module|delete_module
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 180, 49, 48), //quotactl
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 201, 48, 47), //gettid|readahead|setxattr|lsetxattr|fsetxattr|getxattr|lgetxattr|fgetxattr|listxattr|llistxattr|flistxattr|removexattr|lremovexattr|fremovexattr|tkill
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 283, 23, 0),
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 251, 11, 0),
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 221, 5, 0),
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 217, 3, 0),
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 206, 1, 0),
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 205, 42, 41), //sched_setaffinity|sched_getaffinity
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 211, 41, 40), //io_setup|io_destroy|io_getevents|io_submit|io_cancel
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 220, 40, 39), //getdents64|set_tid_address|restart_syscall
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 247, 3, 0),
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 233, 1, 0),
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 232, 37, 36), //fadvise64|timer_create|timer_settime|timer_gettime|timer_getoverrun|timer_delete|clock_settime|clock_gettime|clock_getres|clock_nanosleep|exit_group
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 235, 36, 35), //epoll_ctl|tgkill
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 248, 35, 34), //waitid
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 262, 5, 0),
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 257, 3, 0),
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 254, 1, 0),
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 253, 31, 30), //ioprio_set|ioprio_get
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 256, 30, 29), //inotify_add_watch|inotify_rm_watch
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 261, 29, 28), //openat|mkdirat|mknodat|fchownat
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 280, 3, 0),
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 275, 1, 0),
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 274, 26, 25), //newfstatat|unlinkat|renameat|linkat|symlinkat|readlinkat|fchmodat|faccessat|pselect6|ppoll|unshare|set_robust_list
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 279, 25, 24), //splice|tee|sync_file_range|vmsplice
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 282, 24, 23), //utimensat|epoll_pwait
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 332, 11, 0),
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 305, 5, 0),
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 302, 3, 0),
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 285, 1, 0),
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 284, 19, 18), //timerfd_create
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 300, 18, 17), //fallocate|timerfd_settime|timerfd_gettime|accept4|signalfd4|eventfd2|epoll_create1|dup3|pipe2|inotify_init1|preadv|pwritev|rt_tgsigqueueinfo|perf_event_open|recvmmsg
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 303, 17, 16), //prlimit64
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 321, 3, 0),
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 314, 1, 0),
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 312, 14, 13), //clock_adjtime|syncfs|sendmmsg|setns|getcpu|process_vm_readv|process_vm_writev
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 320, 13, 12), //sched_setattr|sched_getattr|renameat2|seccomp|getrandom|memfd_create
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 329, 12, 11), //bpf|execveat|userfaultfd|membarrier|mlock2|copy_file_range|preadv2|pwritev2
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 436, 5, 0),
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 434, 3, 0),
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 424, 1, 0),
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 333, 8, 7), //statx
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 425, 7, 6), //pidfd_send_signal
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 435, 6, 5), //pidfd_open
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 440, 3, 0),
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 438, 1, 0),
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 437, 3, 2), //close_range
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 439, 2, 1), //pidfd_getfd
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 441, 1, 0), //process_madvise
BPF_STMT(BPF_RET|BPF_K, SECCOMP_RET_ALLOW),
};

#define x86_64_system_filter_size (sizeof(x86_64_system_filter) / sizeof(struct sock_filter))
