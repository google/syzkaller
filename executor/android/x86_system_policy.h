// Copyright 2022 syzkaller project authors. All rights reserved.
// Use of this source code is governed by Apache 2 LICENSE that can be found in the LICENSE file.

// File autogenerated by genseccomp.py from Android U - edit at your peril!!

const struct sock_filter x86_system_filter[] = {
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 0, 0, 136),
BPF_JUMP(BPF_JMP|BPF_JEQ|BPF_K, 240, 134, 0), //futex
BPF_JUMP(BPF_JMP|BPF_JEQ|BPF_K, 54, 133, 0), //ioctl
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 190, 67, 0),
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 88, 33, 0),
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 51, 17, 0),
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 36, 9, 0),
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 19, 5, 0),
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 11, 3, 0),
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 3, 1, 0),
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 2, 126, 125), //restart_syscall|exit
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 7, 125, 124), //read|write|open|close
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 13, 124, 123), //execve|chdir
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 26, 1, 0),
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 22, 122, 121), //lseek|getpid|mount
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 27, 121, 120), //ptrace
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 43, 3, 0),
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 41, 1, 0),
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 38, 118, 117), //sync|kill
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 42, 117, 116), //dup
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 45, 1, 0),
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 44, 115, 114), //times
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 46, 114, 113), //brk
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 66, 7, 0),
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 60, 3, 0),
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 57, 1, 0),
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 53, 110, 109), //acct|umount2
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 58, 109, 108), //setpgid
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 64, 1, 0),
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 62, 107, 106), //umask|chroot
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 65, 106, 105), //getppid
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 77, 3, 0),
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 74, 1, 0),
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 68, 103, 102), //setsid|sigaction
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 76, 102, 101), //sethostname|setrlimit
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 85, 1, 0),
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 80, 100, 99), //getrusage|gettimeofday|settimeofday
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 86, 99, 98), //readlink
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 128, 17, 0),
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 114, 9, 0),
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 96, 5, 0),
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 94, 3, 0),
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 91, 1, 0),
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 89, 93, 92), //reboot
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 93, 92, 91), //munmap|truncate
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 95, 91, 90), //fchmod
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 102, 1, 0),
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 98, 89, 88), //getpriority|setpriority
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 107, 88, 87), //socketcall|syslog|setitimer|getitimer|stat
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 118, 3, 0),
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 116, 1, 0),
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 115, 85, 84), //wait4
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 117, 84, 83), //sysinfo
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 124, 1, 0),
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 123, 82, 81), //fsync|sigreturn|clone|setdomainname|uname
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 126, 81, 80), //adjtimex|mprotect
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 143, 7, 0),
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 136, 3, 0),
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 131, 1, 0),
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 130, 77, 76), //init_module|delete_module
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 134, 76, 75), //quotactl|getpgid|fchdir
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 138, 1, 0),
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 137, 74, 73), //personality
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 141, 73, 72), //setfsuid|setfsgid|_llseek
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 172, 3, 0),
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 150, 1, 0),
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 149, 70, 69), //flock|msync|readv|writev|getsid|fdatasync
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 164, 69, 68), //mlock|munlock|mlockall|munlockall|sched_setparam|sched_getparam|sched_setscheduler|sched_getscheduler|sched_yield|sched_get_priority_max|sched_get_priority_min|sched_rr_get_interval|nanosleep|mremap
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 183, 1, 0),
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 182, 67, 66), //prctl|rt_sigreturn|rt_sigaction|rt_sigprocmask|rt_sigpending|rt_sigtimedwait|rt_sigqueueinfo|rt_sigsuspend|pread64|pwrite64
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 188, 66, 65), //getcwd|capget|capset|sigaltstack|sendfile
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 318, 33, 0),
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 255, 17, 0),
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 224, 9, 0),
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 213, 5, 0),
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 199, 3, 0),
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 197, 1, 0),
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 196, 59, 58), //vfork|ugetrlimit|mmap2|truncate64|ftruncate64|stat64
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 198, 58, 57), //fstat64
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 212, 57, 56), //getuid32|getgid32|geteuid32|getegid32|setreuid32|setregid32|getgroups32|setgroups32|fchown32|setresuid32|getresuid32|setresgid32|getresgid32
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 218, 1, 0),
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 215, 55, 54), //setuid32|setgid32
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 222, 54, 53), //mincore|madvise|getdents64|fcntl64
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 245, 3, 0),
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 241, 1, 0),
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 240, 51, 50), //gettid|readahead|setxattr|lsetxattr|fsetxattr|getxattr|lgetxattr|fgetxattr|listxattr|llistxattr|flistxattr|removexattr|lremovexattr|fremovexattr|tkill|sendfile64
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 244, 50, 49), //sched_setaffinity|sched_getaffinity|set_thread_area
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 252, 1, 0),
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 250, 48, 47), //io_setup|io_destroy|io_getevents|io_submit|io_cancel
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 253, 47, 46), //exit_group
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 292, 7, 0),
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 272, 3, 0),
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 258, 1, 0),
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 256, 43, 42), //epoll_ctl
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 271, 42, 41), //set_tid_address|timer_create|timer_settime|timer_gettime|timer_getoverrun|timer_delete|clock_settime|clock_gettime|clock_getres|clock_nanosleep|statfs64|fstatfs64|tgkill
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 284, 1, 0),
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 273, 40, 39), //fadvise64_64
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 285, 39, 38), //waitid
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 300, 3, 0),
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 295, 1, 0),
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 294, 36, 35), //inotify_add_watch|inotify_rm_watch
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 299, 35, 34), //openat|mkdirat|mknodat|fchownat
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 313, 1, 0),
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 312, 33, 32), //fstatat64|unlinkat|renameat|linkat|symlinkat|readlinkat|fchmodat|faccessat|pselect6|ppoll|unshare|set_robust_list
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 317, 32, 31), //splice|sync_file_range|tee|vmsplice
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 383, 15, 0),
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 343, 7, 0),
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 324, 3, 0),
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 322, 1, 0),
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 321, 27, 26), //getcpu|epoll_pwait|utimensat
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 323, 26, 25), //timerfd_create
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 340, 1, 0),
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 337, 24, 23), //fallocate|timerfd_settime|timerfd_gettime|signalfd4|eventfd2|epoll_create1|dup3|pipe2|inotify_init1|preadv|pwritev|rt_tgsigqueueinfo|perf_event_open
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 341, 23, 22), //prlimit64
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 351, 3, 0),
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 346, 1, 0),
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 345, 20, 19), //clock_adjtime|syncfs
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 349, 19, 18), //setns|process_vm_readv|process_vm_writev
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 374, 1, 0),
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 359, 17, 16), //sched_setattr|sched_getattr|renameat2|seccomp|getrandom|memfd_create|bpf|execveat
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 380, 16, 15), //userfaultfd|membarrier|mlock2|copy_file_range|preadv2|pwritev2
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 434, 7, 0),
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 417, 3, 0),
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 403, 1, 0),
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 384, 12, 11), //statx
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 415, 11, 10), //clock_gettime64|clock_settime64|clock_adjtime64|clock_getres_time64|clock_nanosleep_time64|timer_gettime64|timer_settime64|timerfd_gettime64|timerfd_settime64|utimensat_time64|pselect6_time64|ppoll_time64
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 420, 1, 0),
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 418, 9, 8), //recvmmsg_time64
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 425, 8, 7), //semtimedop_time64|rt_sigtimedwait_time64|futex_time64|sched_rr_get_interval_time64|pidfd_send_signal
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 438, 3, 0),
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 436, 1, 0),
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 435, 5, 4), //pidfd_open
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 437, 4, 3), //close_range
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 440, 1, 0),
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 439, 2, 1), //pidfd_getfd
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 441, 1, 0), //process_madvise
BPF_STMT(BPF_RET|BPF_K, SECCOMP_RET_ALLOW),
};

#define x86_system_filter_size (sizeof(x86_system_filter) / sizeof(struct sock_filter))
