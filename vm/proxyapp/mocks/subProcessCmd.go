// Code generated by mockery v2.52.1. DO NOT EDIT.

package mocks

import (
	io "io"

	mock "github.com/stretchr/testify/mock"
)

// SubProcessCmd is an autogenerated mock type for the subProcessCmd type
type SubProcessCmd struct {
	mock.Mock
}

type SubProcessCmd_Expecter struct {
	mock *mock.Mock
}

func (_m *SubProcessCmd) EXPECT() *SubProcessCmd_Expecter {
	return &SubProcessCmd_Expecter{mock: &_m.Mock}
}

// Start provides a mock function with no fields
func (_m *SubProcessCmd) Start() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Start")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SubProcessCmd_Start_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Start'
type SubProcessCmd_Start_Call struct {
	*mock.Call
}

// Start is a helper method to define mock.On call
func (_e *SubProcessCmd_Expecter) Start() *SubProcessCmd_Start_Call {
	return &SubProcessCmd_Start_Call{Call: _e.mock.On("Start")}
}

func (_c *SubProcessCmd_Start_Call) Run(run func()) *SubProcessCmd_Start_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *SubProcessCmd_Start_Call) Return(_a0 error) *SubProcessCmd_Start_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *SubProcessCmd_Start_Call) RunAndReturn(run func() error) *SubProcessCmd_Start_Call {
	_c.Call.Return(run)
	return _c
}

// StderrPipe provides a mock function with no fields
func (_m *SubProcessCmd) StderrPipe() (io.ReadCloser, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for StderrPipe")
	}

	var r0 io.ReadCloser
	var r1 error
	if rf, ok := ret.Get(0).(func() (io.ReadCloser, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() io.ReadCloser); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(io.ReadCloser)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SubProcessCmd_StderrPipe_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StderrPipe'
type SubProcessCmd_StderrPipe_Call struct {
	*mock.Call
}

// StderrPipe is a helper method to define mock.On call
func (_e *SubProcessCmd_Expecter) StderrPipe() *SubProcessCmd_StderrPipe_Call {
	return &SubProcessCmd_StderrPipe_Call{Call: _e.mock.On("StderrPipe")}
}

func (_c *SubProcessCmd_StderrPipe_Call) Run(run func()) *SubProcessCmd_StderrPipe_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *SubProcessCmd_StderrPipe_Call) Return(_a0 io.ReadCloser, _a1 error) *SubProcessCmd_StderrPipe_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *SubProcessCmd_StderrPipe_Call) RunAndReturn(run func() (io.ReadCloser, error)) *SubProcessCmd_StderrPipe_Call {
	_c.Call.Return(run)
	return _c
}

// StdinPipe provides a mock function with no fields
func (_m *SubProcessCmd) StdinPipe() (io.WriteCloser, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for StdinPipe")
	}

	var r0 io.WriteCloser
	var r1 error
	if rf, ok := ret.Get(0).(func() (io.WriteCloser, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() io.WriteCloser); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(io.WriteCloser)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SubProcessCmd_StdinPipe_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StdinPipe'
type SubProcessCmd_StdinPipe_Call struct {
	*mock.Call
}

// StdinPipe is a helper method to define mock.On call
func (_e *SubProcessCmd_Expecter) StdinPipe() *SubProcessCmd_StdinPipe_Call {
	return &SubProcessCmd_StdinPipe_Call{Call: _e.mock.On("StdinPipe")}
}

func (_c *SubProcessCmd_StdinPipe_Call) Run(run func()) *SubProcessCmd_StdinPipe_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *SubProcessCmd_StdinPipe_Call) Return(_a0 io.WriteCloser, _a1 error) *SubProcessCmd_StdinPipe_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *SubProcessCmd_StdinPipe_Call) RunAndReturn(run func() (io.WriteCloser, error)) *SubProcessCmd_StdinPipe_Call {
	_c.Call.Return(run)
	return _c
}

// StdoutPipe provides a mock function with no fields
func (_m *SubProcessCmd) StdoutPipe() (io.ReadCloser, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for StdoutPipe")
	}

	var r0 io.ReadCloser
	var r1 error
	if rf, ok := ret.Get(0).(func() (io.ReadCloser, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() io.ReadCloser); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(io.ReadCloser)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SubProcessCmd_StdoutPipe_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StdoutPipe'
type SubProcessCmd_StdoutPipe_Call struct {
	*mock.Call
}

// StdoutPipe is a helper method to define mock.On call
func (_e *SubProcessCmd_Expecter) StdoutPipe() *SubProcessCmd_StdoutPipe_Call {
	return &SubProcessCmd_StdoutPipe_Call{Call: _e.mock.On("StdoutPipe")}
}

func (_c *SubProcessCmd_StdoutPipe_Call) Run(run func()) *SubProcessCmd_StdoutPipe_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *SubProcessCmd_StdoutPipe_Call) Return(_a0 io.ReadCloser, _a1 error) *SubProcessCmd_StdoutPipe_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *SubProcessCmd_StdoutPipe_Call) RunAndReturn(run func() (io.ReadCloser, error)) *SubProcessCmd_StdoutPipe_Call {
	_c.Call.Return(run)
	return _c
}

// Wait provides a mock function with no fields
func (_m *SubProcessCmd) Wait() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Wait")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SubProcessCmd_Wait_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Wait'
type SubProcessCmd_Wait_Call struct {
	*mock.Call
}

// Wait is a helper method to define mock.On call
func (_e *SubProcessCmd_Expecter) Wait() *SubProcessCmd_Wait_Call {
	return &SubProcessCmd_Wait_Call{Call: _e.mock.On("Wait")}
}

func (_c *SubProcessCmd_Wait_Call) Run(run func()) *SubProcessCmd_Wait_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *SubProcessCmd_Wait_Call) Return(_a0 error) *SubProcessCmd_Wait_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *SubProcessCmd_Wait_Call) RunAndReturn(run func() error) *SubProcessCmd_Wait_Call {
	_c.Call.Return(run)
	return _c
}

// NewSubProcessCmd creates a new instance of SubProcessCmd. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSubProcessCmd(t interface {
	mock.TestingT
	Cleanup(func())
}) *SubProcessCmd {
	mock := &SubProcessCmd{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
