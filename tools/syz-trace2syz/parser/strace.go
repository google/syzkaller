// Code generated by goyacc -o strace.go -p Strace -v= strace.y. DO NOT EDIT.

//line strace.y:2

// Copyright 2018 syzkaller project authors. All rights reserved.
// Use of this source code is governed by Apache 2 LICENSE that can be found in the LICENSE file.

// nolint
package parser

import __yyfmt__ "fmt"

//line strace.y:6
//line strace.y:12
type StraceSymType struct {
	yys              int
	data             string
	val_int          int64
	val_double       float64
	val_ret_type     int64
	val_uint         uint64
	val_call         *Call
	val_identifiers  []*BufferType
	val_buf_type     *BufferType
	val_group_type   *GroupType
	val_pointer_type *PointerType
	val_flag_type    *flagType
	val_type         IrType
	val_types        []IrType
	val_syscall      *Syscall
}

const STRING_LITERAL = 57346
const IPV6 = 57347
const IDENTIFIER = 57348
const FLAG = 57349
const DATETIME = 57350
const SIGNAL_PLUS = 57351
const SIGNAL_MINUS = 57352
const MAC = 57353
const INT = 57354
const UINT = 57355
const DOUBLE = 57356
const QUESTION = 57357
const ARROW = 57358
const OR = 57359
const AND = 57360
const LOR = 57361
const TIMES = 57362
const LAND = 57363
const LEQUAL = 57364
const ONESCOMP = 57365
const LSHIFT = 57366
const RSHIFT = 57367
const NOT = 57368
const MINUS = 57369
const PLUS = 57370
const COMMA = 57371
const LBRACKET = 57372
const RBRACKET = 57373
const LBRACKET_SQUARE = 57374
const RBRACKET_SQUARE = 57375
const LPAREN = 57376
const RPAREN = 57377
const EQUALS = 57378
const UNFINISHED = 57379
const RESUMED = 57380
const NULL = 57381
const EQUALAT = 57382
const COLON = 57383
const FORWARDSLASH = 57384
const NOTYPE = 57385
const NOFLAG = 57386

var StraceToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"STRING_LITERAL",
	"IPV6",
	"IDENTIFIER",
	"FLAG",
	"DATETIME",
	"SIGNAL_PLUS",
	"SIGNAL_MINUS",
	"MAC",
	"INT",
	"UINT",
	"DOUBLE",
	"QUESTION",
	"ARROW",
	"OR",
	"AND",
	"LOR",
	"TIMES",
	"LAND",
	"LEQUAL",
	"ONESCOMP",
	"LSHIFT",
	"RSHIFT",
	"NOT",
	"MINUS",
	"PLUS",
	"COMMA",
	"LBRACKET",
	"RBRACKET",
	"LBRACKET_SQUARE",
	"RBRACKET_SQUARE",
	"LPAREN",
	"RPAREN",
	"EQUALS",
	"UNFINISHED",
	"RESUMED",
	"NULL",
	"EQUALAT",
	"COLON",
	"FORWARDSLASH",
	"NOTYPE",
	"NOFLAG",
}
var StraceStatenames = [...]string{}

const StraceEofCode = 1
const StraceErrCode = 2
const StraceInitialStackSize = 16

//line yacctab:1
var StraceExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
}

const StracePrivate = 57344

const StraceLast = 417

var StraceAct = [...]int{

	28, 8, 100, 7, 40, 116, 120, 13, 12, 33,
	42, 43, 46, 49, 47, 48, 119, 44, 45, 25,
	50, 51, 53, 52, 62, 60, 61, 38, 95, 71,
	37, 40, 98, 97, 66, 67, 70, 35, 69, 74,
	75, 76, 77, 78, 91, 73, 72, 41, 56, 117,
	79, 80, 81, 82, 83, 84, 85, 86, 87, 88,
	89, 135, 53, 126, 31, 106, 57, 38, 56, 131,
	132, 40, 96, 37, 122, 123, 118, 41, 50, 109,
	114, 124, 125, 133, 2, 37, 121, 22, 37, 21,
	4, 105, 143, 107, 36, 74, 68, 38, 5, 127,
	110, 40, 39, 99, 55, 31, 115, 113, 37, 90,
	29, 30, 92, 93, 130, 94, 3, 49, 134, 130,
	130, 54, 128, 49, 50, 27, 138, 128, 128, 112,
	50, 51, 26, 129, 130, 136, 130, 130, 129, 129,
	130, 130, 128, 138, 128, 128, 138, 138, 128, 128,
	139, 63, 140, 129, 11, 129, 129, 126, 31, 129,
	129, 64, 65, 131, 132, 1, 126, 31, 122, 123,
	32, 10, 131, 132, 24, 124, 125, 122, 123, 23,
	121, 22, 9, 21, 124, 125, 142, 58, 0, 121,
	22, 0, 21, 127, 59, 141, 0, 126, 31, 0,
	0, 0, 127, 131, 132, 0, 126, 31, 122, 123,
	0, 0, 131, 132, 0, 124, 125, 122, 123, 0,
	121, 22, 0, 21, 124, 125, 137, 0, 0, 121,
	22, 0, 21, 127, 0, 0, 15, 0, 16, 31,
	17, 0, 127, 18, 29, 30, 42, 43, 0, 49,
	19, 48, 0, 44, 45, 14, 50, 51, 0, 27,
	0, 0, 22, 108, 21, 15, 26, 16, 31, 17,
	0, 20, 18, 29, 30, 0, 0, 0, 15, 19,
	16, 31, 17, 0, 14, 18, 29, 30, 27, 0,
	0, 22, 19, 21, 0, 26, 0, 14, 0, 34,
	20, 27, 102, 103, 22, 111, 21, 0, 26, 0,
	0, 6, 15, 20, 16, 31, 17, 104, 0, 18,
	29, 30, 55, 31, 0, 0, 19, 0, 29, 30,
	0, 14, 0, 0, 0, 27, 0, 0, 22, 54,
	21, 0, 26, 27, 0, 0, 22, 20, 21, 0,
	26, 42, 43, 46, 49, 47, 48, 0, 44, 45,
	0, 50, 51, 42, 43, 0, 49, 47, 48, 0,
	44, 45, 0, 50, 51, 43, 0, 49, 0, 48,
	0, 44, 45, 0, 50, 51, 49, 0, 48, 0,
	44, 45, 49, 50, 51, 0, 44, 45, 0, 50,
	51, 102, 103, 0, 101, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 104,
}
var StracePact = [...]int{

	78, -1000, 64, 274, 78, 261, 2, 59, 61, -1000,
	-1000, -1000, -1000, 334, 316, -1000, 34, -1000, -1000, 181,
	-1000, 308, 308, 144, 149, -1000, 98, 98, -1000, -1000,
	-1000, 62, -1000, 1, -6, 10, 9, 308, 308, 308,
	308, 308, 98, 98, 98, 98, 98, 98, 98, 98,
	98, 98, -1000, -1000, 98, 14, 308, 102, -1000, 8,
	79, 84, -1000, -1000, -1000, -1000, -7, -1000, 308, -1000,
	-3, -4, 88, 389, 61, -36, 31, -1000, -9, 357,
	366, 103, 103, 346, 229, 372, 51, -1000, 97, 56,
	32, 308, -1000, 232, -1000, -1000, 44, 290, 117, -1000,
	73, -1000, -1000, -1000, 94, -1000, -31, -36, -1000, -1000,
	42, -1000, -1000, 200, 49, -1000, 308, 27, 200, 191,
	-1000, -1000, -1000, -1000, -1000, -1000, 14, -1000, -1000, -1000,
	-1000, -1000, -1000, 200, -36, 200, 160, -1000, -1000, 151,
	57, -1000, -1000, -1000,
}
var StracePgo = [...]int{

	0, 165, 2, 182, 8, 0, 19, 6, 16, 1,
	7, 179, 174, 171, 154, 3,
}
var StraceR1 = [...]int{

	0, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 8, 8, 7, 7, 7, 7, 7,
	7, 7, 7, 7, 7, 7, 7, 2, 2, 2,
	15, 15, 15, 9, 9, 9, 9, 9, 9, 10,
	10, 10, 10, 10, 10, 10, 10, 10, 10, 10,
	10, 10, 10, 10, 10, 12, 12, 12, 12, 11,
	11, 6, 6, 14, 14, 14, 4, 4, 4, 13,
	13, 13, 13, 13, 13, 3, 3, 3, 3, 5,
}
var StraceR2 = [...]int{

	0, 4, 5, 6, 5, 5, 8, 9, 6, 6,
	10, 9, 2, 1, 2, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 2,
	0, 1, 3, 1, 1, 1, 1, 1, 2, 1,
	1, 1, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 2, 2, 1, 1, 2, 2, 1,
	2, 4, 4, 2, 4, 1, 3, 3, 4, 2,
	3, 3, 3, 3, 6, 1, 1, 1, 1, 1,
}
var StraceChk = [...]int{

	-1000, -1, 6, 38, 12, 34, 37, -15, -9, -3,
	-13, -14, -4, -10, 23, 4, 6, 8, 11, 18,
	39, 32, 30, -11, -12, -6, 34, 27, -5, 12,
	13, 7, -1, -15, 38, 35, 35, 29, 36, 41,
	40, 16, 17, 18, 24, 25, 19, 21, 22, 20,
	27, 28, -4, -10, 23, 6, 34, 32, 6, 13,
	-15, -15, -5, 7, 12, 13, -10, -10, 34, 37,
	35, 35, 36, 36, -9, -9, -9, -9, -9, -10,
	-10, -10, -10, -10, -10, -10, -10, -10, -10, -15,
	7, 36, 33, 29, 31, 35, -15, 36, 36, 15,
	-2, 15, 12, 13, 27, 35, 33, -9, 31, 35,
	-2, 15, 12, 34, 7, 12, 36, 7, 34, -8,
	-7, 29, 17, 18, 24, 25, 6, 42, -4, -6,
	-5, 12, 13, 34, -9, 34, -8, 35, -7, -8,
	-8, 35, 35, 35,
}
var StraceDef = [...]int{

	0, -2, 0, 30, 0, 30, 0, 0, 31, 33,
	34, 35, 36, 37, 0, 75, 76, 77, 78, 0,
	65, 30, 30, 39, 40, 41, 0, 0, 59, 55,
	56, 79, 12, 0, 0, 0, 0, 0, 69, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 38, 53, 0, 0, 30, 0, 63, 0,
	0, 0, 60, 79, 57, 58, 0, 54, 30, 1,
	0, 0, 0, 0, 32, 72, 70, 71, 73, 42,
	43, 44, 45, 46, 47, 48, 50, 51, 52, 0,
	0, 0, 66, 0, 67, 49, 0, 0, 0, 2,
	4, 5, 27, 28, 0, 61, 0, 64, 68, 62,
	8, 9, 3, 0, 0, 29, 0, 0, 0, 0,
	13, 15, 16, 17, 18, 19, 20, 21, 22, 23,
	24, 25, 26, 0, 74, 0, 0, 6, 14, 0,
	0, 11, 7, 10,
}
var StraceTok1 = [...]int{

	1,
}
var StraceTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44,
}
var StraceTok3 = [...]int{
	0,
}

var StraceErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	StraceDebug        = 0
	StraceErrorVerbose = false
)

type StraceLexer interface {
	Lex(lval *StraceSymType) int
	Error(s string)
}

type StraceParser interface {
	Parse(StraceLexer) int
	Lookahead() int
}

type StraceParserImpl struct {
	lval  StraceSymType
	stack [StraceInitialStackSize]StraceSymType
	char  int
}

func (p *StraceParserImpl) Lookahead() int {
	return p.char
}

func StraceNewParser() StraceParser {
	return &StraceParserImpl{}
}

const StraceFlag = -1000

func StraceTokname(c int) string {
	if c >= 1 && c-1 < len(StraceToknames) {
		if StraceToknames[c-1] != "" {
			return StraceToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func StraceStatname(s int) string {
	if s >= 0 && s < len(StraceStatenames) {
		if StraceStatenames[s] != "" {
			return StraceStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func StraceErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !StraceErrorVerbose {
		return "syntax error"
	}

	for _, e := range StraceErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + StraceTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := StracePact[state]
	for tok := TOKSTART; tok-1 < len(StraceToknames); tok++ {
		if n := base + tok; n >= 0 && n < StraceLast && StraceChk[StraceAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if StraceDef[state] == -2 {
		i := 0
		for StraceExca[i] != -1 || StraceExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; StraceExca[i] >= 0; i += 2 {
			tok := StraceExca[i]
			if tok < TOKSTART || StraceExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if StraceExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += StraceTokname(tok)
	}
	return res
}

func Stracelex1(lex StraceLexer, lval *StraceSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = StraceTok1[0]
		goto out
	}
	if char < len(StraceTok1) {
		token = StraceTok1[char]
		goto out
	}
	if char >= StracePrivate {
		if char < StracePrivate+len(StraceTok2) {
			token = StraceTok2[char-StracePrivate]
			goto out
		}
	}
	for i := 0; i < len(StraceTok3); i += 2 {
		token = StraceTok3[i+0]
		if token == char {
			token = StraceTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = StraceTok2[1] /* unknown char */
	}
	if StraceDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", StraceTokname(token), uint(char))
	}
	return char, token
}

func StraceParse(Stracelex StraceLexer) int {
	return StraceNewParser().Parse(Stracelex)
}

func (Stracercvr *StraceParserImpl) Parse(Stracelex StraceLexer) int {
	var Stracen int
	var StraceVAL StraceSymType
	var StraceDollar []StraceSymType
	_ = StraceDollar // silence set and not used
	StraceS := Stracercvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	Stracestate := 0
	Stracercvr.char = -1
	Stracetoken := -1 // Stracercvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		Stracestate = -1
		Stracercvr.char = -1
		Stracetoken = -1
	}()
	Stracep := -1
	goto Stracestack

ret0:
	return 0

ret1:
	return 1

Stracestack:
	/* put a state and value onto the stack */
	if StraceDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", StraceTokname(Stracetoken), StraceStatname(Stracestate))
	}

	Stracep++
	if Stracep >= len(StraceS) {
		nyys := make([]StraceSymType, len(StraceS)*2)
		copy(nyys, StraceS)
		StraceS = nyys
	}
	StraceS[Stracep] = StraceVAL
	StraceS[Stracep].yys = Stracestate

Stracenewstate:
	Stracen = StracePact[Stracestate]
	if Stracen <= StraceFlag {
		goto Stracedefault /* simple state */
	}
	if Stracercvr.char < 0 {
		Stracercvr.char, Stracetoken = Stracelex1(Stracelex, &Stracercvr.lval)
	}
	Stracen += Stracetoken
	if Stracen < 0 || Stracen >= StraceLast {
		goto Stracedefault
	}
	Stracen = StraceAct[Stracen]
	if StraceChk[Stracen] == Stracetoken { /* valid shift */
		Stracercvr.char = -1
		Stracetoken = -1
		StraceVAL = Stracercvr.lval
		Stracestate = Stracen
		if Errflag > 0 {
			Errflag--
		}
		goto Stracestack
	}

Stracedefault:
	/* default state action */
	Stracen = StraceDef[Stracestate]
	if Stracen == -2 {
		if Stracercvr.char < 0 {
			Stracercvr.char, Stracetoken = Stracelex1(Stracelex, &Stracercvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if StraceExca[xi+0] == -1 && StraceExca[xi+1] == Stracestate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			Stracen = StraceExca[xi+0]
			if Stracen < 0 || Stracen == Stracetoken {
				break
			}
		}
		Stracen = StraceExca[xi+1]
		if Stracen < 0 {
			goto ret0
		}
	}
	if Stracen == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			Stracelex.Error(StraceErrorMessage(Stracestate, Stracetoken))
			Nerrs++
			if StraceDebug >= 1 {
				__yyfmt__.Printf("%s", StraceStatname(Stracestate))
				__yyfmt__.Printf(" saw %s\n", StraceTokname(Stracetoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for Stracep >= 0 {
				Stracen = StracePact[StraceS[Stracep].yys] + StraceErrCode
				if Stracen >= 0 && Stracen < StraceLast {
					Stracestate = StraceAct[Stracen] /* simulate a shift of "error" */
					if StraceChk[Stracestate] == StraceErrCode {
						goto Stracestack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if StraceDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", StraceS[Stracep].yys)
				}
				Stracep--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if StraceDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", StraceTokname(Stracetoken))
			}
			if Stracetoken == StraceEofCode {
				goto ret1
			}
			Stracercvr.char = -1
			Stracetoken = -1
			goto Stracenewstate /* try again in the same state */
		}
	}

	/* reduction by production Stracen */
	if StraceDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", Stracen, StraceStatname(Stracestate))
	}

	Stracent := Stracen
	Stracept := Stracep
	_ = Stracept // guard against "declared and not used"

	Stracep -= StraceR2[Stracen]
	// Stracep is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if Stracep+1 >= len(StraceS) {
		nyys := make([]StraceSymType, len(StraceS)*2)
		copy(nyys, StraceS)
		StraceS = nyys
	}
	StraceVAL = StraceS[Stracep+1]

	/* consult goto table to find next state */
	Stracen = StraceR1[Stracen]
	Straceg := StracePgo[Stracen]
	Stracej := Straceg + StraceS[Stracep].yys + 1

	if Stracej >= StraceLast {
		Stracestate = StraceAct[Straceg]
	} else {
		Stracestate = StraceAct[Stracej]
		if StraceChk[Stracestate] != -Stracen {
			Stracestate = StraceAct[Straceg]
		}
	}
	// dummy call; replaced with literal code
	switch Stracent {

	case 1:
		StraceDollar = StraceS[Stracept-4 : Stracept+1]
//line strace.y:69
		{
			StraceVAL.val_syscall = NewSyscall(-1, StraceDollar[1].data, StraceDollar[3].val_types, int64(-1), true, false)
			Stracelex.(*Stracelexer).result = StraceVAL.val_syscall
		}
	case 2:
		StraceDollar = StraceS[Stracept-5 : Stracept+1]
//line strace.y:72
		{
			StraceVAL.val_syscall = NewSyscall(-1, "tmp", nil, -1, true, true)
			Stracelex.(*Stracelexer).result = StraceVAL.val_syscall
		}
	case 3:
		StraceDollar = StraceS[Stracept-6 : Stracept+1]
//line strace.y:77
		{
			StraceVAL.val_syscall = NewSyscall(-1, StraceDollar[1].data, nil, int64(StraceDollar[6].val_int), false, false)
			Stracelex.(*Stracelexer).result = StraceVAL.val_syscall
		}
	case 4:
		StraceDollar = StraceS[Stracept-5 : Stracept+1]
//line strace.y:82
		{
			StraceVAL.val_syscall = NewSyscall(-1, "tmp", StraceDollar[2].val_types, StraceDollar[5].val_ret_type, false, true)
			Stracelex.(*Stracelexer).result = StraceVAL.val_syscall
		}
	case 5:
		StraceDollar = StraceS[Stracept-5 : Stracept+1]
//line strace.y:84
		{
			StraceVAL.val_syscall = NewSyscall(-1, "tmp", StraceDollar[2].val_types, -1, false, true)
			Stracelex.(*Stracelexer).result = StraceVAL.val_syscall
		}
	case 6:
		StraceDollar = StraceS[Stracept-8 : Stracept+1]
//line strace.y:86
		{
			StraceVAL.val_syscall = NewSyscall(-1, "tmp", StraceDollar[2].val_types, StraceDollar[5].val_ret_type, false, true)
			Stracelex.(*Stracelexer).result = StraceVAL.val_syscall
		}
	case 7:
		StraceDollar = StraceS[Stracept-9 : Stracept+1]
//line strace.y:89
		{
			StraceVAL.val_syscall = NewSyscall(-1, "tmp", StraceDollar[2].val_types, StraceDollar[5].val_ret_type, false, true)
			Stracelex.(*Stracelexer).result = StraceVAL.val_syscall
		}
	case 8:
		StraceDollar = StraceS[Stracept-6 : Stracept+1]
//line strace.y:91
		{
			StraceVAL.val_syscall = NewSyscall(-1, StraceDollar[1].data, StraceDollar[3].val_types, StraceDollar[6].val_ret_type, false, false)
			Stracelex.(*Stracelexer).result = StraceVAL.val_syscall
		}
	case 9:
		StraceDollar = StraceS[Stracept-6 : Stracept+1]
//line strace.y:94
		{
			StraceVAL.val_syscall = NewSyscall(-1, StraceDollar[1].data, StraceDollar[3].val_types, -1, false, false)
			Stracelex.(*Stracelexer).result = StraceVAL.val_syscall
		}
	case 10:
		StraceDollar = StraceS[Stracept-10 : Stracept+1]
//line strace.y:97
		{
			StraceVAL.val_syscall = NewSyscall(-1, StraceDollar[1].data, StraceDollar[3].val_types, StraceDollar[6].val_ret_type, false, false)
			Stracelex.(*Stracelexer).result = StraceVAL.val_syscall
		}
	case 11:
		StraceDollar = StraceS[Stracept-9 : Stracept+1]
//line strace.y:100
		{
			StraceVAL.val_syscall = NewSyscall(-1, StraceDollar[1].data, StraceDollar[3].val_types, StraceDollar[6].val_ret_type, false, false)
			Stracelex.(*Stracelexer).result = StraceVAL.val_syscall
		}
	case 12:
		StraceDollar = StraceS[Stracept-2 : Stracept+1]
//line strace.y:103
		{
			call := StraceDollar[2].val_syscall
			call.Pid = StraceDollar[1].val_int
			Stracelex.(*Stracelexer).result = call
		}
	case 13:
		StraceDollar = StraceS[Stracept-1 : Stracept+1]
//line strace.y:106
		{
			StraceVAL.val_type = nil
		}
	case 14:
		StraceDollar = StraceS[Stracept-2 : Stracept+1]
//line strace.y:107
		{
			StraceVAL.val_type = nil
		}
	case 15:
		StraceDollar = StraceS[Stracept-1 : Stracept+1]
//line strace.y:110
		{
			StraceVAL.val_type = nil
		}
	case 16:
		StraceDollar = StraceS[Stracept-1 : Stracept+1]
//line strace.y:111
		{
			StraceVAL.val_type = nil
		}
	case 17:
		StraceDollar = StraceS[Stracept-1 : Stracept+1]
//line strace.y:112
		{
			StraceVAL.val_type = nil
		}
	case 18:
		StraceDollar = StraceS[Stracept-1 : Stracept+1]
//line strace.y:113
		{
			StraceVAL.val_type = nil
		}
	case 19:
		StraceDollar = StraceS[Stracept-1 : Stracept+1]
//line strace.y:114
		{
			StraceVAL.val_type = nil
		}
	case 20:
		StraceDollar = StraceS[Stracept-1 : Stracept+1]
//line strace.y:115
		{
			StraceVAL.val_type = nil
		}
	case 21:
		StraceDollar = StraceS[Stracept-1 : Stracept+1]
//line strace.y:116
		{
			StraceVAL.val_type = nil
		}
	case 22:
		StraceDollar = StraceS[Stracept-1 : Stracept+1]
//line strace.y:117
		{
			StraceVAL.val_type = nil
		}
	case 23:
		StraceDollar = StraceS[Stracept-1 : Stracept+1]
//line strace.y:118
		{
			StraceVAL.val_type = nil
		}
	case 24:
		StraceDollar = StraceS[Stracept-1 : Stracept+1]
//line strace.y:119
		{
			StraceVAL.val_type = nil
		}
	case 25:
		StraceDollar = StraceS[Stracept-1 : Stracept+1]
//line strace.y:120
		{
			StraceVAL.val_type = nil
		}
	case 26:
		StraceDollar = StraceS[Stracept-1 : Stracept+1]
//line strace.y:121
		{
			StraceVAL.val_type = nil
		}
	case 27:
		StraceDollar = StraceS[Stracept-1 : Stracept+1]
//line strace.y:125
		{
			StraceVAL.val_ret_type = StraceDollar[1].val_int
		}
	case 28:
		StraceDollar = StraceS[Stracept-1 : Stracept+1]
//line strace.y:126
		{
			StraceVAL.val_ret_type = int64(StraceDollar[1].val_uint)
		}
	case 29:
		StraceDollar = StraceS[Stracept-2 : Stracept+1]
//line strace.y:127
		{
			StraceVAL.val_ret_type = -1 * StraceDollar[2].val_int
		}
	case 30:
		StraceDollar = StraceS[Stracept-0 : Stracept+1]
//line strace.y:129
		{
			StraceVAL.val_types = make([]IrType, 0)
		}
	case 31:
		StraceDollar = StraceS[Stracept-1 : Stracept+1]
//line strace.y:130
		{
			StraceVAL.val_types = []IrType{StraceDollar[1].val_type}
		}
	case 32:
		StraceDollar = StraceS[Stracept-3 : Stracept+1]
//line strace.y:131
		{
			StraceDollar[1].val_types = append(StraceDollar[1].val_types, StraceDollar[3].val_type)
			StraceVAL.val_types = StraceDollar[1].val_types
		}
	case 33:
		StraceDollar = StraceS[Stracept-1 : Stracept+1]
//line strace.y:135
		{
			StraceVAL.val_type = StraceDollar[1].val_buf_type
		}
	case 34:
		StraceDollar = StraceS[Stracept-1 : Stracept+1]
//line strace.y:136
		{
			StraceVAL.val_type = StraceDollar[1].val_type
		}
	case 35:
		StraceDollar = StraceS[Stracept-1 : Stracept+1]
//line strace.y:137
		{
			StraceVAL.val_type = StraceDollar[1].val_pointer_type
		}
	case 36:
		StraceDollar = StraceS[Stracept-1 : Stracept+1]
//line strace.y:138
		{
			StraceVAL.val_type = StraceDollar[1].val_group_type
		}
	case 37:
		StraceDollar = StraceS[Stracept-1 : Stracept+1]
//line strace.y:139
		{
			StraceVAL.val_type = StraceDollar[1].val_type
		}
	case 38:
		StraceDollar = StraceS[Stracept-2 : Stracept+1]
//line strace.y:140
		{
			StraceVAL.val_type = StraceDollar[2].val_group_type
		}
	case 39:
		StraceDollar = StraceS[Stracept-1 : Stracept+1]
//line strace.y:144
		{
			StraceVAL.val_type = StraceDollar[1].val_type
		}
	case 40:
		StraceDollar = StraceS[Stracept-1 : Stracept+1]
//line strace.y:145
		{
			StraceVAL.val_type = StraceDollar[1].val_type
		}
	case 41:
		StraceDollar = StraceS[Stracept-1 : Stracept+1]
//line strace.y:146
		{
			StraceVAL.val_type = StraceDollar[1].val_call
		}
	case 42:
		StraceDollar = StraceS[Stracept-3 : Stracept+1]
//line strace.y:147
		{
			StraceVAL.val_type = newBinop(StraceDollar[1].val_type, StraceDollar[3].val_type, orOp)
		}
	case 43:
		StraceDollar = StraceS[Stracept-3 : Stracept+1]
//line strace.y:148
		{
			StraceVAL.val_type = newBinop(StraceDollar[1].val_type, StraceDollar[3].val_type, andOp)
		}
	case 44:
		StraceDollar = StraceS[Stracept-3 : Stracept+1]
//line strace.y:149
		{
			StraceVAL.val_type = newBinop(StraceDollar[1].val_type, StraceDollar[3].val_type, lshiftOp)
		}
	case 45:
		StraceDollar = StraceS[Stracept-3 : Stracept+1]
//line strace.y:150
		{
			StraceVAL.val_type = newBinop(StraceDollar[1].val_type, StraceDollar[3].val_type, rshiftOp)
		}
	case 46:
		StraceDollar = StraceS[Stracept-3 : Stracept+1]
//line strace.y:151
		{
			StraceVAL.val_type = newBinop(StraceDollar[1].val_type, StraceDollar[3].val_type, lorOp)
		}
	case 47:
		StraceDollar = StraceS[Stracept-3 : Stracept+1]
//line strace.y:152
		{
			StraceVAL.val_type = newBinop(StraceDollar[1].val_type, StraceDollar[3].val_type, landOp)
		}
	case 48:
		StraceDollar = StraceS[Stracept-3 : Stracept+1]
//line strace.y:153
		{
			StraceVAL.val_type = newBinop(StraceDollar[1].val_type, StraceDollar[3].val_type, lequalOp)
		}
	case 49:
		StraceDollar = StraceS[Stracept-3 : Stracept+1]
//line strace.y:154
		{
			StraceVAL.val_type = StraceDollar[2].val_type
		}
	case 50:
		StraceDollar = StraceS[Stracept-3 : Stracept+1]
//line strace.y:155
		{
			StraceVAL.val_type = newBinop(StraceDollar[1].val_type, StraceDollar[3].val_type, timesOp)
		}
	case 51:
		StraceDollar = StraceS[Stracept-3 : Stracept+1]
//line strace.y:156
		{
			StraceVAL.val_type = newBinop(StraceDollar[1].val_type, StraceDollar[3].val_type, minusOp)
		}
	case 52:
		StraceDollar = StraceS[Stracept-3 : Stracept+1]
//line strace.y:157
		{
			StraceVAL.val_type = newBinop(StraceDollar[1].val_type, StraceDollar[3].val_type, plusOp)
		}
	case 53:
		StraceDollar = StraceS[Stracept-2 : Stracept+1]
//line strace.y:158
		{
			StraceVAL.val_type = newUnop(StraceDollar[2].val_type, onescompOp)
		}
	case 54:
		StraceDollar = StraceS[Stracept-2 : Stracept+1]
//line strace.y:159
		{
			StraceVAL.val_type = newUnop(StraceDollar[2].val_type, negOp)
		}
	case 55:
		StraceDollar = StraceS[Stracept-1 : Stracept+1]
//line strace.y:162
		{
			i := make(Ints, 1)
			i[0] = StraceDollar[1].val_int
			StraceVAL.val_type = i
		}
	case 56:
		StraceDollar = StraceS[Stracept-1 : Stracept+1]
//line strace.y:163
		{
			i := make(Ints, 1)
			i[0] = int64(StraceDollar[1].val_uint)
			StraceVAL.val_type = i
		}
	case 57:
		StraceDollar = StraceS[Stracept-2 : Stracept+1]
//line strace.y:164
		{
			StraceVAL.val_type = append(StraceDollar[1].val_type.(Ints), StraceDollar[2].val_int)
		}
	case 58:
		StraceDollar = StraceS[Stracept-2 : Stracept+1]
//line strace.y:165
		{
			StraceVAL.val_type = append(StraceDollar[1].val_type.(Ints), int64(StraceDollar[2].val_uint))
		}
	case 59:
		StraceDollar = StraceS[Stracept-1 : Stracept+1]
//line strace.y:168
		{
			f := make(Flags, 1)
			f[0] = StraceDollar[1].val_flag_type
			StraceVAL.val_type = f
		}
	case 60:
		StraceDollar = StraceS[Stracept-2 : Stracept+1]
//line strace.y:169
		{
			StraceVAL.val_type = append(StraceDollar[1].val_type.(Flags), StraceDollar[2].val_flag_type)
		}
	case 61:
		StraceDollar = StraceS[Stracept-4 : Stracept+1]
//line strace.y:172
		{
			StraceVAL.val_call = newCallType(StraceDollar[1].data, StraceDollar[3].val_types)
		}
	case 62:
		StraceDollar = StraceS[Stracept-4 : Stracept+1]
//line strace.y:173
		{
			StraceVAL.val_call = newCallType(StraceDollar[1].data, StraceDollar[3].val_types)
		}
	case 63:
		StraceDollar = StraceS[Stracept-2 : Stracept+1]
//line strace.y:176
		{
			StraceVAL.val_pointer_type = nullPointer()
		}
	case 64:
		StraceDollar = StraceS[Stracept-4 : Stracept+1]
//line strace.y:177
		{
			StraceVAL.val_pointer_type = NewPointerType(StraceDollar[2].val_uint, StraceDollar[4].val_type)
		}
	case 65:
		StraceDollar = StraceS[Stracept-1 : Stracept+1]
//line strace.y:178
		{
			StraceVAL.val_pointer_type = nullPointer()
		}
	case 66:
		StraceDollar = StraceS[Stracept-3 : Stracept+1]
//line strace.y:181
		{
			StraceVAL.val_group_type = newGroupType(StraceDollar[2].val_types)
		}
	case 67:
		StraceDollar = StraceS[Stracept-3 : Stracept+1]
//line strace.y:182
		{
			StraceVAL.val_group_type = newGroupType(StraceDollar[2].val_types)
		}
	case 68:
		StraceDollar = StraceS[Stracept-4 : Stracept+1]
//line strace.y:183
		{
			StraceVAL.val_group_type = newGroupType(StraceDollar[2].val_types)
		}
	case 69:
		StraceDollar = StraceS[Stracept-2 : Stracept+1]
//line strace.y:186
		{
			StraceVAL.val_type = nil
		}
	case 70:
		StraceDollar = StraceS[Stracept-3 : Stracept+1]
//line strace.y:187
		{
			StraceVAL.val_type = StraceDollar[3].val_type
		}
	case 71:
		StraceDollar = StraceS[Stracept-3 : Stracept+1]
//line strace.y:188
		{
			StraceVAL.val_type = StraceDollar[3].val_type
		}
	case 72:
		StraceDollar = StraceS[Stracept-3 : Stracept+1]
//line strace.y:189
		{
			StraceVAL.val_type = StraceDollar[3].val_type
		}
	case 73:
		StraceDollar = StraceS[Stracept-3 : Stracept+1]
//line strace.y:190
		{
			StraceVAL.val_type = StraceDollar[1].val_type
		}
	case 74:
		StraceDollar = StraceS[Stracept-6 : Stracept+1]
//line strace.y:191
		{
			StraceVAL.val_type = StraceDollar[6].val_type
		}
	case 75:
		StraceDollar = StraceS[Stracept-1 : Stracept+1]
//line strace.y:194
		{
			StraceVAL.val_buf_type = newBufferType(StraceDollar[1].data)
		}
	case 76:
		StraceDollar = StraceS[Stracept-1 : Stracept+1]
//line strace.y:195
		{
			StraceVAL.val_buf_type = newBufferType(StraceDollar[1].data)
		}
	case 77:
		StraceDollar = StraceS[Stracept-1 : Stracept+1]
//line strace.y:196
		{
			StraceVAL.val_buf_type = newBufferType(StraceDollar[1].data)
		}
	case 78:
		StraceDollar = StraceS[Stracept-1 : Stracept+1]
//line strace.y:197
		{
			StraceVAL.val_buf_type = newBufferType(StraceDollar[1].data)
		}
	case 79:
		StraceDollar = StraceS[Stracept-1 : Stracept+1]
//line strace.y:201
		{
			StraceVAL.val_flag_type = newFlagType(StraceDollar[1].data)
		}
	}
	goto Stracestack /* stack new state and value */
}
