// Copyright 2016 syzkaller project authors. All rights reserved.
// Use of this source code is governed by Apache 2 LICENSE that can be found in the LICENSE file.

package prog

import (
	"bytes"
	"testing"
)

func TestAssignSizeRandom(t *testing.T) {
	target, rs, iters := initTest(t)
	for i := 0; i < iters; i++ {
		p := target.Generate(rs, 10, nil)
		data0 := p.Serialize()
		for _, call := range p.Calls {
			target.assignSizesCall(call)
		}
		if data1 := p.Serialize(); !bytes.Equal(data0, data1) {
			t.Fatalf("different lens assigned, initial:\n%s\nnew:\n%s\n", data0, data1)
		}
		p.Mutate(rs, 10, nil, nil)
		p.Serialize()
		for _, call := range p.Calls {
			target.assignSizesCall(call)
		}
	}
}

func TestAssignSize(t *testing.T) {
	// nolint: lll
	testDeserialize(t, func(target *Target, p *Prog) {
		for _, call := range p.Calls {
			target.assignSizesCall(call)
		}
	}, []deserializeTest{
		{
			input:  "test$length0(&(0x7f0000000000)={0xff, 0x0})",
			output: "test$length0(&(0x7f0000000000)={0xff, 0x2})",
		},
		{
			input:  "test$length1(&(0x7f0000001000)={0xff, 0x0})",
			output: "test$length1(&(0x7f0000001000)={0xff, 0x4})",
		},
		{
			input:  "test$length2(&(0x7f0000001000)={0xff, 0x0})",
			output: "test$length2(&(0x7f0000001000)={0xff, 0x8})",
		},
		{
			input:  "test$length3(&(0x7f0000005000)={0xff, 0x0, 0x0})",
			output: "test$length3(&(0x7f0000005000)={0xff, 0x4, 0x2})",
		},
		{
			input:  "test$length4(&(0x7f0000003000)={0x0, 0x0})",
			output: "test$length4(&(0x7f0000003000)={0x2, 0x2})",
		},
		{
			input:  "test$length5(&(0x7f0000002000)={0xff, 0x0})",
			output: "test$length5(&(0x7f0000002000)={0xff, 0x4})",
		},
		{
			input:  "test$length6(&(0x7f0000002000)={[0xff, 0xff, 0xff, 0xff], 0x0})",
			output: "test$length6(&(0x7f0000002000)={[0xff, 0xff, 0xff, 0xff], 0x4})",
		},
		{
			input:  "test$length7(&(0x7f0000003000)={[0xff, 0xff, 0xff, 0xff], 0x0})",
			output: "test$length7(&(0x7f0000003000)={[0xff, 0xff, 0xff, 0xff], 0x8})",
		},
		{
			input:  "test$length8(&(0x7f000001f000)={0x00, {0xff, 0x0, 0x00, [0xff, 0xff, 0xff]}, [{0xff, 0x0, 0x00, [0xff, 0xff, 0xff]}], 0x00, 0x0, [0xff, 0xff]})",
			output: "test$length8(&(0x7f000001f000)={0x32, {0xff, 0x1, 0x10, [0xff, 0xff, 0xff]}, [{0xff, 0x1, 0x10, [0xff, 0xff, 0xff]}], 0x10, 0x1, [0xff, 0xff]})",
		},
		{
			input:  "test$length9(&(0x7f000001f000)={&(0x7f0000000000/0x5000)=nil, 0x0000})",
			output: "test$length9(&(0x7f000001f000)={&(0x7f0000000000/0x5000)=nil, 0x5000})",
		},
		{
			input:  "test$length10(&(0x7f0000000000/0x5000)=nil, 0x0000, 0x0000, 0x0000, 0x0000)",
			output: "test$length10(&(0x7f0000000000/0x5000)=nil, 0x5000, 0x5000, 0x2800, 0x1400)",
		},
		{
			input:  "test$length11(&(0x7f0000000000)={0xff, 0xff, [0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff]}, 0x00)",
			output: "test$length11(&(0x7f0000000000)={0xff, 0xff, [0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff]}, 0x30)",
		},
		{
			input:  "test$length12(&(0x7f0000000000)={0xff, 0xff, [0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff]}, 0x00)",
			output: "test$length12(&(0x7f0000000000)={0xff, 0xff, [0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff]}, 0x30)",
		},
		{
			input:  "test$length13(&(0x7f0000000000)={0xff, 0xff, [0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff]}, &(0x7f0000001000)=0x00)",
			output: "test$length13(&(0x7f0000000000)={0xff, 0xff, [0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff]}, &(0x7f0000001000)=0x30)",
		},
		{
			input:  "test$length14(&(0x7f0000000000)={0xff, 0xff, [0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff]}, &(0x7f0000001000)=0x00)",
			output: "test$length14(&(0x7f0000000000)={0xff, 0xff, [0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff]}, &(0x7f0000001000)=0x30)",
		},
		{
			input:  "test_length15(0xff, 0x0)",
			output: "test_length15(0xff, 0x2)",
		},
		{
			input:  "test$length16(&(0x7f0000000000)={[0x42, 0x42], 0xff, 0xff, 0xff, 0xff, 0xff})",
			output: "test$length16(&(0x7f0000000000)={[0x42, 0x42], 0x2, 0x10, 0x8, 0x4, 0x2})",
		},
		{
			input:  "test$length17(&(0x7f0000000000)={0x42, 0xff, 0xff, 0xff, 0xff})",
			output: "test$length17(&(0x7f0000000000)={0x42, 0x8, 0x4, 0x2, 0x1})",
		},
		{
			input:  "test$length18(&(0x7f0000000000)={0x42, 0xff, 0xff, 0xff, 0xff})",
			output: "test$length18(&(0x7f0000000000)={0x42, 0x8, 0x4, 0x2, 0x1})",
		},
		{
			input:  "test$length19(&(0x7f0000000000)={{0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0xff}, 0xff, 0xff, 0xff})",
			output: "test$length19(&(0x7f0000000000)={{0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x14}, 0x14, 0x14, 0x5})",
		},
		{
			input:  "test$length20(&(0x7f0000000000)={{{0xff, 0xff, 0xff, 0xff}, 0xff, 0xff, 0xff}, 0xff, 0xff})",
			output: "test$length20(&(0x7f0000000000)={{{0x4, 0x4, 0x7, 0x9}, 0x7, 0x7, 0x9}, 0x9, 0x9})",
		},
		{
			input:  "test$length21(&(0x7f0000000000)=0x0, 0x0)",
			output: "test$length21(&(0x7f0000000000), 0x40)",
		},
		{
			input:  "test$length22(&(0x7f0000000000)='12345', 0x0)",
			output: "test$length22(&(0x7f0000000000)='12345', 0x28)",
		},
		{
			input:  "test$length23(&(0x7f0000000000)={0x1, {0x2, 0x0}})",
			output: "test$length23(&(0x7f0000000000)={0x1, {0x2, 0x6}})",
		},
		{
			input:  "test$length24(&(0x7f0000000000)={{0x0, {0x0}}, {0x0, {0x0}}})",
			output: "test$length24(&(0x7f0000000000)={{0x0, {0x8}}, {0x0, {0x10}}})",
		},
		{
			input:  "test$length26(&(0x7f0000000000), 0x0)",
			output: "test$length26(&(0x7f0000000000), 0x8)",
		},
		{
			input:  "test$length27(&(0x7f0000000000), 0x0)",
			output: "test$length27(&(0x7f0000000000), 0x2a)",
		},
		{
			input:  "test$length28(&(0x7f0000000000), 0x0)",
			output: "test$length28(&(0x7f0000000000), 0x2a)",
		},
		{
			input:  "test$length29(&(0x7f0000000000)={'./a\\x00', './b/c\\x00', 0x0, 0x0, 0x0})",
			output: "test$length29(&(0x7f0000000000)={'./a\\x00', './b/c\\x00', 0xa, 0x14, 0x21})",
		},
		{
			input:  "test$length30(&(0x7f0000000000)={{{0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, {'a', 'aaa', 'aaaaa', 'aaaaaa'}, &(0x7f0000000000)={'a', 'aaa', 'aaaaa', 'aaaaaa'}, &(0x7f0000000000)=&(0x7f0000000000)={'a', 'aaa', 'aaaaa', 'aaaaaa'}, 0x0}, 0x0}, 0x0, &(0x7f0000000000)=0x0, 0x0)",
			output: "test$length30(&(0x7f0000000000)={{{0x0, 0x18, 0x1, 0x3, 0x5, 0x6}, {'a', 'aaa', 'aaaaa', 'aaaaaa'}, &(0x7f0000000000)={'a', 'aaa', 'aaaaa', 'aaaaaa'}, &(0x7f0000000000)=&(0x7f0000000000)={'a', 'aaa', 'aaaaa', 'aaaaaa'}, 0x2}, 0x4}, 0x40, &(0x7f0000000000)=0x18, 0x2)",
		},
		{
			input:  "test$offsetof0(&(0x7f0000000000)={0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0})",
			output: "test$offsetof0(&(0x7f0000000000)={0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x4, 0x6, 0x8, 0x10, 0x18, 0x18, 0x20})",
		},
	})
}
