// Code generated by mockery v2.52.1. DO NOT EDIT.

package mocks

import (
	io "io"

	gcs "github.com/google/syzkaller/pkg/gcs"

	mock "github.com/stretchr/testify/mock"
)

// Client is an autogenerated mock type for the Client type
type Client struct {
	mock.Mock
}

// Close provides a mock function with no fields
func (_m *Client) Close() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteFile provides a mock function with given fields: path
func (_m *Client) DeleteFile(path string) error {
	ret := _m.Called(path)

	if len(ret) == 0 {
		panic("no return value specified for DeleteFile")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(path)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FileExists provides a mock function with given fields: path
func (_m *Client) FileExists(path string) (bool, error) {
	ret := _m.Called(path)

	if len(ret) == 0 {
		panic("no return value specified for FileExists")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (bool, error)); ok {
		return rf(path)
	}
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(path)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(path)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FileWriter provides a mock function with given fields: path, contentType, contentEncoding
func (_m *Client) FileWriter(path string, contentType string, contentEncoding string) (io.WriteCloser, error) {
	ret := _m.Called(path, contentType, contentEncoding)

	if len(ret) == 0 {
		panic("no return value specified for FileWriter")
	}

	var r0 io.WriteCloser
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, string) (io.WriteCloser, error)); ok {
		return rf(path, contentType, contentEncoding)
	}
	if rf, ok := ret.Get(0).(func(string, string, string) io.WriteCloser); ok {
		r0 = rf(path, contentType, contentEncoding)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(io.WriteCloser)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, string) error); ok {
		r1 = rf(path, contentType, contentEncoding)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListObjects provides a mock function with given fields: path
func (_m *Client) ListObjects(path string) ([]*gcs.Object, error) {
	ret := _m.Called(path)

	if len(ret) == 0 {
		panic("no return value specified for ListObjects")
	}

	var r0 []*gcs.Object
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]*gcs.Object, error)); ok {
		return rf(path)
	}
	if rf, ok := ret.Get(0).(func(string) []*gcs.Object); ok {
		r0 = rf(path)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*gcs.Object)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(path)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Publish provides a mock function with given fields: path
func (_m *Client) Publish(path string) error {
	ret := _m.Called(path)

	if len(ret) == 0 {
		panic("no return value specified for Publish")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(path)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Read provides a mock function with given fields: path
func (_m *Client) Read(path string) (*gcs.File, error) {
	ret := _m.Called(path)

	if len(ret) == 0 {
		panic("no return value specified for Read")
	}

	var r0 *gcs.File
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*gcs.File, error)); ok {
		return rf(path)
	}
	if rf, ok := ret.Get(0).(func(string) *gcs.File); ok {
		r0 = rf(path)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gcs.File)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(path)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewClient creates a new instance of Client. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *Client {
	mock := &Client{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
