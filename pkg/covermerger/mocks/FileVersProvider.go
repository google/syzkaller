// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"github.com/google/syzkaller/pkg/covermerger"
	mock "github.com/stretchr/testify/mock"
)

// NewFileVersProvider creates a new instance of FileVersProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewFileVersProvider(t interface {
	mock.TestingT
	Cleanup(func())
}) *FileVersProvider {
	mock := &FileVersProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// FileVersProvider is an autogenerated mock type for the FileVersProvider type
type FileVersProvider struct {
	mock.Mock
}

type FileVersProvider_Expecter struct {
	mock *mock.Mock
}

func (_m *FileVersProvider) EXPECT() *FileVersProvider_Expecter {
	return &FileVersProvider_Expecter{mock: &_m.Mock}
}

// GetFileVersions provides a mock function for the type FileVersProvider
func (_mock *FileVersProvider) GetFileVersions(targetFilePath string, repoCommits ...covermerger.RepoCommit) (covermerger.FileVersions, error) {
	var tmpRet mock.Arguments
	if len(repoCommits) > 0 {
		tmpRet = _mock.Called(targetFilePath, repoCommits)
	} else {
		tmpRet = _mock.Called(targetFilePath)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetFileVersions")
	}

	var r0 covermerger.FileVersions
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string, ...covermerger.RepoCommit) (covermerger.FileVersions, error)); ok {
		return returnFunc(targetFilePath, repoCommits...)
	}
	if returnFunc, ok := ret.Get(0).(func(string, ...covermerger.RepoCommit) covermerger.FileVersions); ok {
		r0 = returnFunc(targetFilePath, repoCommits...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(covermerger.FileVersions)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string, ...covermerger.RepoCommit) error); ok {
		r1 = returnFunc(targetFilePath, repoCommits...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// FileVersProvider_GetFileVersions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFileVersions'
type FileVersProvider_GetFileVersions_Call struct {
	*mock.Call
}

// GetFileVersions is a helper method to define mock.On call
//   - targetFilePath string
//   - repoCommits ...covermerger.RepoCommit
func (_e *FileVersProvider_Expecter) GetFileVersions(targetFilePath interface{}, repoCommits ...interface{}) *FileVersProvider_GetFileVersions_Call {
	return &FileVersProvider_GetFileVersions_Call{Call: _e.mock.On("GetFileVersions",
		append([]interface{}{targetFilePath}, repoCommits...)...)}
}

func (_c *FileVersProvider_GetFileVersions_Call) Run(run func(targetFilePath string, repoCommits ...covermerger.RepoCommit)) *FileVersProvider_GetFileVersions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 []covermerger.RepoCommit
		var variadicArgs []covermerger.RepoCommit
		if len(args) > 1 {
			variadicArgs = args[1].([]covermerger.RepoCommit)
		}
		arg1 = variadicArgs
		run(
			arg0,
			arg1...,
		)
	})
	return _c
}

func (_c *FileVersProvider_GetFileVersions_Call) Return(fileVersions covermerger.FileVersions, err error) *FileVersProvider_GetFileVersions_Call {
	_c.Call.Return(fileVersions, err)
	return _c
}

func (_c *FileVersProvider_GetFileVersions_Call) RunAndReturn(run func(targetFilePath string, repoCommits ...covermerger.RepoCommit) (covermerger.FileVersions, error)) *FileVersProvider_GetFileVersions_Call {
	_c.Call.Return(run)
	return _c
}
