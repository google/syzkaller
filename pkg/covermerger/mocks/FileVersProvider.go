// Code generated by mockery v2.52.1. DO NOT EDIT.

package mocks

import (
	context "context"

	covermerger "github.com/google/syzkaller/pkg/covermerger"
	mock "github.com/stretchr/testify/mock"
)

// FileVersProvider is an autogenerated mock type for the FileVersProvider type
type FileVersProvider struct {
	mock.Mock
}

// GetFileVersions provides a mock function with given fields: ctx, targetFilePath, repoCommits
func (_m *FileVersProvider) GetFileVersions(ctx context.Context, targetFilePath string, repoCommits ...covermerger.RepoCommit) (covermerger.FileVersions, error) {
	_va := make([]interface{}, len(repoCommits))
	for _i := range repoCommits {
		_va[_i] = repoCommits[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, targetFilePath)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetFileVersions")
	}

	var r0 covermerger.FileVersions
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, ...covermerger.RepoCommit) (covermerger.FileVersions, error)); ok {
		return rf(ctx, targetFilePath, repoCommits...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, ...covermerger.RepoCommit) covermerger.FileVersions); ok {
		r0 = rf(ctx, targetFilePath, repoCommits...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(covermerger.FileVersions)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, ...covermerger.RepoCommit) error); ok {
		r1 = rf(ctx, targetFilePath, repoCommits...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewFileVersProvider creates a new instance of FileVersProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewFileVersProvider(t interface {
	mock.TestingT
	Cleanup(func())
}) *FileVersProvider {
	mock := &FileVersProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
