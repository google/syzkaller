// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"github.com/google/syzkaller/pkg/coveragedb/spannerclient"
	mock "github.com/stretchr/testify/mock"
)

// NewRowIterator creates a new instance of RowIterator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRowIterator(t interface {
	mock.TestingT
	Cleanup(func())
}) *RowIterator {
	mock := &RowIterator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// RowIterator is an autogenerated mock type for the RowIterator type
type RowIterator struct {
	mock.Mock
}

type RowIterator_Expecter struct {
	mock *mock.Mock
}

func (_m *RowIterator) EXPECT() *RowIterator_Expecter {
	return &RowIterator_Expecter{mock: &_m.Mock}
}

// Next provides a mock function for the type RowIterator
func (_mock *RowIterator) Next() (spannerclient.Row, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Next")
	}

	var r0 spannerclient.Row
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() (spannerclient.Row, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() spannerclient.Row); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(spannerclient.Row)
		}
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// RowIterator_Next_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Next'
type RowIterator_Next_Call struct {
	*mock.Call
}

// Next is a helper method to define mock.On call
func (_e *RowIterator_Expecter) Next() *RowIterator_Next_Call {
	return &RowIterator_Next_Call{Call: _e.mock.On("Next")}
}

func (_c *RowIterator_Next_Call) Run(run func()) *RowIterator_Next_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *RowIterator_Next_Call) Return(row spannerclient.Row, err error) *RowIterator_Next_Call {
	_c.Call.Return(row, err)
	return _c
}

func (_c *RowIterator_Next_Call) RunAndReturn(run func() (spannerclient.Row, error)) *RowIterator_Next_Call {
	_c.Call.Return(run)
	return _c
}

// Stop provides a mock function for the type RowIterator
func (_mock *RowIterator) Stop() {
	_mock.Called()
	return
}

// RowIterator_Stop_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Stop'
type RowIterator_Stop_Call struct {
	*mock.Call
}

// Stop is a helper method to define mock.On call
func (_e *RowIterator_Expecter) Stop() *RowIterator_Stop_Call {
	return &RowIterator_Stop_Call{Call: _e.mock.On("Stop")}
}

func (_c *RowIterator_Stop_Call) Run(run func()) *RowIterator_Stop_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *RowIterator_Stop_Call) Return() *RowIterator_Stop_Call {
	_c.Call.Return()
	return _c
}

func (_c *RowIterator_Stop_Call) RunAndReturn(run func()) *RowIterator_Stop_Call {
	_c.Run(run)
	return _c
}
