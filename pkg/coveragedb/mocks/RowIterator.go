// Code generated by mockery v2.45.1. DO NOT EDIT.

package mocks

import (
	spannerclient "github.com/google/syzkaller/pkg/coveragedb/spannerclient"
	mock "github.com/stretchr/testify/mock"
)

// RowIterator is an autogenerated mock type for the RowIterator type
type RowIterator struct {
	mock.Mock
}

// Next provides a mock function with given fields:
func (_m *RowIterator) Next() (spannerclient.Row, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Next")
	}

	var r0 spannerclient.Row
	var r1 error
	if rf, ok := ret.Get(0).(func() (spannerclient.Row, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() spannerclient.Row); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(spannerclient.Row)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Stop provides a mock function with given fields:
func (_m *RowIterator) Stop() {
	_m.Called()
}

// NewRowIterator creates a new instance of RowIterator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRowIterator(t interface {
	mock.TestingT
	Cleanup(func())
}) *RowIterator {
	mock := &RowIterator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
