// Code generated by mockery v2.52.1. DO NOT EDIT.

package mocks

import (
	context "context"

	spanner "cloud.google.com/go/spanner"
	mock "github.com/stretchr/testify/mock"

	spannerclient "github.com/google/syzkaller/pkg/coveragedb/spannerclient"
)

// ReadOnlyTransaction is an autogenerated mock type for the ReadOnlyTransaction type
type ReadOnlyTransaction struct {
	mock.Mock
}

type ReadOnlyTransaction_Expecter struct {
	mock *mock.Mock
}

func (_m *ReadOnlyTransaction) EXPECT() *ReadOnlyTransaction_Expecter {
	return &ReadOnlyTransaction_Expecter{mock: &_m.Mock}
}

// Query provides a mock function with given fields: ctx, statement
func (_m *ReadOnlyTransaction) Query(ctx context.Context, statement spanner.Statement) spannerclient.RowIterator {
	ret := _m.Called(ctx, statement)

	if len(ret) == 0 {
		panic("no return value specified for Query")
	}

	var r0 spannerclient.RowIterator
	if rf, ok := ret.Get(0).(func(context.Context, spanner.Statement) spannerclient.RowIterator); ok {
		r0 = rf(ctx, statement)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(spannerclient.RowIterator)
		}
	}

	return r0
}

// ReadOnlyTransaction_Query_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Query'
type ReadOnlyTransaction_Query_Call struct {
	*mock.Call
}

// Query is a helper method to define mock.On call
//   - ctx context.Context
//   - statement spanner.Statement
func (_e *ReadOnlyTransaction_Expecter) Query(ctx interface{}, statement interface{}) *ReadOnlyTransaction_Query_Call {
	return &ReadOnlyTransaction_Query_Call{Call: _e.mock.On("Query", ctx, statement)}
}

func (_c *ReadOnlyTransaction_Query_Call) Run(run func(ctx context.Context, statement spanner.Statement)) *ReadOnlyTransaction_Query_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(spanner.Statement))
	})
	return _c
}

func (_c *ReadOnlyTransaction_Query_Call) Return(_a0 spannerclient.RowIterator) *ReadOnlyTransaction_Query_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ReadOnlyTransaction_Query_Call) RunAndReturn(run func(context.Context, spanner.Statement) spannerclient.RowIterator) *ReadOnlyTransaction_Query_Call {
	_c.Call.Return(run)
	return _c
}

// NewReadOnlyTransaction creates a new instance of ReadOnlyTransaction. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewReadOnlyTransaction(t interface {
	mock.TestingT
	Cleanup(func())
}) *ReadOnlyTransaction {
	mock := &ReadOnlyTransaction{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
