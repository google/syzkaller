// Code generated by mockery v2.45.1. DO NOT EDIT.

package mocks

import (
	context "context"

	spanner "cloud.google.com/go/spanner"
	mock "github.com/stretchr/testify/mock"

	spannerclient "github.com/google/syzkaller/pkg/coveragedb/spannerclient"
)

// ReadOnlyTransaction is an autogenerated mock type for the ReadOnlyTransaction type
type ReadOnlyTransaction struct {
	mock.Mock
}

// Query provides a mock function with given fields: ctx, statement
func (_m *ReadOnlyTransaction) Query(ctx context.Context, statement spanner.Statement) spannerclient.RowIterator {
	ret := _m.Called(ctx, statement)

	if len(ret) == 0 {
		panic("no return value specified for Query")
	}

	var r0 spannerclient.RowIterator
	if rf, ok := ret.Get(0).(func(context.Context, spanner.Statement) spannerclient.RowIterator); ok {
		r0 = rf(ctx, statement)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(spannerclient.RowIterator)
		}
	}

	return r0
}

// NewReadOnlyTransaction creates a new instance of ReadOnlyTransaction. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewReadOnlyTransaction(t interface {
	mock.TestingT
	Cleanup(func())
}) *ReadOnlyTransaction {
	mock := &ReadOnlyTransaction{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
