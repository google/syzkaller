// Copyright 2015 syzkaller project authors. All rights reserved.
// Use of this source code is governed by Apache 2 LICENSE that can be found in the LICENSE file.

package main

import (
	"bytes"
	"sort"
	"strings"
	"text/template"

	"github.com/google/syzkaller/sys"
)

type Arch struct {
	Name  string
	CARCH []string
}

var archs = []*Arch{
	{"amd64", []string{"__x86_64__"}},
	{"386", []string{"__i386__"}},
	{"arm64", []string{"__aarch64__"}},
	{"arm", []string{"__arm__"}},
	{"ppc64le", []string{"__ppc64__", "__PPC64__", "__powerpc64__"}},
}

func generateExecutorSyscalls(arch *Arch, syscalls []*sys.Call) []byte {
	data := ArchData{
		CARCH: arch.CARCH,
	}
	fake := make(map[string]uint64)
	for _, c := range syscalls {
		data.Calls = append(data.Calls, SyscallData{c.Name, int32(c.NR)})
		if strings.HasPrefix(c.CallName, "syz_") {
			fake[c.CallName] = c.NR
		}
	}
	for name, nr := range fake {
		data.Fake = append(data.Fake, SyscallData{name, int32(nr)})
	}
	sort.Sort(SyscallArray(data.Calls))
	sort.Sort(SyscallArray(data.Fake))
	buf := new(bytes.Buffer)
	if err := archTempl.Execute(buf, data); err != nil {
		failf("failed to execute arch template: %v", err)
	}
	return buf.Bytes()
}

func writeExecutorSyscalls(archs [][]byte) {
	buf := new(bytes.Buffer)
	buf.WriteString(syscallsTempl)
	for _, arch := range archs {
		buf.Write(arch)
	}
	writeFile("executor/syscalls.h", buf.Bytes())
}

type ArchData struct {
	CARCH []string
	Calls []SyscallData
	Fake  []SyscallData
}

type SyscallData struct {
	Name string
	NR   int32
}

type SyscallArray []SyscallData

func (a SyscallArray) Len() int           { return len(a) }
func (a SyscallArray) Less(i, j int) bool { return a[i].Name < a[j].Name }
func (a SyscallArray) Swap(i, j int)      { a[i], a[j] = a[j], a[i] }

var syscallsTempl = `// AUTOGENERATED FILE

struct call_t {
	const char*	name;
	int		sys_nr;
};
`

var archTempl = template.Must(template.New("").Parse(`
#if {{range $cdef := $.CARCH}}defined({{$cdef}}) || {{end}}0
{{range $c := $.Fake}}#define __NR_{{$c.Name}} {{$c.NR}}
{{end}}
static call_t syscalls[] = {
{{range $c := $.Calls}}	{"{{$c.Name}}", {{$c.NR}}},
{{end}}
};
#endif
`))
