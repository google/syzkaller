# Copyright 2018 syzkaller project authors. All rights reserved.
# Use of this source code is governed by Apache 2 LICENSE that can be found in the LICENSE file.
# Autogenerated by sys2syz

include <dev/wscons/wsconsio.h>
include <dev/wscons/wsdisplay_usl_io.h>
include <sys/selinfo.h>
include <dev/wscons/wseventvar.h>

resource fd_wscons[fd]

openat$wscons(fd const[AT_FDCWD], file ptr[in, string["/dev/wscons"]], flags flags[open_flags], mode const[0]) fd_wscons

ioctl$WSKBDIO_GTYPE(fd fd_wscons, cmd const[WSKBDIO_GTYPE], arg ptr[out, int32])
ioctl$WSKBDIO_BELL(fd fd_wscons, cmd const[WSKBDIO_BELL])
ioctl$WSKBDIO_COMPLEXBELL(fd fd_wscons, cmd const[WSKBDIO_COMPLEXBELL], arg ptr[in, wskbd_bell_data])
ioctl$WSKBDIO_SETBELL(fd fd_wscons, cmd const[WSKBDIO_SETBELL], arg ptr[in, wskbd_bell_data])
ioctl$WSKBDIO_GETBELL(fd fd_wscons, cmd const[WSKBDIO_GETBELL], arg ptr[out, wskbd_bell_data])
ioctl$WSKBDIO_SETDEFAULTBELL(fd fd_wscons, cmd const[WSKBDIO_SETDEFAULTBELL], arg ptr[in, wskbd_bell_data])
ioctl$WSKBDIO_GETDEFAULTBELL(fd fd_wscons, cmd const[WSKBDIO_GETDEFAULTBELL], arg ptr[out, wskbd_bell_data])
ioctl$WSKBDIO_SETKEYREPEAT(fd fd_wscons, cmd const[WSKBDIO_SETKEYREPEAT], arg ptr[in, wskbd_keyrepeat_data])
ioctl$WSKBDIO_GETKEYREPEAT(fd fd_wscons, cmd const[WSKBDIO_GETKEYREPEAT], arg ptr[out, wskbd_keyrepeat_data])
ioctl$WSKBDIO_SETDEFAULTKEYREPEAT(fd fd_wscons, cmd const[WSKBDIO_SETDEFAULTKEYREPEAT], arg ptr[in, wskbd_keyrepeat_data])
ioctl$WSKBDIO_GETDEFAULTKEYREPEAT(fd fd_wscons, cmd const[WSKBDIO_GETDEFAULTKEYREPEAT], arg ptr[out, wskbd_keyrepeat_data])
ioctl$WSKBDIO_SETLEDS(fd fd_wscons, cmd const[WSKBDIO_SETLEDS], arg int32)
ioctl$WSKBDIO_GETLEDS(fd fd_wscons, cmd const[WSKBDIO_GETLEDS], arg int32)
ioctl$WSKBDIO_GETMAP(fd fd_wscons, cmd const[WSKBDIO_GETMAP], arg ptr[inout, wskbd_map_data])
ioctl$WSKBDIO_SETMAP(fd fd_wscons, cmd const[WSKBDIO_SETMAP], arg ptr[in, wskbd_map_data])
ioctl$WSKBDIO_GETENCODING(fd fd_wscons, cmd const[WSKBDIO_GETENCODING], arg ptr[out, int32])
ioctl$WSKBDIO_SETENCODING(fd fd_wscons, cmd const[WSKBDIO_SETENCODING], arg ptr[in, int32])
ioctl$WSKBDIO_SETMODE(fd fd_wscons, cmd const[WSKBDIO_SETMODE], arg int32)
ioctl$WSKBDIO_GETMODE(fd fd_wscons, cmd const[WSKBDIO_GETMODE], arg int32)
ioctl$WSKBDIO_SETKEYCLICK(fd fd_wscons, cmd const[WSKBDIO_SETKEYCLICK], arg int32)
ioctl$WSKBDIO_GETKEYCLICK(fd fd_wscons, cmd const[WSKBDIO_GETKEYCLICK], arg int32)
ioctl$WSKBDIO_GETSCROLL(fd fd_wscons, cmd const[WSKBDIO_GETSCROLL], arg ptr[out, wskbd_scroll_data])
ioctl$WSKBDIO_SETSCROLL(fd fd_wscons, cmd const[WSKBDIO_SETSCROLL], arg ptr[in, wskbd_scroll_data])
ioctl$WSKBDIO_SETVERSION(fd fd_wscons, cmd const[WSKBDIO_SETVERSION], arg int32)
ioctl$WSMOUSEIO_GTYPE(fd fd_wscons, cmd const[WSMOUSEIO_GTYPE], arg ptr[out, int32])
ioctl$WSMOUSEIO_SRES(fd fd_wscons, cmd const[WSMOUSEIO_SRES], arg ptr[in, int32])
ioctl$WSMOUSEIO_SSCALE(fd fd_wscons, cmd const[WSMOUSEIO_SSCALE], arg ptr[in, array[int32, 2]])
ioctl$WSMOUSEIO_SRATE(fd fd_wscons, cmd const[WSMOUSEIO_SRATE], arg ptr[in, int32])
ioctl$WSMOUSEIO_SCALIBCOORDS(fd fd_wscons, cmd const[WSMOUSEIO_SCALIBCOORDS], arg ptr[in, wsmouse_calibcoords])
ioctl$WSMOUSEIO_GCALIBCOORDS(fd fd_wscons, cmd const[WSMOUSEIO_GCALIBCOORDS], arg ptr[out, wsmouse_calibcoords])
ioctl$WSMOUSEIO_GETID(fd fd_wscons, cmd const[WSMOUSEIO_GETID], arg ptr[inout, wsmouse_id])
ioctl$WSMOUSEIO_GETREPEAT(fd fd_wscons, cmd const[WSMOUSEIO_GETREPEAT], arg ptr[out, wsmouse_repeat])
ioctl$WSMOUSEIO_SETREPEAT(fd fd_wscons, cmd const[WSMOUSEIO_SETREPEAT], arg ptr[in, wsmouse_repeat])
ioctl$WSMOUSEIO_SETVERSION(fd fd_wscons, cmd const[WSMOUSEIO_SETVERSION], arg int32)
ioctl$WSDISPLAYIO_GTYPE(fd fd_wscons, cmd const[WSDISPLAYIO_GTYPE], arg ptr[out, int32])
ioctl$WSDISPLAYIO_GINFO(fd fd_wscons, cmd const[WSDISPLAYIO_GINFO], arg ptr[out, wsdisplay_fbinfo])
ioctl$WSDISPLAYIO_GETCMAP(fd fd_wscons, cmd const[WSDISPLAYIO_GETCMAP], arg ptr[in, wsdisplay_cmap])
ioctl$WSDISPLAYIO_PUTCMAP(fd fd_wscons, cmd const[WSDISPLAYIO_PUTCMAP], arg ptr[in, wsdisplay_cmap])
ioctl$WSDISPLAYIO_GVIDEO(fd fd_wscons, cmd const[WSDISPLAYIO_GVIDEO], arg ptr[out, int32])
ioctl$WSDISPLAYIO_SVIDEO(fd fd_wscons, cmd const[WSDISPLAYIO_SVIDEO], arg ptr[in, int32])
ioctl$WSDISPLAYIO_GCURPOS(fd fd_wscons, cmd const[WSDISPLAYIO_GCURPOS], arg ptr[out, wsdisplay_curpos])
ioctl$WSDISPLAYIO_SCURPOS(fd fd_wscons, cmd const[WSDISPLAYIO_SCURPOS], arg ptr[in, wsdisplay_curpos])
ioctl$WSDISPLAYIO_GCURMAX(fd fd_wscons, cmd const[WSDISPLAYIO_GCURMAX], arg ptr[out, wsdisplay_curpos])
ioctl$WSDISPLAYIO_GCURSOR(fd fd_wscons, cmd const[WSDISPLAYIO_GCURSOR], arg ptr[inout, wsdisplay_cursor])
ioctl$WSDISPLAYIO_SCURSOR(fd fd_wscons, cmd const[WSDISPLAYIO_SCURSOR], arg ptr[in, wsdisplay_cursor])
ioctl$WSDISPLAYIO_GMODE(fd fd_wscons, cmd const[WSDISPLAYIO_GMODE], arg ptr[out, int32])
ioctl$WSDISPLAYIO_SMODE(fd fd_wscons, cmd const[WSDISPLAYIO_SMODE], arg ptr[in, int32])
ioctl$WSDISPLAYIO_LDFONT(fd fd_wscons, cmd const[WSDISPLAYIO_LDFONT], arg ptr[in, wsdisplay_font])
ioctl$WSDISPLAYIO_ADDSCREEN(fd fd_wscons, cmd const[WSDISPLAYIO_ADDSCREEN], arg ptr[in, wsdisplay_addscreendata])
ioctl$WSDISPLAYIO_DELSCREEN(fd fd_wscons, cmd const[WSDISPLAYIO_DELSCREEN], arg ptr[in, wsdisplay_delscreendata])
ioctl$WSDISPLAYIO_SFONT(fd fd_wscons, cmd const[WSDISPLAYIO_SFONT], arg ptr[in, wsdisplay_usefontdata])
ioctl$_O_WSDISPLAYIO_SETKEYBOARD(fd fd_wscons, cmd const[_O_WSDISPLAYIO_SETKEYBOARD], arg ptr[inout, wsdisplay_kbddata])
ioctl$WSDISPLAYIO_GETPARAM(fd fd_wscons, cmd const[WSDISPLAYIO_GETPARAM], arg ptr[inout, wsdisplay_param])
ioctl$WSDISPLAYIO_SETPARAM(fd fd_wscons, cmd const[WSDISPLAYIO_SETPARAM], arg ptr[inout, wsdisplay_param])
ioctl$WSDISPLAYIO_GETACTIVESCREEN(fd fd_wscons, cmd const[WSDISPLAYIO_GETACTIVESCREEN], arg int32)
ioctl$WSDISPLAYIO_GETWSCHAR(fd fd_wscons, cmd const[WSDISPLAYIO_GETWSCHAR], arg ptr[inout, wsdisplay_char])
ioctl$WSDISPLAYIO_PUTWSCHAR(fd fd_wscons, cmd const[WSDISPLAYIO_PUTWSCHAR], arg ptr[inout, wsdisplay_char])
ioctl$WSDISPLAYIO_DGSCROLL(fd fd_wscons, cmd const[WSDISPLAYIO_DGSCROLL], arg ptr[out, wsdisplay_scroll_data])
ioctl$WSDISPLAYIO_DSSCROLL(fd fd_wscons, cmd const[WSDISPLAYIO_DSSCROLL], arg ptr[in, wsdisplay_scroll_data])
ioctl$WSDISPLAYIO_GMSGATTRS(fd fd_wscons, cmd const[WSDISPLAYIO_GMSGATTRS], arg ptr[out, wsdisplay_msgattrs])
ioctl$WSDISPLAYIO_SMSGATTRS(fd fd_wscons, cmd const[WSDISPLAYIO_SMSGATTRS], arg ptr[in, wsdisplay_msgattrs])
ioctl$WSDISPLAYIO_GBORDER(fd fd_wscons, cmd const[WSDISPLAYIO_GBORDER], arg int32)
ioctl$WSDISPLAYIO_SBORDER(fd fd_wscons, cmd const[WSDISPLAYIO_SBORDER], arg int32)
ioctl$WSDISPLAYIO_SSPLASH(fd fd_wscons, cmd const[WSDISPLAYIO_SSPLASH], arg int32)
ioctl$WSDISPLAYIO_SPROGRESS(fd fd_wscons, cmd const[WSDISPLAYIO_SPROGRESS], arg int32)
ioctl$WSDISPLAYIO_LINEBYTES(fd fd_wscons, cmd const[WSDISPLAYIO_LINEBYTES], arg ptr[out, int32])
ioctl$WSDISPLAYIO_SETVERSION(fd fd_wscons, cmd const[WSDISPLAYIO_SETVERSION], arg int32)
ioctl$WSMUXIO_ADD_DEVICE(fd fd_wscons, cmd const[WSMUXIO_ADD_DEVICE], arg ptr[in, wsmux_device])
ioctl$WSMUXIO_REMOVE_DEVICE(fd fd_wscons, cmd const[WSMUXIO_REMOVE_DEVICE], arg ptr[in, wsmux_device])
ioctl$WSMUXIO_LIST_DEVICES(fd fd_wscons, cmd const[WSMUXIO_LIST_DEVICES], arg ptr[inout, wsmux_device_list])
ioctl$WSMUXIO_INJECTEVENT(fd fd_wscons, cmd const[WSMUXIO_INJECTEVENT], arg ptr[in, wscons_event])
ioctl$WSDISPLAYIO_GET_BUSID(fd fd_wscons, cmd const[WSDISPLAYIO_GET_BUSID], arg ptr[out, wsdisplayio_bus_id])
ioctl$WSDISPLAYIO_GET_EDID(fd fd_wscons, cmd const[WSDISPLAYIO_GET_EDID], arg ptr[inout, wsdisplayio_edid_info])
ioctl$WSDISPLAYIO_SET_POLLING(fd fd_wscons, cmd const[WSDISPLAYIO_SET_POLLING], arg int32)
ioctl$WSDISPLAYIO_GET_FBINFO(fd fd_wscons, cmd const[WSDISPLAYIO_GET_FBINFO], arg ptr[inout, wsdisplayio_fbinfo])
ioctl$WSDISPLAYIO_DOBLIT(fd fd_wscons, cmd const[WSDISPLAYIO_DOBLIT], arg ptr[inout, wsdisplayio_blit])
ioctl$WSDISPLAYIO_WAITBLIT(fd fd_wscons, cmd const[WSDISPLAYIO_WAITBLIT], arg ptr[inout, wsdisplayio_blit])
ioctl$VT_OPENQRY(fd fd_wscons, cmd const[VT_OPENQRY], arg int32)
ioctl$VT_RELDISP(fd fd_wscons, cmd const[VT_RELDISP])
ioctl$VT_ACTIVATE(fd fd_wscons, cmd const[VT_ACTIVATE])
ioctl$VT_WAITACTIVE(fd fd_wscons, cmd const[VT_WAITACTIVE])
ioctl$VT_GETACTIVE(fd fd_wscons, cmd const[VT_GETACTIVE], arg int32)
ioctl$KDGKBMODE(fd fd_wscons, cmd const[KDGKBMODE], arg int32)
ioctl$KDSKBMODE(fd fd_wscons, cmd const[KDSKBMODE])
ioctl$KDMKTONE(fd fd_wscons, cmd const[KDMKTONE])
ioctl$KDSETMODE(fd fd_wscons, cmd const[KDSETMODE])
ioctl$KDENABIO(fd fd_wscons, cmd const[KDENABIO])
ioctl$KDDISABIO(fd fd_wscons, cmd const[KDDISABIO])
ioctl$KDGETLED(fd fd_wscons, cmd const[KDGETLED], arg int32)
ioctl$KDSETLED(fd fd_wscons, cmd const[KDSETLED])
ioctl$KDSETRAD(fd fd_wscons, cmd const[KDSETRAD])
ioctl$CONS_GETVERS(fd fd_wscons, cmd const[CONS_GETVERS], arg int32)
ioctl$WSMUXIO_OINJECTEVENT(fd fd_wscons, cmd const[WSMUXIO_OINJECTEVENT], arg ptr[in, owscons_event])

wskbd_bell_data {
	which	flags[which_flag, int32]
	pitch	int32
	period	int32
	volume	int32
}

wskbd_keyrepeat_data {
	which	flags[which_wskbd_keyrepeat_data_flag, int32]
	del1	int32
	delN	int32
}

wskbd_map_data {
	maplen	len[map, int32]
	map	ptr[inout, wscons_keymap]
}

wscons_keymap {
	command	int16
	group1	array[int16, 2]
	group2	array[int16, 2]
}

wskbd_scroll_data {
	which		flags[which_wskbd_scroll_data_flag, int32]
	mode		flags[mode_flag, int32]
	modifier	int32
}

wsmouse_calibcoords {
	minx		int32
	miny		int32
	maxx		int32
	maxy		int32
	samplelen	len[samples, int32]
	samples		array[wsmouse_calibcoord, 16]
}

wsmouse_calibcoord {
	rawx	int32
	rawy	int32
	x	int32
	y	int32
}

wsmouse_id {
	type	flags[type_flag, int32]
	length	len[data, int32]
	data	array[int8, 256]
}

wsmouse_repeat {
	wr_buttons		intptr
	wr_delay_first		int32
	wr_delay_decrement	int32
	wr_delay_minimum	int32
}

wsdisplay_fbinfo {
	height	int32
	width	int32
	depth	int32
	cmsize	int32
}

wsdisplay_cmap {
	index	int32
	count	int32
	red	ptr[in, int8]
	green	ptr[in, int8]
	blue	ptr[in, int8]
}

wsdisplay_curpos {
	x	int32
	y	int32
}

wsdisplay_cursor {
	which	flags[which_wsdisplay_cursor_flag, int32]
	enable	int32
	pos	wsdisplay_curpos
	hot	wsdisplay_curpos
	cmap	wsdisplay_cmap
	size	wsdisplay_curpos
	image	ptr[inout, int8]
	mask	ptr[inout, int8]
}

wsdisplay_font {
	name		buffer[in]
	firstchar	int32
	numchars	int32
	encoding	flags[encoding_flag, int32]
	fontwidth	int32
	fontheight	int32
	stride		int32
	bitorder	int32
	byteorder	flags[byteorder_flag, int32]
	data		buffer[in]
}

wsdisplay_addscreendata {
	idx		int32
	screentype	buffer[in]
	emul		buffer[in]
}

wsdisplay_delscreendata {
	idx	int32
	flags	flags[flags_flag, int32]
}

wsdisplay_usefontdata {
	name	buffer[in]
}

wsdisplay_kbddata {
	op	flags[op_flag, int32]
	idx	int32
}

wsdisplay_param {
	param		flags[param_flag, int32]
	min		int32
	max		int32
	curval		int32
	reserved	array[int32, 4]
}

wsdisplay_char {
	row		int32
	col		int32
	letter		int16
	background	int8
	foreground	int8
	flags		flags[flags_wsdisplay_char_flag, int8]
}

wsdisplay_scroll_data {
	which		flags[which_wsdisplay_scroll_data_flag, int32]
	fastlines	int32
	slowlines	int32
}

wsdisplay_msgattrs {
	default_attrs	int32
	default_bg	int32
	default_fg	int32
	kernel_attrs	int32
	kernel_bg	int32
	kernel_fg	int32
}

wsmux_device {
	type	flags[type_wsmux_device_flag, int32]
	idx	int32
}

wsmux_device_list {
	ndevices	int32
	devices		array[wsmux_device, 32]
}

wscons_event {
	type	flags[event_type_flag, int32]
	value	int32
	time	timespec
}

wsdisplayio_bus_id {
	bus_type	flags[bus_type_flag, int32]
	ubus		bus_data
}

bus_pci {
	domain		int32
	bus		int32
	device		int32
	function	int32
}

bus_sbus {
	fb_instance	int32
}

wsdisplayio_edid_info {
	buffer_size	int32
	data_size	int32
	edid_data	buffer[inout]
}

wsdisplayio_fbinfo {
	fbi_fbsize		intptr
	fbi_fboffset		intptr
	fbi_width		int32
	fbi_height		int32
	fbi_stride		int32
	fbi_bitsperpixel	int32
	fbi_pixeltype		flags[fbi_pixeltype_wsdisplayio_fbinfo_flag, int32]
	fbi_subtype		_fbi_subtype
	fbi_flags		flags[fbi_flags_wsdisplayio_fbinfo_flag, int32]
}

_fbi_rgbmasks {
	red_offset	int32
	red_size	int32
	green_offset	int32
	green_size	int32
	blue_offset	int32
	blue_size	int32
	alpha_offset	int32
	alpha_size	int32
}

_fbi_cmapinfo {
	cmap_entries	int32
}

wsdisplayio_blit {
	serial	int32
	op	flags[op_wsdisplayio_blit_flag, int32]
	srcx	int32
	srcy	int32
	dstx	int32
	dsty	int32
	width	int32
	height	int32
	pen	int32
}

owscons_event {
	type	flags[event_type_flag, int32]
	value	int32
	time	timespec50
}

bus_data [
	tv_sec	int32
	tv_nsec	intptr
	pci	bus_pci
	sbus	bus_sbus
	pad	array[int8, 32]
]

_fbi_subtype [
	tv_sec		int32
	tv_nsec		intptr
	pci		bus_pci
	sbus		bus_sbus
	pad		array[int8, 32]
	fbi_rgbmasks	_fbi_rgbmasks
	fbi_cmapinfo	_fbi_cmapinfo
]

which_flag = WSKBD_BELL_DOPITCH, WSKBD_BELL_DOPERIOD, WSKBD_BELL_DOVOLUME, WSKBD_BELL_DOALL
which_wskbd_keyrepeat_data_flag = WSKBD_KEYREPEAT_DODEL1, WSKBD_KEYREPEAT_DODELN, WSKBD_KEYREPEAT_DOALL
which_wskbd_scroll_data_flag = WSKBD_SCROLL_DOMODIFIER, WSKBD_SCROLL_DOMODE, WSKBD_SCROLL_DOALL
mode_flag = WSKBD_SCROLL_MODE_NORMAL, WSKBD_SCROLL_MODE_HOLD
type_flag = WSMOUSE_ID_TYPE_UIDSTR
which_wsdisplay_cursor_flag = WSDISPLAY_CURSOR_DOCUR, WSDISPLAY_CURSOR_DOPOS, WSDISPLAY_CURSOR_DOHOT, WSDISPLAY_CURSOR_DOCMAP, WSDISPLAY_CURSOR_DOSHAPE, WSDISPLAY_CURSOR_DOALL
encoding_flag = WSDISPLAY_FONTENC_ISO, WSDISPLAY_FONTENC_IBM, WSDISPLAY_FONTENC_PCVT, WSDISPLAY_FONTENC_ISO7, WSDISPLAY_FONTENC_ISO2, WSDISPLAY_FONTENC_KOI8_R
byteorder_flag = WSDISPLAY_FONTORDER_KNOWN, WSDISPLAY_FONTORDER_L2R, WSDISPLAY_FONTORDER_R2L
flags_flag = WSDISPLAY_DELSCR_FORCE
op_flag = _O_WSDISPLAY_KBD_ADD, _O_WSDISPLAY_KBD_DEL
param_flag = WSDISPLAYIO_PARAM_BACKLIGHT, WSDISPLAYIO_PARAM_BRIGHTNESS, WSDISPLAYIO_PARAM_CONTRAST
flags_wsdisplay_char_flag = WSDISPLAY_CHAR_BRIGHT, WSDISPLAY_CHAR_BLINK
which_wsdisplay_scroll_data_flag = WSDISPLAY_SCROLL_DOFASTLINES, WSDISPLAY_SCROLL_DOSLOWLINES, WSDISPLAY_SCROLL_DOALL
type_wsmux_device_flag = WSMUX_MOUSE, WSMUX_KBD, WSMUX_MUX, WSMUX_BELL
bus_type_flag = WSDISPLAYIO_BUS_PCI, WSDISPLAYIO_BUS_SBUS, WSDISPLAYIO_BUS_SOC
fbi_flags_wsdisplayio_fbinfo_flag = WSFB_VRAM_IS_RAM, WSFB_VRAM_IS_SPLIT
fbi_pixeltype_wsdisplayio_fbinfo_flag = WSFB_RGB, WSFB_CI, WSFB_GREYSCALE, WSFB_YUV
op_wsdisplayio_blit_flag = WSFB_BLIT_FILL, WSFB_BLIT_COPY, WSFB_BLIT_TRANS
event_type_flag = WSCONS_EVENT_KEY_UP, WSCONS_EVENT_KEY_DOWN, WSCONS_EVENT_ALL_KEYS_UP, WSCONS_EVENT_MOUSE_UP, WSCONS_EVENT_MOUSE_DOWN, WSCONS_EVENT_MOUSE_DELTA_X, WSCONS_EVENT_MOUSE_DELTA_Y, WSCONS_EVENT_MOUSE_ABSOLUTE_X, WSCONS_EVENT_MOUSE_ABSOLUTE_Y, WSCONS_EVENT_MOUSE_DELTA_Z, WSCONS_EVENT_MOUSE_ABSOLUTE_Z, WSCONS_EVENT_SCREEN_SWITCH, WSCONS_EVENT_ASCII, WSCONS_EVENT_MOUSE_DELTA_W, WSCONS_EVENT_MOUSE_ABSOLUTE_W
