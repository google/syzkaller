# Copyright 2017 syzkaller project authors. All rights reserved.
# Use of this source code is governed by Apache 2 LICENSE that can be found in the LICENSE file.

include <sys/types.h>
include <sys/fstypes.h>
include <sys/mount.h>
include <sys/param.h>
include <sys/stat.h>
include <sys/ucred.h>
include <fcntl.h>
include <unistd.h>

resource fd[int32]: 0xffffffffffffffff, AT_FDCWD
resource fd_dir[fd]

resource pid[int32]: 0, 0xffffffffffffffff
resource uid[int32]: 0, 0xffffffffffffffff
resource gid[int32]: 0, 0xffffffffffffffff

resource dev[int64]: 0, 0xffffffffffffffff
resource mode[int32]: 0, 0xffffffffffffffff
resource ino[int64]: 0, 0xffffffffffffffff
resource nlink[int32]: 0, 0xffffffffffffffff

compat_43_ocreat(path ptr[in, filename], mode flags[open_mode])
open(file ptr[in, filename], flags flags[open_flags], mode flags[open_mode]) fd
# Just so that we have something that creates fd_dir resources.
open$dir(file ptr[in, filename], flags flags[open_flags], mode flags[open_mode]) fd_dir
openat(fd fd_dir[opt], file ptr[in, filename], flags flags[open_flags], mode flags[open_mode]) fd
close(fd fd)
read(fd fd, buf buffer[out], count len[buf])
readv(fd fd, vec ptr[in, array[iovec_out]], vlen len[vec])
pread(fd fd, buf buffer[in], nbyte len[buf], off fileoff)
preadv(fd fd, vec ptr[in, array[iovec_out]], vlen len[vec], off fileoff)
write(fd fd, buf buffer[in], count len[buf])
writev(fd fd, vec ptr[in, array[iovec_in]], vlen len[vec])
pwrite(fd fd, buf buffer[in], nbyte len[buf], off fileoff)
pwritev(fd fd, vec ptr[in, array[iovec_in]], vlen len[vec], off fileoff)
lseek(fd fd, pad const[0], offset fileoff, whence flags[seek_whence])
compat_43_olseek(fd fd, offset fileoff[int64], whence flags[seek_whence])
dup(oldfd fd) fd
dup2(oldfd fd, newfd fd) fd
dup3(oldfd fd, newfd fd, flags flags[dup_flags]) fd
pipe2(pipefd ptr[out, pipefd], flags flags[pipe_flags])

compat_20_getfsstat(buf ptr[out, statfs12], size intptr, f flags[getfsstat_flags])

pipefd {
	rfd	fd
	wfd	fd
}

iovec_in {
	addr	buffer[in]
	len	len[addr, intptr]
}

iovec_out {
	addr	buffer[out]
	len	len[addr, intptr]
}

stat {
	dev		dev
	mode		mode
	ino		ino
	nlink		nlink
	uid		uid
	gid		gid
	rdev		dev
	atim		timespec
	mtim		timespec
	ctim		timespec
	birthtim	timespec
	size		int64
	blocks		int64
	blksize		int32
	flags		int32
	gen		int32
	spare1		int32
	spare2		int32
}

stat12 {
	dev	int32
	ino	int32
	mode	int16
	nlink	int16
	uid	uid
	gid	gid
	rdev	int32
	atim	timespec50
	mtim	timespec50
	ctim	timespec50
	size	int32
	blocks	int64
	blksize	int32
	flags	int32
	gen	int32
	lspare	int32
	qspare	array[int64, 2]
}

stat43 {
	dev	int16
	ino	int32
	mode	int16
	nlink	int16
	uid	int16
	gid	int16
	rdev	int16
	size	int32
	atim	timespec50
	mtim	timespec50
	ctim	timespec50
	blksize	int32
	blocks	int32
	flags	int32
	gen	int32
}

define MFSNAMELEN	16
define MNAMELEN	90

statfs12 {
	type		int16
	oflags		int16
	bsize		intptr
	iosize		intptr
	blocks		intptr
	bfree		intptr
	bavail		intptr
	files		intptr
	ffree		intptr
	fsid		fsid_t
	owner		uid
	flags		flags[statfs_flags, intptr]
	swrites		intptr
	aswrites	intptr
	spare		array[intptr, 1]
	fstype		array[int8, MFSNAMELEN]
	mnton		array[int8, MNAMELEN]
	mntfrom		array[int8, MNAMELEN]
}

fsid_t {
	val	array[int32, 2]
}

open_flags = O_RDONLY, O_WRONLY, O_RDWR, O_APPEND, O_CREAT, O_TRUNC, O_EXCL, O_SHLOCK, O_EXLOCK, O_NOFOLLOW, O_CLOEXEC, O_NOSIGPIPE, O_DSYNC, O_SYNC, O_RSYNC, O_ALT_IO, O_NOCTTY, O_DIRECT, O_DIRECTORY, O_ASYNC
open_mode = S_IRUSR, S_IWUSR, S_IXUSR, S_IRGRP, S_IWGRP, S_IXGRP, S_IROTH, S_IWOTH, S_IXOTH
seek_whence = SEEK_SET, SEEK_CUR, SEEK_END
pipe_flags = O_NONBLOCK, O_CLOEXEC, O_NOSIGPIPE
statfs_flags = MNT_RDONLY, MNT_NOEXEC, MNT_NOSUID, MNT_NODEV, MNT_SYNCHRONOUS, MNT_ASYNC, MNT_UNION, MNT_NOCOREDUMP, MNT_SYMPERM, MNT_NODEVMTIME, MNT_SOFTDEP, MNT_LOCAL, MNT_QUOTA, MNT_ROOTFS, MNT_EXRDONLY, MNT_EXPORTED, MNT_DEFEXPORTED, MNT_EXPORTANON, MNT_EXKERB, MNT_EXNORESPORT, MNT_EXPUBLIC
getfsstat_flags = MNT_NOWAIT, MNT_WAIT, MNT_LAZY
