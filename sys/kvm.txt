# Copyright 2015 syzkaller project authors. All rights reserved.
# Use of this source code is governed by Apache 2 LICENSE that can be found in the LICENSE file.

include <linux/kvm.h>
include <linux/kvm_host.h>
include <uapi/linux/fcntl.h>
include <asm/mce.h>

resource fd_kvm[fd]
resource fd_kvmvm[fd]
resource fd_kvmcpu[fd]

openat$kvm(fd const[AT_FDCWD], file ptr[in, string["/dev/kvm"]], flags flags[open_flags], mode const[0]) fd_kvm

ioctl$KVM_CREATE_VM(fd fd_kvm, cmd const[KVM_CREATE_VM], type const[0]) fd_kvmvm
ioctl$KVM_GET_MSR_INDEX_LIST(fd fd_kvm, cmd const[KVM_GET_MSR_INDEX_LIST], arg ptr[in, kvm_msr_list])
ioctl$KVM_CHECK_EXTENSION(fd fd_kvm, cmd const[KVM_CHECK_EXTENSION], arg intptr)
ioctl$KVM_GET_VCPU_MMAP_SIZE(fd fd_kvm, cmd const[KVM_GET_VCPU_MMAP_SIZE])
ioctl$KVM_GET_SUPPORTED_CPUID(fd fd_kvm, cmd const[KVM_GET_SUPPORTED_CPUID], arg buffer[out])
ioctl$KVM_GET_EMULATED_CPUID(fd fd_kvmvm, cmd const[KVM_GET_EMULATED_CPUID], arg buffer[out])
ioctl$KVM_X86_GET_MCE_CAP_SUPPORTED(fd fd_kvmvm, cmd const[KVM_X86_GET_MCE_CAP_SUPPORTED], arg buffer[out])

ioctl$KVM_CREATE_VCPU(fd fd_kvmvm, cmd const[KVM_CREATE_VCPU], id intptr[0:2]) fd_kvmcpu
ioctl$KVM_CHECK_EXTENSION_VM(fd fd_kvmvm, cmd const[KVM_CHECK_EXTENSION], arg intptr)
ioctl$KVM_GET_DIRTY_LOG(fd fd_kvmvm, cmd const[KVM_GET_DIRTY_LOG], arg ptr[in, kvm_dirty_log])
ioctl$KVM_CREATE_IRQCHIP(fd fd_kvmvm, cmd const[KVM_CREATE_IRQCHIP])
ioctl$KVM_IRQ_LINE(fd fd_kvmvm, cmd const[KVM_IRQ_LINE], arg ptr[in, kvm_irq_level])
ioctl$KVM_IRQ_LINE_STATUS(fd fd_kvmvm, cmd const[KVM_IRQ_LINE_STATUS], arg ptr[in, kvm_irq_level])
ioctl$KVM_GET_IRQCHIP(fd fd_kvmvm, cmd const[KVM_GET_IRQCHIP], arg ptr[out, kvm_irq_chip])
ioctl$KVM_SET_IRQCHIP(fd fd_kvmvm, cmd const[KVM_SET_IRQCHIP], arg ptr[in, kvm_irq_chip])
ioctl$KVM_XEN_HVM_CONFIG(fd fd_kvmvm, cmd const[KVM_XEN_HVM_CONFIG], arg ptr[in, kvm_xen_hvm_config])
ioctl$KVM_GET_CLOCK(fd fd_kvmvm, cmd const[KVM_GET_CLOCK], arg ptr[out, kvm_clock_data])
ioctl$KVM_SET_CLOCK(fd fd_kvmvm, cmd const[KVM_SET_CLOCK], arg ptr[in, kvm_clock_data])
ioctl$KVM_SET_USER_MEMORY_REGION(fd fd_kvmvm, cmd const[KVM_SET_USER_MEMORY_REGION], arg ptr[in, kvm_userspace_memory_region])
ioctl$KVM_SET_TSS_ADDR(fd fd_kvmvm, cmd const[KVM_SET_TSS_ADDR], arg flags[kvm_x86_tss_addr])
ioctl$KVM_ENABLE_CAP(fd fd_kvmvm, cmd const[KVM_ENABLE_CAP], arg ptr[in, kvm_enable_cap_vm])
ioctl$KVM_SET_IDENTITY_MAP_ADDR(fd fd_kvmvm, cmd const[KVM_SET_IDENTITY_MAP_ADDR], arg ptr[in, flags[kvm_guest_addrs, int64]])
ioctl$KVM_SET_BOOT_CPU_ID(fd fd_kvmvm, cmd const[KVM_SET_BOOT_CPU_ID], arg ptr[in, intptr[0:2]])
ioctl$KVM_PPC_GET_PVINFO(fd fd_kvmvm, cmd const[KVM_PPC_GET_PVINFO], arg buffer[out])
ioctl$KVM_ASSIGN_PCI_DEVICE(fd fd_kvmvm, cmd const[KVM_ASSIGN_PCI_DEVICE], arg ptr[in, kvm_assigned_pci_dev])
ioctl$KVM_DEASSIGN_PCI_DEVICE(fd fd_kvmvm, cmd const[KVM_DEASSIGN_PCI_DEVICE], arg ptr[in, kvm_assigned_pci_dev])
ioctl$KVM_ASSIGN_DEV_IRQ(fd fd_kvmvm, cmd const[KVM_ASSIGN_DEV_IRQ], arg ptr[in, kvm_assigned_irq])
ioctl$KVM_DEASSIGN_DEV_IRQ(fd fd_kvmvm, cmd const[KVM_DEASSIGN_DEV_IRQ], arg ptr[in, kvm_assigned_irq])
ioctl$KVM_SET_GSI_ROUTING(fd fd_kvmvm, cmd const[KVM_SET_GSI_ROUTING], arg ptr[in, kvm_irq_routing])
ioctl$KVM_ASSIGN_SET_MSIX_NR(fd fd_kvmvm, cmd const[KVM_ASSIGN_SET_MSIX_NR], arg ptr[in, kvm_assigned_msix_nr])
ioctl$KVM_ASSIGN_SET_MSIX_ENTRY(fd fd_kvmvm, cmd const[KVM_ASSIGN_SET_MSIX_ENTRY], arg ptr[in, kvm_assigned_msix_entry])
ioctl$KVM_IOEVENTFD(fd fd_kvmvm, cmd const[KVM_IOEVENTFD], arg ptr[in, kvm_ioeventfd])
ioctl$KVM_ASSIGN_SET_INTX_MASK(fd fd_kvmvm, cmd const[KVM_ASSIGN_SET_INTX_MASK], arg ptr[in, kvm_assigned_pci_dev])
ioctl$KVM_SIGNAL_MSI(fd fd_kvmvm, cmd const[KVM_SIGNAL_MSI], arg ptr[in, kvm_msi])
ioctl$KVM_CREATE_PIT2(fd fd_kvmvm, cmd const[KVM_CREATE_PIT2], arg ptr[in, kvm_pit_config])
ioctl$KVM_GET_PIT(fd fd_kvmvm, cmd const[KVM_GET_PIT], arg ptr[out, kvm_pit_state2])
ioctl$KVM_SET_PIT(fd fd_kvmvm, cmd const[KVM_SET_PIT], arg ptr[in, kvm_pit_state2])
ioctl$KVM_GET_PIT2(fd fd_kvmvm, cmd const[KVM_GET_PIT2], arg ptr[out, kvm_pit_state2])
ioctl$KVM_SET_PIT2(fd fd_kvmvm, cmd const[KVM_SET_PIT2], arg ptr[in, kvm_pit_state2])
ioctl$KVM_PPC_GET_SMMU_INFO(fd fd_kvmvm, cmd const[KVM_PPC_GET_SMMU_INFO], arg buffer[out])
ioctl$KVM_IRQFD(fd fd_kvmvm, cmd const[KVM_IRQFD], arg ptr[in, kvm_irqfd])
ioctl$KVM_PPC_ALLOCATE_HTAB(fd fd_kvmvm, cmd const[KVM_PPC_ALLOCATE_HTAB], arg ptr[in, int32])
ioctl$KVM_S390_INTERRUPT(fd fd_kvmvm, cmd const[KVM_S390_INTERRUPT], arg ptr[in, kvm_s390_interrupt])
ioctl$KVM_CREATE_DEVICE(fd fd_kvmvm, cmd const[KVM_CREATE_DEVICE], arg ptr[inout, kvm_create_device])
ioctl$KVM_SET_DEVICE_ATTR(fd fd_kvmvm, cmd const[KVM_SET_DEVICE_ATTR], arg ptr[in, kvm_device_attr])
ioctl$KVM_GET_DEVICE_ATTR(fd fd_kvmvm, cmd const[KVM_GET_DEVICE_ATTR], arg ptr[in, kvm_device_attr])
ioctl$KVM_HAS_DEVICE_ATTR(fd fd_kvmvm, cmd const[KVM_HAS_DEVICE_ATTR], arg ptr[in, kvm_device_attr])
ioctl$KVM_REGISTER_COALESCED_MMIO(fd fd_kvmvm, cmd const[KVM_REGISTER_COALESCED_MMIO], arg ptr[in, kvm_coalesced_mmio_zone])
ioctl$KVM_UNREGISTER_COALESCED_MMIO(fd fd_kvmvm, cmd const[KVM_UNREGISTER_COALESCED_MMIO], arg ptr[in, kvm_coalesced_mmio_zone])
ioctl$KVM_SET_NR_MMU_PAGES(fd fd_kvmvm, cmd const[KVM_SET_NR_MMU_PAGES], arg intptr)
ioctl$KVM_GET_NR_MMU_PAGES(fd fd_kvmvm, cmd const[KVM_GET_NR_MMU_PAGES], arg intptr)
ioctl$KVM_REINJECT_CONTROL(fd fd_kvmvm, cmd const[KVM_REINJECT_CONTROL], arg ptr[in, kvm_reinject_control])

ioctl$KVM_RUN(fd fd_kvmcpu, cmd const[KVM_RUN])
ioctl$KVM_GET_REGS(fd fd_kvmcpu, cmd const[KVM_GET_REGS], arg ptr[out, kvm_regs])
ioctl$KVM_SET_REGS(fd fd_kvmcpu, cmd const[KVM_SET_REGS], arg ptr[in, kvm_regs])
ioctl$KVM_GET_SREGS(fd fd_kvmcpu, cmd const[KVM_GET_SREGS], arg ptr[out, kvm_sregs])
ioctl$KVM_SET_SREGS(fd fd_kvmcpu, cmd const[KVM_SET_SREGS], arg ptr[in, kvm_sregs])
ioctl$KVM_TRANSLATE(fd fd_kvmcpu, cmd const[KVM_TRANSLATE], arg ptr[in, kvm_translation])
ioctl$KVM_INTERRUPT(fd fd_kvmcpu, cmd const[KVM_INTERRUPT], arg ptr[in, int32])
ioctl$KVM_GET_MSRS(fd fd_kvmcpu, cmd const[KVM_GET_MSRS], arg ptr[out, kvm_msrs])
ioctl$KVM_SET_MSRS(fd fd_kvmcpu, cmd const[KVM_SET_MSRS], arg ptr[in, kvm_msrs])
ioctl$KVM_SET_CPUID(fd fd_kvmcpu, cmd const[KVM_SET_CPUID], arg ptr[in, kvm_cpuid])
# TODO: we should be able to read kvm_cpuid2 with KVM_GET_CPUID2, alter few bits and then call KVM_SET_CPUID2 with that object.
ioctl$KVM_GET_CPUID2(fd fd_kvmcpu, cmd const[KVM_GET_CPUID2], arg ptr[out, kvm_cpuid2])
ioctl$KVM_SET_CPUID2(fd fd_kvmcpu, cmd const[KVM_SET_CPUID2], arg ptr[in, kvm_cpuid2])
ioctl$KVM_SET_SIGNAL_MASK(fd fd_kvmcpu, cmd const[KVM_SET_SIGNAL_MASK], arg ptr[in, kvm_signal_mask])
ioctl$KVM_GET_FPU(fd fd_kvmcpu, cmd const[KVM_GET_FPU], arg ptr[out, kvm_fpu])
ioctl$KVM_SET_FPU(fd fd_kvmcpu, cmd const[KVM_SET_FPU], arg ptr[in, kvm_fpu])
ioctl$KVM_GET_VCPU_EVENTS(fd fd_kvmcpu, cmd const[KVM_GET_VCPU_EVENTS], arg ptr[out, kvm_vcpu_events])
ioctl$KVM_SET_VCPU_EVENTS(fd fd_kvmcpu, cmd const[KVM_SET_VCPU_EVENTS], arg ptr[in, kvm_vcpu_events])
ioctl$KVM_GET_DEBUGREGS(fd fd_kvmcpu, cmd const[KVM_GET_DEBUGREGS], arg ptr[out, kvm_debugregs])
ioctl$KVM_SET_DEBUGREGS(fd fd_kvmcpu, cmd const[KVM_SET_DEBUGREGS], arg ptr[in, kvm_debugregs])
ioctl$KVM_ENABLE_CAP_CPU(fd fd_kvmcpu, cmd const[KVM_ENABLE_CAP], arg ptr[in, kvm_enable_cap_cpu])
ioctl$KVM_GET_MP_STATE(fd fd_kvmcpu, cmd const[KVM_GET_MP_STATE], arg ptr[out, int32])
ioctl$KVM_SET_MP_STATE(fd fd_kvmcpu, cmd const[KVM_SET_MP_STATE], arg ptr[in, flags[kvm_mp_state, int32]])
ioctl$KVM_GET_XSAVE(fd fd_kvmcpu, cmd const[KVM_GET_XSAVE], arg ptr[out, kvm_xsave])
ioctl$KVM_SET_XSAVE(fd fd_kvmcpu, cmd const[KVM_SET_XSAVE], arg ptr[in, kvm_xsave])
ioctl$KVM_GET_XCRS(fd fd_kvmcpu, cmd const[KVM_GET_XCRS], arg ptr[in, kvm_xcrs])
ioctl$KVM_SET_XCRS(fd fd_kvmcpu, cmd const[KVM_SET_XCRS], arg ptr[in, kvm_xcrs])
ioctl$KVM_SET_TSC_KHZ(fd fd_kvmcpu, cmd const[KVM_SET_TSC_KHZ], arg intptr)
ioctl$KVM_GET_TSC_KHZ(fd fd_kvmcpu, cmd const[KVM_GET_TSC_KHZ])
ioctl$KVM_GET_LAPIC(fd fd_kvmcpu, cmd const[KVM_GET_LAPIC], arg ptr[in, kvm_lapic_state])
ioctl$KVM_SET_LAPIC(fd fd_kvmcpu, cmd const[KVM_SET_LAPIC], arg ptr[in, kvm_lapic_state])
ioctl$KVM_DIRTY_TLB(fd fd_kvmcpu, cmd const[KVM_DIRTY_TLB], arg ptr[in, kvm_dirty_tlb])
ioctl$KVM_NMI(fd fd_kvmcpu, cmd const[KVM_NMI])
ioctl$KVM_S390_UCAS_MAP(fd fd_kvmcpu, cmd const[KVM_S390_UCAS_MAP], arg ptr[in, kvm_s390_ucas_mapping])
ioctl$KVM_S390_UCAS_UNMAP(fd fd_kvmcpu, cmd const[KVM_S390_UCAS_UNMAP], arg ptr[in, kvm_s390_ucas_mapping])
ioctl$KVM_S390_VCPU_FAULT(fd fd_kvmcpu, cmd const[KVM_S390_VCPU_FAULT], arg ptr[in, int64])
ioctl$KVM_SET_ONE_REG(fd fd_kvmcpu, cmd const[KVM_SET_ONE_REG], arg ptr[in, kvm_one_reg])
ioctl$KVM_GET_ONE_REG(fd fd_kvmcpu, cmd const[KVM_GET_ONE_REG], arg ptr[in, kvm_one_reg])
ioctl$KVM_KVMCLOCK_CTRL(fd fd_kvmcpu, cmd const[KVM_KVMCLOCK_CTRL])
ioctl$KVM_S390_INTERRUPT_CPU(fd fd_kvmcpu, cmd const[KVM_S390_INTERRUPT], arg ptr[in, kvm_s390_interrupt])
ioctl$KVM_GET_REG_LIST(fd fd_kvmcpu, cmd const[KVM_GET_REG_LIST], arg ptr[in, kvm_reg_list])
ioctl$KVM_SET_GUEST_DEBUG(fd fd_kvmcpu, cmd const[KVM_SET_GUEST_DEBUG], arg ptr[in, kvm_guest_debug])
ioctl$KVM_SMI(fd fd_kvmcpu, cmd const[KVM_SMI])
ioctl$KVM_TPR_ACCESS_REPORTING(fd fd_kvmcpu, cmd const[KVM_TPR_ACCESS_REPORTING], arg ptr[in, kvm_tpr_access_ctl])
ioctl$KVM_SET_VAPIC_ADDR(fd fd_kvmcpu, cmd const[KVM_SET_VAPIC_ADDR], arg ptr[in, flags[kvm_guest_addrs, int64]])
ioctl$KVM_X86_SETUP_MCE(fd fd_kvmcpu, cmd const[KVM_X86_SETUP_MCE], arg ptr[in, kvm_mce_cap])
ioctl$KVM_X86_SET_MCE(fd fd_kvmcpu, cmd const[KVM_X86_SET_MCE], arg ptr[in, kvm_x86_mce])
ioctl$KVM_ARM_VCPU_INIT(fd fd_kvmcpu, cmd const[KVM_ARM_VCPU_INIT], arg ptr[in, kvm_vcpu_init])
ioctl$KVM_ARM_SET_DEVICE_ADDR(fd fd_kvmcpu, cmd const[KVM_ARM_SET_DEVICE_ADDR], arg ptr[in, kvm_arm_device_addr])

kvm_mem_region_flags = KVM_MEM_LOG_DIRTY_PAGES, KVM_MEM_READONLY
kvm_mp_state = KVM_MP_STATE_RUNNABLE, KVM_MP_STATE_UNINITIALIZED, KVM_MP_STATE_INIT_RECEIVED, KVM_MP_STATE_HALTED, KVM_MP_STATE_SIPI_RECEIVED, KVM_MP_STATE_STOPPED, KVM_MP_STATE_CHECK_STOP, KVM_MP_STATE_OPERATING, KVM_MP_STATE_LOAD
kvm_assigned_irq_flags = KVM_DEV_IRQ_HOST_INTX, KVM_DEV_IRQ_HOST_MSI, KVM_DEV_IRQ_HOST_MSIX, KVM_DEV_IRQ_GUEST_INTX, KVM_DEV_IRQ_GUEST_MSI, KVM_DEV_IRQ_GUEST_MSIX
kvm_irq_routing_entry_type = KVM_IRQ_ROUTING_IRQCHIP, KVM_IRQ_ROUTING_MSI, KVM_IRQ_ROUTING_S390_ADAPTER, KVM_IRQ_ROUTING_HV_SINT
kvm_ioeventfd_flags = KVM_IOEVENTFD_FLAG_DATAMATCH, KVM_IOEVENTFD_FLAG_PIO, KVM_IOEVENTFD_FLAG_DEASSIGN, KVM_IOEVENTFD_FLAG_VIRTIO_CCW_NOTIFY
kvm_ioeventfd_len = 0, 1, 2, 4, 8
kvm_device_type = KVM_DEV_TYPE_FSL_MPIC_20, KVM_DEV_TYPE_FSL_MPIC_42, KVM_DEV_TYPE_XICS, KVM_DEV_TYPE_VFIO, KVM_DEV_TYPE_FLIC
kvm_device_flags = 0, KVM_CREATE_DEVICE_TEST
kvm_guest_debug_flags = KVM_GUESTDBG_ENABLE, KVM_GUESTDBG_SINGLESTEP, KVM_GUESTDBG_USE_SW_BP, KVM_GUESTDBG_USE_HW_BP, KVM_GUESTDBG_INJECT_DB, KVM_GUESTDBG_INJECT_BP
kvm_chip_id = KVM_IRQCHIP_PIC_MASTER, KVM_IRQCHIP_PIC_SLAVE, KVM_IRQCHIP_IOAPIC
kvm_cpu_funciton = 0, 1, 2, 4, 6, 7, 10, 11, 13, KVM_CPUID_SIGNATURE, KVM_CPUID_FEATURES, 0x80000000, 0x80000001, 0x80000007, 0x80000008, 0x80000019, 0xC0000000, 0xC0000001
kvm_guest_selector = 0, 3, 4, 8, 9, 10, 11, 12, 13, 14, 15, 16
kvm_mce_flags = 1, 2, 4
kvm_mcg_status = MCG_STATUS_RIPV, MCG_STATUS_EIPV, MCG_STATUS_MCIP, MCG_STATUS_LMCES
kvm_mce_status = MCI_STATUS_VAL, MCI_STATUS_OVER, MCI_STATUS_UC, MCI_STATUS_EN, MCI_STATUS_MISCV, MCI_STATUS_ADDRV, MCI_STATUS_PCC, MCI_STATUS_S, MCI_STATUS_AR
kvm_cpu_caps = KVM_CAP_HYPERV_SYNIC
kvm_vm_caps = KVM_CAP_DISABLE_QUIRKS, KVM_CAP_SPLIT_IRQCHIP, KVM_CAP_X2APIC_API
kvm_cpuid_flags = KVM_CPUID_FLAG_SIGNIFCANT_INDEX, KVM_CPUID_FLAG_STATEFUL_FUNC, KVM_CPUID_FLAG_STATE_READ_NEXT
kvm_dev_flags = KVM_DEV_ASSIGN_ENABLE_IOMMU, KVM_DEV_ASSIGN_PCI_2_3, KVM_DEV_ASSIGN_MASK_INTX
kvm_vcpu_target = KVM_ARM_TARGET_CORTEX_A53, KVM_ARM_TARGET_AEM_V8, KVM_ARM_TARGET_FOUNDATION_V8, KVM_ARM_TARGET_CORTEX_A57, KVM_ARM_TARGET_XGENE_POTENZA, KVM_ARM_TARGET_GENERIC_V8
kvm_vcpu_features_arm64 = KVM_ARM_VCPU_POWER_OFF, KVM_ARM_VCPU_EL1_32BIT, KVM_ARM_VCPU_PSCI_0_2, KVM_ARM_VCPU_PMU_V3

kvm_mem_slots = 0, 1, 2, 3, 4, 5, 509, 510, 511, 10000, 65536, 65537, 65538, 65539, 65540, 66047, 66048, 66049
kvm_guest_addrs = 0, 1, 2, 4, 0x1000, 0x2000, 0x3000, 0x4000, 0x5000, 0x6000, 0xd000, 0xf000, 0x100000, 0x10000
kvm_guest_addr_size = 0x1000, 0x2000, 0x4000, 0x8000, 0x10000, 0x100000
kvm_x86_tss_addr = 0xd000
kvm_x86_cr0 = 1, 2, 4, 8, 16, 32, 65536, 262144, 536870912, 1073741824, 2147483648
kvm_x86_cr4 = 1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 8192, 16384, 65536, 131072, 262144, 1048576, 2097152, 4194304
kvm_x86_efer = 1, 256, 1024, 2048, 4096, 8192, 16384, 32768
kvm_x86_dr7 = 1, 2, 4, 8, 16, 32, 64, 128
kvm_x86_rflags = 1, 2, 4, 16, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536, 131072, 262144, 524288, 1048576, 2097152

# Pseudo call that setups VCPU into a reasonable interesting state for execution.
# The interface is designed for extensibility so that addition of new options does not invalidate all existing programs.
syz_kvm_setup_cpu$x86(fd fd_kvmvm, cpufd fd_kvmcpu, usermem vma[24], text ptr[in, array[kvm_text_x86, 1]], ntext len[text], flags flags[kvm_setup_flags], opts ptr[in, array[kvm_setup_opt_x86, 0:2]], nopt len[opts])
syz_kvm_setup_cpu$arm64(fd fd_kvmvm, cpufd fd_kvmcpu, usermem vma[24], text ptr[in, array[kvm_text_arm64, 1]], ntext len[text], flags const[0], opts ptr[in, array[kvm_setup_opt_arm64, 1]], nopt len[opts])

kvm_text_x86 [
	textreal	kvm_text_x86_real
	text16	kvm_text_x86_16
	text32	kvm_text_x86_32
	text64	kvm_text_x86_64
] [varlen]

kvm_text_x86_real {
	typ	const[8, intptr]
	text	ptr[in, text[x86_real]]
	size	len[text, intptr]
}

kvm_text_x86_16 {
	typ	const[16, intptr]
	text	ptr[in, text[x86_16]]
	size	len[text, intptr]
}

kvm_text_x86_32 {
	typ	const[32, intptr]
	text	ptr[in, text[x86_32]]
	size	len[text, intptr]
}

kvm_text_x86_64 {
	typ	const[64, intptr]
	text	ptr[in, text[x86_64]]
	size	len[text, intptr]
}

kvm_text_arm64 {
	typ	const[0, intptr]
	text	ptr[in, text[arm64]]
	size	len[text, intptr]
}

kvm_setup_opt_x86 [
	cr0	kvm_setup_opt_cr0
	cr4	kvm_setup_opt_cr4
	efer	kvm_setup_opt_efer
	flags	kvm_setup_opt_flags
	cstype0	kvm_setup_opt_cstype0
	cstype3	kvm_setup_opt_cstype3
	dstype0	kvm_setup_opt_dstype0
	dstype3	kvm_setup_opt_dstype3
	vmwrite	kvm_setup_opt_vmwrite
] [varlen]

kvm_setup_opt_cr0 {
	typ	const[0, int64]
	val	flags[kvm_x86_cr0, int64]
}

kvm_setup_opt_cr4 {
	typ	const[1, int64]
	val	flags[kvm_x86_cr4, int64]
}

kvm_setup_opt_efer {
	typ	const[2, int64]
	val	flags[kvm_x86_efer, int64]
}

kvm_setup_opt_flags {
	typ	const[3, int64]
	val	flags[kvm_x86_rflags, int64]
}

kvm_setup_opt_cstype0 {
	typ	const[4, int64]
	val	int64[0:15]
}

kvm_setup_opt_cstype3 {
	typ	const[5, int64]
	val	int64[0:15]
}

kvm_setup_opt_dstype0 {
	typ	const[6, int64]
	val	int64[0:15]
}

kvm_setup_opt_dstype3 {
	typ	const[7, int64]
	val	int64[0:15]
}

kvm_setup_opt_vmwrite {
	typ	const[8, int64]
# Low 16 bits are field index, high 48 bits are value.
	sz	const[0, int64:1]
	fld	int64:5
	pad0	const[0, int64:4]
	ftyp	int64:2
	pad1	const[0, int64:1]
	fsz	int64:2
	pad2	const[0, int64:1]
	val	int64:48
}

kvm_setup_opt_arm64 [
# unions need at least 2 fields, but we have only 1 now, but we want to have it as union for future extention
	featur1	kvm_setup_opt_feature
	featur2	kvm_setup_opt_feature
] [varlen]

kvm_setup_opt_feature {
	typ	const[1, int64]
	val	flags[kvm_vcpu_features_arm64, int64]
}

kvm_setup_flags = KVM_SETUP_PAGING, KVM_SETUP_PAE, KVM_SETUP_PROTECTED, KVM_SETUP_CPL3, KVM_SETUP_VIRT86, KVM_SETUP_SMM, KVM_SETUP_VM

define KVM_SETUP_PAGING		(1<<0)
define KVM_SETUP_PAE		(1<<1)
define KVM_SETUP_PROTECTED	(1<<2)
define KVM_SETUP_CPL3		(1<<3)
define KVM_SETUP_VIRT86		(1<<4)
define KVM_SETUP_SMM		(1<<5)
define KVM_SETUP_VM		(1<<6)

kvm_guest_debug {
	ctrl	flags[kvm_guest_debug_flags, int32]
	pad	const[0, int32]
	reg	array[int64, 8]
}

kvm_arm_device_addr {
	id	int64
	addr	flags[kvm_guest_addrs, int64]
}

kvm_reg_list {
	n	len[reg, int64]
	reg	array[int64]
}

kvm_device_attr {
	flags	const[0, int32]
	group	int32
	attr	int64
	addr	ptr[out, int64]
}

kvm_create_device {
	type	flags[kvm_device_type, int32]
	fd	fd
	flags	flags[kvm_device_flags, int32]
}

kvm_s390_interrupt {
	type	int32
	parm	int32
	parm64	int64
}

kvm_irqfd {
	fd	fd_event
	gsi	int32
	flags	int32
	rfd	fd_event
	pad	array[const[0, int8], 16]
}

kvm_pit_state2 {
	chans	array[kvm_pit_channel_state, 3]
	flags	int32
	pad	array[const[0, int32], 9]
}

kvm_pit_channel_state {
	count	int32
	lcount	int16
	latched	int8
	lstatus	int8
	status	int8
	rstate	int8
	wstate	int8
	wlatch	int8
	rw	int8
	mode	int8
	bcd	int8
	gate	int8
	ltime	int64
}

kvm_pit_config {
	flags	int32
	pad	array[const[0, int32], 15]
}

kvm_msi {
	addrlo	flags[kvm_guest_addrs, int32]
	addrhi	flags[kvm_guest_addrs, int32]
	data	int32
	flags	int32
	devid	int32
	pad	array[const[0, int8], 12]
}

kvm_one_reg {
	id	int64
	addr	int64
}

kvm_s390_ucas_mapping {
	uaddr	int64
	vaddr	int64
	len	int64
}

kvm_dirty_tlb {
	bitmap	int64
	n	int32
}

kvm_ioeventfd {
	datam	flags[kvm_guest_addrs, int64]
	addr	ptr[out, int64]
	len	flags[kvm_ioeventfd_len, int32]
	fd	fd_event
	flags	flags[kvm_ioeventfd_flags, int32]
}

kvm_lapic_state {
	regs	array[int8, 1024]
}

kvm_assigned_msix_entry {
	devid	int32
	gsi	int32
	entry	int16
}

kvm_assigned_msix_nr {
	devid	int32
	entnr	int16
}

kvm_irq_routing {
	nr	len[entries, int32]
	flags	const[0, int32]
	entries	array[kvm_irq_routing_entry]
}

kvm_irq_routing_entry {
	gsi	int32
	type	flags[kvm_irq_routing_entry_type, int32]
	flags	const[0, int32]
	pad	const[0, int32]
	u	kvm_irq_routing_entry_u
}

kvm_irq_routing_entry_u [
	irqchip	kvm_irq_routing_irqchip
	msi	kvm_irq_routing_msi
	adapter	kvm_irq_routing_s390_adapter
	sint	kvm_irq_routing_hv_sint
]

kvm_irq_routing_irqchip {
	irqchip	int32
	pin	int32
}

kvm_irq_routing_msi {
	addrlo	int32
	addrhi	int32
	data	int32
}

kvm_irq_routing_s390_adapter {
	indaddr	int64
	saddr	int64
	indoff	int64
	soff	int32
	aid	int32
}

kvm_irq_routing_hv_sint {
	vcpu	int32
	sint	int32
}

kvm_assigned_irq {
	devid	int32
	hirq	int32
	girq	int32
	flags	flags[kvm_assigned_irq_flags, int32]
}

kvm_assigned_pci_dev {
	devid	int32
	busnr	int32
	devfn	int32
	flags	flags[kvm_dev_flags, int32]
	segnr	int32
}

kvm_xcr {
	xcr	int32
	reserv	const[0, int32]
	val	int64
}

kvm_xcrs {
	nr	len[xcrs, int32]
	flags	int32
	xcrs	array[kvm_xcr]
}

kvm_xsave {
	region	array[int8, 1024]
}

kvm_enable_cap_cpu {
	cap	flags[kvm_cpu_caps, int32]
	flags	const[0, int32]
	args	array[int64, 4]
	pad	array[const[0, int8], 64]
}

kvm_enable_cap_vm {
	cap	flags[kvm_vm_caps, int32]
	flags	const[0, int32]
	args	array[int64, 4]
	pad	array[const[0, int8], 64]
}

kvm_userspace_memory_region {
	slot	flags[kvm_mem_slots, int32]
	flags	flags[kvm_mem_region_flags, int32]
	paddr	flags[kvm_guest_addrs, int64]
	size	len[addr, int64]
	addr	vma[1:2]
}

kvm_vcpu_events {
	exinjec	int8
	exnr	int8
	exhec	int8
	pad1	const[0, int8]
	exec	int32

	ininjec	int8
	innr	int8
	insoft	int8
	inshad	int8

	nmiinj	int8
	nmipend	int8
	nmimask	int8
	pad2	const[0, int8]

	sipi	int32
	flags	int32

	smismm	int8
	smipend	int8
	smiinsi	int8
	smilatc	int8
}

kvm_clock_data {
	clock	int64
	flags	int32
	pad	array[const[0, int32], 9]
}

kvm_xen_hvm_config {
	flags	int32
	msr	int32
	addr32	buffer[in]
	addr64	buffer[in]
	size32	len[addr32, int8]
	size64	len[addr64, int8]
	pad	array[const[0, int8], 30]
}

kvm_irq_level {
	irq	int32
	level	int32
}

kvm_signal_mask {
	len	len[sigset, int32]
	sigset	array[int8]
}

kvm_cpuid_entry {
	func	flags[kvm_cpu_funciton, int32]
	eax	int32
	ebx	int32
	ecx	int32
	edx	int32
	pad	const[0, int32]
}

kvm_cpuid {
	n	len[entries, int32]
	pad	const[0, int32]
	entries	array[kvm_cpuid_entry]
}

kvm_cpuid_entry2 {
	func	flags[kvm_cpu_funciton, int32]
	index	int32
	flags	flags[kvm_cpuid_flags, int32]
	eax	int32
	ebx	int32
	ecx	int32
	edx	int32
	pad	array[const[0, int32], 3]
}

kvm_cpuid2 {
	n	len[entries, int32]
	pad	const[0, int32]
	entries	array[kvm_cpuid_entry2]
}

kvm_translation {
	laddr	flags[kvm_guest_addrs, int64]
	paddr	flags[kvm_guest_addrs, int64]
	valid	int8
	write	int8
	umode	int8
}

kvm_dirty_log {
	slot	flags[kvm_mem_slots, int32]
	pad	const[0, int32]
	bitmap	vma
}

kvm_memory_region {
	slot	flags[kvm_mem_slots, int32]
	flags	flags[kvm_mem_region_flags, int32]
	paddr	flags[kvm_guest_addrs, int64]
	size	flags[kvm_guest_addr_size, int64]
}

kvm_msr_list {
	n	len[indices, int32]
	indices	array[int32]
}

kvm_regs {
	gp	array[int64, 16]
	rip	flags[kvm_guest_addrs, int64]
	rflags	flags[kvm_x86_rflags, int64]
}

kvm_sregs {
	cs	kvm_segment
	ds	kvm_segment
	es	kvm_segment
	fs	kvm_segment
	gs	kvm_segment
	ss	kvm_segment
	tr	kvm_segment
	ldt	kvm_segment
	gdt	kvm_dtable
	idt	kvm_dtable
	cr0	flags[kvm_x86_cr0, int64]
	cr2	const[0, int64]
#TODO: this should point to page table
	cr3	flags[kvm_guest_addrs, int64]
	cr4	flags[kvm_x86_cr4, int64]
	cr8	int64[0:15]
	efer	flags[kvm_x86_efer, int64]
	apic	flags[kvm_guest_addrs, int64]
	intr	array[int64, 4]
}

kvm_segment {
	base	flags[kvm_guest_addrs, int64]
	limit	flags[kvm_guest_addrs, int32]
	select	flags[kvm_guest_selector, int16]
	type	int8
	present	int8
	dpl	int8
	db	int8
	s	int8
	l	int8
	g	int8
	avl	int8
	unusabl	int8
	padding const[0, int8]
}

kvm_dtable {
	base	flags[kvm_guest_addrs, int64]
	limit	flags[kvm_guest_addrs, int16]
	pad	array[const[0, int16], 3]
}

kvm_fpu {
	fpr	array[const[0, int64], 16]
	fcw	int16
	fsw	int8
	ftws	int8
	pad1	const[0, int8]
	opcode	int16
	lastip	flags[kvm_guest_addrs, int64]
	lastdp	flags[kvm_guest_addrs, int64]
	xmm	array[const[0, int64], 32]
	mxcsr	int32
	pad2	const[0, int32]
}

kvm_debugregs {
	db	array[flags[kvm_guest_addrs, int64], 4]
	dr6	int64
	dr7	flags[kvm_x86_dr7, int64]
	flags	int64
	reserv	array[const[0, int64], 9]
}

kvm_msrs {
	nmsrs	len[entries, int32]
	pad	const[0, int32]
	entries	array[kvm_msr_entry]
} [packed]

kvm_msr_entry {
	index	int32
	reserv	const[0, int32]
	data	int64
}

kvm_irqchip {
	chipid	flags[kvm_chip_id, int32]
	pad	const[0, int32]
	chip	kvm_irq_chip
}

kvm_irq_chip [
	pic	kvm_pic_state
	ioapic	kvm_ioapic_state
]

kvm_pic_state {
	lastirr	int8
	irr	int8
	imr	int8
	isr	int8
	padd	int8
	irqbase	int8
	readreg	int8
	poll	int8
	special	int8
	initst	int8
	autoeoi	int8
	rotate	int8
	nestedm	int8
	init4	int8
	elcr	int8
	elcrmas	int8
}

kvm_ioapic_state {
	base	flags[kvm_guest_addrs, int64]
	ioregs	int32
	id	int32
	irr	int32
	pad	const[0, int32]
	redir	array[kvm_ioapic_redir, 24]
}

kvm_ioapic_redir {
	vector	int8
	f0	int8
	f1	int8
	reserv	array[const[0, int8], 4]
	destid	int8
}

kvm_tpr_access_ctl {
	enabled	int32
	flags	int32
	reserv	array[const[0, int32], 8]
}

kvm_mce_cap {
	banks	int8[0:32]
	flags	flags[kvm_mce_flags, int8]
	count	int8
	pad	const[0, int8]
}

kvm_x86_mce {
	status	flags[kvm_mce_status, int64]
	addr	flags[kvm_guest_addrs, int64]
	misc	int64
	mcg	flags[kvm_mcg_status, int64]
	bank	int8[0:32]
	pad1	array[const[0, int8], 7]
	pad2	array[const[0, int64], 3]
}

kvm_reinject_control {
	reinjec	int8
	reserv	array[const[0, int8], 31]
}

kvm_coalesced_mmio_zone {
	addr	flags[kvm_guest_addrs, int64]
	size	flags[kvm_guest_addr_size, int32]
	pad	const[0, int32]
}

kvm_vcpu_init {
	target	flags[kvm_vcpu_target, int32]
	feature	flags[kvm_vcpu_features_arm64, int32]
	pad	array[const[0, int32], 6]
}
