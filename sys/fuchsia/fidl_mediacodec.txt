# Copyright 2018 The Fuchsia Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be found in the LICENSE file.
#
# WARNING: This file is machine generated by fidlgen.

include <fuchsia/mediacodec/c/fidl.h>
fuchsia_mediacodec_AudioBitrateMode = fuchsia_mediacodec_AudioBitrateMode_UNSPECIFIED, fuchsia_mediacodec_AudioBitrateMode_CBR, fuchsia_mediacodec_AudioBitrateMode_VBR
fuchsia_mediacodec_AudioPcmMode = fuchsia_mediacodec_AudioPcmMode_LINEAR, fuchsia_mediacodec_AudioPcmMode_ALAW, fuchsia_mediacodec_AudioPcmMode_MULAW

fuchsia_mediacodec_CodecBufferConstraintsHandles {
	default_settings		fuchsia_mediacodec_CodecPortBufferSettingsHandles
	very_temp_kludge_bti_handle	zx_handle
} [packed]

fuchsia_mediacodec_CodecOutputConfigHandles {
	buffer_constraints	fuchsia_mediacodec_CodecBufferConstraintsHandles
	format_details		fuchsia_mediacodec_CodecFormatDetailsHandles
} [packed]

fuchsia_mediacodec_CodecPortBufferSettingsInLine {
	buffer_lifetime_ordinal			int64
	buffer_constraints_version_ordinal	int64
	packet_count_for_codec			int32
	packet_count_for_client			int32
	per_packet_buffer_bytes			int32
	single_buffer_mode			int8
} [packed]

fuchsia_mediacodec_CodecPortBufferSettingsOutOfLine {
	void	void
} [packed]

fuchsia_mediacodec_CodecPortBufferSettingsHandles {
	void	void
} [packed]

fuchsia_mediacodec_CodecBufferInLine {
	buffer_lifetime_ordinal	int64
	buffer_index		int32
	dataInLine		fuchsia_mediacodec_CodecBufferDataInLine
} [packed]

fuchsia_mediacodec_CodecBufferOutOfLine {
	void	void
} [packed]

fuchsia_mediacodec_CodecBufferHandles {
	void	void
} [packed]

fuchsia_mediacodec_CodecBufferDataVmoInLine {
	vmo_handle		flags[fidl_handle_presence, int32]
	vmo_usable_start	int64
	vmo_usable_size		int64
} [packed]

fuchsia_mediacodec_CodecPacketHeaderInLine {
	buffer_lifetime_ordinal	int64
	packet_index		int32
} [packed]

fuchsia_mediacodec_CodecPacketHeaderOutOfLine {
	void	void
} [packed]

fuchsia_mediacodec_CodecPacketHeaderHandles {
	void	void
} [packed]

fuchsia_mediacodec_CodecPacketInLine {
	headerInLine		fuchsia_mediacodec_CodecPacketHeaderInLine
	stream_lifetime_ordinal	int64
	start_offset		int32
	valid_length_bytes	int32
	has_timestamp_ish	int8
	timestamp_ish		int64
	start_access_unit	int8
	known_end_access_unit	int8
} [packed]

fuchsia_mediacodec_CodecPacketOutOfLine {
	headerOutOfLine	fuchsia_mediacodec_CodecPacketHeaderOutOfLine
} [packed]

fuchsia_mediacodec_CodecPacketHandles {
	header	fuchsia_mediacodec_CodecPacketHeaderHandles
} [packed]

fuchsia_mediacodec_ParameterInLine {
	scopeInLine	fidl_string
	nameInLine	fidl_string
	valueInLine	fuchsia_mediacodec_ValueInLine
} [packed]

fuchsia_mediacodec_ParameterOutOfLine {
	scopeOutOfLine	fidl_aligned[stringnoz]
	nameOutOfLine	fidl_aligned[stringnoz]
} [packed]

fuchsia_mediacodec_ParameterHandles {
	void	void
} [packed]

fuchsia_mediacodec_AudioCompressedFormatAacEncoderInLine {
	bits_per_second	int32
	bitrate_mode	flags[fuchsia_mediacodec_AudioBitrateMode, int32]
} [packed]

fuchsia_mediacodec_PcmFormatInLine {
	pcm_mode		flags[fuchsia_mediacodec_AudioPcmMode, int32]
	bits_per_sample		int32
	frames_per_second	int32
	channel_mapInLine	fidl_vector
} [packed]

fuchsia_mediacodec_VideoUncompressedFormatInLine {
	fourcc				int32
	primary_width_pixels		int32
	primary_height_pixels		int32
	secondary_width_pixels		int32
	secondary_height_pixels		int32
	planar				int8
	swizzled			int8
	primary_line_stride_bytes	int32
	secondary_line_stride_bytes	int32
	primary_start_offset		int32
	secondary_start_offset		int32
	tertiary_start_offset		int32
	primary_pixel_stride		int32
	secondary_pixel_stride		int32
	special_formatsInLine		fuchsia_mediacodec_VideoUncompressedFormatSpecificDetailsInLine
} [packed]

fuchsia_mediacodec_CodecFormatDetailsInLine {
	format_details_version_ordinal	int64
	mime_typeInLine			fidl_string
	codec_oob_bytesInLine		fidl_vector
	domainInLine			fuchsia_mediacodec_DomainFormatInLine
	pass_through_parametersInLine	fidl_vector
} [packed]

fuchsia_mediacodec_CodecFormatDetailsOutOfLine {
	mime_typeOutOfLine			fidl_aligned[stringnoz]
	codec_oob_bytesOutOfLine		array[int8]
	pass_through_parametersOutOfLine	parallel_array[fuchsia_mediacodec_ParameterInLine, fuchsia_mediacodec_ParameterOutOfLine]
} [packed]

fuchsia_mediacodec_CodecFormatDetailsHandles {
	pass_through_parameters	array[fuchsia_mediacodec_ParameterHandles]
} [packed]

fuchsia_mediacodec_CreateDecoder_ParamsInLine {
	input_detailsInLine			fuchsia_mediacodec_CodecFormatDetailsInLine
	promise_separate_access_units_on_input	int8
	require_can_stream_bytes_input		int8
	require_can_find_start			int8
	require_can_re_sync			int8
	require_report_all_detected_errors	int8
	require_hw				int8
	permit_lack_of_split_header_handling	int8
} [packed]

fuchsia_mediacodec_CreateDecoder_ParamsOutOfLine {
	input_detailsOutOfLine	fuchsia_mediacodec_CodecFormatDetailsOutOfLine
} [packed]

fuchsia_mediacodec_CreateDecoder_ParamsHandles {
	input_details	fuchsia_mediacodec_CodecFormatDetailsHandles
} [packed]

fuchsia_mediacodec_CodecDescriptionHandles {
	void	void
} [packed]

fuchsia_mediacodec_CodecBufferDataInLine [
	vmoInLine	fidl_union_member[fuchsia_mediacodec_CodecBufferDataTag_vmo, fuchsia_mediacodec_CodecBufferDataVmoInLine]
]

fuchsia_mediacodec_ValueInLine [
	bool_value		fidl_union_member[fuchsia_mediacodec_ValueTag_bool_value, int8]
	uint64_value		fidl_union_member[fuchsia_mediacodec_ValueTag_uint64_value, int64]
	int64_value		fidl_union_member[fuchsia_mediacodec_ValueTag_int64_value, int64]
	string_valueInLine	fidl_union_member[fuchsia_mediacodec_ValueTag_string_value, fidl_string]
	bytes_valueInLine	fidl_union_member[fuchsia_mediacodec_ValueTag_bytes_value, fidl_vector]
]

fuchsia_mediacodec_AudioCompressedFormatInLine [
	aacInLine	fidl_union_member[fuchsia_mediacodec_AudioCompressedFormatTag_aac, fuchsia_mediacodec_AudioCompressedFormatAacEncoderInLine]
]

fuchsia_mediacodec_AudioUncompressedFormatInLine [
	pcmInLine	fidl_union_member[fuchsia_mediacodec_AudioUncompressedFormatTag_pcm, fuchsia_mediacodec_PcmFormatInLine]
]

fuchsia_mediacodec_AudioFormatInLine [
	compressedInLine	fidl_union_member[fuchsia_mediacodec_AudioFormatTag_compressed, fuchsia_mediacodec_AudioCompressedFormatInLine]
	uncompressedInLine	fidl_union_member[fuchsia_mediacodec_AudioFormatTag_uncompressed, fuchsia_mediacodec_AudioUncompressedFormatInLine]
]

fuchsia_mediacodec_VideoCompressedFormatInLine [
	temp_field_todo_remove	fidl_union_member[fuchsia_mediacodec_VideoCompressedFormatTag_temp_field_todo_remove, int32]
]

fuchsia_mediacodec_VideoUncompressedFormatSpecificDetailsInLine [
	temp_field_todo_remove	fidl_union_member[fuchsia_mediacodec_VideoUncompressedFormatSpecificDetailsTag_temp_field_todo_remove, int32]
]

fuchsia_mediacodec_VideoFormatInLine [
	compressedInLine	fidl_union_member[fuchsia_mediacodec_VideoFormatTag_compressed, fuchsia_mediacodec_VideoCompressedFormatInLine]
	uncompressedInLine	fidl_union_member[fuchsia_mediacodec_VideoFormatTag_uncompressed, fuchsia_mediacodec_VideoUncompressedFormatInLine]
]

fuchsia_mediacodec_DomainFormatInLine [
	audioInLine	fidl_union_member[fuchsia_mediacodec_DomainFormatTag_audio, fuchsia_mediacodec_AudioFormatInLine]
	videoInLine	fidl_union_member[fuchsia_mediacodec_DomainFormatTag_video, fuchsia_mediacodec_VideoFormatInLine]
]

fuchsia_mediacodec_CodecEnableOnStreamFailedRequest {
	hdr	fidl_message_header[1]
} [packed]

fuchsia_mediacodec_CodecEnableOnStreamFailedRequestHandles {
	void	void
} [packed]

fuchsia_mediacodec_CodecOnStreamFailedEventHandles {
	void	void
} [packed]

fuchsia_mediacodec_CodecOnInputConstraintsEventHandles {
	input_constraints	fuchsia_mediacodec_CodecBufferConstraintsHandles
} [packed]

fuchsia_mediacodec_CodecSetInputBufferSettingsRequest {
	hdr			fidl_message_header[4]
	input_settingsInLine	fuchsia_mediacodec_CodecPortBufferSettingsInLine
	input_settingsOutOfLine	fuchsia_mediacodec_CodecPortBufferSettingsOutOfLine
} [packed]

fuchsia_mediacodec_CodecSetInputBufferSettingsRequestHandles {
	input_settings	fuchsia_mediacodec_CodecPortBufferSettingsHandles
} [packed]

fuchsia_mediacodec_CodecAddInputBufferRequest {
	hdr		fidl_message_header[5]
	bufferInLine	fuchsia_mediacodec_CodecBufferInLine
	bufferOutOfLine	fuchsia_mediacodec_CodecBufferOutOfLine
} [packed]

fuchsia_mediacodec_CodecAddInputBufferRequestHandles {
	buffer_	fuchsia_mediacodec_CodecBufferHandles
} [packed]

fuchsia_mediacodec_CodecOnOutputConfigEventHandles {
	output_config	fuchsia_mediacodec_CodecOutputConfigHandles
} [packed]

fuchsia_mediacodec_CodecSetOutputBufferSettingsRequest {
	hdr				fidl_message_header[7]
	output_settingsInLine		fuchsia_mediacodec_CodecPortBufferSettingsInLine
	output_settingsOutOfLine	fuchsia_mediacodec_CodecPortBufferSettingsOutOfLine
} [packed]

fuchsia_mediacodec_CodecSetOutputBufferSettingsRequestHandles {
	output_settings	fuchsia_mediacodec_CodecPortBufferSettingsHandles
} [packed]

fuchsia_mediacodec_CodecAddOutputBufferRequest {
	hdr		fidl_message_header[8]
	bufferInLine	fuchsia_mediacodec_CodecBufferInLine
	bufferOutOfLine	fuchsia_mediacodec_CodecBufferOutOfLine
} [packed]

fuchsia_mediacodec_CodecAddOutputBufferRequestHandles {
	buffer_	fuchsia_mediacodec_CodecBufferHandles
} [packed]

fuchsia_mediacodec_CodecFlushEndOfStreamAndCloseStreamRequest {
	hdr			fidl_message_header[9]
	stream_lifetime_ordinal	int64
} [packed]

fuchsia_mediacodec_CodecFlushEndOfStreamAndCloseStreamRequestHandles {
	void	void
} [packed]

fuchsia_mediacodec_CodecCloseCurrentStreamRequest {
	hdr			fidl_message_header[10]
	stream_lifetime_ordinal	int64
	release_input_buffers	int8
	release_output_buffers	int8
} [packed]

fuchsia_mediacodec_CodecCloseCurrentStreamRequestHandles {
	void	void
} [packed]

fuchsia_mediacodec_CodecSyncRequest {
	hdr	fidl_message_header[11]
} [packed]

fuchsia_mediacodec_CodecSyncRequestHandles {
	void	void
} [packed]

fuchsia_mediacodec_CodecSyncResponseHandles {
	void	void
} [packed]

fuchsia_mediacodec_CodecOnOutputPacketEventHandles {
	output_packet	fuchsia_mediacodec_CodecPacketHandles
} [packed]

fuchsia_mediacodec_CodecRecycleOutputPacketRequest {
	hdr					fidl_message_header[13]
	available_output_packetInLine		fuchsia_mediacodec_CodecPacketHeaderInLine
	available_output_packetOutOfLine	fuchsia_mediacodec_CodecPacketHeaderOutOfLine
} [packed]

fuchsia_mediacodec_CodecRecycleOutputPacketRequestHandles {
	available_output_packet	fuchsia_mediacodec_CodecPacketHeaderHandles
} [packed]

fuchsia_mediacodec_CodecOnOutputEndOfStreamEventHandles {
	void	void
} [packed]

fuchsia_mediacodec_CodecQueueInputFormatDetailsRequest {
	hdr			fidl_message_header[15]
	stream_lifetime_ordinal	int64
	format_detailsInLine	fuchsia_mediacodec_CodecFormatDetailsInLine
	format_detailsOutOfLine	fuchsia_mediacodec_CodecFormatDetailsOutOfLine
} [packed]

fuchsia_mediacodec_CodecQueueInputFormatDetailsRequestHandles {
	format_details	fuchsia_mediacodec_CodecFormatDetailsHandles
} [packed]

fuchsia_mediacodec_CodecQueueInputPacketRequest {
	hdr		fidl_message_header[16]
	packetInLine	fuchsia_mediacodec_CodecPacketInLine
	packetOutOfLine	fuchsia_mediacodec_CodecPacketOutOfLine
} [packed]

fuchsia_mediacodec_CodecQueueInputPacketRequestHandles {
	packet	fuchsia_mediacodec_CodecPacketHandles
} [packed]

fuchsia_mediacodec_CodecOnFreeInputPacketEventHandles {
	free_input_packet	fuchsia_mediacodec_CodecPacketHeaderHandles
} [packed]

fuchsia_mediacodec_CodecQueueInputEndOfStreamRequest {
	hdr			fidl_message_header[18]
	stream_lifetime_ordinal	int64
} [packed]

fuchsia_mediacodec_CodecQueueInputEndOfStreamRequestHandles {
	void	void
} [packed]

resource zx_chan_fuchsia_mediacodec_Codec_client[zx_chan]
resource zx_chan_fuchsia_mediacodec_Codec_server[zx_chan]

zx_channel_create$fuchsia_mediacodec_Codec(options const[0], out0 ptr[out, zx_chan_fuchsia_mediacodec_Codec_client], out1 ptr[out, zx_chan_fuchsia_mediacodec_Codec_server])
fdio_service_connect$fuchsia_mediacodec_Codec(path ptr[in, string["/svc/"]], handle zx_chan_fuchsia_mediacodec_Codec_server)
zx_channel_write$fuchsia_mediacodec_CodecEnableOnStreamFailed(handle zx_chan_fuchsia_mediacodec_Codec_client, options const[0], bytes ptr[in, fuchsia_mediacodec_CodecEnableOnStreamFailedRequest], num_bytes bytesize[bytes], handles ptr[in, fuchsia_mediacodec_CodecEnableOnStreamFailedRequestHandles], num_handles bytesize[handles])
zx_channel_read$fuchsia_mediacodec_CodecOnStreamFailed(handle zx_chan_fuchsia_mediacodec_Codec_client, options const[0], bytes ptr[out, array[int8, ZX_CHANNEL_MAX_MSG_BYTES]], num_bytes bytesize[bytes], handles ptr[out, fuchsia_mediacodec_CodecOnStreamFailedEventHandles], num_handles bytesize[handles], actual_bytes ptr[out, int32], actual_handles ptr[out, int32])
zx_channel_read$fuchsia_mediacodec_CodecOnInputConstraints(handle zx_chan_fuchsia_mediacodec_Codec_client, options const[0], bytes ptr[out, array[int8, ZX_CHANNEL_MAX_MSG_BYTES]], num_bytes bytesize[bytes], handles ptr[out, fuchsia_mediacodec_CodecOnInputConstraintsEventHandles], num_handles bytesize[handles], actual_bytes ptr[out, int32], actual_handles ptr[out, int32])
zx_channel_write$fuchsia_mediacodec_CodecSetInputBufferSettings(handle zx_chan_fuchsia_mediacodec_Codec_client, options const[0], bytes ptr[in, fuchsia_mediacodec_CodecSetInputBufferSettingsRequest], num_bytes bytesize[bytes], handles ptr[in, fuchsia_mediacodec_CodecSetInputBufferSettingsRequestHandles], num_handles bytesize[handles])
zx_channel_write$fuchsia_mediacodec_CodecAddInputBuffer(handle zx_chan_fuchsia_mediacodec_Codec_client, options const[0], bytes ptr[in, fuchsia_mediacodec_CodecAddInputBufferRequest], num_bytes bytesize[bytes], handles ptr[in, fuchsia_mediacodec_CodecAddInputBufferRequestHandles], num_handles bytesize[handles])
zx_channel_read$fuchsia_mediacodec_CodecOnOutputConfig(handle zx_chan_fuchsia_mediacodec_Codec_client, options const[0], bytes ptr[out, array[int8, ZX_CHANNEL_MAX_MSG_BYTES]], num_bytes bytesize[bytes], handles ptr[out, fuchsia_mediacodec_CodecOnOutputConfigEventHandles], num_handles bytesize[handles], actual_bytes ptr[out, int32], actual_handles ptr[out, int32])
zx_channel_write$fuchsia_mediacodec_CodecSetOutputBufferSettings(handle zx_chan_fuchsia_mediacodec_Codec_client, options const[0], bytes ptr[in, fuchsia_mediacodec_CodecSetOutputBufferSettingsRequest], num_bytes bytesize[bytes], handles ptr[in, fuchsia_mediacodec_CodecSetOutputBufferSettingsRequestHandles], num_handles bytesize[handles])
zx_channel_write$fuchsia_mediacodec_CodecAddOutputBuffer(handle zx_chan_fuchsia_mediacodec_Codec_client, options const[0], bytes ptr[in, fuchsia_mediacodec_CodecAddOutputBufferRequest], num_bytes bytesize[bytes], handles ptr[in, fuchsia_mediacodec_CodecAddOutputBufferRequestHandles], num_handles bytesize[handles])
zx_channel_write$fuchsia_mediacodec_CodecFlushEndOfStreamAndCloseStream(handle zx_chan_fuchsia_mediacodec_Codec_client, options const[0], bytes ptr[in, fuchsia_mediacodec_CodecFlushEndOfStreamAndCloseStreamRequest], num_bytes bytesize[bytes], handles ptr[in, fuchsia_mediacodec_CodecFlushEndOfStreamAndCloseStreamRequestHandles], num_handles bytesize[handles])
zx_channel_write$fuchsia_mediacodec_CodecCloseCurrentStream(handle zx_chan_fuchsia_mediacodec_Codec_client, options const[0], bytes ptr[in, fuchsia_mediacodec_CodecCloseCurrentStreamRequest], num_bytes bytesize[bytes], handles ptr[in, fuchsia_mediacodec_CodecCloseCurrentStreamRequestHandles], num_handles bytesize[handles])
zx_channel_call$fuchsia_mediacodec_CodecSync(handle zx_chan_fuchsia_mediacodec_Codec_client, options const[0], deadline zx_time, args ptr[in, fidl_call_args[fuchsia_mediacodec_CodecSyncRequest, fuchsia_mediacodec_CodecSyncRequestHandles, array[int8, ZX_CHANNEL_MAX_MSG_BYTES], fuchsia_mediacodec_CodecSyncResponseHandles]], actual_bytes ptr[out, int32], actual_handles ptr[out, int32])
zx_channel_read$fuchsia_mediacodec_CodecOnOutputPacket(handle zx_chan_fuchsia_mediacodec_Codec_client, options const[0], bytes ptr[out, array[int8, ZX_CHANNEL_MAX_MSG_BYTES]], num_bytes bytesize[bytes], handles ptr[out, fuchsia_mediacodec_CodecOnOutputPacketEventHandles], num_handles bytesize[handles], actual_bytes ptr[out, int32], actual_handles ptr[out, int32])
zx_channel_write$fuchsia_mediacodec_CodecRecycleOutputPacket(handle zx_chan_fuchsia_mediacodec_Codec_client, options const[0], bytes ptr[in, fuchsia_mediacodec_CodecRecycleOutputPacketRequest], num_bytes bytesize[bytes], handles ptr[in, fuchsia_mediacodec_CodecRecycleOutputPacketRequestHandles], num_handles bytesize[handles])
zx_channel_read$fuchsia_mediacodec_CodecOnOutputEndOfStream(handle zx_chan_fuchsia_mediacodec_Codec_client, options const[0], bytes ptr[out, array[int8, ZX_CHANNEL_MAX_MSG_BYTES]], num_bytes bytesize[bytes], handles ptr[out, fuchsia_mediacodec_CodecOnOutputEndOfStreamEventHandles], num_handles bytesize[handles], actual_bytes ptr[out, int32], actual_handles ptr[out, int32])
zx_channel_write$fuchsia_mediacodec_CodecQueueInputFormatDetails(handle zx_chan_fuchsia_mediacodec_Codec_client, options const[0], bytes ptr[in, fuchsia_mediacodec_CodecQueueInputFormatDetailsRequest], num_bytes bytesize[bytes], handles ptr[in, fuchsia_mediacodec_CodecQueueInputFormatDetailsRequestHandles], num_handles bytesize[handles])
zx_channel_write$fuchsia_mediacodec_CodecQueueInputPacket(handle zx_chan_fuchsia_mediacodec_Codec_client, options const[0], bytes ptr[in, fuchsia_mediacodec_CodecQueueInputPacketRequest], num_bytes bytesize[bytes], handles ptr[in, fuchsia_mediacodec_CodecQueueInputPacketRequestHandles], num_handles bytesize[handles])
zx_channel_read$fuchsia_mediacodec_CodecOnFreeInputPacket(handle zx_chan_fuchsia_mediacodec_Codec_client, options const[0], bytes ptr[out, array[int8, ZX_CHANNEL_MAX_MSG_BYTES]], num_bytes bytesize[bytes], handles ptr[out, fuchsia_mediacodec_CodecOnFreeInputPacketEventHandles], num_handles bytesize[handles], actual_bytes ptr[out, int32], actual_handles ptr[out, int32])
zx_channel_write$fuchsia_mediacodec_CodecQueueInputEndOfStream(handle zx_chan_fuchsia_mediacodec_Codec_client, options const[0], bytes ptr[in, fuchsia_mediacodec_CodecQueueInputEndOfStreamRequest], num_bytes bytesize[bytes], handles ptr[in, fuchsia_mediacodec_CodecQueueInputEndOfStreamRequestHandles], num_handles bytesize[handles])

fuchsia_mediacodec_CodecFactoryOnCodecListEventHandles {
	codecs	array[fuchsia_mediacodec_CodecDescriptionHandles]
} [packed]

fuchsia_mediacodec_CodecFactoryCreateDecoderRequest {
	hdr			fidl_message_header[2]
	decoder_paramsInLine	fuchsia_mediacodec_CreateDecoder_ParamsInLine
	decoder			flags[fidl_handle_presence, int32]
	decoder_paramsOutOfLine	fuchsia_mediacodec_CreateDecoder_ParamsOutOfLine
} [packed]

fuchsia_mediacodec_CodecFactoryCreateDecoderRequestHandles {
	decoder_params	fuchsia_mediacodec_CreateDecoder_ParamsHandles
	decoder		zx_chan_fuchsia_mediacodec_Codec_server
} [packed]

resource zx_chan_fuchsia_mediacodec_CodecFactory_client[zx_chan]
resource zx_chan_fuchsia_mediacodec_CodecFactory_server[zx_chan]

zx_channel_create$fuchsia_mediacodec_CodecFactory(options const[0], out0 ptr[out, zx_chan_fuchsia_mediacodec_CodecFactory_client], out1 ptr[out, zx_chan_fuchsia_mediacodec_CodecFactory_server])
fdio_service_connect$fuchsia_mediacodec_CodecFactory(path ptr[in, string["/svc/fuchsia.mediacodec.CodecFactory"]], handle zx_chan_fuchsia_mediacodec_CodecFactory_server)
zx_channel_read$fuchsia_mediacodec_CodecFactoryOnCodecList(handle zx_chan_fuchsia_mediacodec_CodecFactory_client, options const[0], bytes ptr[out, array[int8, ZX_CHANNEL_MAX_MSG_BYTES]], num_bytes bytesize[bytes], handles ptr[out, fuchsia_mediacodec_CodecFactoryOnCodecListEventHandles], num_handles bytesize[handles], actual_bytes ptr[out, int32], actual_handles ptr[out, int32])
zx_channel_write$fuchsia_mediacodec_CodecFactoryCreateDecoder(handle zx_chan_fuchsia_mediacodec_CodecFactory_client, options const[0], bytes ptr[in, fuchsia_mediacodec_CodecFactoryCreateDecoderRequest], num_bytes bytesize[bytes], handles ptr[in, fuchsia_mediacodec_CodecFactoryCreateDecoderRequestHandles], num_handles bytesize[handles])
