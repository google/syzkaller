# Copyright 2018 The Fuchsia Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be found in the LICENSE file.
#
# WARNING: This file is machine generated by fidlgen.

include <fuchsia/cobalt/c/fidl.h>
fuchsia_cobalt_ReleaseStage = fuchsia_cobalt_ReleaseStage_GA, fuchsia_cobalt_ReleaseStage_DOGFOOD, fuchsia_cobalt_ReleaseStage_FISHFOOD, fuchsia_cobalt_ReleaseStage_DEBUG

fuchsia_cobalt_ProjectProfileInLine {
	configInLine	fuchsia_mem_BufferInLine
	release_stage	flags[fuchsia_cobalt_ReleaseStage, int32]
} [packed]

fuchsia_cobalt_ProjectProfileOutOfLine {
	configOutOfLine	fuchsia_mem_BufferOutOfLine
} [packed]

fuchsia_cobalt_ProjectProfileHandles {
	config	fuchsia_mem_BufferHandles
} [packed]

fuchsia_cobalt_CustomEventValueInLine {
	dimension_nameInLine	fidl_string
	valueInLine		fuchsia_cobalt_ValueInLine
} [packed]

fuchsia_cobalt_CustomEventValueOutOfLine {
	dimension_nameOutOfLine	fidl_aligned[stringnoz]
} [packed]

fuchsia_cobalt_CustomEventValueHandles {
	void	void
} [packed]

fuchsia_cobalt_HistogramBucketInLine {
	index	int32
	count	int64
} [packed]

fuchsia_cobalt_HistogramBucketOutOfLine {
	void	void
} [packed]

fuchsia_cobalt_HistogramBucketHandles {
	void	void
} [packed]

fuchsia_cobalt_ValueInLine [
	string_valueInLine	fidl_union_member[fuchsia_cobalt_ValueTagstring_value, fidl_string]
	int_value		fidl_union_member[fuchsia_cobalt_ValueTagint_value, int64]
	double_value		fidl_union_member[fuchsia_cobalt_ValueTagdouble_value, int64]
	index_value		fidl_union_member[fuchsia_cobalt_ValueTagindex_value, int32]
]

fuchsia_cobalt_LoggerFactoryCreateLoggerRequest {
	hdr			fidl_message_header[1]
	profileInLine		fuchsia_cobalt_ProjectProfileInLine
	logger			flags[fidl_handle_presence, int32]
	profileOutOfLine	fuchsia_cobalt_ProjectProfileOutOfLine
} [packed]

fuchsia_cobalt_LoggerFactoryCreateLoggerRequestHandles {
	profile	fuchsia_cobalt_ProjectProfileHandles
	logger	zx_chan_fuchsia_cobalt_Logger_server
} [packed]

fuchsia_cobalt_LoggerFactoryCreateLoggerResponseHandles {
	void	void
} [packed]

fuchsia_cobalt_LoggerFactoryCreateLoggerExtRequest {
	hdr			fidl_message_header[2]
	profileInLine		fuchsia_cobalt_ProjectProfileInLine
	logger			flags[fidl_handle_presence, int32]
	profileOutOfLine	fuchsia_cobalt_ProjectProfileOutOfLine
} [packed]

fuchsia_cobalt_LoggerFactoryCreateLoggerExtRequestHandles {
	profile	fuchsia_cobalt_ProjectProfileHandles
	logger	zx_chan_fuchsia_cobalt_LoggerExt_server
} [packed]

fuchsia_cobalt_LoggerFactoryCreateLoggerExtResponseHandles {
	void	void
} [packed]

fuchsia_cobalt_LoggerFactoryCreateLoggerSimpleRequest {
	hdr			fidl_message_header[3]
	profileInLine		fuchsia_cobalt_ProjectProfileInLine
	logger			flags[fidl_handle_presence, int32]
	profileOutOfLine	fuchsia_cobalt_ProjectProfileOutOfLine
} [packed]

fuchsia_cobalt_LoggerFactoryCreateLoggerSimpleRequestHandles {
	profile	fuchsia_cobalt_ProjectProfileHandles
	logger	zx_chan_fuchsia_cobalt_LoggerSimple_server
} [packed]

fuchsia_cobalt_LoggerFactoryCreateLoggerSimpleResponseHandles {
	void	void
} [packed]

resource zx_chan_fuchsia_cobalt_LoggerFactory_client[zx_chan]
resource zx_chan_fuchsia_cobalt_LoggerFactory_server[zx_chan]

zx_channel_create$fuchsia_cobalt_LoggerFactory(options const[0], out0 ptr[out, zx_chan_fuchsia_cobalt_LoggerFactory_client], out1 ptr[out, zx_chan_fuchsia_cobalt_LoggerFactory_server])
fdio_service_connect$fuchsia_cobalt_LoggerFactory(path ptr[in, string["/svc/fuchsia.cobalt.LoggerFactory"]], handle zx_chan_fuchsia_cobalt_LoggerFactory_server)
zx_channel_call$fuchsia_cobalt_LoggerFactoryCreateLogger(handle zx_chan_fuchsia_cobalt_LoggerFactory_client, options const[0], deadline zx_time, args ptr[in, fidl_call_args[fuchsia_cobalt_LoggerFactoryCreateLoggerRequest, fuchsia_cobalt_LoggerFactoryCreateLoggerRequestHandles, array[int8, ZX_CHANNEL_MAX_MSG_BYTES], fuchsia_cobalt_LoggerFactoryCreateLoggerResponseHandles]], actual_bytes ptr[out, int32], actual_handles ptr[out, int32])
zx_channel_call$fuchsia_cobalt_LoggerFactoryCreateLoggerExt(handle zx_chan_fuchsia_cobalt_LoggerFactory_client, options const[0], deadline zx_time, args ptr[in, fidl_call_args[fuchsia_cobalt_LoggerFactoryCreateLoggerExtRequest, fuchsia_cobalt_LoggerFactoryCreateLoggerExtRequestHandles, array[int8, ZX_CHANNEL_MAX_MSG_BYTES], fuchsia_cobalt_LoggerFactoryCreateLoggerExtResponseHandles]], actual_bytes ptr[out, int32], actual_handles ptr[out, int32])
zx_channel_call$fuchsia_cobalt_LoggerFactoryCreateLoggerSimple(handle zx_chan_fuchsia_cobalt_LoggerFactory_client, options const[0], deadline zx_time, args ptr[in, fidl_call_args[fuchsia_cobalt_LoggerFactoryCreateLoggerSimpleRequest, fuchsia_cobalt_LoggerFactoryCreateLoggerSimpleRequestHandles, array[int8, ZX_CHANNEL_MAX_MSG_BYTES], fuchsia_cobalt_LoggerFactoryCreateLoggerSimpleResponseHandles]], actual_bytes ptr[out, int32], actual_handles ptr[out, int32])

fuchsia_cobalt_LoggerLogEventRequest {
	hdr			fidl_message_header[1]
	metric_id		int32
	event_type_index	int32
} [packed]

fuchsia_cobalt_LoggerLogEventRequestHandles {
	void	void
} [packed]

fuchsia_cobalt_LoggerLogEventResponseHandles {
	void	void
} [packed]

fuchsia_cobalt_LoggerLogEventCountRequest {
	hdr			fidl_message_header[2]
	metric_id		int32
	event_type_index	int32
	componentInLine		fidl_string
	period_duration_micros	int64
	count			int64
	componentOutOfLine	fidl_aligned[stringnoz]
} [packed]

fuchsia_cobalt_LoggerLogEventCountRequestHandles {
	void	void
} [packed]

fuchsia_cobalt_LoggerLogEventCountResponseHandles {
	void	void
} [packed]

fuchsia_cobalt_LoggerLogElapsedTimeRequest {
	hdr			fidl_message_header[3]
	metric_id		int32
	event_type_index	int32
	componentInLine		fidl_string
	elapsed_micros		int64
	componentOutOfLine	fidl_aligned[stringnoz]
} [packed]

fuchsia_cobalt_LoggerLogElapsedTimeRequestHandles {
	void	void
} [packed]

fuchsia_cobalt_LoggerLogElapsedTimeResponseHandles {
	void	void
} [packed]

fuchsia_cobalt_LoggerLogFrameRateRequest {
	hdr			fidl_message_header[4]
	metric_id		int32
	event_type_index	int32
	componentInLine		fidl_string
	fps			int32
	componentOutOfLine	fidl_aligned[stringnoz]
} [packed]

fuchsia_cobalt_LoggerLogFrameRateRequestHandles {
	void	void
} [packed]

fuchsia_cobalt_LoggerLogFrameRateResponseHandles {
	void	void
} [packed]

fuchsia_cobalt_LoggerLogMemoryUsageRequest {
	hdr			fidl_message_header[5]
	metric_id		int32
	event_type_index	int32
	componentInLine		fidl_string
	bytes			int64
	componentOutOfLine	fidl_aligned[stringnoz]
} [packed]

fuchsia_cobalt_LoggerLogMemoryUsageRequestHandles {
	void	void
} [packed]

fuchsia_cobalt_LoggerLogMemoryUsageResponseHandles {
	void	void
} [packed]

fuchsia_cobalt_LoggerLogStringRequest {
	hdr		fidl_message_header[6]
	metric_id	int32
	sInLine		fidl_string
	sOutOfLine	fidl_aligned[stringnoz]
} [packed]

fuchsia_cobalt_LoggerLogStringRequestHandles {
	void	void
} [packed]

fuchsia_cobalt_LoggerLogStringResponseHandles {
	void	void
} [packed]

fuchsia_cobalt_LoggerStartTimerRequest {
	hdr			fidl_message_header[7]
	metric_id		int32
	event_type_index	int32
	componentInLine		fidl_string
	timer_idInLine		fidl_string
	timestamp		int64
	timeout_s		int32
	componentOutOfLine	fidl_aligned[stringnoz]
	timer_idOutOfLine	fidl_aligned[stringnoz]
} [packed]

fuchsia_cobalt_LoggerStartTimerRequestHandles {
	void	void
} [packed]

fuchsia_cobalt_LoggerStartTimerResponseHandles {
	void	void
} [packed]

fuchsia_cobalt_LoggerEndTimerRequest {
	hdr			fidl_message_header[8]
	timer_idInLine		fidl_string
	timestamp		int64
	timeout_s		int32
	timer_idOutOfLine	fidl_aligned[stringnoz]
} [packed]

fuchsia_cobalt_LoggerEndTimerRequestHandles {
	void	void
} [packed]

fuchsia_cobalt_LoggerEndTimerResponseHandles {
	void	void
} [packed]

resource zx_chan_fuchsia_cobalt_Logger_client[zx_chan]
resource zx_chan_fuchsia_cobalt_Logger_server[zx_chan]

zx_channel_create$fuchsia_cobalt_Logger(options const[0], out0 ptr[out, zx_chan_fuchsia_cobalt_Logger_client], out1 ptr[out, zx_chan_fuchsia_cobalt_Logger_server])
fdio_service_connect$fuchsia_cobalt_Logger(path ptr[in, string["/svc/"]], handle zx_chan_fuchsia_cobalt_Logger_server)
zx_channel_call$fuchsia_cobalt_LoggerLogEvent(handle zx_chan_fuchsia_cobalt_Logger_client, options const[0], deadline zx_time, args ptr[in, fidl_call_args[fuchsia_cobalt_LoggerLogEventRequest, fuchsia_cobalt_LoggerLogEventRequestHandles, array[int8, ZX_CHANNEL_MAX_MSG_BYTES], fuchsia_cobalt_LoggerLogEventResponseHandles]], actual_bytes ptr[out, int32], actual_handles ptr[out, int32])
zx_channel_call$fuchsia_cobalt_LoggerLogEventCount(handle zx_chan_fuchsia_cobalt_Logger_client, options const[0], deadline zx_time, args ptr[in, fidl_call_args[fuchsia_cobalt_LoggerLogEventCountRequest, fuchsia_cobalt_LoggerLogEventCountRequestHandles, array[int8, ZX_CHANNEL_MAX_MSG_BYTES], fuchsia_cobalt_LoggerLogEventCountResponseHandles]], actual_bytes ptr[out, int32], actual_handles ptr[out, int32])
zx_channel_call$fuchsia_cobalt_LoggerLogElapsedTime(handle zx_chan_fuchsia_cobalt_Logger_client, options const[0], deadline zx_time, args ptr[in, fidl_call_args[fuchsia_cobalt_LoggerLogElapsedTimeRequest, fuchsia_cobalt_LoggerLogElapsedTimeRequestHandles, array[int8, ZX_CHANNEL_MAX_MSG_BYTES], fuchsia_cobalt_LoggerLogElapsedTimeResponseHandles]], actual_bytes ptr[out, int32], actual_handles ptr[out, int32])
zx_channel_call$fuchsia_cobalt_LoggerLogFrameRate(handle zx_chan_fuchsia_cobalt_Logger_client, options const[0], deadline zx_time, args ptr[in, fidl_call_args[fuchsia_cobalt_LoggerLogFrameRateRequest, fuchsia_cobalt_LoggerLogFrameRateRequestHandles, array[int8, ZX_CHANNEL_MAX_MSG_BYTES], fuchsia_cobalt_LoggerLogFrameRateResponseHandles]], actual_bytes ptr[out, int32], actual_handles ptr[out, int32])
zx_channel_call$fuchsia_cobalt_LoggerLogMemoryUsage(handle zx_chan_fuchsia_cobalt_Logger_client, options const[0], deadline zx_time, args ptr[in, fidl_call_args[fuchsia_cobalt_LoggerLogMemoryUsageRequest, fuchsia_cobalt_LoggerLogMemoryUsageRequestHandles, array[int8, ZX_CHANNEL_MAX_MSG_BYTES], fuchsia_cobalt_LoggerLogMemoryUsageResponseHandles]], actual_bytes ptr[out, int32], actual_handles ptr[out, int32])
zx_channel_call$fuchsia_cobalt_LoggerLogString(handle zx_chan_fuchsia_cobalt_Logger_client, options const[0], deadline zx_time, args ptr[in, fidl_call_args[fuchsia_cobalt_LoggerLogStringRequest, fuchsia_cobalt_LoggerLogStringRequestHandles, array[int8, ZX_CHANNEL_MAX_MSG_BYTES], fuchsia_cobalt_LoggerLogStringResponseHandles]], actual_bytes ptr[out, int32], actual_handles ptr[out, int32])
zx_channel_call$fuchsia_cobalt_LoggerStartTimer(handle zx_chan_fuchsia_cobalt_Logger_client, options const[0], deadline zx_time, args ptr[in, fidl_call_args[fuchsia_cobalt_LoggerStartTimerRequest, fuchsia_cobalt_LoggerStartTimerRequestHandles, array[int8, ZX_CHANNEL_MAX_MSG_BYTES], fuchsia_cobalt_LoggerStartTimerResponseHandles]], actual_bytes ptr[out, int32], actual_handles ptr[out, int32])
zx_channel_call$fuchsia_cobalt_LoggerEndTimer(handle zx_chan_fuchsia_cobalt_Logger_client, options const[0], deadline zx_time, args ptr[in, fidl_call_args[fuchsia_cobalt_LoggerEndTimerRequest, fuchsia_cobalt_LoggerEndTimerRequestHandles, array[int8, ZX_CHANNEL_MAX_MSG_BYTES], fuchsia_cobalt_LoggerEndTimerResponseHandles]], actual_bytes ptr[out, int32], actual_handles ptr[out, int32])

fuchsia_cobalt_LoggerExtLogIntHistogramRequest {
	hdr			fidl_message_header[100]
	metric_id		int32
	event_type_index	int32
	componentInLine		fidl_string
	histogramInLine		fidl_vector
	componentOutOfLine	fidl_aligned[stringnoz]
	histogramOutOfLine	parallel_array[fuchsia_cobalt_HistogramBucketInLine, fuchsia_cobalt_HistogramBucketOutOfLine]
} [packed]

fuchsia_cobalt_LoggerExtLogIntHistogramRequestHandles {
	histogram	array[fuchsia_cobalt_HistogramBucketHandles]
} [packed]

fuchsia_cobalt_LoggerExtLogIntHistogramResponseHandles {
	void	void
} [packed]

fuchsia_cobalt_LoggerExtLogCustomEventRequest {
	hdr			fidl_message_header[101]
	metric_id		int32
	event_valuesInLine	fidl_vector
	event_valuesOutOfLine	parallel_array[fuchsia_cobalt_CustomEventValueInLine, fuchsia_cobalt_CustomEventValueOutOfLine]
} [packed]

fuchsia_cobalt_LoggerExtLogCustomEventRequestHandles {
	event_values	array[fuchsia_cobalt_CustomEventValueHandles]
} [packed]

fuchsia_cobalt_LoggerExtLogCustomEventResponseHandles {
	void	void
} [packed]

resource zx_chan_fuchsia_cobalt_LoggerExt_client[zx_chan]
resource zx_chan_fuchsia_cobalt_LoggerExt_server[zx_chan]

zx_channel_create$fuchsia_cobalt_LoggerExt(options const[0], out0 ptr[out, zx_chan_fuchsia_cobalt_LoggerExt_client], out1 ptr[out, zx_chan_fuchsia_cobalt_LoggerExt_server])
fdio_service_connect$fuchsia_cobalt_LoggerExt(path ptr[in, string["/svc/"]], handle zx_chan_fuchsia_cobalt_LoggerExt_server)
zx_channel_call$fuchsia_cobalt_LoggerExtLogIntHistogram(handle zx_chan_fuchsia_cobalt_LoggerExt_client, options const[0], deadline zx_time, args ptr[in, fidl_call_args[fuchsia_cobalt_LoggerExtLogIntHistogramRequest, fuchsia_cobalt_LoggerExtLogIntHistogramRequestHandles, array[int8, ZX_CHANNEL_MAX_MSG_BYTES], fuchsia_cobalt_LoggerExtLogIntHistogramResponseHandles]], actual_bytes ptr[out, int32], actual_handles ptr[out, int32])
zx_channel_call$fuchsia_cobalt_LoggerExtLogCustomEvent(handle zx_chan_fuchsia_cobalt_LoggerExt_client, options const[0], deadline zx_time, args ptr[in, fidl_call_args[fuchsia_cobalt_LoggerExtLogCustomEventRequest, fuchsia_cobalt_LoggerExtLogCustomEventRequestHandles, array[int8, ZX_CHANNEL_MAX_MSG_BYTES], fuchsia_cobalt_LoggerExtLogCustomEventResponseHandles]], actual_bytes ptr[out, int32], actual_handles ptr[out, int32])

fuchsia_cobalt_LoggerSimpleLogIntHistogramRequest {
	hdr			fidl_message_header[100]
	metric_id		int32
	event_type_index	int32
	componentInLine		fidl_string
	bucket_indicesInLine	fidl_vector
	bucket_countsInLine	fidl_vector
	componentOutOfLine	fidl_aligned[stringnoz]
	bucket_indicesOutOfLine	array[int32]
	bucket_countsOutOfLine	array[int64]
} [packed]

fuchsia_cobalt_LoggerSimpleLogIntHistogramRequestHandles {
	void	void
} [packed]

fuchsia_cobalt_LoggerSimpleLogIntHistogramResponseHandles {
	void	void
} [packed]

resource zx_chan_fuchsia_cobalt_LoggerSimple_client[zx_chan]
resource zx_chan_fuchsia_cobalt_LoggerSimple_server[zx_chan]

zx_channel_create$fuchsia_cobalt_LoggerSimple(options const[0], out0 ptr[out, zx_chan_fuchsia_cobalt_LoggerSimple_client], out1 ptr[out, zx_chan_fuchsia_cobalt_LoggerSimple_server])
fdio_service_connect$fuchsia_cobalt_LoggerSimple(path ptr[in, string["/svc/"]], handle zx_chan_fuchsia_cobalt_LoggerSimple_server)
zx_channel_call$fuchsia_cobalt_LoggerSimpleLogIntHistogram(handle zx_chan_fuchsia_cobalt_LoggerSimple_client, options const[0], deadline zx_time, args ptr[in, fidl_call_args[fuchsia_cobalt_LoggerSimpleLogIntHistogramRequest, fuchsia_cobalt_LoggerSimpleLogIntHistogramRequestHandles, array[int8, ZX_CHANNEL_MAX_MSG_BYTES], fuchsia_cobalt_LoggerSimpleLogIntHistogramResponseHandles]], actual_bytes ptr[out, int32], actual_handles ptr[out, int32])

fuchsia_cobalt_ControllerRequestSendSoonRequest {
	hdr	fidl_message_header[1]
} [packed]

fuchsia_cobalt_ControllerRequestSendSoonRequestHandles {
	void	void
} [packed]

fuchsia_cobalt_ControllerRequestSendSoonResponseHandles {
	void	void
} [packed]

fuchsia_cobalt_ControllerBlockUntilEmptyRequest {
	hdr			fidl_message_header[2]
	max_wait_seconds	int32
} [packed]

fuchsia_cobalt_ControllerBlockUntilEmptyRequestHandles {
	void	void
} [packed]

fuchsia_cobalt_ControllerBlockUntilEmptyResponseHandles {
	void	void
} [packed]

fuchsia_cobalt_ControllerGetNumSendAttemptsRequest {
	hdr	fidl_message_header[3]
} [packed]

fuchsia_cobalt_ControllerGetNumSendAttemptsRequestHandles {
	void	void
} [packed]

fuchsia_cobalt_ControllerGetNumSendAttemptsResponseHandles {
	void	void
} [packed]

fuchsia_cobalt_ControllerGetFailedSendAttemptsRequest {
	hdr	fidl_message_header[4]
} [packed]

fuchsia_cobalt_ControllerGetFailedSendAttemptsRequestHandles {
	void	void
} [packed]

fuchsia_cobalt_ControllerGetFailedSendAttemptsResponseHandles {
	void	void
} [packed]

resource zx_chan_fuchsia_cobalt_Controller_client[zx_chan]
resource zx_chan_fuchsia_cobalt_Controller_server[zx_chan]

zx_channel_create$fuchsia_cobalt_Controller(options const[0], out0 ptr[out, zx_chan_fuchsia_cobalt_Controller_client], out1 ptr[out, zx_chan_fuchsia_cobalt_Controller_server])
fdio_service_connect$fuchsia_cobalt_Controller(path ptr[in, string["/svc/fuchsia.cobalt.Controller"]], handle zx_chan_fuchsia_cobalt_Controller_server)
zx_channel_call$fuchsia_cobalt_ControllerRequestSendSoon(handle zx_chan_fuchsia_cobalt_Controller_client, options const[0], deadline zx_time, args ptr[in, fidl_call_args[fuchsia_cobalt_ControllerRequestSendSoonRequest, fuchsia_cobalt_ControllerRequestSendSoonRequestHandles, array[int8, ZX_CHANNEL_MAX_MSG_BYTES], fuchsia_cobalt_ControllerRequestSendSoonResponseHandles]], actual_bytes ptr[out, int32], actual_handles ptr[out, int32])
zx_channel_call$fuchsia_cobalt_ControllerBlockUntilEmpty(handle zx_chan_fuchsia_cobalt_Controller_client, options const[0], deadline zx_time, args ptr[in, fidl_call_args[fuchsia_cobalt_ControllerBlockUntilEmptyRequest, fuchsia_cobalt_ControllerBlockUntilEmptyRequestHandles, array[int8, ZX_CHANNEL_MAX_MSG_BYTES], fuchsia_cobalt_ControllerBlockUntilEmptyResponseHandles]], actual_bytes ptr[out, int32], actual_handles ptr[out, int32])
zx_channel_call$fuchsia_cobalt_ControllerGetNumSendAttempts(handle zx_chan_fuchsia_cobalt_Controller_client, options const[0], deadline zx_time, args ptr[in, fidl_call_args[fuchsia_cobalt_ControllerGetNumSendAttemptsRequest, fuchsia_cobalt_ControllerGetNumSendAttemptsRequestHandles, array[int8, ZX_CHANNEL_MAX_MSG_BYTES], fuchsia_cobalt_ControllerGetNumSendAttemptsResponseHandles]], actual_bytes ptr[out, int32], actual_handles ptr[out, int32])
zx_channel_call$fuchsia_cobalt_ControllerGetFailedSendAttempts(handle zx_chan_fuchsia_cobalt_Controller_client, options const[0], deadline zx_time, args ptr[in, fidl_call_args[fuchsia_cobalt_ControllerGetFailedSendAttemptsRequest, fuchsia_cobalt_ControllerGetFailedSendAttemptsRequestHandles, array[int8, ZX_CHANNEL_MAX_MSG_BYTES], fuchsia_cobalt_ControllerGetFailedSendAttemptsResponseHandles]], actual_bytes ptr[out, int32], actual_handles ptr[out, int32])
