# Copyright 2018 The Fuchsia Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be found in the LICENSE file.
#
# WARNING: This file is machine generated by fidlgen.

include <zircon/ethernet/c/fidl.h>

zircon_ethernet_MacAddressInLine {
	octetsInLine	array[int8, 6]
} [packed]

zircon_ethernet_MacAddressOutOfLine {
	void	void
} [packed]

zircon_ethernet_MacAddressHandles {
	void	void
} [packed]

zircon_ethernet_InfoHandles {
	mac	zircon_ethernet_MacAddressHandles
} [packed]

zircon_ethernet_FifosHandles {
	rx	zx_fifo
	tx	zx_fifo
} [packed]

zircon_ethernet_DeviceGetInfoRequest {
	hdr	fidl_message_header[1]
} [packed]

zircon_ethernet_DeviceGetInfoRequestHandles {
	void	void
} [packed]

zircon_ethernet_DeviceGetInfoResponseHandles {
	info	zircon_ethernet_InfoHandles
} [packed]

zircon_ethernet_DeviceGetFifosRequest {
	hdr	fidl_message_header[2]
} [packed]

zircon_ethernet_DeviceGetFifosRequestHandles {
	void	void
} [packed]

zircon_ethernet_DeviceGetFifosResponseHandles {
	info	zircon_ethernet_FifosHandles
} [packed]

zircon_ethernet_DeviceSetIOBufferRequest {
	hdr	fidl_message_header[3]
	h	flags[fidl_handle_presence, int32]
} [packed]

zircon_ethernet_DeviceSetIOBufferRequestHandles {
	h	zx_vmo
} [packed]

zircon_ethernet_DeviceSetIOBufferResponseHandles {
	void	void
} [packed]

zircon_ethernet_DeviceStartRequest {
	hdr	fidl_message_header[4]
} [packed]

zircon_ethernet_DeviceStartRequestHandles {
	void	void
} [packed]

zircon_ethernet_DeviceStartResponseHandles {
	void	void
} [packed]

zircon_ethernet_DeviceStopRequest {
	hdr	fidl_message_header[5]
} [packed]

zircon_ethernet_DeviceStopRequestHandles {
	void	void
} [packed]

zircon_ethernet_DeviceStopResponseHandles {
	void	void
} [packed]

zircon_ethernet_DeviceListenStartRequest {
	hdr	fidl_message_header[6]
} [packed]

zircon_ethernet_DeviceListenStartRequestHandles {
	void	void
} [packed]

zircon_ethernet_DeviceListenStartResponseHandles {
	void	void
} [packed]

zircon_ethernet_DeviceListenStopRequest {
	hdr	fidl_message_header[7]
} [packed]

zircon_ethernet_DeviceListenStopRequestHandles {
	void	void
} [packed]

zircon_ethernet_DeviceListenStopResponseHandles {
	void	void
} [packed]

zircon_ethernet_DeviceSetClientNameRequest {
	hdr		fidl_message_header[8]
	nameInLine	fidl_string
	nameOutOfLine	fidl_aligned[stringnoz]
} [packed]

zircon_ethernet_DeviceSetClientNameRequestHandles {
	void	void
} [packed]

zircon_ethernet_DeviceSetClientNameResponseHandles {
	void	void
} [packed]

zircon_ethernet_DeviceGetStatusRequest {
	hdr	fidl_message_header[9]
} [packed]

zircon_ethernet_DeviceGetStatusRequestHandles {
	void	void
} [packed]

zircon_ethernet_DeviceGetStatusResponseHandles {
	void	void
} [packed]

zircon_ethernet_DeviceSetPromiscuousModeRequest {
	hdr	fidl_message_header[10]
	enabled	int8
} [packed]

zircon_ethernet_DeviceSetPromiscuousModeRequestHandles {
	void	void
} [packed]

zircon_ethernet_DeviceSetPromiscuousModeResponseHandles {
	void	void
} [packed]

zircon_ethernet_DeviceConfigMulticastAddMacRequest {
	hdr		fidl_message_header[11]
	addrInLine	zircon_ethernet_MacAddressInLine
	addrOutOfLine	zircon_ethernet_MacAddressOutOfLine
} [packed]

zircon_ethernet_DeviceConfigMulticastAddMacRequestHandles {
	addr	zircon_ethernet_MacAddressHandles
} [packed]

zircon_ethernet_DeviceConfigMulticastAddMacResponseHandles {
	void	void
} [packed]

zircon_ethernet_DeviceConfigMulticastDeleteMacRequest {
	hdr		fidl_message_header[12]
	addrInLine	zircon_ethernet_MacAddressInLine
	addrOutOfLine	zircon_ethernet_MacAddressOutOfLine
} [packed]

zircon_ethernet_DeviceConfigMulticastDeleteMacRequestHandles {
	addr	zircon_ethernet_MacAddressHandles
} [packed]

zircon_ethernet_DeviceConfigMulticastDeleteMacResponseHandles {
	void	void
} [packed]

zircon_ethernet_DeviceConfigMulticastSetPromiscuousModeRequest {
	hdr	fidl_message_header[13]
	enabled	int8
} [packed]

zircon_ethernet_DeviceConfigMulticastSetPromiscuousModeRequestHandles {
	void	void
} [packed]

zircon_ethernet_DeviceConfigMulticastSetPromiscuousModeResponseHandles {
	void	void
} [packed]

zircon_ethernet_DeviceConfigMulticastTestFilterRequest {
	hdr	fidl_message_header[14]
} [packed]

zircon_ethernet_DeviceConfigMulticastTestFilterRequestHandles {
	void	void
} [packed]

zircon_ethernet_DeviceConfigMulticastTestFilterResponseHandles {
	void	void
} [packed]

zircon_ethernet_DeviceDumpRegistersRequest {
	hdr	fidl_message_header[15]
} [packed]

zircon_ethernet_DeviceDumpRegistersRequestHandles {
	void	void
} [packed]

zircon_ethernet_DeviceDumpRegistersResponseHandles {
	void	void
} [packed]

resource zx_chan_zircon_ethernet_Device_client[zx_chan]
resource zx_chan_zircon_ethernet_Device_server[zx_chan]

zx_channel_create$zircon_ethernet_Device(options const[0], out0 ptr[out, zx_chan_zircon_ethernet_Device_client], out1 ptr[out, zx_chan_zircon_ethernet_Device_server])
fdio_service_connect$zircon_ethernet_Device(path ptr[in, string["/svc/"]], handle zx_chan_zircon_ethernet_Device_server)
zx_channel_call$zircon_ethernet_DeviceGetInfo(handle zx_chan_zircon_ethernet_Device_client, options const[0], deadline zx_time, args ptr[in, fidl_call_args[zircon_ethernet_DeviceGetInfoRequest, zircon_ethernet_DeviceGetInfoRequestHandles, array[int8, ZX_CHANNEL_MAX_MSG_BYTES], zircon_ethernet_DeviceGetInfoResponseHandles]], actual_bytes ptr[out, int32], actual_handles ptr[out, int32])
zx_channel_call$zircon_ethernet_DeviceGetFifos(handle zx_chan_zircon_ethernet_Device_client, options const[0], deadline zx_time, args ptr[in, fidl_call_args[zircon_ethernet_DeviceGetFifosRequest, zircon_ethernet_DeviceGetFifosRequestHandles, array[int8, ZX_CHANNEL_MAX_MSG_BYTES], zircon_ethernet_DeviceGetFifosResponseHandles]], actual_bytes ptr[out, int32], actual_handles ptr[out, int32])
zx_channel_call$zircon_ethernet_DeviceSetIOBuffer(handle zx_chan_zircon_ethernet_Device_client, options const[0], deadline zx_time, args ptr[in, fidl_call_args[zircon_ethernet_DeviceSetIOBufferRequest, zircon_ethernet_DeviceSetIOBufferRequestHandles, array[int8, ZX_CHANNEL_MAX_MSG_BYTES], zircon_ethernet_DeviceSetIOBufferResponseHandles]], actual_bytes ptr[out, int32], actual_handles ptr[out, int32])
zx_channel_call$zircon_ethernet_DeviceStart(handle zx_chan_zircon_ethernet_Device_client, options const[0], deadline zx_time, args ptr[in, fidl_call_args[zircon_ethernet_DeviceStartRequest, zircon_ethernet_DeviceStartRequestHandles, array[int8, ZX_CHANNEL_MAX_MSG_BYTES], zircon_ethernet_DeviceStartResponseHandles]], actual_bytes ptr[out, int32], actual_handles ptr[out, int32])
zx_channel_call$zircon_ethernet_DeviceStop(handle zx_chan_zircon_ethernet_Device_client, options const[0], deadline zx_time, args ptr[in, fidl_call_args[zircon_ethernet_DeviceStopRequest, zircon_ethernet_DeviceStopRequestHandles, array[int8, ZX_CHANNEL_MAX_MSG_BYTES], zircon_ethernet_DeviceStopResponseHandles]], actual_bytes ptr[out, int32], actual_handles ptr[out, int32])
zx_channel_call$zircon_ethernet_DeviceListenStart(handle zx_chan_zircon_ethernet_Device_client, options const[0], deadline zx_time, args ptr[in, fidl_call_args[zircon_ethernet_DeviceListenStartRequest, zircon_ethernet_DeviceListenStartRequestHandles, array[int8, ZX_CHANNEL_MAX_MSG_BYTES], zircon_ethernet_DeviceListenStartResponseHandles]], actual_bytes ptr[out, int32], actual_handles ptr[out, int32])
zx_channel_call$zircon_ethernet_DeviceListenStop(handle zx_chan_zircon_ethernet_Device_client, options const[0], deadline zx_time, args ptr[in, fidl_call_args[zircon_ethernet_DeviceListenStopRequest, zircon_ethernet_DeviceListenStopRequestHandles, array[int8, ZX_CHANNEL_MAX_MSG_BYTES], zircon_ethernet_DeviceListenStopResponseHandles]], actual_bytes ptr[out, int32], actual_handles ptr[out, int32])
zx_channel_call$zircon_ethernet_DeviceSetClientName(handle zx_chan_zircon_ethernet_Device_client, options const[0], deadline zx_time, args ptr[in, fidl_call_args[zircon_ethernet_DeviceSetClientNameRequest, zircon_ethernet_DeviceSetClientNameRequestHandles, array[int8, ZX_CHANNEL_MAX_MSG_BYTES], zircon_ethernet_DeviceSetClientNameResponseHandles]], actual_bytes ptr[out, int32], actual_handles ptr[out, int32])
zx_channel_call$zircon_ethernet_DeviceGetStatus(handle zx_chan_zircon_ethernet_Device_client, options const[0], deadline zx_time, args ptr[in, fidl_call_args[zircon_ethernet_DeviceGetStatusRequest, zircon_ethernet_DeviceGetStatusRequestHandles, array[int8, ZX_CHANNEL_MAX_MSG_BYTES], zircon_ethernet_DeviceGetStatusResponseHandles]], actual_bytes ptr[out, int32], actual_handles ptr[out, int32])
zx_channel_call$zircon_ethernet_DeviceSetPromiscuousMode(handle zx_chan_zircon_ethernet_Device_client, options const[0], deadline zx_time, args ptr[in, fidl_call_args[zircon_ethernet_DeviceSetPromiscuousModeRequest, zircon_ethernet_DeviceSetPromiscuousModeRequestHandles, array[int8, ZX_CHANNEL_MAX_MSG_BYTES], zircon_ethernet_DeviceSetPromiscuousModeResponseHandles]], actual_bytes ptr[out, int32], actual_handles ptr[out, int32])
zx_channel_call$zircon_ethernet_DeviceConfigMulticastAddMac(handle zx_chan_zircon_ethernet_Device_client, options const[0], deadline zx_time, args ptr[in, fidl_call_args[zircon_ethernet_DeviceConfigMulticastAddMacRequest, zircon_ethernet_DeviceConfigMulticastAddMacRequestHandles, array[int8, ZX_CHANNEL_MAX_MSG_BYTES], zircon_ethernet_DeviceConfigMulticastAddMacResponseHandles]], actual_bytes ptr[out, int32], actual_handles ptr[out, int32])
zx_channel_call$zircon_ethernet_DeviceConfigMulticastDeleteMac(handle zx_chan_zircon_ethernet_Device_client, options const[0], deadline zx_time, args ptr[in, fidl_call_args[zircon_ethernet_DeviceConfigMulticastDeleteMacRequest, zircon_ethernet_DeviceConfigMulticastDeleteMacRequestHandles, array[int8, ZX_CHANNEL_MAX_MSG_BYTES], zircon_ethernet_DeviceConfigMulticastDeleteMacResponseHandles]], actual_bytes ptr[out, int32], actual_handles ptr[out, int32])
zx_channel_call$zircon_ethernet_DeviceConfigMulticastSetPromiscuousMode(handle zx_chan_zircon_ethernet_Device_client, options const[0], deadline zx_time, args ptr[in, fidl_call_args[zircon_ethernet_DeviceConfigMulticastSetPromiscuousModeRequest, zircon_ethernet_DeviceConfigMulticastSetPromiscuousModeRequestHandles, array[int8, ZX_CHANNEL_MAX_MSG_BYTES], zircon_ethernet_DeviceConfigMulticastSetPromiscuousModeResponseHandles]], actual_bytes ptr[out, int32], actual_handles ptr[out, int32])
zx_channel_call$zircon_ethernet_DeviceConfigMulticastTestFilter(handle zx_chan_zircon_ethernet_Device_client, options const[0], deadline zx_time, args ptr[in, fidl_call_args[zircon_ethernet_DeviceConfigMulticastTestFilterRequest, zircon_ethernet_DeviceConfigMulticastTestFilterRequestHandles, array[int8, ZX_CHANNEL_MAX_MSG_BYTES], zircon_ethernet_DeviceConfigMulticastTestFilterResponseHandles]], actual_bytes ptr[out, int32], actual_handles ptr[out, int32])
zx_channel_call$zircon_ethernet_DeviceDumpRegisters(handle zx_chan_zircon_ethernet_Device_client, options const[0], deadline zx_time, args ptr[in, fidl_call_args[zircon_ethernet_DeviceDumpRegistersRequest, zircon_ethernet_DeviceDumpRegistersRequestHandles, array[int8, ZX_CHANNEL_MAX_MSG_BYTES], zircon_ethernet_DeviceDumpRegistersResponseHandles]], actual_bytes ptr[out, int32], actual_handles ptr[out, int32])
