# Copyright 2018 The Fuchsia Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be found in the LICENSE file.
#
# WARNING: This file is machine generated by fidlgen.

include <fuchsia/net/c/fidl.h>
fuchsia_net_SocketDomain = fuchsia_net_SocketDomain_inet, fuchsia_net_SocketDomain_inet6
fuchsia_net_SocketType = fuchsia_net_SocketType_stream, fuchsia_net_SocketType_dgram
fuchsia_net_SocketProtocol = fuchsia_net_SocketProtocol_ip, fuchsia_net_SocketProtocol_icmp, fuchsia_net_SocketProtocol_tcp, fuchsia_net_SocketProtocol_udp, fuchsia_net_SocketProtocol_ipv6, fuchsia_net_SocketProtocol_icmpv6

fuchsia_net_IPv4AddressInLine {
	addrInLine	array[int8, 4]
} [packed]

fuchsia_net_IPv6AddressInLine {
	addrInLine	array[int8, 16]
} [packed]

fuchsia_net_SubnetInLine {
	addrInLine	fuchsia_net_IpAddressInLine
	prefix_len	int8
} [packed]

fuchsia_net_SubnetOutOfLine {
	void	void
} [packed]

fuchsia_net_SubnetHandles {
	void	void
} [packed]

fuchsia_net_MacAddressHandles {
	void	void
} [packed]

fuchsia_net_StringInLine {
	valInLine	array[int8, 256]
	len_		int32
} [packed]

fuchsia_net_StringOutOfLine {
	void	void
} [packed]

fuchsia_net_StringHandles {
	void	void
} [packed]

fuchsia_net_AddrInfoHintsInLine {
	flags_		int32
	family		int32
	sock_type	int32
	protocol	int32
} [packed]

fuchsia_net_AddrInfoHintsOutOfLine {
	void	void
} [packed]

fuchsia_net_AddrInfoHintsHandles {
	void	void
} [packed]

fuchsia_net_AddrStorageHandles {
	void	void
} [packed]

fuchsia_net_AddrInfoHandles {
	addr	fuchsia_net_AddrStorageHandles
} [packed]

fuchsia_net_IpAddressInLine [
	ipv4InLine	fidl_union_member[fuchsia_net_IpAddressTag_ipv4, fuchsia_net_IPv4AddressInLine]
	ipv6InLine	fidl_union_member[fuchsia_net_IpAddressTag_ipv6, fuchsia_net_IPv6AddressInLine]
]

fuchsia_net_ConnectivityOnNetworkReachableEventHandles {
	void	void
} [packed]

resource zx_chan_fuchsia_net_Connectivity_client[zx_chan]
resource zx_chan_fuchsia_net_Connectivity_server[zx_chan]

zx_channel_create$fuchsia_net_Connectivity(options const[0], out0 ptr[out, zx_chan_fuchsia_net_Connectivity_client], out1 ptr[out, zx_chan_fuchsia_net_Connectivity_server])
fdio_service_connect$fuchsia_net_Connectivity(path ptr[in, string["/svc/fuchsia.net.Connectivity"]], handle zx_chan_fuchsia_net_Connectivity_server)
zx_channel_read$fuchsia_net_ConnectivityOnNetworkReachable(handle zx_chan_fuchsia_net_Connectivity_client, options const[0], bytes ptr[out, array[int8, ZX_CHANNEL_MAX_MSG_BYTES]], num_bytes bytesize[bytes], handles ptr[out, fuchsia_net_ConnectivityOnNetworkReachableEventHandles], num_handles bytesize[handles], actual_bytes ptr[out, int32], actual_handles ptr[out, int32])

fuchsia_net_LegacySocketProviderOpenSocketRequest {
	hdr		fidl_message_header[1]
	domain		flags[fuchsia_net_SocketDomain, int32]
	type_		flags[fuchsia_net_SocketType, int32]
	protocol	flags[fuchsia_net_SocketProtocol, int32]
} [packed]

fuchsia_net_LegacySocketProviderOpenSocketRequestHandles {
	void	void
} [packed]

fuchsia_net_LegacySocketProviderOpenSocketResponseHandles {
	s	zx_socket
} [packed]

fuchsia_net_LegacySocketProviderGetAddrInfoRequest {
	hdr			fidl_message_header[2]
	nodeInLine		fuchsia_net_StringInLine
	serviceInLine		fuchsia_net_StringInLine
	hintsInLine		fuchsia_net_AddrInfoHintsInLine
	nodeOutOfLine		fuchsia_net_StringOutOfLine
	serviceOutOfLine	fuchsia_net_StringOutOfLine
	hintsOutOfLine		fuchsia_net_AddrInfoHintsOutOfLine
} [packed]

fuchsia_net_LegacySocketProviderGetAddrInfoRequestHandles {
	node	fuchsia_net_StringHandles
	service	fuchsia_net_StringHandles
	hints	fuchsia_net_AddrInfoHintsHandles
} [packed]

fuchsia_net_LegacySocketProviderGetAddrInfoResponseHandles {
	ai0	fuchsia_net_AddrInfoHandles
	ai1	fuchsia_net_AddrInfoHandles
	ai2	fuchsia_net_AddrInfoHandles
	ai3	fuchsia_net_AddrInfoHandles
} [packed]

resource zx_chan_fuchsia_net_LegacySocketProvider_client[zx_chan]
resource zx_chan_fuchsia_net_LegacySocketProvider_server[zx_chan]

zx_channel_create$fuchsia_net_LegacySocketProvider(options const[0], out0 ptr[out, zx_chan_fuchsia_net_LegacySocketProvider_client], out1 ptr[out, zx_chan_fuchsia_net_LegacySocketProvider_server])
fdio_service_connect$fuchsia_net_LegacySocketProvider(path ptr[in, string["/svc/fuchsia.net.LegacySocketProvider"]], handle zx_chan_fuchsia_net_LegacySocketProvider_server)
zx_channel_call$fuchsia_net_LegacySocketProviderOpenSocket(handle zx_chan_fuchsia_net_LegacySocketProvider_client, options const[0], deadline zx_time, args ptr[in, fidl_call_args[fuchsia_net_LegacySocketProviderOpenSocketRequest, fuchsia_net_LegacySocketProviderOpenSocketRequestHandles, array[int8, ZX_CHANNEL_MAX_MSG_BYTES], fuchsia_net_LegacySocketProviderOpenSocketResponseHandles]], actual_bytes ptr[out, int32], actual_handles ptr[out, int32])
zx_channel_call$fuchsia_net_LegacySocketProviderGetAddrInfo(handle zx_chan_fuchsia_net_LegacySocketProvider_client, options const[0], deadline zx_time, args ptr[in, fidl_call_args[fuchsia_net_LegacySocketProviderGetAddrInfoRequest, fuchsia_net_LegacySocketProviderGetAddrInfoRequestHandles, array[int8, ZX_CHANNEL_MAX_MSG_BYTES], fuchsia_net_LegacySocketProviderGetAddrInfoResponseHandles]], actual_bytes ptr[out, int32], actual_handles ptr[out, int32])
