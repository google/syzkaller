# Copyright 2020 syzkaller project authors. All rights reserved.
# Use of this source code is governed by Apache 2 LICENSE that can be found in the LICENSE file.

include <uapi/linux/bpf.h>

# This file describes types of bpf programs that are attached using BPF_RAW_TRACEPOINT_OPEN
# These types are: BPF_PROG_TYPE_TRACING, BPF_PROG_TYPE_EXT, BPF_PROG_TYPE_LSM, BPF_PROG_TYPE_RAW_TRACEPOINT, BPF_PROG_TYPE_RAW_TRACEPOINT_WRITABLE

resource bpf_lsm_btf_id[bpf_btf_id]
resource fd_bpf_prog_with_btfid[fd_bpf_prog]
resource fd_bpf_prog_raw_tracepoint[fd_bpf_prog]

syz_btf_id_by_name$bpf_lsm(name ptr[in, string[bpf_lsm_func_names]]) bpf_lsm_btf_id (timeout[500])

bpf$BPF_PROG_WITH_BTFID_LOAD(cmd const[BPF_PROG_LOAD], arg ptr[in, bpf_prog_with_btfid], size len[arg]) fd_bpf_prog_with_btfid (timeout[500])
bpf$BPF_PROG_RAW_TRACEPOINT_LOAD(cmd const[BPF_PROG_LOAD], arg ptr[in, bpf_prog_raw_tracepoint], size len[arg]) fd_bpf_prog_raw_tracepoint (timeout[500])

bpf$BPF_RAW_TRACEPOINT_OPEN_UNNAMED(cmd const[BPF_RAW_TRACEPOINT_OPEN], arg ptr[in, bpf_raw_tracepoint_unnamed], size len[arg]) fd_perf_base (timeout[500])
bpf$BPF_RAW_TRACEPOINT_OPEN(cmd const[BPF_RAW_TRACEPOINT_OPEN], arg ptr[in, bpf_raw_tracepoint], size len[arg]) fd_perf_base (timeout[500])

bpf_prog_with_btfid [
	bpf_lsm		bpf_lsm_prog
	bpf_tracing	bpf_tracing_prog
	bpf_ext		bpf_ext_prog
]

# NEED: After #2035 is merged (which we can't for now due to pahole issues),
# syz_btf_id_by_name should work and we can remove the optional flag from
# bpf_lsm_btf_id.
type bpf_lsm_prog bpf_prog_t[const[BPF_PROG_TYPE_LSM, int32], const[BPF_LSM_MAC, int32], bpf_lsm_btf_id[opt], const[0, int32]]
type bpf_tracing_prog bpf_prog_t[const[BPF_PROG_TYPE_TRACING, int32], flags[bpf_tracing_attach_types, int32], int32[0:BTF_ID_MAX], fd_bpf_prog[opt]]
type bpf_ext_prog bpf_prog_t[const[BPF_PROG_TYPE_EXT, int32], const[0, int32], int32[0:BTF_ID_MAX], fd_bpf_prog[opt]]

type bpf_prog_raw_tracepoint bpf_prog_t[flags[bpf_raw_tracepoint_prog_types, int32], const[0, int32], const[0, int32], const[0, int32]]

bpf_tracing_attach_types = BPF_TRACE_FENTRY, BPF_TRACE_FEXIT, BPF_TRACE_RAW_TP, BPF_MODIFY_RETURN, BPF_TRACE_ITER
bpf_raw_tracepoint_prog_types = BPF_PROG_TYPE_RAW_TRACEPOINT, BPF_PROG_TYPE_RAW_TRACEPOINT_WRITABLE

# An reasonable upper bound for the number of btf_ids. Currently there are around 163000 btf_ids.
# We do not use BTF_MAX_TYPE (~= 1000000) to increase the probability of getting a valid id.
define BTF_ID_MAX	200000

bpf_raw_tracepoint_unnamed {
	name	const[0, int64]
	prog_fd	fd_bpf_prog_with_btfid
} [align[8]]

bpf_raw_tracepoint {
	name	ptr64[in, string[bpf_raw_tracepoint_names]]
	prog_fd	fd_bpf_prog_raw_tracepoint
} [align[8]]

# This list is generated by the following commands:
# $ VMLINUX=[path to Linux kernel source directory]/vmlinux
# $ bpftool btf dump file $VMLINUX | sed -n "s/.*FUNC '\(bpf_lsm\w*\).*/\"\1\"/p" | tr '\n' ',' | sed 's/,$/\n/'
# where `$VMLINUX` should exist after compiling the Linux kernel.
# You can also do `VMLINUX=/sys/kernel/btf/vmlinux` and run the command inside the target machine.
#
# How to install bpftool:
# 1. Download the source code of the Linux kernel after version 5.4.
# 2. Run the following commands (might need to run `make install` with root permission):
# $ KERNEL=[path to Linux kernel source directory]
# cd $KERNEL/tools/bpf/bpftool
# make
# make install

bpf_lsm_func_names = "bpf_lsm_verify_prog", "bpf_lsm_perf_event_write", "bpf_lsm_perf_event_read", "bpf_lsm_perf_event_free", "bpf_lsm_perf_event_alloc", "bpf_lsm_perf_event_open", "bpf_lsm_locked_down", "bpf_lsm_bpf_prog_free_security", "bpf_lsm_bpf_prog_alloc_security", "bpf_lsm_bpf_map_free_security", "bpf_lsm_bpf_map_alloc_security", "bpf_lsm_bpf_prog", "bpf_lsm_bpf_map", "bpf_lsm_bpf", "bpf_lsm_audit_rule_free", "bpf_lsm_audit_rule_match", "bpf_lsm_audit_rule_known", "bpf_lsm_audit_rule_init", "bpf_lsm_key_getsecurity", "bpf_lsm_key_permission", "bpf_lsm_key_free", "bpf_lsm_key_alloc", "bpf_lsm_xfrm_decode_session", "bpf_lsm_xfrm_state_pol_flow_match", "bpf_lsm_xfrm_policy_lookup", "bpf_lsm_xfrm_state_delete_security", "bpf_lsm_xfrm_state_free_security", "bpf_lsm_xfrm_state_alloc_acquire", "bpf_lsm_xfrm_state_alloc", "bpf_lsm_xfrm_policy_delete_security", "bpf_lsm_xfrm_policy_free_security", "bpf_lsm_xfrm_policy_clone_security", "bpf_lsm_xfrm_policy_alloc_security", "bpf_lsm_ib_free_security", "bpf_lsm_ib_alloc_security", "bpf_lsm_ib_endport_manage_subnet", "bpf_lsm_ib_pkey_access", "bpf_lsm_sctp_sk_clone", "bpf_lsm_sctp_bind_connect", "bpf_lsm_sctp_assoc_request", "bpf_lsm_tun_dev_open", "bpf_lsm_tun_dev_attach", "bpf_lsm_tun_dev_attach_queue", "bpf_lsm_tun_dev_create", "bpf_lsm_tun_dev_free_security", "bpf_lsm_tun_dev_alloc_security", "bpf_lsm_req_classify_flow", "bpf_lsm_secmark_refcount_dec", "bpf_lsm_secmark_refcount_inc", "bpf_lsm_secmark_relabel_packet", "bpf_lsm_inet_conn_established", "bpf_lsm_inet_csk_clone", "bpf_lsm_inet_conn_request", "bpf_lsm_sock_graft", "bpf_lsm_sk_getsecid", "bpf_lsm_sk_clone_security", "bpf_lsm_sk_free_security", "bpf_lsm_sk_alloc_security", "bpf_lsm_socket_getpeersec_dgram", "bpf_lsm_socket_getpeersec_stream", "bpf_lsm_socket_sock_rcv_skb", "bpf_lsm_socket_shutdown", "bpf_lsm_socket_setsockopt", "bpf_lsm_socket_getsockopt", "bpf_lsm_socket_getpeername", "bpf_lsm_socket_getsockname", "bpf_lsm_socket_recvmsg", "bpf_lsm_socket_sendmsg", "bpf_lsm_socket_accept", "bpf_lsm_socket_listen", "bpf_lsm_socket_connect", "bpf_lsm_socket_bind", "bpf_lsm_socket_socketpair", "bpf_lsm_socket_post_create", "bpf_lsm_socket_create", "bpf_lsm_unix_may_send", "bpf_lsm_unix_stream_connect", "bpf_lsm_post_notification", "bpf_lsm_inode_getsecctx", "bpf_lsm_inode_setsecctx", "bpf_lsm_inode_notifysecctx", "bpf_lsm_inode_invalidate_secctx", "bpf_lsm_release_secctx", "bpf_lsm_secctx_to_secid", "bpf_lsm_secid_to_secctx", "bpf_lsm_ismaclabel", "bpf_lsm_setprocattr", "bpf_lsm_getprocattr", "bpf_lsm_d_instantiate", "bpf_lsm_netlink_send", "bpf_lsm_sem_semop", "bpf_lsm_sem_semctl", "bpf_lsm_sem_associate", "bpf_lsm_sem_free_security", "bpf_lsm_sem_alloc_security", "bpf_lsm_shm_shmat", "bpf_lsm_shm_shmctl", "bpf_lsm_shm_associate", "bpf_lsm_shm_free_security", "bpf_lsm_shm_alloc_security", "bpf_lsm_msg_queue_msgrcv", "bpf_lsm_msg_queue_msgsnd", "bpf_lsm_msg_queue_msgctl", "bpf_lsm_msg_queue_associate", "bpf_lsm_msg_queue_free_security", "bpf_lsm_msg_queue_alloc_security", "bpf_lsm_msg_msg_free_security", "bpf_lsm_msg_msg_alloc_security", "bpf_lsm_ipc_getsecid", "bpf_lsm_ipc_permission", "bpf_lsm_task_to_inode", "bpf_lsm_task_prctl", "bpf_lsm_task_kill", "bpf_lsm_task_movememory", "bpf_lsm_task_getscheduler", "bpf_lsm_task_setscheduler", "bpf_lsm_task_setrlimit", "bpf_lsm_task_prlimit", "bpf_lsm_task_getioprio", "bpf_lsm_task_setioprio", "bpf_lsm_task_setnice", "bpf_lsm_task_getsecid", "bpf_lsm_task_getsid", "bpf_lsm_task_getpgid", "bpf_lsm_task_setpgid", "bpf_lsm_task_fix_setgid", "bpf_lsm_task_fix_setuid", "bpf_lsm_kernel_post_read_file", "bpf_lsm_kernel_read_file", "bpf_lsm_kernel_load_data", "bpf_lsm_kernel_module_request", "bpf_lsm_kernel_create_files_as", "bpf_lsm_kernel_act_as", "bpf_lsm_cred_getsecid", "bpf_lsm_cred_transfer", "bpf_lsm_cred_prepare", "bpf_lsm_cred_free", "bpf_lsm_cred_alloc_blank", "bpf_lsm_task_free", "bpf_lsm_task_alloc", "bpf_lsm_file_open", "bpf_lsm_file_receive", "bpf_lsm_file_send_sigiotask", "bpf_lsm_file_set_fowner", "bpf_lsm_file_fcntl", "bpf_lsm_file_lock", "bpf_lsm_file_mprotect", "bpf_lsm_mmap_file", "bpf_lsm_mmap_addr", "bpf_lsm_file_ioctl", "bpf_lsm_file_free_security", "bpf_lsm_file_alloc_security", "bpf_lsm_file_permission", "bpf_lsm_kernfs_init_security", "bpf_lsm_inode_copy_up_xattr", "bpf_lsm_inode_copy_up", "bpf_lsm_inode_getsecid", "bpf_lsm_inode_listsecurity", "bpf_lsm_inode_setsecurity", "bpf_lsm_inode_getsecurity", "bpf_lsm_inode_killpriv", "bpf_lsm_inode_need_killpriv", "bpf_lsm_inode_removexattr", "bpf_lsm_inode_listxattr", "bpf_lsm_inode_getxattr", "bpf_lsm_inode_post_setxattr", "bpf_lsm_inode_setxattr", "bpf_lsm_inode_getattr", "bpf_lsm_inode_setattr", "bpf_lsm_inode_permission", "bpf_lsm_inode_follow_link", "bpf_lsm_inode_readlink", "bpf_lsm_inode_rename", "bpf_lsm_inode_mknod", "bpf_lsm_inode_rmdir", "bpf_lsm_inode_mkdir", "bpf_lsm_inode_symlink", "bpf_lsm_inode_unlink", "bpf_lsm_inode_link", "bpf_lsm_inode_create", "bpf_lsm_inode_init_security", "bpf_lsm_inode_free_security", "bpf_lsm_inode_alloc_security", "bpf_lsm_path_notify", "bpf_lsm_path_chroot", "bpf_lsm_path_chown", "bpf_lsm_path_chmod", "bpf_lsm_path_rename", "bpf_lsm_path_link", "bpf_lsm_path_symlink", "bpf_lsm_path_truncate", "bpf_lsm_path_mknod", "bpf_lsm_path_rmdir", "bpf_lsm_path_mkdir", "bpf_lsm_path_unlink", "bpf_lsm_dentry_create_files_as", "bpf_lsm_dentry_init_security", "bpf_lsm_move_mount", "bpf_lsm_sb_add_mnt_opt", "bpf_lsm_sb_clone_mnt_opts", "bpf_lsm_sb_set_mnt_opts", "bpf_lsm_sb_pivotroot", "bpf_lsm_sb_umount", "bpf_lsm_sb_mount", "bpf_lsm_sb_statfs", "bpf_lsm_sb_show_options", "bpf_lsm_sb_kern_mount", "bpf_lsm_sb_remount", "bpf_lsm_sb_eat_lsm_opts", "bpf_lsm_sb_free_mnt_opts", "bpf_lsm_sb_free_security", "bpf_lsm_sb_alloc_security", "bpf_lsm_fs_context_parse_param", "bpf_lsm_fs_context_dup", "bpf_lsm_bprm_committed_creds", "bpf_lsm_bprm_committing_creds", "bpf_lsm_bprm_check_security", "bpf_lsm_bprm_creds_from_file", "bpf_lsm_bprm_creds_for_exec", "bpf_lsm_vm_enough_memory", "bpf_lsm_settime", "bpf_lsm_syslog", "bpf_lsm_quota_on", "bpf_lsm_quotactl", "bpf_lsm_capable", "bpf_lsm_capset", "bpf_lsm_capget", "bpf_lsm_ptrace_traceme", "bpf_lsm_ptrace_access_check", "bpf_lsm_binder_transfer_file", "bpf_lsm_binder_transfer_binder", "bpf_lsm_binder_transaction", "bpf_lsm_binder_set_context_mgr"

# This list is generated by the following command
# (run from a kernel checkout on commit d1dc87763f406d4e67caf16dbe438a5647692395).
# lock_acquire is removed since it hangs kernel dead, e.g. with the following program:
#	r0 = bpf$BPF_PROG_RAW_TRACEPOINT_LOAD(0x5, &(0x7f0000000200)={0x18, 0x4, &(0x7f00000002c0)=ANY=[@ANYBLOB="18010000000800000000000000000000850000006d00000095"], &(0x7f0000000100)='GPL\x00', 0x0, 0x0, 0x0, 0x0, 0x0, '\x00', 0x0, 0x2, 0xffffffffffffffff, 0x8, 0x0, 0x0, 0x10, 0x0}, 0x78)
#	bpf$BPF_RAW_TRACEPOINT_OPEN(0x11, &(0x7f00000000c0)={&(0x7f0000000300)='lock_acquire\x00', r0}, 0x10)
#	r1 = socket$nl_xfrm(0x10, 0x3, 0x6)
#	sendmsg$nl_xfrm(r1, &(0x7f0000000180)={0x0, 0x0, &(0x7f0000000140)={&(0x7f0000000100)=@getsadinfo={0x14, 0x23, 0x1}, 0x14}}, 0x0)
# grep -Rh "TRACE_EVENT\(\|_FN\)(" include/trace/events/*.h | sed -n 's/TRACE_EVENT\(\|_FN\)(\(.*\),/"\2"/p' | egrep -v "\"lock_acquire\"" | sort | tr '\n' ',' | sed 's/,$/\n/'

bpf_raw_tracepoint_names = "9p_client_req", "9p_client_res", "9p_protocol_dump", "ack_update_msk", "afs_call", "afs_call_done", "afs_call_state", "afs_cb_break", "afs_cb_call", "afs_cb_miss", "afs_cell", "afs_cm_no_server", "afs_cm_no_server_u", "afs_dir_check_failed", "afs_edit_dir", "afs_file_error", "afs_flock_ev", "afs_flock_op", "afs_folio_dirty", "afs_get_tree", "afs_io_error", "afs_lookup", "afs_make_fs_call", "afs_make_fs_call1", "afs_make_fs_call2", "afs_make_fs_calli", "afs_make_vl_call", "afs_notify_call", "afs_protocol_error", "afs_receive_data", "afs_reload_dir", "afs_send_data", "afs_sent_data", "afs_server", "afs_silly_rename", "afs_volume", "alarmtimer_suspend", "alloc_extent_state", "ata_bmdma_status", "ata_eh_link_autopsy", "ata_eh_link_autopsy_qc", "ata_tf_load", "balance_dirty_pages", "bcache_alloc", "bcache_alloc_fail", "bcache_btree_gc_coalesce", "bcache_btree_insert_key", "bcache_btree_write", "bcache_invalidate", "bcache_journal_write", "bcache_keyscan", "bcache_read", "bcache_write", "bdi_dirty_ratelimit", "block_bio_complete", "block_bio_remap", "block_plug", "block_rq_remap", "block_rq_requeue", "block_split", "br_fdb_add", "br_fdb_external_learn_add", "br_fdb_update", "btrfs_add_block_group", "btrfs_clear_extent_bit", "btrfs_convert_extent_bit", "btrfs_cow_block", "btrfs_failed_cluster_setup", "btrfs_find_cluster", "btrfs_flush_space", "btrfs_handle_em_exist", "btrfs_inode_mod_outstanding_extents", "btrfs_qgroup_account_extent", "btrfs_reserve_ticket", "btrfs_set_extent_bit", "btrfs_setup_cluster", "btrfs_space_reservation", "btrfs_sync_file", "btrfs_sync_fs", "btrfs_transaction_commit", "btrfs_trigger_flush", "btrfs_writepage_end_io_hook", "cachefiles_coherency", "cachefiles_io_error", "cachefiles_link", "cachefiles_lookup", "cachefiles_mark_active", "cachefiles_mark_failed", "cachefiles_mark_inactive", "cachefiles_mkdir", "cachefiles_ondemand_close", "cachefiles_ondemand_copen", "cachefiles_ondemand_cread", "cachefiles_ondemand_fd_release", "cachefiles_ondemand_fd_write", "cachefiles_ondemand_open", "cachefiles_ondemand_read", "cachefiles_prep_read", "cachefiles_read", "cachefiles_ref", "cachefiles_rename", "cachefiles_tmpfile", "cachefiles_trunc", "cachefiles_unlink", "cachefiles_vfs_error", "cachefiles_vol_coherency", "cachefiles_write", "cdev_update", "cma_alloc_start", "cma_release", "compact_retry", "console", "consume_skb", "contention_begin", "contention_end", "cpu_frequency_limits", "cpuhp_enter", "cpuhp_exit", "cpuhp_multi_enter", "cq_alloc", "cq_alloc_error", "cq_drain_complete", "cq_free", "cq_modify", "cq_poll", "cq_process", "cq_reschedule", "cq_schedule", "damon_aggregated", "dax_insert_mapping", "dax_writeback_one", "devfreq_frequency", "devfreq_monitor", "device_pm_callback_end", "device_pm_callback_start", "devlink_health_recover_aborted", "devlink_health_report", "devlink_health_reporter_state_update", "devlink_hwerr", "devlink_hwmsg", "devlink_trap_report", "dlm_ast", "dlm_bast", "dlm_lock_end", "dlm_lock_start", "dlm_recv", "dlm_send", "dlm_unlock_end", "dlm_unlock_start", "erofs_destroy_inode", "erofs_fill_inode", "erofs_lookup", "erofs_readpage", "erofs_readpages", "ext4_allocate_blocks", "ext4_allocate_inode", "ext4_alloc_da_blocks", "ext4_begin_ordered_truncate", "ext4_collapse_range", "ext4_da_release_space", "ext4_da_reserve_space", "ext4_da_update_reserve_space", "ext4_da_write_pages", "ext4_da_write_pages_extent", "ext4_discard_blocks", "ext4_discard_preallocations", "ext4_drop_inode", "ext4_error", "ext4_es_find_extent_range_enter", "ext4_es_find_extent_range_exit", "ext4_es_insert_delayed_block", "ext4_es_lookup_extent_enter", "ext4_es_lookup_extent_exit", "ext4_es_remove_extent", "ext4_es_shrink", "ext4_es_shrink_scan_exit", "ext4_evict_inode", "ext4_ext_convert_to_initialized_enter", "ext4_ext_convert_to_initialized_fastpath", "ext4_ext_handle_unwritten_extents", "ext4_ext_load_extent", "ext4_ext_remove_space", "ext4_ext_remove_space_done", "ext4_ext_rm_idx", "ext4_ext_rm_leaf", "ext4_ext_show_extent", "ext4_fallocate_exit", "ext4_fc_cleanup", "ext4_fc_commit_start", "ext4_fc_commit_stop", "ext4_fc_replay", "ext4_fc_replay_scan", "ext4_fc_stats", "ext4_fc_track_inode", "ext4_fc_track_range", "ext4_forget", "ext4_free_blocks", "ext4_free_inode", "ext4_get_implied_cluster_alloc_exit", "ext4_insert_range", "ext4_journal_start", "ext4_journal_start_reserved", "ext4_lazy_itable_init", "ext4_load_inode", "ext4_mark_inode_dirty", "ext4_mballoc_alloc", "ext4_mballoc_prealloc", "ext4_mb_discard_preallocations", "ext4_mb_release_group_pa", "ext4_mb_release_inode_pa", "ext4_nfs_commit_metadata", "ext4_other_inode_update_time", "ext4_prefetch_bitmaps", "ext4_read_block_bitmap_load", "ext4_remove_blocks", "ext4_request_blocks", "ext4_request_inode", "ext4_shutdown", "ext4_sync_file_enter", "ext4_sync_file_exit", "ext4_sync_fs", "ext4_unlink_enter", "ext4_unlink_exit", "ext4_update_sb", "ext4_writepages", "ext4_writepages_result", "f2fs_background_gc", "f2fs_bmap", "f2fs_destroy_extent_tree", "f2fs_direct_IO_enter", "f2fs_direct_IO_exit", "f2fs_fallocate", "f2fs_fiemap", "f2fs_filemap_fault", "f2fs_file_write_iter", "f2fs_gc_begin", "f2fs_gc_end", "f2fs_get_victim", "f2fs_iostat", "f2fs_iostat_latency", "f2fs_issue_flush", "f2fs_issue_reset_zone", "f2fs_lookup_end", "f2fs_lookup_extent_tree_start", "f2fs_lookup_start", "f2fs_map_blocks", "f2fs_readdir", "f2fs_readpages", "f2fs_reserve_new_blocks", "f2fs_shrink_extent_tree", "f2fs_shutdown", "f2fs_sync_file_exit", "f2fs_sync_fs", "f2fs_truncate_data_blocks_range", "f2fs_truncate_partial_nodes", "f2fs_unlink_enter", "f2fs_update_extent_tree_range", "f2fs_write_begin", "f2fs_write_checkpoint", "f2fs_write_end", "f2fs_writepages", "fdb_delete", "fib6_table_lookup", "fib_table_lookup", "file_check_and_advance_wb_err", "filemap_set_wb_err", "find_free_extent", "finish_task_reaping", "flush_foreign", "free_extent_state", "fscache_access", "fscache_access_cache", "fscache_access_volume", "fscache_acquire", "fscache_active", "fscache_cache", "fscache_cookie", "fscache_invalidate", "fscache_relinquish", "fscache_resize", "fscache_volume", "fsi_dev_init", "fsi_master_acf_cmd_abs_addr", "fsi_master_acf_cmd_rel_addr", "fsi_master_acf_cmd_same_addr", "fsi_master_acf_copro_command", "fsi_master_acf_copro_response", "fsi_master_acf_crc_rsp_error", "fsi_master_acf_poll_response_busy", "fsi_master_acf_send_request", "fsi_master_aspeed_cfam_reset", "fsi_master_aspeed_opb_error", "fsi_master_aspeed_opb_read", "fsi_master_aspeed_opb_write", "fsi_master_break", "fsi_master_gpio_break", "fsi_master_gpio_clock_zeros", "fsi_master_gpio_cmd_abs_addr", "fsi_master_gpio_cmd_rel_addr", "fsi_master_gpio_cmd_same_addr", "fsi_master_gpio_crc_cmd_error", "fsi_master_gpio_crc_rsp_error", "fsi_master_gpio_in", "fsi_master_gpio_out", "fsi_master_gpio_poll_response_busy", "fsi_master_read", "fsi_master_rw_result", "fsi_master_write", "fsi_slave_init", "fsi_slave_invalid_cfam", "generic_add_lease", "global_dirty_state", "gpio_direction", "gpio_value", "gpu_mem_total", "host1x_cdma_push", "host1x_cdma_push_gather", "host1x_cdma_push_wide", "host1x_channel_submit", "host1x_channel_submit_complete", "host1x_channel_submitted", "host1x_syncpt_load_min", "host1x_syncpt_wait_check", "host1x_wait_cdma", "hrtimer_expire_entry", "hrtimer_init", "hrtimer_start", "hugepage_set_pmd", "hugepage_update", "hwmon_attr_show_string", "i2c_read", "i2c_reply", "i2c_result", "i2c_slave", "i2c_write", "ib_mad_recv_done_handler", "ib_mad_send_done_handler", "ifs_status", "inet_sk_error_report", "inet_sock_set_state", "initcall_finish", "initcall_level", "initcall_start", "inode_foreign_history", "inode_switch_wbs", "iocost_iocg_forgive_debt", "iocost_ioc_vrate_adj", "io_uring_complete", "io_uring_cqe_overflow", "io_uring_cqring_wait", "io_uring_create", "io_uring_defer", "io_uring_fail_link", "io_uring_file_get", "io_uring_link", "io_uring_poll_arm", "io_uring_queue_async_work", "io_uring_register", "io_uring_req_failed", "io_uring_submit_sqe", "io_uring_task_add", "ipi_raise", "irq_handler_entry", "irq_handler_exit", "irq_noise", "ishtp_dump", "itimer_expire", "itimer_state", "jbd2_checkpoint", "jbd2_checkpoint_stats", "jbd2_end_commit", "jbd2_handle_extend", "jbd2_handle_stats", "jbd2_lock_buffer_stall", "jbd2_run_stats", "jbd2_shrink_checkpoint_list", "jbd2_shrink_scan_exit", "jbd2_submit_inode_data", "jbd2_update_log_tail", "jbd2_write_superblock", "kfree", "kfree_skb", "kmem_cache_free", "kvm_ack_irq", "kvm_age_hva", "kvm_dirty_ring_exit", "kvm_dirty_ring_push", "kvm_dirty_ring_reset", "kvm_fpu", "kvm_halt_poll_ns", "kvm_ioapic_delayed_eoi_inj", "kvm_ioapic_set_irq", "kvm_mmio", "kvm_msi_set_irq", "kvm_set_irq", "kvm_set_spte_hva", "kvm_test_age_hva", "kvm_unmap_hva_range", "kvm_userspace_exit", "kvm_vcpu_wakeup", "kyber_adjust", "kyber_latency", "kyber_throttled", "leases_conflict", "locks_get_lock_context", "map", "mark_victim", "mce_record", "mctp_key_acquire", "mctp_key_release", "mem_connect", "mem_disconnect", "mem_return_failed", "mlxsw_sp_acl_atcam_entry_add_ctcam_spill", "mlxsw_sp_acl_tcam_vregion_migrate", "mlxsw_sp_acl_tcam_vregion_migrate_end", "mlxsw_sp_acl_tcam_vregion_rehash", "mlxsw_sp_acl_tcam_vregion_rehash_rollback_failed", "mmap_lock_acquire_returned", "mm_collapse_huge_page", "mm_collapse_huge_page_isolate", "mm_collapse_huge_page_swapin", "mm_compaction_begin", "mm_compaction_end", "mm_compaction_kcompactd_sleep", "mm_compaction_migratepages", "mm_compaction_try_to_compact_pages", "mmc_request_done", "mmc_request_start", "mm_khugepaged_scan_pmd", "mm_lru_activate", "mm_lru_insertion", "mm_migrate_pages", "mm_migrate_pages_start", "mm_page_alloc", "mm_page_alloc_extfrag", "mm_page_free", "mm_page_free_batched", "mm_page_pcpu_drain", "mm_shrink_slab_end", "mm_shrink_slab_start", "mm_vmscan_kswapd_sleep", "mm_vmscan_kswapd_wake", "mm_vmscan_lru_isolate", "mm_vmscan_lru_shrink_active", "mm_vmscan_lru_shrink_inactive", "mm_vmscan_node_reclaim_begin", "mm_vmscan_throttled", "mm_vmscan_wakeup_kswapd", "mm_vmscan_write_folio", "module_free", "module_load", "module_request", "mptcp_subflow_get_send", "mr_alloc", "mr_dereg", "mr_integ_alloc", "napi_poll", "neigh_create", "neigh_update", "net_dev_start_xmit", "net_dev_xmit", "net_dev_xmit_timeout", "netfs_failure", "netfs_read", "netfs_rreq", "netfs_rreq_ref", "netfs_sreq", "netfs_sreq_ref", "netlink_extack", "nilfs2_collection_stage_transition", "nilfs2_mdt_insert_new_block", "nilfs2_mdt_submit_block", "nilfs2_segment_usage_allocated", "nilfs2_segment_usage_check", "nilfs2_segment_usage_freed", "nilfs2_transaction_transition", "nmi_handler", "nmi_noise", "objagg_create", "objagg_destroy", "objagg_obj_create", "objagg_obj_destroy", "objagg_obj_get", "objagg_obj_parent_assign", "objagg_obj_parent_unassign", "objagg_obj_put", "objagg_obj_root_create", "objagg_obj_root_destroy", "oom_score_adj_update", "page_pool_release", "page_pool_state_hold", "page_pool_state_release", "page_pool_update_nid", "percpu_alloc_percpu", "percpu_alloc_percpu_fail", "percpu_create_chunk", "percpu_destroy_chunk", "percpu_free_percpu", "pmap_register", "powernv_throttle", "prq_report", "pstate_sample", "pwc_handler_enter", "pwc_handler_exit", "qdisc_create", "qdisc_dequeue", "qdisc_destroy", "qdisc_enqueue", "qdisc_reset", "qgroup_meta_convert", "qgroup_meta_free_all_pertrans", "qgroup_meta_reserve", "qgroup_num_dirty_extents", "qgroup_update_counters", "qgroup_update_reserve", "qi_submit", "qrtr_ns_message", "qrtr_ns_server_add", "qrtr_ns_service_announce_del", "qrtr_ns_service_announce_new", "rcu_stall_warning", "rcu_utilization", "reclaim_retry_zone", "rpcb_getport", "rpcb_register", "rpcb_setport", "rpc_buf_alloc", "rpcb_unregister", "rpc_call_rpcerror", "rpc_clnt_clone_err", "rpc_clnt_new", "rpc_clnt_new_err", "rpcgss_bad_seqno", "rpcgss_context", "rpcgss_createauth", "rpcgss_import_ctx", "rpcgss_need_reencode", "rpcgss_oid_to_mech", "rpcgss_seqno", "rpcgss_svc_accept_upcall", "rpcgss_svc_authenticate", "rpcgss_svc_seqno_bad", "rpcgss_svc_seqno_low", "rpcgss_svc_unwrap_failed", "rpcgss_unwrap_failed", "rpcgss_upcall_msg", "rpcgss_upcall_result", "rpcgss_update_slack", "rpc_request", "rpc_socket_nospace", "rpc_stats_latency", "rpc_xdr_alignment", "rpc_xdr_overflow", "rpm_return_int", "rseq_ip_fixup", "rseq_update", "rss_stat", "rtc_alarm_irq_enable", "rtc_irq_set_freq", "rtc_irq_set_state", "rxrpc_abort", "rxrpc_call", "rxrpc_call_complete", "rxrpc_call_reset", "rxrpc_client", "rxrpc_congest", "rxrpc_conn", "rxrpc_connect_call", "rxrpc_disconnect_call", "rxrpc_improper_term", "rxrpc_local", "rxrpc_notify_socket", "rxrpc_peer", "rxrpc_propose_ack", "rxrpc_receive", "rxrpc_recvmsg", "rxrpc_resend", "rxrpc_retransmit", "rxrpc_rtt_rx", "rxrpc_rtt_tx", "rxrpc_rx_abort", "rxrpc_rx_ack", "rxrpc_rx_data", "rxrpc_rx_discard_ack", "rxrpc_rx_done", "rxrpc_rx_eproto", "rxrpc_rx_icmp", "rxrpc_rx_lose", "rxrpc_rx_packet", "rxrpc_rx_rwind_change", "rxrpc_skb", "rxrpc_timer", "rxrpc_transmit", "rxrpc_tx_ack", "rxrpc_tx_data", "rxrpc_tx_fail", "rxrpc_tx_packet", "sample_threshold", "sched_kthread_stop", "sched_kthread_stop_ret", "sched_kthread_work_execute_end", "sched_kthread_work_execute_start", "sched_kthread_work_queue_work", "sched_migrate_task", "sched_move_numa", "sched_pi_setprio", "sched_process_exec", "sched_process_fork", "sched_process_hang", "sched_process_wait", "sched_switch", "sched_wake_idle_without_ipi", "scmi_rx_done", "scmi_xfer_begin", "scmi_xfer_end", "scmi_xfer_response_wait", "scsi_dispatch_cmd_error", "scsi_dispatch_cmd_start", "scsi_eh_wakeup", "sctp_probe", "sctp_probe_path", "selinux_audited", "signal_deliver", "signal_generate", "siox_get_data", "siox_set_data", "skb_copy_datagram_iovec", "skip_task_reaping", "smbus_result", "snd_soc_dapm_connected", "snd_soc_dapm_path", "snd_soc_dapm_walk_done", "snd_soc_jack_irq", "snd_soc_jack_notify", "snd_soc_jack_report", "sock_exceed_buf_limit", "sock_rcvqueue_full", "softirq_noise", "spi_message_done", "spi_set_cs", "spi_setup", "spmi_cmd", "spmi_read_begin", "spmi_read_end", "spmi_write_begin", "spmi_write_end", "start_task_reaping", "subflow_check_data_avail", "suspend_resume", "svc_alloc_arg_err", "svc_authenticate", "svc_process", "svcrdma_decode_rqst", "svcrdma_decode_rseg", "svcrdma_decode_short_err", "svcrdma_decode_wseg", "svcrdma_dma_map_rw_err", "svcrdma_encode_wseg", "svcrdma_no_rwctx_err", "svcrdma_page_overrun_err", "svcrdma_post_recv", "svcrdma_post_send", "svcrdma_qp_error", "svcrdma_rq_post_err", "svcrdma_send_err", "svcrdma_send_pullup", "svcrdma_small_wrch_err", "svcrdma_sq_post_err", "svcrdma_wc_read", "svcsock_marker", "svcsock_new_socket", "svcsock_tcp_recv_short", "svcsock_tcp_state", "svc_stats_latency", "svc_unregister", "svc_wake_up", "svc_xprt_accept", "svc_xprt_create_err", "svc_xprt_dequeue", "svc_xprt_enqueue", "swiotlb_bounced", "sys_enter", "sys_exit", "target_cmd_complete", "target_sequencer_start", "task_newtask", "task_rename", "tcp_cong_state_set", "tcp_probe", "tcp_retransmit_synack", "tegra_dma_complete_cb", "tegra_dma_isr", "tegra_dma_tx_status", "test_pages_isolated", "thermal_power_allocator", "thermal_power_allocator_pid", "thermal_power_cpu_get_power", "thermal_power_cpu_limit", "thermal_power_devfreq_get_power", "thermal_power_devfreq_limit", "thermal_temperature", "thermal_zone_trip", "thread_noise", "tick_stop", "timer_expire_entry", "timer_start", "tlb_flush", "track_foreign_dirty", "udp_fail_queue_rcv_skb", "ufshcd_auto_bkops_state", "ufshcd_clk_gating", "ufshcd_clk_scaling", "ufshcd_command", "ufshcd_exception_event", "ufshcd_uic_command", "ufshcd_upiu", "unmap", "virtio_transport_alloc_pkt", "virtio_transport_recv_pkt", "vm_unmapped_area", "vnet_rx_one", "vnet_rx_stopped_ack", "vnet_skip_tx_trigger", "vnet_tx_trigger", "wake_reaper", "wbt_lat", "wbt_stat", "wbt_step", "wbt_timer", "workqueue_activate_work", "workqueue_execute_end", "workqueue_execute_start", "workqueue_queue_work", "writeback_bdi_register", "writeback_pages_written", "writeback_queue_io", "writeback_sb_inodes_requeue", "xdp_bulk_tx", "xdp_cpumap_enqueue", "xdp_cpumap_kthread", "xdp_devmap_xmit", "xdp_exception", "xen_cpu_load_idt", "xen_cpu_set_ldt", "xen_cpu_write_gdt_entry", "xen_cpu_write_idt_entry", "xen_cpu_write_ldt_entry", "xen_mc_callback", "xen_mc_entry", "xen_mc_entry_alloc", "xen_mc_extend_args", "xen_mc_flush", "xen_mc_flush_reason", "xen_mmu_alloc_ptpage", "xen_mmu_flush_tlb_multi", "xen_mmu_flush_tlb_one_user", "xen_mmu_pmd_clear", "xen_mmu_pte_clear", "xen_mmu_release_ptpage", "xen_mmu_set_p4d", "xen_mmu_set_pmd", "xen_mmu_set_pud", "xen_mmu_set_pud", "xen_mmu_write_cr3", "xprt_ping", "xprtrdma_cb_setup", "xprtrdma_createmrs", "xprtrdma_decode_seg", "xprtrdma_dma_maperr", "xprtrdma_err_chunk", "xprtrdma_err_unrecognized", "xprtrdma_err_vers", "xprtrdma_fixup", "xprtrdma_frwr_alloc", "xprtrdma_frwr_dereg", "xprtrdma_frwr_maperr", "xprtrdma_frwr_sgerr", "xprtrdma_inline_thresh", "xprtrdma_marshal", "xprtrdma_marshal_failed", "xprtrdma_mrs_zap", "xprtrdma_nomrs_err", "xprtrdma_op_connect", "xprtrdma_op_set_cto", "xprtrdma_post_linv_err", "xprtrdma_post_recv", "xprtrdma_post_recvs", "xprtrdma_post_recvs_err", "xprtrdma_post_send", "xprtrdma_post_send_err", "xprtrdma_prepsend_failed", "xprtrdma_reply", "xprt_reserve", "xprt_retransmit", "xprt_transmit", "xs_stream_read_data", "xs_stream_read_request"
