# Copyright 2022 syzkaller project authors. All rights reserved.
# Use of this source code is governed by Apache 2 LICENSE that can be found in the LICENSE file.

include <linux/acpi.h>
include <drivers/thermal/intel/int340x_thermal/acpi_thermal_rel.h>

resource fd_acpi_thermal_rel[fd]

openat$acpi_thermal_rel(fd const[AT_FDCWD], file ptr[in, string["/dev/acpi_thermal_rel"]], flags flags[open_flags], mode const[0]) fd_acpi_thermal_rel

ioctl$ACPI_THERMAL_GET_TRT_COUNT(fd fd_acpi_thermal_rel, cmd const[ACPI_THERMAL_GET_TRT_COUNT], arg ptr[out, intptr])
ioctl$ACPI_THERMAL_GET_TRT_LEN(fd fd_acpi_thermal_rel, cmd const[ACPI_THERMAL_GET_TRT_LEN], arg ptr[out, intptr])
ioctl$ACPI_THERMAL_GET_TRT(fd fd_acpi_thermal_rel, cmd const[ACPI_THERMAL_GET_TRT], arg ptr[out, trt_object])

trt_struct {
	source_device	array[int8, 8]
	target_device	array[int8, 8]
	influence	int64
	sample_period	int64
	reserved	array[int64, 4]
}

trt_object [
	header	trt_struct
	data	array[int64, 8]
]

ioctl$ACPI_THERMAL_GET_ART_COUNT(fd fd_acpi_thermal_rel, cmd const[ACPI_THERMAL_GET_ART_COUNT], arg ptr[out, intptr])
ioctl$ACPI_THERMAL_GET_ART_LEN(fd fd_acpi_thermal_rel, cmd const[ACPI_THERMAL_GET_ART_LEN], arg ptr[out, intptr])
ioctl$ACPI_THERMAL_GET_ART(fd fd_acpi_thermal_rel, cmd const[ACPI_THERMAL_GET_ART], arg ptr[out, art_object])

art_struct {
	source_device	array[int8, 8]
	target_device	array[int8, 8]
	weight		int64
	ac0_max_level	int64
	ac1_max_level	int64
	ac2_max_level	int64
	ac3_max_level	int64
	ac4_max_level	int64
	ac6_max_level	int64
	ac7_max_level	int64
	ac8_max_level	int64
	ac9_max_level	int64
}

art_object [
	header	art_struct
	data	array[int64, ACPI_NR_ART_ELEMENTS]
]
