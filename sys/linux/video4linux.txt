# Copyright 2018 syzkaller project authors. All rights reserved.
# # Use of this source code is governed by Apache 2 LICENSE that can be found in the LICENSE file.

# Constants for this descriptions were generated on the following tree:
# https://source.codeaurora.org/quic/la/kernel/msm-4.9 msm-4.9

include <stdio.h>
include <linux/ioctl.h>
include <linux/time.h>
include <linux/types.h>
include <uapi/linux/videodev2.h>
include <uapi/linux/v4l2-common.h>
include <uapi/linux/v4l2-subdev.h>
include <uapi/linux/v4l2-mediabus.h>
include <uapi/linux/media-bus-format.h>
include <uapi/linux/v4l2-controls.h>

resource fd_video[fd]
resource fd_dmabuf[fd]
resource fd_v4l2_buffer[fd]
resource v4l2_std_id[int64]

syz_open_dev$video(dev ptr[in, string["/dev/video#"]], id intptr, flags flags[open_flags]) fd_video
syz_open_dev$video4linux(dev ptr[in, string["/dev/v4l-subdev#"]], id intptr, flags flags[open_flags]) fd_video

ioctl$VIDIOC_QUERYCAP(fd fd_video, cmd const[VIDIOC_QUERYCAP], arg ptr[out, v4l2_capability])
ioctl$VIDIOC_RESERVED(fd fd_video, cmd const[VIDIOC_RESERVED], arg const[0])
ioctl$VIDIOC_ENUM_FMT(fd fd_video, cmd const[VIDIOC_ENUM_FMT], arg ptr[inout, v4l2_fmtdesc])
ioctl$VIDIOC_G_FMT(fd fd_video, cmd const[VIDIOC_G_FMT], arg ptr[inout, v4l2_format])
ioctl$VIDIOC_S_FMT(fd fd_video, cmd const[VIDIOC_S_FMT], arg ptr[inout, v4l2_format])
ioctl$VIDIOC_REQBUFS(fd fd_video, cmd const[VIDIOC_REQBUFS], arg ptr[inout, v4l2_requestbuffers])
ioctl$VIDIOC_QUERYBUF(fd fd_video, cmd const[VIDIOC_QUERYBUF], arg ptr[inout, v4l2_buffer])
ioctl$VIDIOC_G_FBUF(fd fd_video, cmd const[VIDIOC_G_FBUF], arg ptr[inout, v4l2_framebuffer])
ioctl$VIDIOC_S_FBUF(fd fd_video, cmd const[VIDIOC_S_FBUF], arg ptr[in, v4l2_framebuffer])
ioctl$VIDIOC_OVERLAY(fd fd_video, cmd const[VIDIOC_OVERLAY], arg ptr[in, int32])
ioctl$VIDIOC_QBUF(fd fd_video, cmd const[VIDIOC_QBUF], arg ptr[inout, v4l2_buffer])
ioctl$VIDIOC_EXPBUF(fd fd_video, cmd const[VIDIOC_EXPBUF], arg ptr[inout, v4l2_exportbuffer])
ioctl$VIDIOC_DQBUF(fd fd_video, cmd const[VIDIOC_DQBUF], arg ptr[inout, v4l2_buffer])
ioctl$VIDIOC_STREAMON(fd fd_video, cmd const[VIDIOC_STREAMON], arg ptr[in, int32])
ioctl$VIDIOC_STREAMOFF(fd fd_video, cmd const[VIDIOC_STREAMOFF], arg ptr[in, int32])
ioctl$VIDIOC_G_PARM(fd fd_video, cmd const[VIDIOC_G_PARM], arg ptr[inout, v4l2_streamparm])
ioctl$VIDIOC_S_PARM(fd fd_video, cmd const[VIDIOC_S_PARM], arg ptr[inout, v4l2_streamparm])
ioctl$VIDIOC_G_STD(fd fd_video, cmd const[VIDIOC_G_STD], arg ptr[out, v4l2_std_id])
ioctl$VIDIOC_S_STD(fd fd_video, cmd const[VIDIOC_S_STD], arg ptr[in, v4l2_std_id])
ioctl$VIDIOC_ENUMSTD(fd fd_video, cmd const[VIDIOC_ENUMSTD], arg ptr[inout, v4l2_standard])
ioctl$VIDIOC_ENUMINPUT(fd fd_video, cmd const[VIDIOC_ENUMINPUT], arg ptr[inout, v4l2_input])
ioctl$VIDIOC_G_CTRL(fd fd_video, cmd const[VIDIOC_G_CTRL], arg ptr[inout, v4l2_control])
ioctl$VIDIOC_S_CTRL(fd fd_video, cmd const[VIDIOC_S_CTRL], arg ptr[inout, v4l2_control])
ioctl$VIDIOC_G_TUNER(fd fd_video, cmd const[VIDIOC_G_TUNER], arg ptr[inout, v4l2_tuner])
ioctl$VIDIOC_S_TUNER(fd fd_video, cmd const[VIDIOC_S_TUNER], arg ptr[in, v4l2_tuner])
ioctl$VIDIOC_G_AUDIO(fd fd_video, cmd const[VIDIOC_G_AUDIO], arg ptr[out, v4l2_audio])
ioctl$VIDIOC_S_AUDIO(fd fd_video, cmd const[VIDIOC_S_AUDIO], arg ptr[in, v4l2_audio])
ioctl$VIDIOC_QUERYCTRL(fd fd_video, cmd const[VIDIOC_QUERYCTRL], arg ptr[inout, v4l2_queryctrl])
ioctl$VIDIOC_QUERYMENU(fd fd_video, cmd const[VIDIOC_QUERYMENU], arg ptr[inout, v4l2_querymenu])
ioctl$VIDIOC_G_INPUT(fd fd_video, cmd const[VIDIOC_G_INPUT], arg ptr[out, int32])
ioctl$VIDIOC_S_INPUT(fd fd_video, cmd const[VIDIOC_S_INPUT], arg ptr[inout, int32])
ioctl$VIDIOC_G_EDID(fd fd_video, cmd const[VIDIOC_G_EDID], arg ptr[inout, v4l2_edid])
ioctl$VIDIOC_S_EDID(fd fd_video, cmd const[VIDIOC_S_EDID], arg ptr[inout, v4l2_edid])
ioctl$VIDIOC_G_OUTPUT(fd fd_video, cmd const[VIDIOC_G_OUTPUT], arg ptr[out, int32])
ioctl$VIDIOC_S_OUTPUT(fd fd_video, cmd const[VIDIOC_S_OUTPUT], arg ptr[inout, int32])
ioctl$VIDIOC_ENUMOUTPUT(fd fd_video, cmd const[VIDIOC_ENUMOUTPUT], arg ptr[inout, v4l2_output])
ioctl$VIDIOC_G_AUDOUT(fd fd_video, cmd const[VIDIOC_G_AUDOUT], arg ptr[out, v4l2_audioout])
ioctl$VIDIOC_S_AUDOUT(fd fd_video, cmd const[VIDIOC_S_AUDOUT], arg ptr[in, v4l2_audioout])
ioctl$VIDIOC_G_MODULATOR(fd fd_video, cmd const[VIDIOC_G_MODULATOR], arg ptr[inout, v4l2_modulator])
ioctl$VIDIOC_S_MODULATOR(fd fd_video, cmd const[VIDIOC_S_MODULATOR], arg ptr[in, v4l2_modulator])
ioctl$VIDIOC_G_FREQUENCY(fd fd_video, cmd const[VIDIOC_G_FREQUENCY], arg ptr[inout, v4l2_frequency])
ioctl$VIDIOC_S_FREQUENCY(fd fd_video, cmd const[VIDIOC_S_FREQUENCY], arg ptr[in, v4l2_frequency])
ioctl$VIDIOC_CROPCAP(fd fd_video, cmd const[VIDIOC_CROPCAP], arg ptr[inout, v4l2_cropcap])
ioctl$VIDIOC_G_CROP(fd fd_video, cmd const[VIDIOC_G_CROP], arg ptr[inout, v4l2_crop])
ioctl$VIDIOC_S_CROP(fd fd_video, cmd const[VIDIOC_S_CROP], arg ptr[in, v4l2_crop])
ioctl$VIDIOC_G_JPEGCOMP(fd fd_video, cmd const[VIDIOC_G_JPEGCOMP], arg ptr[out, v4l2_jpegcompression])
ioctl$VIDIOC_S_JPEGCOMP(fd fd_video, cmd const[VIDIOC_S_JPEGCOMP], arg ptr[in, v4l2_jpegcompression])
ioctl$VIDIOC_QUERYSTD(fd fd_video, cmd const[VIDIOC_QUERYSTD], arg ptr[out, v4l2_std_id])
ioctl$VIDIOC_TRY_FMT(fd fd_video, cmd const[VIDIOC_TRY_FMT], arg ptr[inout, v4l2_format])
ioctl$VIDIOC_ENUMAUDIO(fd fd_video, cmd const[VIDIOC_ENUMAUDIO], arg ptr[inout, v4l2_audio])
ioctl$VIDIOC_ENUMAUDOUT(fd fd_video, cmd const[VIDIOC_ENUMAUDOUT], arg ptr[inout, v4l2_audioout])
ioctl$VIDIOC_G_PRIORITY(fd fd_video, cmd const[VIDIOC_G_PRIORITY], arg flags[v4l2_priority])
ioctl$VIDIOC_S_PRIORITY(fd fd_video, cmd const[VIDIOC_S_PRIORITY], arg flags[v4l2_priority])
ioctl$VIDIOC_G_SLICED_VBI_CAP(fd fd_video, cmd const[VIDIOC_G_SLICED_VBI_CAP], arg ptr[inout, v4l2_sliced_vbi_cap])
ioctl$VIDIOC_LOG_STATUS(fd fd_video, cmd const[VIDIOC_LOG_STATUS], arg const[0])
ioctl$VIDIOC_G_EXT_CTRLS(fd fd_video, cmd const[VIDIOC_G_EXT_CTRLS], arg ptr[inout, v4l2_ext_controls])
ioctl$VIDIOC_S_EXT_CTRLS(fd fd_video, cmd const[VIDIOC_S_EXT_CTRLS], arg ptr[inout, v4l2_ext_controls])
ioctl$VIDIOC_TRY_EXT_CTRLS(fd fd_video, cmd const[VIDIOC_TRY_EXT_CTRLS], arg ptr[inout, v4l2_ext_controls])
ioctl$VIDIOC_ENUM_FRAMESIZES(fd fd_video, cmd const[VIDIOC_ENUM_FRAMESIZES], arg ptr[inout, v4l2_frmsizeenum])
ioctl$VIDIOC_ENUM_FRAMEINTERVALS(fd fd_video, cmd const[VIDIOC_ENUM_FRAMEINTERVALS], arg ptr[inout, v4l2_frmivalenum])
ioctl$VIDIOC_G_ENC_INDEX(fd fd_video, cmd const[VIDIOC_G_ENC_INDEX], arg ptr[out, v4l2_enc_idx])
ioctl$VIDIOC_ENCODER_CMD(fd fd_video, cmd const[VIDIOC_ENCODER_CMD], arg ptr[inout, v4l2_encoder_cmd])
ioctl$VIDIOC_TRY_ENCODER_CMD(fd fd_video, cmd const[VIDIOC_TRY_ENCODER_CMD], arg ptr[inout, v4l2_encoder_cmd])
ioctl$VIDIOC_DBG_S_REGISTER(fd fd_video, cmd const[VIDIOC_DBG_S_REGISTER], arg ptr[in, v4l2_dbg_register])
ioctl$VIDIOC_DBG_G_REGISTER(fd fd_video, cmd const[VIDIOC_DBG_G_REGISTER], arg ptr[inout, v4l2_dbg_register])
ioctl$VIDIOC_S_HW_FREQ_SEEK(fd fd_video, cmd const[VIDIOC_S_HW_FREQ_SEEK], arg ptr[in, v4l2_hw_freq_seek])
ioctl$VIDIOC_S_DV_TIMINGS(fd fd_video, cmd const[VIDIOC_S_DV_TIMINGS], arg ptr[inout, v4l2_dv_timings])
ioctl$VIDIOC_G_DV_TIMINGS(fd fd_video, cmd const[VIDIOC_G_DV_TIMINGS], arg ptr[inout, v4l2_dv_timings])
ioctl$VIDIOC_DQEVENT(fd fd_video, cmd const[VIDIOC_DQEVENT], arg ptr[out, v4l2_event])
ioctl$VIDIOC_SUBSCRIBE_EVENT(fd fd_video, cmd const[VIDIOC_SUBSCRIBE_EVENT], arg ptr[in, v4l2_event_subscription])
ioctl$VIDIOC_UNSUBSCRIBE_EVENT(fd fd_video, cmd const[VIDIOC_UNSUBSCRIBE_EVENT], arg ptr[in, v4l2_event_subscription])
ioctl$VIDIOC_CREATE_BUFS(fd fd_video, cmd const[VIDIOC_CREATE_BUFS], arg ptr[inout, v4l2_create_buffers])
ioctl$VIDIOC_PREPARE_BUF(fd fd_video, cmd const[VIDIOC_PREPARE_BUF], arg ptr[inout, v4l2_buffer])
ioctl$VIDIOC_G_SELECTION(fd fd_video, cmd const[VIDIOC_G_SELECTION], arg ptr[inout, v4l2_selection])
ioctl$VIDIOC_S_SELECTION(fd fd_video, cmd const[VIDIOC_S_SELECTION], arg ptr[inout, v4l2_selection])
ioctl$VIDIOC_DECODER_CMD(fd fd_video, cmd const[VIDIOC_DECODER_CMD], arg ptr[inout, v4l2_decoder_cmd])
ioctl$VIDIOC_TRY_DECODER_CMD(fd fd_video, cmd const[VIDIOC_TRY_DECODER_CMD], arg ptr[inout, v4l2_decoder_cmd])
ioctl$VIDIOC_ENUM_DV_TIMINGS(fd fd_video, cmd const[VIDIOC_ENUM_DV_TIMINGS], arg ptr[inout, v4l2_enum_dv_timings])
ioctl$VIDIOC_QUERY_DV_TIMINGS(fd fd_video, cmd const[VIDIOC_QUERY_DV_TIMINGS], arg ptr[out, v4l2_dv_timings])
ioctl$VIDIOC_DV_TIMINGS_CAP(fd fd_video, cmd const[VIDIOC_DV_TIMINGS_CAP], arg ptr[inout, v4l2_dv_timings_cap])
ioctl$VIDIOC_ENUM_FREQ_BANDS(fd fd_video, cmd const[VIDIOC_ENUM_FREQ_BANDS], arg ptr[inout, v4l2_frequency_band])
ioctl$VIDIOC_DBG_G_CHIP_INFO(fd fd_video, cmd const[VIDIOC_DBG_G_CHIP_INFO], arg ptr[inout, v4l2_dbg_chip_info])
ioctl$VIDIOC_QUERY_EXT_CTRL(fd fd_video, cmd const[VIDIOC_QUERY_EXT_CTRL], arg ptr[inout, v4l2_query_ext_ctrl])
ioctl$VIDIOC_SUBDEV_G_FMT(fd fd_video, cmd const[VIDIOC_SUBDEV_G_FMT], arg ptr[inout, v4l2_subdev_format])
ioctl$VIDIOC_SUBDEV_S_FMT(fd fd_video, cmd const[VIDIOC_SUBDEV_S_FMT], arg ptr[inout, v4l2_subdev_format])
ioctl$VIDIOC_SUBDEV_G_FRAME_INTERVAL(fd fd_video, cmd const[VIDIOC_SUBDEV_G_FRAME_INTERVAL], arg ptr[inout, v4l2_subdev_frame_interval])
ioctl$VIDIOC_SUBDEV_S_FRAME_INTERVAL(fd fd_video, cmd const[VIDIOC_SUBDEV_S_FRAME_INTERVAL], arg ptr[inout, v4l2_subdev_frame_interval])
ioctl$VIDIOC_SUBDEV_ENUM_MBUS_CODE(fd fd_video, cmd const[VIDIOC_SUBDEV_ENUM_MBUS_CODE], arg ptr[inout, v4l2_subdev_mbus_code_enum])
ioctl$VIDIOC_SUBDEV_ENUM_FRAME_SIZE(fd fd_video, cmd const[VIDIOC_SUBDEV_ENUM_FRAME_SIZE], arg ptr[inout, v4l2_subdev_frame_size_enum])
ioctl$VIDIOC_SUBDEV_ENUM_FRAME_INTERVAL(fd fd_video, cmd const[VIDIOC_SUBDEV_ENUM_FRAME_INTERVAL], arg ptr[inout, v4l2_subdev_frame_interval_enum])
ioctl$VIDIOC_SUBDEV_G_CROP(fd fd_video, cmd const[VIDIOC_SUBDEV_G_CROP], arg ptr[inout, v4l2_subdev_crop])
ioctl$VIDIOC_SUBDEV_S_CROP(fd fd_video, cmd const[VIDIOC_SUBDEV_S_CROP], arg ptr[inout, v4l2_subdev_crop])
ioctl$VIDIOC_SUBDEV_G_SELECTION(fd fd_video, cmd const[VIDIOC_SUBDEV_G_SELECTION], arg ptr[inout, v4l2_subdev_selection])
ioctl$VIDIOC_SUBDEV_S_SELECTION(fd fd_video, cmd const[VIDIOC_SUBDEV_S_SELECTION], arg ptr[inout, v4l2_subdev_selection])
ioctl$VIDIOC_SUBDEV_G_EDID(fd fd_video, cmd const[VIDIOC_SUBDEV_G_EDID], arg ptr[inout, v4l2_edid])
ioctl$VIDIOC_SUBDEV_S_EDID(fd fd_video, cmd const[VIDIOC_SUBDEV_S_EDID], arg ptr[inout, v4l2_edid])
ioctl$VIDIOC_SUBDEV_S_DV_TIMINGS(fd fd_video, cmd const[VIDIOC_SUBDEV_S_DV_TIMINGS], arg ptr[inout, v4l2_dv_timings])
ioctl$VIDIOC_SUBDEV_G_DV_TIMINGS(fd fd_video, cmd const[VIDIOC_SUBDEV_G_DV_TIMINGS], arg ptr[inout, v4l2_dv_timings])
ioctl$VIDIOC_SUBDEV_ENUM_DV_TIMINGS(fd fd_video, cmd const[VIDIOC_SUBDEV_ENUM_DV_TIMINGS], arg ptr[inout, v4l2_enum_dv_timings])
ioctl$VIDIOC_SUBDEV_QUERY_DV_TIMINGS(fd fd_video, cmd const[VIDIOC_SUBDEV_QUERY_DV_TIMINGS], arg ptr[out, v4l2_dv_timings])
ioctl$VIDIOC_SUBDEV_DV_TIMINGS_CAP(fd fd_video, cmd const[VIDIOC_SUBDEV_DV_TIMINGS_CAP], arg ptr[inout, v4l2_dv_timings_cap])

v4l2_capability {
	driver		array[int8, 16]
	card		array[int8, 16]
	bus_version	array[int8, 32]
	version		int32
	capabilities	flags[v4l2_capability_capabilities, int32]
	device_caps	int32
	reserved	array[const[0, int32], 3]
}

v4l2_fmtdesc {
	index		int32
	type		flags[v4l2_buf_type, int32]
	flags		flags[v4l2_fmtdesc_flags, int32]
	description	array[int8, 32]
	pixelformat	flags[v4l2_pix_format_pixelformat, int32]
	reserved	array[const[0, int32], 4]
}

v4l2_format {
	type	flags[v4l2_buf_type, int32]
	fmt	v4l2_format_fmt
}

v4l2_format_fmt [
	pix		v4l2_pix_format
	pix_mp		v4l2_pix_format_mplane
	win		v4l2_window
	vbi		v4l2_vbi_format
	sliced		v4l2_sliced_vbi_format
	sdr		v4l2_sdr_format
	raw_data	array[int8, 200]
]

v4l2_pix_format {
	width		int32
	height		int32
	pixelformat	flags[v4l2_pix_format_pixelformat, int32]
	field		flags[v4l2_field, int32]
	bytesperline	int32
	sizeimage	int32
	colorspace	flags[v4l2_colorspace, int32]
	priv		int32
	flags		flags[v4l2_pix_format_flags, int32]
	ycbcr_enc	flags[v4l2_ycbcr_encoding, int32]
	quantization	flags[v4l2_quantization, int32]
	xfer_func	flags[v4l2_xfer_func, int32]
}

v4l2_pix_format_mplane {
	width		int32
	height		int32
	pixelformat	flags[v4l2_pix_format_pixelformat, int32]
	field		flags[v4l2_field, int32]
	colorspace	flags[v4l2_colorspace, int32]
	plane_fmt	array[v4l2_plane_pix_format, 8]
	num_planes	int8
	flags		int8
	ycbcr_enc	flags[v4l2_ycbcr_encoding, int8]
	quantization	flags[v4l2_quantization, int8]
	xfer_func	flags[v4l2_xfer_func, int8]
	reserved	array[const[0, int8], 7]
} [packed]

v4l2_plane_pix_format {
	sizeimage	int32
	bytesperline	int32
	reserved	array[const[0, int16], 6]
} [packed]

v4l2_window {
	w		v4l2_rect
	field		flags[v4l2_field, int32]
	chromakey	int32
	clips		ptr[inout, v4l2_clip]
	clipcount	int32
	bitmap		buffer[inout]
	global_alpha	int8
}

v4l2_rect {
	left	int32
	top	int32
	width	int32
	height	int32
}

v4l2_clip {
	c	v4l2_rect
	next	ptr[inout, v4l2_clip, opt]
}

v4l2_vbi_format {
	sampling_rate		int32
	offset			int32
	samples_per_line	int32
	sample_format		flags[v4l2_pix_format_pixelformat, int32]
	start			array[int32, 2]
	count			array[int32, 2]
	flags			flags[v4l2_vbi_format_flags, int32]
	reserved		array[const[0, int32], 2]
}

v4l2_sliced_vbi_format {
	service_set	int16
	service_lines	array[int16, 48]
	io_size		int32
	reserved	array[const[0, int32], 2]
}

v4l2_sdr_format {
	pixelformat	flags[v4l2_pix_format_pixelformat, int32]
	buffersize	int32
	reserved	array[const[0, int8], 24]
} [packed]

v4l2_requestbuffers {
	count		int32
	type		flags[v4l2_buf_type, int32]
	memory		flags[v4l2_memory, int32]
	reserved	array[const[0, int32], 2]
}

v4l2_buffer {
	index		int32
	type		flags[v4l2_buf_type, int32]
	bytesused	len[type, int32]
	flags		flags[v4l2_buffer_flags, int32]
	timestamp	timeval
	timecode	v4l2_timecode
	sequence	int32
	memory		flags[v4l2_memory, int32]
	m		v4l2_buffer_union
	length		len[type, int32]
	reserved2	const[0, int32]
	reserved	const[0, int32]
}

v4l2_buffer_union [
	offset	int32
	userptr	intptr
	planes	ptr[inout, v4l2_plane]
	fd	fd_v4l2_buffer[opt]
]

v4l2_timecode {
	type		flags[v4l2_timecode_type, int32]
	flags		flags[v4l2_timecode_flags, int32]
	frames		int8
	seconds		int8
	minutes		int8
	hours		int8
	userbits	array[int8, 4]
}

v4l2_plane {
	bytesused	int32
	length		int32
	m		v4l2_plane_union
	data_offset	int32
	reserved	array[const[0, int32], 11]
}

v4l2_plane_union [
	mem_offset	int32
	userptr		intptr
	fd		fd_v4l2_buffer[opt]
]

v4l2_framebuffer {
	capability	flags[v4l2_framebuffer_capability, int32]
	flags		flags[v4l2_framebuffer_flags, int32]
	base		buffer[inout]
	fmt		v4l2_framebuffer_union
}

v4l2_framebuffer_union {
	width		int32
	height		int32
	pixelformat	flags[v4l2_pix_format_pixelformat, int32]
	field		flags[v4l2_field, int32]
	bytesperline	int32
	sizeimage	int32
	colorspace	flags[v4l2_colorspace, int32]
	priv		int32
}

v4l2_exportbuffer {
	type		flags[v4l2_buf_type, int32]
	index		int32
	plane		int32
	flags		flags[pipe_flags, int32]
	fd		fd_dmabuf[opt]
	reserved	array[const[0, int32], 11]
}

v4l2_streamparm {
	type	flags[v4l2_buf_type, int32]
	parm	v4l2_streamparm_union
}

v4l2_streamparm_union [
	capture		v4l2_captureparm
	output		v4l2_outputparm
	raw_data	array[int8, 200]
]

v4l2_captureparm {
	capability	flags[v4l2_captureparm_cap, int32]
	capturemode	flags[v4l2_captureparm_mode, int32]
	timeperframe	v4l2_fract
	extendedmode	int32
	readbuffers	int32
	reserved	array[const[0, int32], 4]
}

v4l2_fract {
	numerator	int32
	denominator	int32
}

v4l2_outputparm {
	capability	flags[v4l2_captureparm_cap, int32]
	outputmode	flags[v4l2_captureparm_mode, int32]
	timeperframe	v4l2_fract
	extendedmode	int32
	writebuffers	int32
	reserved	array[const[0, int32], 4]
}

v4l2_control {
	id	int32
	value	int32
}

v4l2_tuner {
	index		int32
	name		array[int8, 32]
	type		flags[v4l2_tuner_type, int32]
	capability	flags[v4l2_tuner_capability, int32]
	rangelow	int32
	rangehigh	int32
	rxsubchans	flags[v4l2_tuner_rxsubchans, int32]
	audmode		flags[v4l2_tuner_audmode, int32]
	signal		int32
	afc		int32
	reserved	array[const[0, int32], 4]
}

v4l2_audio {
	index		int32
	name		array[int8, 32]
	capability	flags[v4l2_audio_capability, int32]
	mode		flags[v4l2_audio_mode, int32]
	reserved	array[const[0, int32], 2]
}

v4l2_queryctrl {
	id		int32
	type		flags[v4l2_ctrl_type, int32]
	name		array[int8, 32]
	minimum		int32
	maximum		int32
	step		int32
	default_value	int32
	flags		flags[v4l2_control_flags, int32]
	reserved	array[const[0, int32], 2]
}

v4l2_querymenu {
	id		int32
	index		int32
	union		v4l2_querymenu_union
	reserved	const[0, int32]
} [packed]

v4l2_querymenu_union [
	name	array[int8, 32]
	value	int64
]

v4l2_edid {
	pad		int32
	start_block	int32
	blocks		int32
	reserved	array[const[0, int32], 5]
	edid		ptr[inout, int8]
}

v4l2_audioout {
	index		int32
	name		array[int8, 32]
	capability	flags[v4l2_audio_capability, int32]
	mode		flags[v4l2_audio_mode, int32]
	reserved	array[const[0, int32], 2]
}

v4l2_modulator {
	index		int32
	name		array[int8, 32]
	capability	flags[v4l2_tuner_capability, int32]
	rangelow	int32
	rangehigh	int32
	txsubchans	flags[v4l2_tuner_rxsubchans, int32]
	type		flags[v4l2_tuner_type, int32]
	reserved	array[const[0, int32], 3]
}

v4l2_frequency {
	tuner		int32
	type		flags[v4l2_tuner_type, int32]
	frequency	int32
	reserved	array[const[0, int32], 8]
}

v4l2_cropcap {
	type		flags[v4l2_buf_type, int32]
	bounds		v4l2_rect
	defrect		v4l2_rect
	pixelaspect	v4l2_fract
}

v4l2_crop {
	type	flags[v4l2_buf_type, int32]
	c	v4l2_rect
}

v4l2_jpegcompression {
	quality		int32
	APPn		int32[0:15]
	APP_len		int32[0:60]
	APP_data	array[int8, 60]
	COM_len		int32[0:60]
	COM_data	array[int8, 60]
	jpeg_markers	flags[v4l2_jpeg_markers, int32]
}

v4l2_sliced_vbi_cap {
	service_set	int16
	service_lines	array[int16, 48]
	type		flags[v4l2_buf_type, int32]
	reserved	array[const[0, int32], 3]
}

v4l2_ext_controls {
	ctrl_class	flags[v4l2_ext_ctrl_class, int32]
	count		int32
	error_idx	int32
	reserved	array[const[0, int32], 2]
	controls	ptr[inout, v4l2_ext_control]
}

v4l2_ext_control {
	id		flags[v4l2_ext_controls, int32]
	size		int32
	reserved2	array[const[0, int32], 1]
	union		v4l2_ext_u
} [packed]

v4l2_ext_u [
	value	int32
	value64	int64
	string	ptr[inout, int8]
	p_u8	ptr[inout, int8]
	p_u16	ptr[inout, int16]
	p_u32	ptr[inout, int32]
	ptr	intptr
]

v4l2_frmsizeenum {
	index		int32
	pixel_format	flags[v4l2_pix_format_pixelformat, int32]
	type		flags[v4l2_frmsizetypes, int32]
	union		v4l2_frmsizeenum_union
	reserved	array[const[0, int32], 2]
}

v4l2_frmsizeenum_union [
	discrete	v4l2_frmsize_discrete
	stepwise	v4l2_frmsize_stepwise
]

v4l2_frmsize_discrete {
	width	int32
	height	int32
}

v4l2_frmsize_stepwise {
	min_width	int32
	max_width	int32
	step_width	int32
	min_height	int32
	max_height	int32
	step_height	int32
}

v4l2_frmivalenum {
	index		int32
	pixel_format	flags[v4l2_pix_format_pixelformat, int32]
	width		int32
	height		int32
	type		flags[v4l2_frmivaltypes, int32]
	union		v4l2_frmivalenum_union
	reserved	array[const[0, int32], 2]
}

v4l2_frmivalenum_union [
	discrete	v4l2_fract
	stepwise	v4l2_frmival_stepwise
]

v4l2_frmival_stepwise {
	min	v4l2_fract
	max	v4l2_fract
	step	v4l2_fract
}

v4l2_enc_idx {
	entries		int32
	entries_cap	int32
	reserved	array[const[0, int32], 4]
	entry		array[v4l2_enc_idx_entry, 64]
}

v4l2_enc_idx_entry {
	offset		int64
	pts		int64
	length		int32
	flags		flags[v4l2_enc_idx_flags, int32]
	reserved	array[const[0, int32], 2]
}

v4l2_dbg_register {
	match	v4l2_dbg_match
	size	bytesize[reg, int32]
	reg	int64
	val	int64
} [packed]

v4l2_dbg_match {
	type	flags[v4l2_dbg_match_type, int32]
	union	v4l2_dbg_match_union
} [packed]

v4l2_dbg_match_union [
	addr	int32
	name	array[int8, 32]
]

v4l2_hw_freq_seek {
	tuner		int32
	type		flags[v4l2_tuner_type, int32]
	seek_upward	int32
	wrap_around	int32
	spacing		int32
	rangelow	int32
	rangehigh	int32
	reserved	array[const[0, int32], 5]
}

v4l2_dv_timings {
	type	flags[v4l2_dv_timings_type, int32]
	union	v4l2_dv_timings_union
} [packed]

v4l2_dv_timings_union [
	bt		v4l2_bt_timings
	reserved	array[const[0, int32], 32]
]

v4l2_bt_timings {
	width		int32
	height		int32
	interlaced	flags[v4l2_bt_timings_interlaced, int32]
	polarities	flags[v4l2_bt_timings_polarities, int32]
	pixelclock	int64
	hfrontporch	int32
	hsync		int32
	hbackporch	int32
	vfrontporch	int32
	vsync		int32
	vbackporch	int32
	il_vfrontporch	int32
	il_vsync	int32
	il_vbackporch	int32
	standards	flags[v4l2_bt_timings_standards, int32]
	flags		flags[v4l2_bt_timings_flags, int32]
	reserved	array[const[0, int32], 14]
} [packed]

v4l2_encoder_cmd {
	cmd	flags[v4l2_encoder_cmd_cmd, int32]
	flags	flags[v4l2_encoder_flags, int32]
	data	array[int32, 8]
}

v4l2_event {
	type		flags[v4l2_event_type, int32]
	u		v4l2_event_union
	pending		int32
	sequence	int32
	timestamp	timespec
	id		int32
	reserved	array[const[0, int32], 8]
}

v4l2_event_union [
	vsync		v4l2_event_vsync
	ctrl		v4l2_event_ctrl
	frame_sync	v4l2_event_frame_sync
	src_change	v4l2_event_src_change
	motion_det	v4l2_event_motion_det
	data		array[int8, 64]
]

v4l2_event_vsync {
	field	flags[v4l2_field_1, int8]
} [packed]

v4l2_event_ctrl {
	changes		flags[v4l2_event_ctrl_changes, int32]
	type		flags[v4l2_ctrl_type, int32]
	u		v4l2_event_ctrl_union
	flags		int32
	minimum		int32
	maximum		int32
	step		int32
	default_value	int32
}

v4l2_event_ctrl_union [
	value	int32
	value64	int64
]

v4l2_event_frame_sync {
	frame_sequence	int32
}

v4l2_event_src_change {
	changes	flags[v4l2_event_src_changes, int32]
}

v4l2_event_motion_det {
	flags		flags[v4l2_event_motion_det_flags, int32]
	frame_sequence	int32
	region_mask	int32
}

v4l2_event_subscription {
	type		flags[v4l2_event_type, int32]
	id		int32
	flags		flags[v4l2_event_subscription_flags, int32]
	reserved	array[const[0, int32], 5]
}

v4l2_create_buffers {
	index		int32
	count		int32
	memory		flags[v4l2_memory, int32]
	format		v4l2_format
	reserved	array[const[0, int32], 8]
}

v4l2_selection {
	type		flags[v4l2_buf_type_1, int32]
	target		flags[v4l2_selection_target, int32]
	flags		flags[v4l2_selection_flags, int32]
	r		v4l2_rect
	reserved	array[const[0, int32], 9]
}

v4l2_decoder_cmd {
	cmd	flags[v4l2_decoder_cmd_cmd, int32]
	flags	flags[v4l2_decoder_cmd_flags, int32]
	u	v4l2_decoder_cmd_u
}

v4l2_decoder_cmd_u [
	stop_pts	int64
	start		v4l2_decoder_cmd_start
	raw_data	array[int32, 16]
]

v4l2_decoder_cmd_start {
	speed	int32
	format	flags[v4l2_decoder_cmd_format, int32]
}

v4l2_enum_dv_timings {
	index		int32
	pad		int32
	reserved	array[const[0, int32], 2]
	timings		v4l2_dv_timings
}

v4l2_dv_timings_cap {
	type		flags[v4l2_dv_timings_type, int32]
	pad		int32
	reserved	array[const[0, int32], 2]
	u		v4l2_dv_timings_cap_u
}

v4l2_dv_timings_cap_u [
	bt		v4l2_bt_timings_cap
	raw_data	array[int32, 32]
]

v4l2_bt_timings_cap {
	min_width	int32
	max_width	int32
	min_height	int32
	max_height	int32
	min_pixelclock	int64
	max_pixelclock	int64
	standards	flags[v4l2_bt_timings_standards, int32]
	capabilities	flags[v4l2_bt_timings_cap_capabilities, int32]
	reserved	array[const[0, int32], 16]
} [packed]

v4l2_frequency_band {
	tuner		int32
	type		flags[v4l2_tuner_type, int32]
	index		int32
	capability	flags[v4l2_tuner_capability, int32]
	rangelow	int32
	rangehigh	int32
	modulation	flags[v4l2_frequency_band_modulation, int32]
	reserved	array[const[0, int32], 9]
}

v4l2_dbg_chip_info {
	match		v4l2_dbg_match
	name		array[int8, 32]
	flags		flags[v4l2_dbg_chip_info_flags, int32]
	reserved	array[const[0, int32], 32]
} [packed]

v4l2_query_ext_ctrl {
	id		flags[v4l2_query_ext_ctrl, int32]
	type		flags[v4l2_ctrl_type, int32]
	name		array[int8, 32]
	minimum		int64
	maximum		int64
	step		int64
	default_value	int64
	flags		int32
	elem_size	int32
	elems		int32
	nr_of_dims	int32
	dims		array[int32, 4]
	reserved	array[const[0, int32], 32]
}

v4l2_standard {
	index		int32
	id		flags[v4l2_standard_std, int32]
	name		array[int8, 24]
	frameperiod	v4l2_fract
	framelines	int32
	reserved	array[const[0, int32], 4]
}

v4l2_input {
	index		int32
	name		array[int8, 32]
	type		flags[v4l2_input_type, int32]
	audioset	int32
	tuner		flags[v4l2_tuner_type, int32]
	std		flags[v4l2_standard_std, int32]
	status		flags[v4l2_input_status, int32]
	capabilities	flags[v4l2_input_capabilities, int32]
	reserved	array[const[0, int32], 3]
}

v4l2_output {
	index		int32
	name		array[int8, 32]
	type		flags[v4l2_output_type, int32]
	audioset	int32
	modulator	int32
	std		flags[v4l2_standard_std, int32]
	capabilities	flags[v4l2_output_capabilities, int32]
	reserved	array[const[0, int32], 3]
}

v4l2_subdev_format {
	which		flags[v4l2_subdev_format_whence, int32]
	pad		int32
	format		v4l2_mbus_framefmt
	reserved	array[const[0, int32], 8]
}

v4l2_mbus_framefmt {
	width		int32
	height		int32
	code		flags[media_bus_fmt, int32]
	field		flags[v4l2_field, int32]
	colorspace	flags[v4l2_colorspace, int32]
	ycbcr_enc	flags[v4l2_ycbcr_encoding, int32]
	quantization	flags[v4l2_quantization, int32]
	xfer_func	flags[v4l2_xfer_func, int32]
}

v4l2_subdev_frame_interval {
	pad		int32
	interval	v4l2_fract
	reserved	array[const[0, int32], 9]
}

v4l2_subdev_mbus_code_enum {
	pad		int32
	index		int32
	code		flags[media_bus_fmt, int32]
	which		flags[v4l2_subdev_format_whence, int32]
	reserved	array[const[0, int32], 8]
}

v4l2_subdev_frame_size_enum {
	index		int32
	pad		int32
	code		flags[media_bus_fmt, int32]
	min_width	int32
	max_width	int32
	min_height	int32
	max_height	int32
	which		flags[v4l2_subdev_format_whence, int32]
	reserved	array[const[0, int32], 8]
}

v4l2_subdev_frame_interval_enum {
	index		int32
	pad		int32
	code		flags[media_bus_fmt, int32]
	width		int32
	height		int32
	interval	v4l2_fract
	which		flags[v4l2_subdev_format_whence, int32]
	reserved	array[const[0, int32], 8]
}

v4l2_subdev_crop {
	which		flags[v4l2_subdev_format_whence, int32]
	pad		int32
	rect		v4l2_rect
	reserved	array[const[0, int32], 8]
}

v4l2_subdev_selection {
	which		flags[v4l2_subdev_format_whence, int32]
	pad		int32
	target		flags[v4l2_selection_target, int32]
	flags		flags[v4l2_selection_flags, int32]
	r		v4l2_rect
	reserved	array[const[0, int32], 8]
}

v4l2_jpeg_markers = V4L2_JPEG_MARKER_DHT, V4L2_JPEG_MARKER_DQT, V4L2_JPEG_MARKER_DRI, V4L2_JPEG_MARKER_COM, V4L2_JPEG_MARKER_APP
v4l2_subdev_format_whence = V4L2_SUBDEV_FORMAT_TRY, V4L2_SUBDEV_FORMAT_ACTIVE
v4l2_buf_type_1 = V4L2_BUF_TYPE_VIDEO_CAPTURE, V4L2_BUF_TYPE_VIDEO_OUTPUT, V4L2_BUF_TYPE_VIDEO_OVERLAY, V4L2_BUF_TYPE_VBI_CAPTURE, V4L2_BUF_TYPE_VBI_OUTPUT, V4L2_BUF_TYPE_SLICED_VBI_CAPTURE, V4L2_BUF_TYPE_SLICED_VBI_OUTPUT, V4L2_BUF_TYPE_VIDEO_OUTPUT_OVERLAY, V4L2_BUF_TYPE_SDR_CAPTURE, V4L2_BUF_TYPE_SDR_OUTPUT
v4l2_field_1 = V4L2_FIELD_ANY, V4L2_FIELD_NONE, V4L2_FIELD_TOP, V4L2_FIELD_BOTTOM
v4l2_field = V4L2_FIELD_ANY, V4L2_FIELD_NONE, V4L2_FIELD_TOP, V4L2_FIELD_BOTTOM, V4L2_FIELD_INTERLACED, V4L2_FIELD_SEQ_TB, V4L2_FIELD_SEQ_BT, V4L2_FIELD_ALTERNATE, V4L2_FIELD_INTERLACED_TB, V4L2_FIELD_INTERLACED_BT
v4l2_colorspace = V4L2_COLORSPACE_DEFAULT, V4L2_COLORSPACE_SMPTE170M, V4L2_COLORSPACE_SMPTE240M, V4L2_COLORSPACE_REC709, V4L2_COLORSPACE_BT878, V4L2_COLORSPACE_470_SYSTEM_M, V4L2_COLORSPACE_470_SYSTEM_BG, V4L2_COLORSPACE_JPEG, V4L2_COLORSPACE_SRGB, V4L2_COLORSPACE_ADOBERGB, V4L2_COLORSPACE_BT2020, V4L2_COLORSPACE_RAW, V4L2_COLORSPACE_DCI_P3
v4l2_ycbcr_encoding = V4L2_YCBCR_ENC_DEFAULT, V4L2_YCBCR_ENC_601, V4L2_YCBCR_ENC_709, V4L2_YCBCR_ENC_XV601, V4L2_YCBCR_ENC_XV709, V4L2_YCBCR_ENC_BT2020, V4L2_YCBCR_ENC_BT2020_CONST_LUM, V4L2_YCBCR_ENC_SMPTE240M
v4l2_quantization = V4L2_QUANTIZATION_DEFAULT, V4L2_QUANTIZATION_FULL_RANGE, V4L2_QUANTIZATION_LIM_RANGE
v4l2_xfer_func = V4L2_XFER_FUNC_DEFAULT, V4L2_XFER_FUNC_709, V4L2_XFER_FUNC_SRGB, V4L2_XFER_FUNC_ADOBERGB, V4L2_XFER_FUNC_SMPTE240M, V4L2_XFER_FUNC_NONE, V4L2_XFER_FUNC_DCI_P3, V4L2_XFER_FUNC_SMPTE2084
v4l2_buf_type = V4L2_BUF_TYPE_VIDEO_CAPTURE, V4L2_BUF_TYPE_VIDEO_OUTPUT, V4L2_BUF_TYPE_VIDEO_OVERLAY, V4L2_BUF_TYPE_VBI_CAPTURE, V4L2_BUF_TYPE_VBI_OUTPUT, V4L2_BUF_TYPE_SLICED_VBI_CAPTURE, V4L2_BUF_TYPE_SLICED_VBI_OUTPUT, V4L2_BUF_TYPE_VIDEO_OUTPUT_OVERLAY, V4L2_BUF_TYPE_VIDEO_CAPTURE_MPLANE, V4L2_BUF_TYPE_VIDEO_OUTPUT_MPLANE, V4L2_BUF_TYPE_SDR_CAPTURE, V4L2_BUF_TYPE_SDR_OUTPUT
v4l2_memory = V4L2_MEMORY_MMAP, V4L2_MEMORY_USERPTR, V4L2_MEMORY_OVERLAY, V4L2_MEMORY_DMABUF
v4l2_tuner_type = V4L2_TUNER_RADIO, V4L2_TUNER_ANALOG_TV, V4L2_TUNER_DIGITAL_TV, V4L2_TUNER_SDR, V4L2_TUNER_RF
v4l2_ctrl_type = V4L2_CTRL_TYPE_INTEGER, V4L2_CTRL_TYPE_BOOLEAN, V4L2_CTRL_TYPE_MENU, V4L2_CTRL_TYPE_BUTTON, V4L2_CTRL_TYPE_INTEGER64, V4L2_CTRL_TYPE_CTRL_CLASS, V4L2_CTRL_TYPE_STRING, V4L2_CTRL_TYPE_BITMASK, V4L2_CTRL_TYPE_INTEGER_MENU, V4L2_CTRL_COMPOUND_TYPES, V4L2_CTRL_TYPE_U8, V4L2_CTRL_TYPE_U16, V4L2_CTRL_TYPE_U32
v4l2_priority = V4L2_PRIORITY_UNSET, V4L2_PRIORITY_BACKGROUND, V4L2_PRIORITY_INTERACTIVE, V4L2_PRIORITY_RECORD, V4L2_PRIORITY_DEFAULT
media_bus_fmt = MEDIA_BUS_FMT_FIXED, MEDIA_BUS_FMT_RGB444_1X12, MEDIA_BUS_FMT_RGB444_2X8_PADHI_BE, MEDIA_BUS_FMT_RGB444_2X8_PADHI_LE, MEDIA_BUS_FMT_RGB555_2X8_PADHI_BE, MEDIA_BUS_FMT_RGB555_2X8_PADHI_LE, MEDIA_BUS_FMT_RGB565_1X16, MEDIA_BUS_FMT_BGR565_2X8_BE, MEDIA_BUS_FMT_BGR565_2X8_LE, MEDIA_BUS_FMT_RGB565_2X8_BE, MEDIA_BUS_FMT_RGB565_2X8_LE, MEDIA_BUS_FMT_RGB666_1X18, MEDIA_BUS_FMT_RBG888_1X24, MEDIA_BUS_FMT_RGB666_1X24_CPADHI, MEDIA_BUS_FMT_RGB666_1X7X3_SPWG, MEDIA_BUS_FMT_BGR888_1X24, MEDIA_BUS_FMT_GBR888_1X24, MEDIA_BUS_FMT_RGB888_1X24, MEDIA_BUS_FMT_RGB888_2X12_BE, MEDIA_BUS_FMT_RGB888_2X12_LE, MEDIA_BUS_FMT_RGB888_1X7X4_SPWG, MEDIA_BUS_FMT_RGB888_1X7X4_JEIDA, MEDIA_BUS_FMT_ARGB8888_1X32, MEDIA_BUS_FMT_RGB888_1X32_PADHI, MEDIA_BUS_FMT_Y8_1X8, MEDIA_BUS_FMT_UV8_1X8, MEDIA_BUS_FMT_UYVY8_1_5X8, MEDIA_BUS_FMT_VYUY8_1_5X8, MEDIA_BUS_FMT_YUYV8_1_5X8, MEDIA_BUS_FMT_YVYU8_1_5X8, MEDIA_BUS_FMT_UYVY8_2X8, MEDIA_BUS_FMT_VYUY8_2X8, MEDIA_BUS_FMT_YUYV8_2X8, MEDIA_BUS_FMT_YVYU8_2X8, MEDIA_BUS_FMT_Y10_1X10, MEDIA_BUS_FMT_UYVY10_2X10, MEDIA_BUS_FMT_VYUY10_2X10, MEDIA_BUS_FMT_YUYV10_2X10, MEDIA_BUS_FMT_YVYU10_2X10, MEDIA_BUS_FMT_Y12_1X12, MEDIA_BUS_FMT_UYVY12_2X12, MEDIA_BUS_FMT_VYUY12_2X12, MEDIA_BUS_FMT_YUYV12_2X12, MEDIA_BUS_FMT_YVYU12_2X12, MEDIA_BUS_FMT_UYVY8_1X16, MEDIA_BUS_FMT_VYUY8_1X16, MEDIA_BUS_FMT_YUYV8_1X16, MEDIA_BUS_FMT_YVYU8_1X16, MEDIA_BUS_FMT_YDYUYDYV8_1X16, MEDIA_BUS_FMT_UYVY10_1X20, MEDIA_BUS_FMT_VYUY10_1X20, MEDIA_BUS_FMT_YUYV10_1X20, MEDIA_BUS_FMT_YVYU10_1X20, MEDIA_BUS_FMT_VUY8_1X24, MEDIA_BUS_FMT_YUV8_1X24, MEDIA_BUS_FMT_UYVY12_1X24, MEDIA_BUS_FMT_VYUY12_1X24, MEDIA_BUS_FMT_YUYV12_1X24, MEDIA_BUS_FMT_YVYU12_1X24, MEDIA_BUS_FMT_YUV10_1X30, MEDIA_BUS_FMT_AYUV8_1X32, MEDIA_BUS_FMT_SBGGR8_1X8, MEDIA_BUS_FMT_SGBRG8_1X8, MEDIA_BUS_FMT_SGRBG8_1X8, MEDIA_BUS_FMT_SRGGB8_1X8, MEDIA_BUS_FMT_SBGGR10_ALAW8_1X8, MEDIA_BUS_FMT_SGBRG10_ALAW8_1X8, MEDIA_BUS_FMT_SGRBG10_ALAW8_1X8, MEDIA_BUS_FMT_SRGGB10_ALAW8_1X8, MEDIA_BUS_FMT_SBGGR10_DPCM8_1X8, MEDIA_BUS_FMT_SGBRG10_DPCM8_1X8, MEDIA_BUS_FMT_SGRBG10_DPCM8_1X8, MEDIA_BUS_FMT_SRGGB10_DPCM8_1X8, MEDIA_BUS_FMT_SBGGR10_2X8_PADHI_BE, MEDIA_BUS_FMT_SBGGR10_2X8_PADHI_LE, MEDIA_BUS_FMT_SBGGR10_2X8_PADLO_BE, MEDIA_BUS_FMT_SBGGR10_2X8_PADLO_LE, MEDIA_BUS_FMT_SBGGR10_1X10, MEDIA_BUS_FMT_SGBRG10_1X10, MEDIA_BUS_FMT_SGRBG10_1X10, MEDIA_BUS_FMT_SRGGB10_1X10, MEDIA_BUS_FMT_SBGGR12_1X12, MEDIA_BUS_FMT_SGBRG12_1X12, MEDIA_BUS_FMT_SGRBG12_1X12, MEDIA_BUS_FMT_SRGGB12_1X12, MEDIA_BUS_FMT_JPEG_1X8, MEDIA_BUS_FMT_S5C_UYVY_JPEG_1X8, MEDIA_BUS_FMT_AHSV8888_1X32
v4l2_pix_format_flags = V4L2_PIX_FMT_FLAG_PREMUL_ALPHA
v4l2_pix_format_pixelformat = V4L2_PIX_FMT_RGB332, V4L2_PIX_FMT_RGB444, V4L2_PIX_FMT_ARGB444, V4L2_PIX_FMT_XRGB444, V4L2_PIX_FMT_RGB555, V4L2_PIX_FMT_ARGB555, V4L2_PIX_FMT_XRGB555, V4L2_PIX_FMT_RGB565, V4L2_PIX_FMT_RGB555X, V4L2_PIX_FMT_ARGB555X, V4L2_PIX_FMT_XRGB555X, V4L2_PIX_FMT_RGB565X, V4L2_PIX_FMT_BGR666, V4L2_PIX_FMT_BGR24, V4L2_PIX_FMT_RGB24, V4L2_PIX_FMT_BGR32, V4L2_PIX_FMT_ABGR32, V4L2_PIX_FMT_XBGR32, V4L2_PIX_FMT_RGB32, V4L2_PIX_FMT_ARGB32, V4L2_PIX_FMT_XRGB32, V4L2_PIX_FMT_RGBA8888_UBWC, V4L2_PIX_FMT_GREY, V4L2_PIX_FMT_Y4, V4L2_PIX_FMT_Y6, V4L2_PIX_FMT_Y10, V4L2_PIX_FMT_Y12, V4L2_PIX_FMT_Y16, V4L2_PIX_FMT_Y16_BE, V4L2_PIX_FMT_Y10BPACK, V4L2_PIX_FMT_PAL8, V4L2_PIX_FMT_UV8, V4L2_PIX_FMT_YUYV, V4L2_PIX_FMT_YYUV, V4L2_PIX_FMT_YVYU, V4L2_PIX_FMT_UYVY, V4L2_PIX_FMT_VYUY, V4L2_PIX_FMT_Y41P, V4L2_PIX_FMT_YUV444, V4L2_PIX_FMT_YUV555, V4L2_PIX_FMT_YUV565, V4L2_PIX_FMT_YUV32, V4L2_PIX_FMT_HI240, V4L2_PIX_FMT_HM12, V4L2_PIX_FMT_M420, V4L2_PIX_FMT_NV12, V4L2_PIX_FMT_NV21, V4L2_PIX_FMT_NV16, V4L2_PIX_FMT_NV61, V4L2_PIX_FMT_NV24, V4L2_PIX_FMT_NV42, V4L2_PIX_FMT_NV12_UBWC, V4L2_PIX_FMT_NV12_TP10_UBWC, V4L2_PIX_FMT_NV12_P010_UBWC, V4L2_PIX_FMT_NV12M, V4L2_PIX_FMT_NV21M, V4L2_PIX_FMT_NV16M, V4L2_PIX_FMT_NV61M, V4L2_PIX_FMT_NV12MT, V4L2_PIX_FMT_NV12MT_16X16, V4L2_PIX_FMT_YUV410, V4L2_PIX_FMT_YVU410, V4L2_PIX_FMT_YUV411P, V4L2_PIX_FMT_YUV420, V4L2_PIX_FMT_YVU420, V4L2_PIX_FMT_YUV422P, V4L2_PIX_FMT_YUV420M, V4L2_PIX_FMT_YVU420M, V4L2_PIX_FMT_YUV422M, V4L2_PIX_FMT_YVU422M, V4L2_PIX_FMT_YUV444M, V4L2_PIX_FMT_YVU444M, V4L2_PIX_FMT_SBGGR8, V4L2_PIX_FMT_SGBRG8, V4L2_PIX_FMT_SGRBG8, V4L2_PIX_FMT_SRGGB8, V4L2_PIX_FMT_SBGGR10, V4L2_PIX_FMT_SGBRG10, V4L2_PIX_FMT_SGRBG10, V4L2_PIX_FMT_SRGGB10, V4L2_PIX_FMT_SBGGR10P, V4L2_PIX_FMT_SGBRG10P, V4L2_PIX_FMT_SGRBG10P, V4L2_PIX_FMT_SRGGB10P, V4L2_PIX_FMT_SBGGR10ALAW8, V4L2_PIX_FMT_SGBRG10ALAW8, V4L2_PIX_FMT_SGRBG10ALAW8, V4L2_PIX_FMT_SRGGB10ALAW8, V4L2_PIX_FMT_SBGGR10DPCM8, V4L2_PIX_FMT_SGBRG10DPCM8, V4L2_PIX_FMT_SGRBG10DPCM8, V4L2_PIX_FMT_SRGGB10DPCM8, V4L2_PIX_FMT_SBGGR12, V4L2_PIX_FMT_SGBRG12, V4L2_PIX_FMT_SGRBG12, V4L2_PIX_FMT_SRGGB12, V4L2_PIX_FMT_SBGGR16, V4L2_PIX_FMT_MJPEG, V4L2_PIX_FMT_JPEG, V4L2_PIX_FMT_DV, V4L2_PIX_FMT_MPEG, V4L2_PIX_FMT_H264, V4L2_PIX_FMT_H264_NO_SC, V4L2_PIX_FMT_H264_MVC, V4L2_PIX_FMT_H263, V4L2_PIX_FMT_MPEG1, V4L2_PIX_FMT_MPEG2, V4L2_PIX_FMT_MPEG4, V4L2_PIX_FMT_XVID, V4L2_PIX_FMT_VC1_ANNEX_G, V4L2_PIX_FMT_VC1_ANNEX_L, V4L2_PIX_FMT_VP8, V4L2_PIX_FMT_VP9, V4L2_PIX_FMT_HEVC, V4L2_PIX_FMT_TME, V4L2_PIX_FMT_CPIA1, V4L2_PIX_FMT_WNVA, V4L2_PIX_FMT_SN9C10X, V4L2_PIX_FMT_SN9C20X_I420, V4L2_PIX_FMT_PWC1, V4L2_PIX_FMT_PWC2, V4L2_PIX_FMT_ET61X251, V4L2_PIX_FMT_SPCA501, V4L2_PIX_FMT_SPCA505, V4L2_PIX_FMT_SPCA508, V4L2_PIX_FMT_SPCA561, V4L2_PIX_FMT_PAC207, V4L2_PIX_FMT_MR97310A, V4L2_PIX_FMT_JL2005BCD, V4L2_PIX_FMT_SN9C2028, V4L2_PIX_FMT_SQ905C, V4L2_PIX_FMT_PJPG, V4L2_PIX_FMT_OV511, V4L2_PIX_FMT_OV518, V4L2_PIX_FMT_STV0680, V4L2_PIX_FMT_TM6000, V4L2_PIX_FMT_CIT_YYVYUY, V4L2_PIX_FMT_KONICA420, V4L2_PIX_FMT_JPGL, V4L2_PIX_FMT_SE401, V4L2_PIX_FMT_S5C_UYVY_JPG, V4L2_PIX_FMT_Y8I, V4L2_PIX_FMT_Y12I, V4L2_PIX_FMT_Z16
v4l2_fmtdesc_flags = V4L2_FMT_FLAG_COMPRESSED, V4L2_FMT_FLAG_EMULATED
v4l2_capability_capabilities = V4L2_CAP_VIDEO_CAPTURE, V4L2_CAP_VIDEO_OUTPUT, V4L2_CAP_VIDEO_OVERLAY, V4L2_CAP_VBI_CAPTURE, V4L2_CAP_VBI_OUTPUT, V4L2_CAP_SLICED_VBI_CAPTURE, V4L2_CAP_SLICED_VBI_OUTPUT, V4L2_CAP_RDS_CAPTURE, V4L2_CAP_VIDEO_OUTPUT_OVERLAY, V4L2_CAP_HW_FREQ_SEEK, V4L2_CAP_RDS_OUTPUT, V4L2_CAP_VIDEO_CAPTURE_MPLANE, V4L2_CAP_VIDEO_OUTPUT_MPLANE, V4L2_CAP_VIDEO_M2M_MPLANE, V4L2_CAP_VIDEO_M2M, V4L2_CAP_TUNER, V4L2_CAP_AUDIO, V4L2_CAP_RADIO, V4L2_CAP_MODULATOR, V4L2_CAP_SDR_CAPTURE, V4L2_CAP_EXT_PIX_FORMAT, V4L2_CAP_SDR_OUTPUT, V4L2_CAP_READWRITE, V4L2_CAP_ASYNCIO, V4L2_CAP_STREAMING, V4L2_CAP_TOUCH, V4L2_CAP_DEVICE_CAPS
v4l2_framebuffer_capability = V4L2_FBUF_CAP_EXTERNOVERLAY, V4L2_FBUF_CAP_CHROMAKEY, V4L2_FBUF_CAP_LIST_CLIPPING, V4L2_FBUF_CAP_BITMAP_CLIPPING, V4L2_FBUF_CAP_LOCAL_ALPHA, V4L2_FBUF_CAP_GLOBAL_ALPHA, V4L2_FBUF_CAP_LOCAL_INV_ALPHA, V4L2_FBUF_CAP_SRC_CHROMAKEY
v4l2_framebuffer_flags = V4L2_FBUF_FLAG_PRIMARY, V4L2_FBUF_FLAG_OVERLAY, V4L2_FBUF_FLAG_CHROMAKEY, V4L2_FBUF_FLAG_LOCAL_ALPHA, V4L2_FBUF_FLAG_GLOBAL_ALPHA, V4L2_FBUF_FLAG_LOCAL_INV_ALPHA, V4L2_FBUF_FLAG_SRC_CHROMAKEY
v4l2_vbi_format_flags = V4L2_VBI_UNSYNC, V4L2_VBI_INTERLACED, V4L2_VBI_ITU_525_F1_START, V4L2_VBI_ITU_525_F2_START, V4L2_VBI_ITU_625_F1_START, V4L2_VBI_ITU_625_F2_START
v4l2_buffer_flags = V4L2_BUF_FLAG_MAPPED, V4L2_BUF_FLAG_QUEUED, V4L2_BUF_FLAG_DONE, V4L2_BUF_FLAG_KEYFRAME, V4L2_BUF_FLAG_PFRAME, V4L2_BUF_FLAG_BFRAME, V4L2_BUF_FLAG_ERROR, V4L2_BUF_FLAG_TIMECODE, V4L2_BUF_FLAG_PREPARED, V4L2_BUF_FLAG_NO_CACHE_INVALIDATE, V4L2_BUF_FLAG_NO_CACHE_CLEAN, V4L2_BUF_FLAG_TIMESTAMP_MASK, V4L2_BUF_FLAG_TIMESTAMP_UNKNOWN, V4L2_BUF_FLAG_TIMESTAMP_MONOTONIC, V4L2_BUF_FLAG_TIMESTAMP_COPY, V4L2_BUF_FLAG_TSTAMP_SRC_MASK, V4L2_BUF_FLAG_TSTAMP_SRC_EOF, V4L2_BUF_FLAG_TSTAMP_SRC_SOE, V4L2_BUF_FLAG_LAST, V4L2_QCOM_BUF_FLAG_CODECCONFIG, V4L2_QCOM_BUF_FLAG_EOSEQ, V4L2_QCOM_BUF_TIMESTAMP_INVALID, V4L2_QCOM_BUF_FLAG_DECODEONLY, V4L2_QCOM_BUF_DATA_CORRUPT, V4L2_QCOM_BUF_INPUT_UNSUPPORTED, V4L2_QCOM_BUF_FLAG_EOS, V4L2_QCOM_BUF_FLAG_READONLY, V4L2_QCOM_BUF_FLAG_PERF_MODE, V4L2_MSM_BUF_FLAG_DEFER, V4L2_QCOM_BUF_FLAG_IDRFRAME
v4l2_timecode_type = V4L2_TC_TYPE_24FPS, V4L2_TC_TYPE_25FPS, V4L2_TC_TYPE_30FPS, V4L2_TC_TYPE_50FPS, V4L2_TC_TYPE_60FPS
v4l2_timecode_flags = V4L2_TC_FLAG_DROPFRAME, V4L2_TC_FLAG_COLORFRAME, V4L2_TC_USERBITS_field, V4L2_TC_USERBITS_USERDEFINED, V4L2_TC_USERBITS_8BITCHARS
v4l2_captureparm_cap = V4L2_CAP_TIMEPERFRAME
v4l2_captureparm_mode = V4L2_MODE_HIGHQUALITY
v4l2_tuner_capability = V4L2_TUNER_CAP_LOW, V4L2_TUNER_CAP_NORM, V4L2_TUNER_CAP_HWSEEK_BOUNDED, V4L2_TUNER_CAP_HWSEEK_WRAP, V4L2_TUNER_CAP_STEREO, V4L2_TUNER_CAP_LANG2, V4L2_TUNER_CAP_SAP, V4L2_TUNER_CAP_LANG1, V4L2_TUNER_CAP_RDS, V4L2_TUNER_CAP_RDS_BLOCK_IO, V4L2_TUNER_CAP_RDS_CONTROLS, V4L2_TUNER_CAP_FREQ_BANDS, V4L2_TUNER_CAP_HWSEEK_PROG_LIM, V4L2_TUNER_CAP_1HZ
v4l2_tuner_rxsubchans = V4L2_TUNER_SUB_MONO, V4L2_TUNER_SUB_STEREO, V4L2_TUNER_SUB_LANG2, V4L2_TUNER_SUB_SAP, V4L2_TUNER_SUB_LANG1, V4L2_TUNER_SUB_RDS
v4l2_tuner_audmode = V4L2_TUNER_MODE_MONO, V4L2_TUNER_MODE_STEREO, V4L2_TUNER_MODE_LANG2, V4L2_TUNER_MODE_SAP, V4L2_TUNER_MODE_LANG1, V4L2_TUNER_MODE_LANG1_LANG2
v4l2_audio_capability = V4L2_AUDCAP_STEREO, V4L2_AUDCAP_AVL
v4l2_audio_mode = V4L2_AUDMODE_AVL
v4l2_control_flags = V4L2_CTRL_FLAG_DISABLED, V4L2_CTRL_FLAG_GRABBED, V4L2_CTRL_FLAG_READ_ONLY, V4L2_CTRL_FLAG_UPDATE, V4L2_CTRL_FLAG_INACTIVE, V4L2_CTRL_FLAG_SLIDER, V4L2_CTRL_FLAG_WRITE_ONLY, V4L2_CTRL_FLAG_VOLATILE, V4L2_CTRL_FLAG_HAS_PAYLOAD, V4L2_CTRL_FLAG_EXECUTE_ON_WRITE
v4l2_ext_ctrl_class = V4L2_CTRL_CLASS_USER, V4L2_CTRL_CLASS_MPEG, V4L2_CTRL_CLASS_CAMERA, V4L2_CTRL_CLASS_FM_TX, V4L2_CTRL_CLASS_FLASH, V4L2_CTRL_CLASS_JPEG, V4L2_CTRL_CLASS_IMAGE_SOURCE, V4L2_CTRL_CLASS_IMAGE_PROC, V4L2_CTRL_CLASS_DV, V4L2_CTRL_CLASS_FM_RX, V4L2_CTRL_CLASS_RF_TUNER, V4L2_CTRL_CLASS_DETECT, V4L2_CTRL_ID_MASK, V4L2_CTRL_MAX_DIMS, V4L2_CTRL_WHICH_CUR_VAL, V4L2_CTRL_WHICH_DEF_VAL
#Comeback and add others from include/uapi/linux/videodev2.h#1617. Once after syz-extract able to detect with special chars
v4l2_ext_controls = V4L2_CID_USER_CLASS, V4L2_CID_BRIGHTNESS, V4L2_CID_CONTRAST, V4L2_CID_SATURATION, V4L2_CID_HUE, V4L2_CID_AUDIO_VOLUME, V4L2_CID_AUDIO_BALANCE, V4L2_CID_AUDIO_BASS, V4L2_CID_AUDIO_TREBLE, V4L2_CID_AUDIO_MUTE, V4L2_CID_AUDIO_LOUDNESS, V4L2_CID_BLACK_LEVEL, V4L2_CID_AUTO_WHITE_BALANCE, V4L2_CID_DO_WHITE_BALANCE, V4L2_CID_RED_BALANCE, V4L2_CID_BLUE_BALANCE, V4L2_CID_GAMMA, V4L2_CID_EXPOSURE, V4L2_CID_AUTOGAIN, V4L2_CID_GAIN, V4L2_CID_HFLIP, V4L2_CID_VFLIP, V4L2_CID_POWER_LINE_FREQUENCY, V4L2_CID_HUE_AUTO, V4L2_CID_WHITE_BALANCE_TEMPERATURE, V4L2_CID_SHARPNESS, V4L2_CID_BACKLIGHT_COMPENSATION, V4L2_CID_CHROMA_AGC, V4L2_CID_COLOR_KILLER, V4L2_CID_COLORFX, V4L2_CID_AUTOBRIGHTNESS, V4L2_CID_BAND_STOP_FILTER, V4L2_CID_ROTATE, V4L2_CID_BG_COLOR, V4L2_CID_CHROMA_GAIN, V4L2_CID_ILLUMINATORS_1, V4L2_CID_ILLUMINATORS_2, V4L2_CID_MIN_BUFFERS_FOR_CAPTURE, V4L2_CID_MIN_BUFFERS_FOR_OUTPUT, V4L2_CID_ALPHA_COMPONENT, V4L2_CID_COLORFX_CBCR, V4L2_CID_MPEG_CLASS, V4L2_CID_MPEG_STREAM_TYPE, V4L2_CID_MPEG_STREAM_PID_PMT, V4L2_CID_MPEG_STREAM_PID_AUDIO, V4L2_CID_MPEG_STREAM_PID_VIDEO, V4L2_CID_MPEG_STREAM_PID_PCR, V4L2_CID_MPEG_STREAM_PES_ID_AUDIO, V4L2_CID_MPEG_STREAM_PES_ID_VIDEO, V4L2_CID_MPEG_STREAM_VBI_FMT, V4L2_CID_MPEG_AUDIO_SAMPLING_FREQ, V4L2_CID_MPEG_AUDIO_ENCODING, V4L2_CID_MPEG_AUDIO_L1_BITRATE, V4L2_CID_MPEG_AUDIO_L2_BITRATE, V4L2_CID_MPEG_AUDIO_L3_BITRATE, V4L2_CID_MPEG_AUDIO_MODE, V4L2_CID_MPEG_AUDIO_MODE_EXTENSION, V4L2_CID_MPEG_AUDIO_EMPHASIS, V4L2_CID_MPEG_AUDIO_CRC, V4L2_CID_MPEG_AUDIO_MUTE, V4L2_CID_MPEG_AUDIO_AAC_BITRATE, V4L2_CID_MPEG_AUDIO_AC3_BITRATE, V4L2_CID_MPEG_AUDIO_DEC_PLAYBACK, V4L2_CID_MPEG_AUDIO_DEC_MULTILINGUAL_PLAYBACK, V4L2_CID_MPEG_VIDEO_ENCODING, V4L2_CID_MPEG_VIDEO_ASPECT, V4L2_CID_MPEG_VIDEO_B_FRAMES, V4L2_CID_MPEG_VIDEO_GOP_SIZE, V4L2_CID_MPEG_VIDEO_GOP_CLOSURE, V4L2_CID_MPEG_VIDEO_PULLDOWN, V4L2_CID_MPEG_VIDEO_BITRATE_MODE, V4L2_CID_MPEG_VIDEO_BITRATE, V4L2_CID_MPEG_VIDEO_BITRATE_PEAK, V4L2_CID_MPEG_VIDEO_TEMPORAL_DECIMATION, V4L2_CID_MPEG_VIDEO_MUTE, V4L2_CID_MPEG_VIDEO_MUTE_YUV, V4L2_CID_MPEG_VIDEO_DECODER_SLICE_INTERFACE, V4L2_CID_MPEG_VIDEO_DECODER_MPEG4_DEBLOCK_FILTER, V4L2_CID_MPEG_VIDEO_CYCLIC_INTRA_REFRESH_MB, V4L2_CID_MPEG_VIDEO_FRAME_RC_ENABLE, V4L2_CID_MPEG_VIDEO_MB_RC_ENABLE, V4L2_CID_MPEG_VIDEO_HEADER_MODE, V4L2_CID_MPEG_VIDEO_MAX_REF_PIC, V4L2_CID_MPEG_VIDEO_H263_I_FRAME_QP, V4L2_CID_MPEG_VIDEO_H263_P_FRAME_QP, V4L2_CID_MPEG_VIDEO_H263_B_FRAME_QP, V4L2_CID_MPEG_VIDEO_H263_MIN_QP, V4L2_CID_MPEG_VIDEO_H263_MAX_QP, V4L2_CID_MPEG_VIDEO_H264_I_FRAME_QP, V4L2_CID_MPEG_VIDEO_H264_P_FRAME_QP, V4L2_CID_MPEG_VIDEO_H264_B_FRAME_QP, V4L2_CID_MPEG_VIDEO_H264_MAX_QP, V4L2_CID_MPEG_VIDEO_H264_MIN_QP, V4L2_CID_MPEG_VIDEO_H264_8X8_TRANSFORM, V4L2_CID_MPEG_VIDEO_H264_CPB_SIZE, V4L2_CID_MPEG_VIDEO_H264_ENTROPY_MODE, V4L2_CID_MPEG_VIDEO_H264_I_PERIOD, V4L2_CID_MPEG_VIDEO_H264_LEVEL, V4L2_CID_MPEG_VIDEO_H264_LOOP_FILTER_ALPHA, V4L2_CID_MPEG_VIDEO_H264_LOOP_FILTER_BETA, V4L2_CID_MPEG_VIDEO_H264_LOOP_FILTER_MODE, V4L2_CID_MPEG_VIDEO_H264_PROFILE, V4L2_CID_MPEG_VIDEO_H264_VUI_EXT_SAR_HEIGHT, V4L2_CID_MPEG_VIDEO_H264_VUI_EXT_SAR_WIDTH, V4L2_CID_MPEG_VIDEO_H264_VUI_SAR_ENABLE, V4L2_CID_MPEG_VIDEO_H264_VUI_SAR_IDC, V4L2_CID_MPEG_VIDEO_H264_SEI_FRAME_PACKING, V4L2_CID_MPEG_VIDEO_H264_SEI_FP_CURRENT_FRAME_0, V4L2_CID_MPEG_VIDEO_H264_SEI_FP_ARRANGEMENT_TYPE, V4L2_CID_MPEG_VIDEO_H264_FMO, V4L2_CID_MPEG_VIDEO_H264_FMO_MAP_TYPE, V4L2_CID_MPEG_VIDEO_H264_FMO_SLICE_GROUP, V4L2_CID_MPEG_VIDEO_H264_FMO_CHANGE_DIRECTION, V4L2_CID_MPEG_VIDEO_H264_FMO_CHANGE_RATE, V4L2_CID_MPEG_VIDEO_H264_FMO_RUN_LENGTH, V4L2_CID_MPEG_VIDEO_H264_ASO, V4L2_CID_MPEG_VIDEO_H264_ASO_SLICE_ORDER, V4L2_CID_MPEG_VIDEO_H264_HIERARCHICAL_CODING, V4L2_CID_MPEG_VIDEO_H264_HIERARCHICAL_CODING_TYPE, V4L2_CID_MPEG_VIDEO_H264_HIERARCHICAL_CODING_LAYER, V4L2_CID_MPEG_VIDEO_H264_HIERARCHICAL_CODING_LAYER_QP, V4L2_CID_MPEG_VIDEO_MPEG4_I_FRAME_QP, V4L2_CID_MPEG_VIDEO_MPEG4_P_FRAME_QP, V4L2_CID_MPEG_VIDEO_MPEG4_B_FRAME_QP, V4L2_CID_MPEG_VIDEO_MPEG4_MIN_QP, V4L2_CID_MPEG_VIDEO_MPEG4_MAX_QP, V4L2_CID_MPEG_VIDEO_MPEG4_LEVEL, V4L2_CID_MPEG_VIDEO_MPEG4_PROFILE, V4L2_CID_MPEG_VIDEO_MPEG4_QPEL, V4L2_CID_MPEG_VIDEO_MULTI_SLICE_MAX_BYTES, V4L2_CID_MPEG_VIDEO_MULTI_SLICE_MAX_MB, V4L2_CID_MPEG_VIDEO_MULTI_SLICE_MODE, V4L2_CID_MPEG_VIDEO_VBV_SIZE, V4L2_CID_MPEG_VIDEO_DEC_PTS, V4L2_CID_MPEG_VIDEO_DEC_FRAME, V4L2_CID_MPEG_VIDEO_VBV_DELAY, V4L2_CID_MPEG_VIDEO_MV_H_SEARCH_RANGE, V4L2_CID_MPEG_VIDEO_MV_V_SEARCH_RANGE, V4L2_CID_MPEG_VIDEO_REPEAT_SEQ_HEADER, V4L2_CID_MPEG_VIDEO_FORCE_KEY_FRAME, V4L2_CID_MPEG_VIDEO_VPX_NUM_PARTITIONS, V4L2_CID_MPEG_VIDEO_VPX_IMD_DISABLE_4X4, V4L2_CID_MPEG_VIDEO_VPX_NUM_REF_FRAMES, V4L2_CID_MPEG_VIDEO_VPX_FILTER_LEVEL, V4L2_CID_MPEG_VIDEO_VPX_FILTER_SHARPNESS, V4L2_CID_MPEG_VIDEO_VPX_GOLDEN_FRAME_REF_PERIOD, V4L2_CID_MPEG_VIDEO_VPX_GOLDEN_FRAME_SEL, V4L2_CID_MPEG_VIDEO_VPX_MIN_QP, V4L2_CID_MPEG_VIDEO_VPX_MAX_QP, V4L2_CID_MPEG_VIDEO_VPX_I_FRAME_QP, V4L2_CID_MPEG_VIDEO_VPX_P_FRAME_QP, V4L2_CID_MPEG_VIDEO_VPX_PROFILE, V4L2_CID_CAMERA_CLASS, V4L2_CID_EXPOSURE_AUTO, V4L2_CID_EXPOSURE_ABSOLUTE, V4L2_CID_EXPOSURE_AUTO_PRIORITY, V4L2_CID_PAN_RELATIVE, V4L2_CID_TILT_RELATIVE, V4L2_CID_PAN_RESET, V4L2_CID_TILT_RESET, V4L2_CID_PAN_ABSOLUTE, V4L2_CID_TILT_ABSOLUTE, V4L2_CID_FOCUS_ABSOLUTE, V4L2_CID_FOCUS_RELATIVE, V4L2_CID_FOCUS_AUTO, V4L2_CID_ZOOM_ABSOLUTE, V4L2_CID_ZOOM_RELATIVE, V4L2_CID_ZOOM_CONTINUOUS, V4L2_CID_PRIVACY, V4L2_CID_IRIS_ABSOLUTE, V4L2_CID_IRIS_RELATIVE, V4L2_CID_AUTO_EXPOSURE_BIAS, V4L2_CID_AUTO_N_PRESET_WHITE_BALANCE, V4L2_CID_WIDE_DYNAMIC_RANGE, V4L2_CID_IMAGE_STABILIZATION, V4L2_CID_ISO_SENSITIVITY, V4L2_CID_ISO_SENSITIVITY_AUTO, V4L2_CID_EXPOSURE_METERING, V4L2_CID_SCENE_MODE, V4L2_CID_3A_LOCK, V4L2_CID_AUTO_FOCUS_START, V4L2_CID_AUTO_FOCUS_STOP, V4L2_CID_AUTO_FOCUS_STATUS, V4L2_CID_AUTO_FOCUS_RANGE, V4L2_CID_PAN_SPEED, V4L2_CID_TILT_SPEED, V4L2_CID_FM_TX_CLASS, V4L2_CID_RDS_TX_DEVIATION, V4L2_CID_RDS_TX_PI, V4L2_CID_RDS_TX_PTY, V4L2_CID_RDS_TX_PS_NAME, V4L2_CID_RDS_TX_RADIO_TEXT, V4L2_CID_RDS_TX_MONO_STEREO, V4L2_CID_RDS_TX_ARTIFICIAL_HEAD, V4L2_CID_RDS_TX_COMPRESSED, V4L2_CID_RDS_TX_DYNAMIC_PTY, V4L2_CID_RDS_TX_TRAFFIC_ANNOUNCEMENT, V4L2_CID_RDS_TX_TRAFFIC_PROGRAM, V4L2_CID_RDS_TX_MUSIC_SPEECH, V4L2_CID_RDS_TX_ALT_FREQS_ENABLE, V4L2_CID_RDS_TX_ALT_FREQS, V4L2_CID_AUDIO_LIMITER_ENABLED, V4L2_CID_AUDIO_LIMITER_RELEASE_TIME, V4L2_CID_AUDIO_LIMITER_DEVIATION, V4L2_CID_AUDIO_COMPRESSION_ENABLED, V4L2_CID_AUDIO_COMPRESSION_GAIN, V4L2_CID_AUDIO_COMPRESSION_THRESHOLD, V4L2_CID_AUDIO_COMPRESSION_ATTACK_TIME, V4L2_CID_AUDIO_COMPRESSION_RELEASE_TIME, V4L2_CID_PILOT_TONE_ENABLED, V4L2_CID_PILOT_TONE_DEVIATION, V4L2_CID_PILOT_TONE_FREQUENCY, V4L2_CID_TUNE_PREEMPHASIS, V4L2_CID_TUNE_POWER_LEVEL, V4L2_CID_TUNE_ANTENNA_CAPACITOR, V4L2_CID_FLASH_CLASS, V4L2_CID_FLASH_LED_MODE, V4L2_CID_FLASH_STROBE_SOURCE, V4L2_CID_FLASH_STROBE, V4L2_CID_FLASH_STROBE_STOP, V4L2_CID_FLASH_STROBE_STATUS, V4L2_CID_FLASH_TIMEOUT, V4L2_CID_FLASH_INTENSITY, V4L2_CID_FLASH_TORCH_INTENSITY, V4L2_CID_FLASH_INDICATOR_INTENSITY, V4L2_CID_FLASH_FAULT, V4L2_CID_FLASH_CHARGE, V4L2_CID_FLASH_READY, V4L2_CID_JPEG_CLASS, V4L2_CID_JPEG_CHROMA_SUBSAMPLING, V4L2_CID_JPEG_RESTART_INTERVAL, V4L2_CID_JPEG_COMPRESSION_QUALITY, V4L2_CID_JPEG_ACTIVE_MARKER, V4L2_CID_IMAGE_SOURCE_CLASS, V4L2_CID_VBLANK, V4L2_CID_HBLANK, V4L2_CID_ANALOGUE_GAIN, V4L2_CID_TEST_PATTERN_RED, V4L2_CID_TEST_PATTERN_GREENR, V4L2_CID_TEST_PATTERN_BLUE, V4L2_CID_TEST_PATTERN_GREENB, V4L2_CID_IMAGE_PROC_CLASS, V4L2_CID_LINK_FREQ, V4L2_CID_PIXEL_RATE, V4L2_CID_TEST_PATTERN, V4L2_CID_DV_CLASS, V4L2_CID_DV_TX_HOTPLUG, V4L2_CID_DV_TX_RXSENSE, V4L2_CID_DV_TX_EDID_PRESENT, V4L2_CID_DV_TX_MODE, V4L2_CID_DV_TX_RGB_RANGE, V4L2_CID_DV_TX_IT_CONTENT_TYPE, V4L2_CID_DV_RX_POWER_PRESENT, V4L2_CID_DV_RX_RGB_RANGE, V4L2_CID_DV_RX_IT_CONTENT_TYPE, V4L2_CID_FM_RX_CLASS, V4L2_CID_TUNE_DEEMPHASIS, V4L2_CID_RDS_RECEPTION, V4L2_CID_RF_TUNER_CLASS, V4L2_CID_RF_TUNER_RF_GAIN, V4L2_CID_RF_TUNER_LNA_GAIN_AUTO, V4L2_CID_RF_TUNER_LNA_GAIN, V4L2_CID_RF_TUNER_MIXER_GAIN_AUTO, V4L2_CID_RF_TUNER_MIXER_GAIN, V4L2_CID_RF_TUNER_IF_GAIN_AUTO, V4L2_CID_RF_TUNER_IF_GAIN, V4L2_CID_RF_TUNER_BANDWIDTH_AUTO, V4L2_CID_RF_TUNER_BANDWIDTH, V4L2_CID_RF_TUNER_PLL_LOCK, V4L2_CID_RDS_RX_PTY, V4L2_CID_RDS_RX_PS_NAME, V4L2_CID_RDS_RX_RADIO_TEXT, V4L2_CID_RDS_RX_TRAFFIC_ANNOUNCEMENT, V4L2_CID_RDS_RX_TRAFFIC_PROGRAM, V4L2_CID_RDS_RX_MUSIC_SPEECH, V4L2_CID_DETECT_CLASS, V4L2_CID_DETECT_MD_MODE, V4L2_CID_DETECT_MD_GLOBAL_THRESHOLD, V4L2_CID_DETECT_MD_THRESHOLD_GRID, V4L2_CID_DETECT_MD_REGION_GRID
v4l2_frmsizetypes = V4L2_FRMSIZE_TYPE_DISCRETE, V4L2_FRMSIZE_TYPE_CONTINUOUS, V4L2_FRMSIZE_TYPE_STEPWISE
v4l2_frmivaltypes = V4L2_FRMIVAL_TYPE_DISCRETE, V4L2_FRMIVAL_TYPE_CONTINUOUS, V4L2_FRMIVAL_TYPE_STEPWISE
v4l2_enc_idx_flags = V4L2_ENC_IDX_FRAME_I, V4L2_ENC_IDX_FRAME_P, V4L2_ENC_IDX_FRAME_B, V4L2_ENC_IDX_FRAME_MASK
v4l2_dbg_match_type = V4L2_CHIP_MATCH_BRIDGE, V4L2_CHIP_MATCH_SUBDEV, V4L2_CHIP_MATCH_I2C_DRIVER, V4L2_CHIP_MATCH_I2C_ADDR, V4L2_CHIP_MATCH_AC97
v4l2_frequency_band_modulation = V4L2_BAND_MODULATION_VSB, V4L2_BAND_MODULATION_FM, V4L2_BAND_MODULATION_AM
v4l2_dv_timings_type = V4L2_DV_BT_656_1120
v4l2_bt_timings_interlaced = V4L2_DV_PROGRESSIVE, V4L2_DV_INTERLACED
v4l2_bt_timings_polarities = V4L2_DV_VSYNC_POS_POL, V4L2_DV_HSYNC_POS_POL
v4l2_bt_timings_standards = V4L2_DV_BT_STD_CEA861, V4L2_DV_BT_STD_DMT, V4L2_DV_BT_STD_CVT, V4L2_DV_BT_STD_GTF, V4L2_DV_BT_STD_SDI
v4l2_bt_timings_flags = V4L2_DV_FL_REDUCED_BLANKING, V4L2_DV_FL_CAN_REDUCE_FPS, V4L2_DV_FL_REDUCED_FPS, V4L2_DV_FL_HALF_LINE, V4L2_DV_FL_IS_CE_VIDEO, V4L2_DV_FL_FIRST_FIELD_EXTRA_LINE
v4l2_encoder_cmd_cmd = V4L2_ENC_CMD_START, V4L2_ENC_CMD_STOP, V4L2_ENC_CMD_PAUSE, V4L2_ENC_CMD_RESUME
v4l2_encoder_flags = V4L2_ENC_CMD_STOP_AT_GOP_END
v4l2_decoder_cmd_cmd = V4L2_DEC_CMD_START, V4L2_DEC_CMD_STOP, V4L2_DEC_CMD_PAUSE, V4L2_DEC_CMD_RESUME, V4L2_QCOM_CMD_FLUSH, V4L2_DEC_QCOM_CMD_RECONFIG_HINT, V4L2_QCOM_CMD_SESSION_CONTINUE
v4l2_decoder_cmd_flags = V4L2_DEC_CMD_START_MUTE_AUDIO, V4L2_DEC_CMD_PAUSE_TO_BLACK, V4L2_DEC_CMD_STOP_TO_BLACK, V4L2_DEC_CMD_STOP_IMMEDIATELY, V4L2_QCOM_CMD_FLUSH_OUTPUT, V4L2_QCOM_CMD_FLUSH_CAPTURE
v4l2_decoder_cmd_format = V4L2_DEC_START_FMT_NONE, V4L2_DEC_START_FMT_GOP
v4l2_event_src_changes = V4L2_EVENT_SRC_CH_RESOLUTION
v4l2_event_type = V4L2_EVENT_ALL, V4L2_EVENT_VSYNC, V4L2_EVENT_EOS, V4L2_EVENT_CTRL, V4L2_EVENT_FRAME_SYNC, V4L2_EVENT_SOURCE_CHANGE, V4L2_EVENT_MOTION_DET, V4L2_EVENT_PRIVATE_START, V4L2_EVENT_MSM_VIDC_START, V4L2_EVENT_MSM_VIDC_FLUSH_DONE, V4L2_EVENT_MSM_VIDC_PORT_SETTINGS_CHANGED_SUFFICIENT, V4L2_EVENT_MSM_VIDC_PORT_SETTINGS_CHANGED_INSUFFICIENT, V4L2_EVENT_MSM_VIDC_PORT_SETTINGS_BITDEPTH_CHANGED_INSUFFICIENT, V4L2_EVENT_MSM_VIDC_SYS_ERROR, V4L2_EVENT_MSM_VIDC_RELEASE_BUFFER_REFERENCE, V4L2_EVENT_MSM_VIDC_RELEASE_UNQUEUED_BUFFER, V4L2_EVENT_MSM_VIDC_HW_OVERLOAD, V4L2_EVENT_MSM_VIDC_MAX_CLIENTS, V4L2_EVENT_MSM_VIDC_HW_UNSUPPORTED
v4l2_event_ctrl_changes = V4L2_EVENT_CTRL_CH_VALUE, V4L2_EVENT_CTRL_CH_FLAGS, V4L2_EVENT_CTRL_CH_RANGE
v4l2_event_motion_det_flags = V4L2_EVENT_MD_FL_HAVE_FRAME_SEQ
v4l2_event_subscription_flags = V4L2_EVENT_SUB_FL_SEND_INITIAL, V4L2_EVENT_SUB_FL_ALLOW_FEEDBACK
v4l2_selection_target = V4L2_SEL_TGT_CROP, V4L2_SEL_TGT_CROP_DEFAULT, V4L2_SEL_TGT_CROP_BOUNDS, V4L2_SEL_TGT_NATIVE_SIZE, V4L2_SEL_TGT_COMPOSE, V4L2_SEL_TGT_COMPOSE_DEFAULT, V4L2_SEL_TGT_COMPOSE_BOUNDS, V4L2_SEL_TGT_COMPOSE_PADDED, V4L2_SEL_TGT_CROP_ACTIVE, V4L2_SEL_TGT_COMPOSE_ACTIVE, V4L2_SUBDEV_SEL_TGT_CROP_ACTUAL, V4L2_SUBDEV_SEL_TGT_COMPOSE_ACTUAL, V4L2_SUBDEV_SEL_TGT_CROP_BOUNDS, V4L2_SUBDEV_SEL_TGT_COMPOSE_BOUNDS
v4l2_selection_flags = V4L2_SEL_FLAG_GE, V4L2_SEL_FLAG_LE, V4L2_SEL_FLAG_KEEP_CONFIG, V4L2_SUBDEV_SEL_FLAG_SIZE_GE, V4L2_SUBDEV_SEL_FLAG_SIZE_LE, V4L2_SUBDEV_SEL_FLAG_KEEP_CONFIG
v4l2_bt_timings_cap_capabilities = V4L2_DV_BT_CAP_INTERLACED, V4L2_DV_BT_CAP_PROGRESSIVE, V4L2_DV_BT_CAP_REDUCED_BLANKING, V4L2_DV_BT_CAP_CUSTOM
v4l2_dbg_chip_info_flags = V4L2_CHIP_FL_READABLE, V4L2_CHIP_FL_WRITABLE
v4l2_standard_std = V4L2_STD_PAL_B, V4L2_STD_PAL_B1, V4L2_STD_PAL_G, V4L2_STD_PAL_H, V4L2_STD_PAL_I, V4L2_STD_PAL_D, V4L2_STD_PAL_D1, V4L2_STD_PAL_K, V4L2_STD_PAL_M, V4L2_STD_PAL_N, V4L2_STD_PAL_Nc, V4L2_STD_PAL_60, V4L2_STD_NTSC_M, V4L2_STD_NTSC_M_JP, V4L2_STD_NTSC_443, V4L2_STD_NTSC_M_KR, V4L2_STD_SECAM_B, V4L2_STD_SECAM_D, V4L2_STD_SECAM_G, V4L2_STD_SECAM_H, V4L2_STD_SECAM_K, V4L2_STD_SECAM_K1, V4L2_STD_SECAM_L, V4L2_STD_SECAM_LC, V4L2_STD_ATSC_8_VSB, V4L2_STD_ATSC_16_VSB, V4L2_STD_NTSC, V4L2_STD_SECAM_DK, V4L2_STD_SECAM, V4L2_STD_PAL_BG, V4L2_STD_PAL_DK, V4L2_STD_PAL, V4L2_STD_B, V4L2_STD_G, V4L2_STD_H, V4L2_STD_L, V4L2_STD_GH, V4L2_STD_DK, V4L2_STD_BG, V4L2_STD_MN, V4L2_STD_MTS, V4L2_STD_525_60, V4L2_STD_625_50, V4L2_STD_ATSC, V4L2_STD_UNKNOWN, V4L2_STD_ALL
v4l2_input_status = V4L2_IN_ST_NO_POWER, V4L2_IN_ST_NO_SIGNAL, V4L2_IN_ST_NO_COLOR, V4L2_IN_ST_HFLIP, V4L2_IN_ST_VFLIP, V4L2_IN_ST_NO_H_LOCK, V4L2_IN_ST_COLOR_KILL, V4L2_IN_ST_NO_V_LOCK, V4L2_IN_ST_NO_STD_LOCK, V4L2_IN_ST_NO_SYNC, V4L2_IN_ST_NO_EQU, V4L2_IN_ST_NO_CARRIER, V4L2_IN_ST_MACROVISION, V4L2_IN_ST_NO_ACCESS, V4L2_IN_ST_VTR
v4l2_input_type = V4L2_INPUT_TYPE_TUNER, V4L2_INPUT_TYPE_CAMERA, V4L2_INPUT_TYPE_TOUCH
v4l2_input_capabilities = V4L2_IN_CAP_DV_TIMINGS, V4L2_IN_CAP_CUSTOM_TIMINGS, V4L2_IN_CAP_STD, V4L2_IN_CAP_NATIVE_SIZE
v4l2_output_type = V4L2_OUTPUT_TYPE_MODULATOR, V4L2_OUTPUT_TYPE_ANALOG, V4L2_OUTPUT_TYPE_ANALOGVGAOVERLAY
v4l2_output_capabilities = V4L2_OUT_CAP_DV_TIMINGS, V4L2_OUT_CAP_CUSTOM_TIMINGS, V4L2_OUT_CAP_STD, V4L2_OUT_CAP_NATIVE_SIZE
v4l2_query_ext_ctrl = V4L2_CTRL_FLAG_NEXT_CTRL, V4L2_CTRL_FLAG_NEXT_COMPOUND
