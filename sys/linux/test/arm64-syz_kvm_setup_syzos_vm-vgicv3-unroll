#
# requires: arch=arm64 -threaded
#
r0 = openat$kvm(0, &AUTO='/dev/kvm\x00', 0x0, 0x0)
r1 = ioctl$KVM_CREATE_VM(r0, AUTO, 0x0)
r2 = syz_kvm_setup_syzos_vm(r1, &(0x7f0000c00000/0x400000)=nil)
r3 = syz_kvm_add_vcpu(r2, &AUTO={0x0, &AUTO=[@irq_setup={AUTO, AUTO, {0x1, 0x20}}], AUTO}, 0x0, 0x0)
#
# Implementing syz_kvm_vgic_v3_setup(r1, 0x1, 0x100) using raw ioctls:
#
ioctl$KVM_CREATE_DEVICE(r1, AUTO, &AUTO={0x7, <r4=>0xffffffffffffffff, 0x0})
ioctl$KVM_SET_DEVICE_ATTR(r4, AUTO, &AUTO=@attr_arm64={0x0, 0x3, 0x0, &AUTO=0x100})
ioctl$KVM_SET_DEVICE_ATTR(r4, AUTO, &AUTO=@attr_arm64={0x0, 0x0, 0x2, &AUTO=0x08000000})
ioctl$KVM_SET_DEVICE_ATTR(r4, AUTO, &AUTO=@attr_arm64={0x0, 0x0, 0x5, &AUTO=0x400000080a0000})
ioctl$KVM_SET_DEVICE_ATTR(r4, AUTO, &AUTO=@attr_arm64={0x0, 0x4, 0x0, 0x0})
#
# Map struct kvm_run for the VCPU.
#
r5 = ioctl$KVM_GET_VCPU_MMAP_SIZE(r0, AUTO)
r6 = mmap$KVM_VCPU(&(0x7f0000009000/0x1000)=nil, r5, 0x3, 0x1, r3, 0x0)

ioctl$KVM_RUN(r3, AUTO, 0x0)
syz_kvm_assert_syzos_uexit(r6, 0xffffffffffffffff)
#
# Calling KVM_RUN here again would result in infinite loop.
# Instead, signal SPI 32 (0x1000020), so that the guest can execute another uexit in the IRQ handler.
#
ioctl$KVM_IRQ_LINE(r1, AUTO, &AUTO={0x1000020, 0x1})
ioctl$KVM_RUN(r3, AUTO, 0x0)
syz_kvm_assert_syzos_uexit(r6, 0xfffffffffffffffe)
