#
# requires: arch=amd64 -threaded
#
r0 = openat$kvm(0, &AUTO='/dev/kvm\x00', 0x0, 0x0)
r1 = ioctl$KVM_CREATE_VM(r0, AUTO, 0x0)
r2 = syz_kvm_setup_syzos_vm$x86(r1, &(0x7f0000c00000/0x400000)=nil)
#
# Set an IRQ handler for vector 0x80.
#
r3 = syz_kvm_add_vcpu$x86(r2, &AUTO={0x0, &AUTO=[@uexit={AUTO, AUTO, 0xaaaa}, @uexit={AUTO, AUTO, 0xbbbb}], AUTO})
r4 = ioctl$KVM_GET_VCPU_MMAP_SIZE(r0, AUTO)
r5 = mmap$KVM_VCPU(&(0x7f0000009000/0x1000)=nil, r4, 0x3, 0x1, r3, 0x0)

# Run till the first uexit.
#
ioctl$KVM_RUN(r3, AUTO, 0x0)
syz_kvm_assert_syzos_uexit$x86(r5, 0xaaaa)

# Inject interrupt 0x80.
#
ioctl$KVM_INTERRUPT(r3, AUTO, &AUTO=0x80)
ioctl$KVM_RUN(r3, AUTO, 0x0)

# Run till the second uexit.
#
syz_kvm_assert_syzos_uexit$x86(r5, 0xbbbb)
