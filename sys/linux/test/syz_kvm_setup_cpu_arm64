#
# requires: arch=arm64
#
r0 = openat$kvm(0, &AUTO='/dev/kvm\x00', 0x0, 0x0)
r1 = ioctl$KVM_CREATE_VM(r0, AUTO, 0x0)
r2 = ioctl$KVM_CREATE_VCPU(r1, AUTO, 0x0)
r3 = ioctl$KVM_GET_VCPU_MMAP_SIZE(r0, AUTO)
r4 = mmap$KVM_VCPU(&(0x7f0000009000/0x1000)=nil, r3, 0x3, 0x1, r2, 0x0)
# Perform two uexits. The first one is done via a code blob:
#       d2802000        mov     x0, #0x100                      // #256
#       f2bbbba0        movk    x0, #0xdddd, lsl #16
#       f900001f        str     xzr, [x0]
# , which assumes registers x24-28 are zeroes.
# The second uexit is done via a syzos API command that sets uexit exit code to 0xaaaa.
#
syz_kvm_setup_cpu$arm64(r1, r2, &(0x7f0000e8a000/0x18000), &AUTO=[{0x0, &AUTO=[@code={AUTO, AUTO, {"002080d2a0bbbbf21f0000f9", 0xd65f03c0}}, @uexit={AUTO, AUTO, 0xaaaa}], AUTO}], 0x1, 0x0, 0x0, 0x0)
# Run till the first uexit.
#
ioctl$KVM_RUN(r2, AUTO, 0x0)
# Run till the second uexit.
#
ioctl$KVM_RUN(r2, AUTO, 0x0)
