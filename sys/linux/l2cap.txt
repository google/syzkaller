# Copyright 2020 syzkaller project authors. All rights reserved.
# Use of this source code is governed by Apache 2 LICENSE that can be found in the LICENSE file.

include <net/bluetooth/bluetooth.h>
include <net/bluetooth/hci_sock.h>
include <net/bluetooth/l2cap.h>
include <net/bluetooth/a2mp.h>
include <net/bluetooth/hci_core.h>
include <net/bluetooth/smp.h>

# The following constants were removed from upstream in e7b02296fb40 ("Bluetooth: Remove BT_HS").
# TODO: delete them together with the corresponding structs once they are removed from LTS kernels.
define L2CAP_CREATE_CHAN_REQ	0x0c
define L2CAP_CREATE_CHAN_RSP	0x0d
define L2CAP_MOVE_CHAN_REQ	0x0e
define L2CAP_MOVE_CHAN_RSP	0x0f
define L2CAP_MOVE_CHAN_CFM	0x10
define L2CAP_MOVE_CHAN_CFM_RSP	0x11

l2cap_hdr_un [
	l2cap_cid_signaling	l2cap_hdr_t[L2CAP_CID_SIGNALING, array[l2cap_cid_signaling_un]]
	l2cap_cid_conn_less	l2cap_hdr_t[L2CAP_CID_CONN_LESS, l2cap_cid_conn_less_t]
	l2cap_cid_le_signaling	l2cap_hdr_t[L2CAP_CID_LE_SIGNALING, l2cap_cid_le_signaling_un]
	l2cap_cid_a2mp		l2cap_hdr_t[L2CAP_CID_A2MP, array[l2cap_cid_a2mp_un]]
	l2cap_cid_smp		l2cap_hdr_t[L2CAP_CID_SMP, smp_sig_channel_un]
	l2cap_cid_smp_bredr	l2cap_hdr_t[L2CAP_CID_SMP_BREDR, smp_sig_channel_un]
] [varlen]

l2cap_cid_signaling_un [
	l2cap_cmd_rej_unk	l2cap_cmd_hdr_t[L2CAP_COMMAND_REJ, l2cap_cmd_rej_unk]
	l2cap_conn_req		l2cap_cmd_hdr_t[L2CAP_CONN_REQ, l2cap_conn_req]
	l2cap_conn_rsp		l2cap_cmd_hdr_t[L2CAP_CONN_RSP, l2cap_conn_rsp]
	l2cap_conf_req		l2cap_cmd_hdr_t[L2CAP_CONF_REQ, l2cap_conf_req]
	l2cap_conf_rsp		l2cap_cmd_hdr_t[L2CAP_CONF_RSP, l2cap_conf_rsp]
	l2cap_create_chan_req	l2cap_cmd_hdr_t[L2CAP_CREATE_CHAN_REQ, l2cap_create_chan_req]
	l2cap_create_chan_rsp	l2cap_cmd_hdr_t[L2CAP_CREATE_CHAN_RSP, l2cap_create_chan_rsp]
	l2cap_disconn_req	l2cap_cmd_hdr_t[L2CAP_DISCONN_REQ, l2cap_disconn_req]
	l2cap_disconn_rsp	l2cap_cmd_hdr_t[L2CAP_DISCONN_RSP, l2cap_disconn_rsp]
	l2cap_info_req		l2cap_cmd_hdr_t[L2CAP_INFO_REQ, l2cap_info_req]
	l2cap_info_rsp		l2cap_cmd_hdr_t[L2CAP_INFO_RSP, l2cap_info_rsp]
	l2cap_move_chan_cfm	l2cap_cmd_hdr_t[L2CAP_MOVE_CHAN_CFM, l2cap_move_chan_cfm]
	l2cap_move_chan_cfm_rsp	l2cap_cmd_hdr_t[L2CAP_MOVE_CHAN_CFM_RSP, l2cap_move_chan_cfm_rsp]
	l2cap_move_chan_req	l2cap_cmd_hdr_t[L2CAP_MOVE_CHAN_REQ, l2cap_move_chan_req]
	l2cap_move_chan_rsp	l2cap_cmd_hdr_t[L2CAP_MOVE_CHAN_RSP, l2cap_move_chan_rsp]
] [varlen]

l2cap_cid_le_signaling_un [
	l2cap_cmd_rej_unk		l2cap_cmd_hdr_t[L2CAP_COMMAND_REJ, l2cap_cmd_rej_unk]
	l2cap_conn_param_update_req	l2cap_cmd_hdr_t[L2CAP_CONN_PARAM_UPDATE_REQ, l2cap_conn_param_update_req]
	l2cap_conn_param_update_rsp	l2cap_cmd_hdr_t[L2CAP_CONN_PARAM_UPDATE_RSP, l2cap_conn_param_update_rsp]
	l2cap_disconn_req		l2cap_cmd_hdr_t[L2CAP_DISCONN_REQ, l2cap_disconn_req]
	l2cap_disconn_rsp		l2cap_cmd_hdr_t[L2CAP_DISCONN_RSP, l2cap_disconn_rsp]
	l2cap_ecred_conn_req		l2cap_cmd_hdr_t[L2CAP_ECRED_CONN_REQ, l2cap_ecred_conn_req]
	l2cap_ecred_conn_rsp		l2cap_cmd_hdr_t[L2CAP_ECRED_CONN_RSP, l2cap_ecred_conn_rsp]
	l2cap_ecred_reconf_req		l2cap_cmd_hdr_t[L2CAP_ECRED_RECONF_REQ, l2cap_ecred_reconf_req]
	l2cap_ecred_reconf_rsp		l2cap_cmd_hdr_t[L2CAP_ECRED_RECONF_RSP, l2cap_ecred_reconf_rsp]
	l2cap_le_conn_req		l2cap_cmd_hdr_t[L2CAP_LE_CONN_REQ, l2cap_le_conn_req]
	l2cap_le_conn_rsp		l2cap_cmd_hdr_t[L2CAP_LE_CONN_RSP, l2cap_le_conn_rsp]
	l2cap_le_credits		l2cap_cmd_hdr_t[L2CAP_LE_CREDITS, l2cap_le_credits]
] [varlen]

type l2cap_hdr_t[CID, PAYLOAD] {
	hdr	l2cap_hdr[CID]
	payload	PAYLOAD
} [packed]

type l2cap_hdr[CID] {
	len	bytesize[l2cap_hdr_t:payload, int16]
	cid	const[CID, int16]
} [packed]

type l2cap_cmd_hdr_t[CODE, PAYLOAD] {
	hdr	l2cap_cmd_hdr[CODE]
	payload	PAYLOAD
} [packed]

type l2cap_cmd_hdr[CODE] {
	code	const[CODE, int8]
	ident	int8
	len	bytesize[l2cap_cmd_hdr_t:payload, int16]
} [packed]

l2cap_cmd_rej_unk {
	reason	int16
} [packed]

l2cap_conf_rfc {
	mode		flags[l2cap_rfc_mode, int8]
	txwin_size	int8
	max_transmit	int8
	retrans_timeout	int16
	monitor_timeout	int16
	max_pdu_size	int16
} [packed]

l2cap_rfc_mode = L2CAP_MODE_BASIC, L2CAP_MODE_RETRANS, L2CAP_MODE_FLOWCTL, L2CAP_MODE_ERTM, L2CAP_MODE_STREAMING

l2cap_conf_efs {
	id		int8
	stype		flags[l2cap_serv_type, int8]
	msdu		int16
	sdu_itime	int32
	acc_lat		int32
	flush_to	int32
} [packed]

l2cap_serv_type = L2CAP_SERV_NOTRAFIC, L2CAP_SERV_BESTEFFORT, L2CAP_SERV_GUARANTEED

type l2cap_conf_opt[TYPE, VAL] {
	type	const[TYPE, int8]
	len	bytesize[val, int8]
	val	VAL
} [packed]

l2cap_conf_opt_un [
	l2cap_conf_rfc		l2cap_conf_opt[L2CAP_CONF_RFC, l2cap_conf_rfc]
	l2cap_conf_efs		l2cap_conf_opt[L2CAP_CONF_EFS, l2cap_conf_efs]
	l2cap_conf_mtu		l2cap_conf_opt[L2CAP_CONF_MTU, int16]
	l2cap_conf_flushto	l2cap_conf_opt[L2CAP_CONF_FLUSH_TO, int16]
	l2cap_conf_fcs		l2cap_conf_opt[L2CAP_CONF_FCS, flags[l2cap_fcs_type, int8]]
	l2cap_conf_ews		l2cap_conf_opt[L2CAP_CONF_EWS, int16]
] [varlen]

l2cap_fcs_type = L2CAP_FCS_NONE, L2CAP_FCS_CRC16

l2cap_conf_req {
	dcid	int16
	flags	int16
	data	array[l2cap_conf_opt_un]
} [packed]

l2cap_conf_rsp {
	scid	int16
	flags	int16
	result	int16
	data	array[l2cap_conf_opt_un]
} [packed]

l2cap_conn_param_update_req {
	min		int16
	max		int16
	latency		int16
	to_multiplier	int16
} [packed]

l2cap_conn_param_update_rsp {
	result	int16
} [packed]

l2cap_conn_req {
	psm	int16
	scid	int16
} [packed]

l2cap_conn_rsp {
	dcid	int16
	scid	int16
	result	int16
	status	int16
} [packed]

l2cap_conninfo {
	hci_handle	int16
	dev_class	array[int8, 3]
}

l2cap_create_chan_req {
	psm	int16
	scid	int16
	amp_id	int8
} [packed]

l2cap_create_chan_rsp {
	dcid	int16
	scid	int16
	result	int16
	status	int16
} [packed]

l2cap_disconn_req {
	dcid	int16
	scid	int16
} [packed]

l2cap_disconn_rsp {
	dcid	int16
	scid	int16
} [packed]

l2cap_ecred_conn_req {
	psm	int16
	mtu	int16
	mps	int16
	credits	int16
	scid	array[int16]
} [packed]

l2cap_ecred_conn_rsp {
	mtu	int16
	mps	int16
	credits	int16
	result	int16
	dcid	array[int16]
} [packed]

l2cap_ecred_reconf_req {
	mtu	int16
	mps	int16
	scid	array[int16]
} [packed]

l2cap_ecred_reconf_rsp {
	result	int16
} [packed]

l2cap_info_req {
	type	int16
} [packed]

l2cap_info_rsp {
	type	int16
	result	int16
	data	array[int8]
} [packed]

l2cap_le_conn_req {
	psm	int16
	scid	int16
	mtu	int16
	mps	int16
	credits	int16
} [packed]

l2cap_le_conn_rsp {
	dcid	int16
	mtu	int16
	mps	int16
	credits	int16
	result	int16
} [packed]

l2cap_le_credits {
	cid	int16
	credits	int16
} [packed]

l2cap_move_chan_cfm {
	icid	int16
	result	int16
} [packed]

l2cap_move_chan_cfm_rsp {
	icid	int16
} [packed]

l2cap_move_chan_req {
	icid		int16
	dest_amp_id	int8
} [packed]

l2cap_move_chan_rsp {
	icid	int16
	result	int16
} [packed]

l2cap_options {
	omtu		int16
	imtu		int16
	flush_to	int16
	mode		int8
	fcs		int8
	max_tx		int8
	txwin_size	int16
}

l2cap_cid_conn_less_t {
	data	array[int8]
} [packed]

l2cap_cid_a2mp_un [
	a2mp_command_rej		l2cap_cmd_hdr_t[A2MP_COMMAND_REJ, a2mp_cmd_rej]
	a2mp_discover_req		l2cap_cmd_hdr_t[A2MP_DISCOVER_REQ, a2mp_discov_req]
	a2mp_change_notify		l2cap_cmd_hdr_t[A2MP_CHANGE_NOTIFY, a2mp_cl]
	a2mp_getinfo_req		l2cap_cmd_hdr_t[A2MP_GETINFO_REQ, a2mp_info_req]
	a2mp_getampassoc_req		l2cap_cmd_hdr_t[A2MP_GETAMPASSOC_REQ, a2mp_amp_assoc_req]
	a2mp_createphyslink_req		l2cap_cmd_hdr_t[A2MP_CREATEPHYSLINK_REQ, a2mp_physlink_req]
	a2mp_disconnphyslink_req	l2cap_cmd_hdr_t[A2MP_DISCONNPHYSLINK_REQ, a2mp_physlink_req]
	a2mp_discover_rsp		l2cap_cmd_hdr_t[A2MP_DISCOVER_RSP, a2mp_discov_rsp]
	a2mp_getinfo_rsp		l2cap_cmd_hdr_t[A2MP_GETINFO_RSP, a2mp_info_rsp]
	a2mp_getampassoc_rsp		l2cap_cmd_hdr_t[A2MP_GETAMPASSOC_RSP, a2mp_amp_assoc_rsp]
	a2mp_change_rsp			l2cap_cmd_hdr_t[A2MP_CHANGE_RSP, array[int8]]
	a2mp_createphyslink_rsp		l2cap_cmd_hdr_t[A2MP_CREATEPHYSLINK_RSP, array[int8]]
	a2mp_disconnphyslink_rsp	l2cap_cmd_hdr_t[A2MP_DISCONNPHYSLINK_RSP, array[int8]]
] [varlen]

a2mp_cmd_rej {
	reason	int16
	data	array[int8]
} [packed]

a2mp_discov_req {
	mtu		int16
	ext_feat	int16
} [packed]

a2mp_cl {
	id	int8
	type	int8
	status	int8
} [packed]

a2mp_info_req {
	id	int8
} [packed]

a2mp_amp_assoc_req {
	id	int8
} [packed]

a2mp_physlink_req {
	local_id	int8
	remote_id	int8
	amp_assoc	array[int8]
} [packed]

a2mp_discov_rsp {
	mtu		int16
	ext_feat	int16
	cl		array[a2mp_cl]
} [packed]

a2mp_info_rsp {
	id		int8
	status		int8
	total_bw	int32
	max_bw		int32
	min_latency	int32
	pal_cap		int16
	assoc_size	int16
} [packed]

a2mp_amp_assoc_rsp {
	id		int8
	status		int8
	amp_assoc	array[int8]
} [packed]

smp_sig_channel_un [
	smp_cmd_pairing_req	smp_cmd_hdr_t[SMP_CMD_PAIRING_REQ, smp_cmd_pairing]
	smp_cmd_pairing_fail	smp_cmd_hdr_t[SMP_CMD_PAIRING_FAIL, array[int8]]
	smp_cmd_pairing_rsp	smp_cmd_hdr_t[SMP_CMD_PAIRING_RSP, smp_cmd_pairing]
	smp_cmd_security_req	smp_cmd_hdr_t[SMP_CMD_SECURITY_REQ, smp_cmd_security_req]
	smp_cmd_pairing_confirm	smp_cmd_hdr_t[SMP_CMD_PAIRING_CONFIRM, array[int8, 16]]
	smp_cmd_pairing_random	smp_cmd_hdr_t[SMP_CMD_PAIRING_RANDOM, array[int8, 16]]
	smp_cmd_encrypt_info	smp_cmd_hdr_t[SMP_CMD_ENCRYPT_INFO, smp_cmd_encrypt_info]
	smp_cmd_initiator_ident	smp_cmd_hdr_t[SMP_CMD_INITIATOR_IDENT, smp_cmd_initiator_ident]
	smp_cmd_ident_info	smp_cmd_hdr_t[SMP_CMD_IDENT_INFO, smp_cmd_ident_info]
	smp_cmd_ident_addr_info	smp_cmd_hdr_t[SMP_CMD_IDENT_ADDR_INFO, smp_cmd_ident_addr_info]
	smp_cmd_sign_info	smp_cmd_hdr_t[SMP_CMD_SIGN_INFO, smp_cmd_sign_info]
	smp_cmd_public_key	smp_cmd_hdr_t[SMP_CMD_PUBLIC_KEY, smp_cmd_public_key]
	smp_cmd_dhkey_check	smp_cmd_hdr_t[SMP_CMD_DHKEY_CHECK, smp_cmd_dhkey_check]
	smp_cmd_keypress_notify	smp_cmd_hdr_t[SMP_CMD_KEYPRESS_NOTIFY, smp_cmd_keypress_notify]
] [varlen]

type smp_cmd_hdr_t[CODE, PAYLOAD] {
	code	const[CODE, int8]
	payload	PAYLOAD
} [packed]

smp_cmd_pairing {
	io_capability	int8
	oob_flag	int8
	auth_req	int8
	max_key_size	int8
	init_key_dist	int8
	resp_key_dist	int8
} [packed]

smp_cmd_security_req {
	auth_req	int8
} [packed]

smp_cmd_encrypt_info {
	ltk	array[int8, 16]
} [packed]

smp_cmd_initiator_ident {
	ediv	int16
	rand	int64
} [packed]

smp_cmd_ident_info {
	irk	array[int8, 16]
} [packed]

smp_cmd_ident_addr_info {
	addr_type	int8
	bdaddr		array[int8, 6]
}

smp_cmd_sign_info {
	csrk	array[int8, 16]
} [packed]

smp_cmd_public_key {
	x	array[int8, 32]
	y	array[int8, 32]
} [packed]

smp_cmd_dhkey_check {
	e	array[int8, 16]
} [packed]

smp_cmd_keypress_notify {
	value	int8
} [packed]
