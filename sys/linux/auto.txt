# Code generated by syz-declextract. DO NOT EDIT.
include <include/uapi/linux/cgroupstats.h>
include <include/uapi/linux/ethtool_netlink.h>
include <include/uapi/linux/fib_rules.h>
include <include/uapi/linux/handshake.h>
include <include/uapi/linux/if_addr.h>
include <include/uapi/linux/if_addrlabel.h>
include <include/uapi/linux/if_bridge.h>
include <include/uapi/linux/if_link.h>
include <include/uapi/linux/if_tunnel.h>
include <include/uapi/linux/ioam6_genl.h>
include <include/uapi/linux/lwtunnel.h>
include <include/uapi/linux/neighbour.h>
include <include/uapi/linux/net_namespace.h>
include <include/uapi/linux/netconf.h>
include <include/uapi/linux/netdev.h>
include <include/uapi/linux/netfilter/nfnetlink.h>
include <include/uapi/linux/netfilter/nfnetlink_conntrack.h>
include <include/uapi/linux/netfilter/nfnetlink_log.h>
include <include/uapi/linux/nexthop.h>
include <include/uapi/linux/pkt_cls.h>
include <include/uapi/linux/pkt_sched.h>
include <include/uapi/linux/rtnetlink.h>
include <include/uapi/linux/seg6_genl.h>
include <include/uapi/linux/taskstats.h>
include <include/uapi/linux/tcp_metrics.h>
include <include/uapi/linux/xfrm.h>
include <net/netlabel/netlabel_calipso.h>
include <net/netlabel/netlabel_cipso_v4.h>
include <net/netlabel/netlabel_mgmt.h>
include <net/netlabel/netlabel_unlabeled.h>
_llseek$auto(fd intptr, offset_high intptr, offset_low intptr, result intptr, whence intptr) (automatic)
_newselect$auto(n intptr, inp intptr, outp intptr, exp intptr, tvp intptr) (automatic)
accept$auto(fd intptr, upeer_sockaddr intptr, upeer_addrlen intptr) (automatic)
accept4$auto(fd intptr, upeer_sockaddr intptr, upeer_addrlen intptr, flags intptr) (automatic)
access$auto(filename intptr, mode intptr) (automatic)
acct$auto(name intptr) (automatic)
add_key$auto(_type intptr, _description intptr, _payload intptr, plen intptr, ringid intptr) (automatic)
adjtimex$auto(txc_p intptr) (automatic)
alarm$auto(seconds intptr) (automatic)
arch_prctl$auto(option intptr, arg2 intptr) (automatic)
arm_sync_file_range$auto(fd intptr, flags intptr, offset intptr, nbytes intptr) (automatic)
bind$auto(fd intptr, umyaddr intptr, addrlen intptr) (automatic)
brk$auto(brk intptr) (automatic)
cachestat$auto(fd intptr, cstat_range intptr, cstat intptr, flags intptr) (automatic)
capget$auto(header intptr, dataptr intptr) (automatic)
capset$auto(header intptr, data intptr) (automatic)
chdir$auto(filename intptr) (automatic)
chmod$auto(filename intptr, mode intptr) (automatic)
chown$auto(filename intptr, user intptr, group intptr) (automatic)
chown32$auto(filename intptr, user intptr, group intptr) (automatic)
chroot$auto(filename intptr) (automatic)
clock_adjtime$auto(which_clock intptr, utx intptr) (automatic)
clock_adjtime64$auto(which_clock intptr, utx intptr) (automatic)
clock_getres$auto(which_clock intptr, tp intptr) (automatic)
clock_getres_time64$auto(which_clock intptr, tp intptr) (automatic)
clock_gettime$auto(which_clock intptr, tp intptr) (automatic)
clock_gettime64$auto(which_clock intptr, tp intptr) (automatic)
clock_nanosleep$auto(which_clock intptr, flags intptr, rqtp intptr, rmtp intptr) (automatic)
clock_nanosleep_time64$auto(which_clock intptr, flags intptr, rqtp intptr, rmtp intptr) (automatic)
clock_settime$auto(which_clock intptr, tp intptr) (automatic)
clock_settime64$auto(which_clock intptr, tp intptr) (automatic)
clone$auto(clone_flags intptr, newsp intptr, parent_tidptr intptr, child_tidptr intptr, tls intptr) (automatic)
clone3$auto(uargs intptr, size intptr) (automatic)
close$auto(fd intptr) (automatic)
close_range$auto(fd intptr, max_fd intptr, flags intptr) (automatic)
connect$auto(fd intptr, uservaddr intptr, addrlen intptr) (automatic)
copy_file_range$auto(fd_in intptr, off_in intptr, fd_out intptr, off_out intptr, len intptr, flags intptr) (automatic)
creat$auto(pathname intptr, mode intptr) (automatic)
delete_module$auto(name_user intptr, flags intptr) (automatic)
dup$auto(fildes intptr) (automatic)
dup2$auto(oldfd intptr, newfd intptr) (automatic)
dup3$auto(oldfd intptr, newfd intptr, flags intptr) (automatic)
epoll_create$auto(size intptr) (automatic)
epoll_create1$auto(flags intptr) (automatic)
epoll_ctl$auto(epfd intptr, op intptr, fd intptr, event intptr) (automatic)
epoll_pwait$auto(epfd intptr, events intptr, maxevents intptr, timeout intptr, sigmask intptr, sigsetsize intptr) (automatic)
epoll_pwait2$auto(epfd intptr, events intptr, maxevents intptr, timeout intptr, sigmask intptr, sigsetsize intptr) (automatic)
epoll_wait$auto(epfd intptr, events intptr, maxevents intptr, timeout intptr) (automatic)
eventfd$auto(count intptr) (automatic)
eventfd2$auto(count intptr, flags intptr) (automatic)
execve$auto(filename intptr, argv intptr, envp intptr) (automatic)
execveat$auto(fd intptr, filename intptr, argv intptr, envp intptr, flags intptr) (automatic)
exit$auto(error_code intptr) (automatic)
exit_group$auto(error_code intptr) (automatic)
faccessat$auto(dfd intptr, filename intptr, mode intptr) (automatic)
faccessat2$auto(dfd intptr, filename intptr, mode intptr, flags intptr) (automatic)
fadvise64$auto(fd intptr, offset intptr, len intptr, advice intptr) (automatic)
fallocate$auto(fd intptr, mode intptr, offset intptr, len intptr) (automatic)
fchdir$auto(fd intptr) (automatic)
fchmod$auto(fd intptr, mode intptr) (automatic)
fchmodat$auto(dfd intptr, filename intptr, mode intptr) (automatic)
fchmodat2$auto(dfd intptr, filename intptr, mode intptr, flags intptr) (automatic)
fchown$auto(fd intptr, user intptr, group intptr) (automatic)
fchown32$auto(fd intptr, user intptr, group intptr) (automatic)
fchownat$auto(dfd intptr, filename intptr, user intptr, group intptr, flag intptr) (automatic)
fcntl$auto(fd intptr, cmd intptr, arg intptr) (automatic)
fdatasync$auto(fd intptr) (automatic)
fgetxattr$auto(fd intptr, name intptr, value intptr, size intptr) (automatic)
finit_module$auto(fd intptr, uargs intptr, flags intptr) (automatic)
flistxattr$auto(fd intptr, list intptr, size intptr) (automatic)
flock$auto(fd intptr, cmd intptr) (automatic)
fork$auto() (automatic)
fremovexattr$auto(fd intptr, name intptr) (automatic)
fsconfig$auto(fd intptr, cmd intptr, _key intptr, _value intptr, aux intptr) (automatic)
fsetxattr$auto(fd intptr, name intptr, value intptr, size intptr, flags intptr) (automatic)
fsmount$auto(fs_fd intptr, flags intptr, attr_flags intptr) (automatic)
fsopen$auto(_fs_name intptr, flags intptr) (automatic)
fspick$auto(dfd intptr, path intptr, flags intptr) (automatic)
fstat$auto(fd intptr, statbuf intptr) (automatic)
fstatfs$auto(fd intptr, buf intptr) (automatic)
fstatfs64$auto(fd intptr, sz intptr, buf intptr) (automatic)
fsync$auto(fd intptr) (automatic)
ftruncate$auto(fd intptr, length intptr) (automatic)
futex$auto(uaddr intptr, op intptr, val intptr, utime intptr, uaddr2 intptr, val3 intptr) (automatic)
futex_requeue$auto(waiters intptr, flags intptr, nr_wake intptr, nr_requeue intptr) (automatic)
futex_time64$auto(uaddr intptr, op intptr, val intptr, utime intptr, uaddr2 intptr, val3 intptr) (automatic)
futex_wait$auto(uaddr intptr, val intptr, mask intptr, flags intptr, timeout intptr, clockid intptr) (automatic)
futex_waitv$auto(waiters intptr, nr_futexes intptr, flags intptr, timeout intptr, clockid intptr) (automatic)
futex_wake$auto(uaddr intptr, mask intptr, nr intptr, flags intptr) (automatic)
futimesat$auto(dfd intptr, filename intptr, utimes intptr) (automatic)
get_mempolicy$auto(policy intptr, nmask intptr, maxnode intptr, addr intptr, flags intptr) (automatic)
get_robust_list$auto(pid intptr, head_ptr intptr, len_ptr intptr) (automatic)
get_thread_area$auto(u_info intptr) (automatic)
getcpu$auto(cpup intptr, nodep intptr, unused intptr) (automatic)
getcwd$auto(buf intptr, size intptr) (automatic)
getdents$auto(fd intptr, dirent intptr, count intptr) (automatic)
getdents64$auto(fd intptr, dirent intptr, count intptr) (automatic)
getegid$auto() (automatic)
getegid32$auto() (automatic)
geteuid$auto() (automatic)
geteuid32$auto() (automatic)
getgid$auto() (automatic)
getgid32$auto() (automatic)
getgroups$auto(gidsetsize intptr, grouplist intptr) (automatic)
getgroups32$auto(gidsetsize intptr, grouplist intptr) (automatic)
getitimer$auto(which intptr, value intptr) (automatic)
getpeername$auto(fd intptr, usockaddr intptr, usockaddr_len intptr) (automatic)
getpgid$auto(pid intptr) (automatic)
getpgrp$auto() (automatic)
getpid$auto() (automatic)
getppid$auto() (automatic)
getpriority$auto(which intptr, who intptr) (automatic)
getrandom$auto(ubuf intptr, len intptr, flags intptr) (automatic)
getresgid$auto(rgidp intptr, egidp intptr, sgidp intptr) (automatic)
getresgid32$auto(rgidp intptr, egidp intptr, sgidp intptr) (automatic)
getresuid$auto(ruidp intptr, euidp intptr, suidp intptr) (automatic)
getresuid32$auto(ruidp intptr, euidp intptr, suidp intptr) (automatic)
getrlimit$auto(rsrc intptr, rlim intptr) (automatic)
getrusage$auto(who intptr, ru intptr) (automatic)
getsid$auto(pid intptr) (automatic)
getsockname$auto(fd intptr, usockaddr intptr, usockaddr_len intptr) (automatic)
getsockopt$auto(fd intptr, level intptr, optname intptr, optval intptr, optlen intptr) (automatic)
gettid$auto() (automatic)
gettimeofday$auto(tv intptr, tz intptr) (automatic)
getuid$auto() (automatic)
getuid32$auto() (automatic)
getxattr$auto(pathname intptr, name intptr, value intptr, size intptr) (automatic)
init_module$auto(umod intptr, len intptr, uargs intptr) (automatic)
inotify_add_watch$auto(fd intptr, pathname intptr, mask intptr) (automatic)
inotify_init$auto() (automatic)
inotify_init1$auto(flags intptr) (automatic)
inotify_rm_watch$auto(fd intptr, wd intptr) (automatic)
io_cancel$auto(ctx_id intptr, iocb intptr, result intptr) (automatic)
io_destroy$auto(ctx intptr) (automatic)
io_getevents$auto(ctx_id intptr, min_nr intptr, nr intptr, events intptr, timeout intptr) (automatic)
io_pgetevents$auto(ctx_id intptr, min_nr intptr, nr intptr, events intptr, timeout intptr, usig intptr) (automatic)
io_pgetevents_time64$auto(ctx_id intptr, min_nr intptr, nr intptr, events intptr, timeout intptr, usig intptr) (automatic)
io_setup$auto(nr_events intptr, ctxp intptr) (automatic)
io_submit$auto(ctx_id intptr, nr intptr, iocbpp intptr) (automatic)
io_uring_enter$auto(fd intptr, to_submit intptr, min_complete intptr, flags intptr, argp intptr, argsz intptr) (automatic)
io_uring_register$auto(fd intptr, opcode intptr, arg intptr, nr_args intptr) (automatic)
io_uring_setup$auto(entries intptr, params intptr) (automatic)
ioctl$auto(fd intptr, cmd intptr, arg intptr) (automatic)
ioperm$auto(from intptr, num intptr, turn_on intptr) (automatic)
iopl$auto(level intptr) (automatic)
ioprio_get$auto(which intptr, who intptr) (automatic)
ioprio_set$auto(which intptr, who intptr, ioprio intptr) (automatic)
kcmp$auto(pid1 intptr, pid2 intptr, type intptr, idx1 intptr, idx2 intptr) (automatic)
kexec_load$auto(entry intptr, nr_segments intptr, segments intptr, flags intptr) (automatic)
keyctl$auto(option intptr, arg2 intptr, arg3 intptr, arg4 intptr, arg5 intptr) (automatic)
kill$auto(pid intptr, sig intptr) (automatic)
lchown$auto(filename intptr, user intptr, group intptr) (automatic)
lchown32$auto(filename intptr, user intptr, group intptr) (automatic)
lgetxattr$auto(pathname intptr, name intptr, value intptr, size intptr) (automatic)
link$auto(oldname intptr, newname intptr) (automatic)
linkat$auto(olddfd intptr, oldname intptr, newdfd intptr, newname intptr, flags intptr) (automatic)
listen$auto(fd intptr, backlog intptr) (automatic)
listmount$auto(req intptr, mnt_ids intptr, nr_mnt_ids intptr, flags intptr) (automatic)
listxattr$auto(pathname intptr, list intptr, size intptr) (automatic)
llistxattr$auto(pathname intptr, list intptr, size intptr) (automatic)
lremovexattr$auto(pathname intptr, name intptr) (automatic)
lseek$auto(fd intptr, offset intptr, whence intptr) (automatic)
lsetxattr$auto(pathname intptr, name intptr, value intptr, size intptr, flags intptr) (automatic)
lsm_get_self_attr$auto(attr intptr, ctx intptr, size intptr, flags intptr) (automatic)
lsm_list_modules$auto(ids intptr, size intptr, flags intptr) (automatic)
lsm_set_self_attr$auto(attr intptr, ctx intptr, size intptr, flags intptr) (automatic)
lstat$auto(filename intptr, statbuf intptr) (automatic)
madvise$auto(start intptr, len_in intptr, behavior intptr) (automatic)
mbind$auto(start intptr, len intptr, mode intptr, nmask intptr, maxnode intptr, flags intptr) (automatic)
membarrier$auto(cmd intptr, flags intptr, cpu_id intptr) (automatic)
memfd_create$auto(uname intptr, flags intptr) (automatic)
memfd_secret$auto(flags intptr) (automatic)
migrate_pages$auto(pid intptr, maxnode intptr, old_nodes intptr, new_nodes intptr) (automatic)
mincore$auto(start intptr, len intptr, vec intptr) (automatic)
mkdir$auto(pathname intptr, mode intptr) (automatic)
mkdirat$auto(dfd intptr, pathname intptr, mode intptr) (automatic)
mknod$auto(filename intptr, mode intptr, dev intptr) (automatic)
mknodat$auto(dfd intptr, filename intptr, mode intptr, dev intptr) (automatic)
mlock$auto(start intptr, len intptr) (automatic)
mlock2$auto(start intptr, len intptr, flags intptr) (automatic)
mlockall$auto(flags intptr) (automatic)
mmap$auto(addr intptr, len intptr, prot intptr, flags intptr, fd intptr, off intptr) (automatic)
mmap2$auto(addr intptr, len intptr, prot intptr, flags intptr, fd intptr, pgoff intptr) (automatic)
modify_ldt$auto(func intptr, ptr intptr, bytecount intptr) (automatic)
mount$auto(dev_name intptr, dir_name intptr, type intptr, flags intptr, data intptr) (automatic)
mount_setattr$auto(dfd intptr, path intptr, flags intptr, uattr intptr, usize intptr) (automatic)
move_mount$auto(from_dfd intptr, from_pathname intptr, to_dfd intptr, to_pathname intptr, flags intptr) (automatic)
move_pages$auto(pid intptr, nr_pages intptr, pages intptr, nodes intptr, status intptr, flags intptr) (automatic)
mprotect$auto(start intptr, len intptr, prot intptr) (automatic)
mq_getsetattr$auto(mqdes intptr, u_mqstat intptr, u_omqstat intptr) (automatic)
mq_notify$auto(mqdes intptr, u_notification intptr) (automatic)
mq_open$auto(u_name intptr, oflag intptr, mode intptr, u_attr intptr) (automatic)
mq_timedreceive$auto(mqdes intptr, u_msg_ptr intptr, msg_len intptr, u_msg_prio intptr, u_abs_timeout intptr) (automatic)
mq_timedreceive_time64$auto(mqdes intptr, u_msg_ptr intptr, msg_len intptr, u_msg_prio intptr, u_abs_timeout intptr) (automatic)
mq_timedsend$auto(mqdes intptr, u_msg_ptr intptr, msg_len intptr, msg_prio intptr, u_abs_timeout intptr) (automatic)
mq_timedsend_time64$auto(mqdes intptr, u_msg_ptr intptr, msg_len intptr, msg_prio intptr, u_abs_timeout intptr) (automatic)
mq_unlink$auto(u_name intptr) (automatic)
mremap$auto(addr intptr, old_len intptr, new_len intptr, flags intptr, new_addr intptr) (automatic)
mseal$auto(start intptr, len intptr, flags intptr) (automatic)
msgctl$auto(msqid intptr, cmd intptr, buf intptr) (automatic)
msgget$auto(key intptr, msgflg intptr) (automatic)
msgrcv$auto(msqid intptr, msgp intptr, msgsz intptr, msgtyp intptr, msgflg intptr) (automatic)
msgsnd$auto(msqid intptr, msgp intptr, msgsz intptr, msgflg intptr) (automatic)
msync$auto(start intptr, len intptr, flags intptr) (automatic)
munlock$auto(start intptr, len intptr) (automatic)
munlockall$auto() (automatic)
munmap$auto(addr intptr, len intptr) (automatic)
name_to_handle_at$auto(dfd intptr, name intptr, handle intptr, mnt_id intptr, flag intptr) (automatic)
nanosleep$auto(rqtp intptr, rmtp intptr) (automatic)
newfstatat$auto(dfd intptr, filename intptr, statbuf intptr, flag intptr) (automatic)
nice$auto(increment intptr) (automatic)
oldfstat$auto(fd intptr, statbuf intptr) (automatic)
oldlstat$auto(filename intptr, statbuf intptr) (automatic)
oldolduname$auto(name intptr) (automatic)
oldstat$auto(filename intptr, statbuf intptr) (automatic)
olduname$auto(name intptr) (automatic)
open$auto(filename intptr, flags intptr, mode intptr) (automatic)
open_by_handle_at$auto(mountdirfd intptr, handle intptr, flags intptr) (automatic)
open_tree$auto(dfd intptr, filename intptr, flags intptr) (automatic)
openat$auto(dfd intptr, filename intptr, flags intptr, mode intptr) (automatic)
openat2$auto(dfd intptr, filename intptr, how intptr, usize intptr) (automatic)
pause$auto() (automatic)
perf_event_open$auto(attr_uptr intptr, pid intptr, cpu intptr, group_fd intptr, flags intptr) (automatic)
personality$auto(personality intptr) (automatic)
pidfd_getfd$auto(pidfd intptr, fd intptr, flags intptr) (automatic)
pidfd_open$auto(pid intptr, flags intptr) (automatic)
pidfd_send_signal$auto(pidfd intptr, sig intptr, info intptr, flags intptr) (automatic)
pipe$auto(fildes intptr) (automatic)
pipe2$auto(fildes intptr, flags intptr) (automatic)
pivot_root$auto(new_root intptr, put_old intptr) (automatic)
pkey_alloc$auto(flags intptr, init_val intptr) (automatic)
pkey_free$auto(pkey intptr) (automatic)
pkey_mprotect$auto(start intptr, len intptr, prot intptr, pkey intptr) (automatic)
poll$auto(ufds intptr, nfds intptr, timeout_msecs intptr) (automatic)
ppoll$auto(ufds intptr, nfds intptr, tsp intptr, sigmask intptr, sigsetsize intptr) (automatic)
ppoll_time64$auto(ufds intptr, nfds intptr, tsp intptr, sigmask intptr, sigsetsize intptr) (automatic)
prctl$auto(option intptr, arg2 intptr, arg3 intptr, arg4 intptr, arg5 intptr) (automatic)
pread64$auto(fd intptr, buf intptr, count intptr, pos intptr) (automatic)
preadv$auto(fd intptr, vec intptr, vlen intptr, pos_l intptr, pos_h intptr) (automatic)
preadv2$auto(fd intptr, vec intptr, vlen intptr, pos_l intptr, pos_h intptr, flags intptr) (automatic)
prlimit64$auto(pid intptr, rsrc intptr, new_rlim intptr, old_rlim intptr) (automatic)
process_madvise$auto(pidfd intptr, vec intptr, vlen intptr, behavior intptr, flags intptr) (automatic)
process_mrelease$auto(pidfd intptr, flags intptr) (automatic)
process_vm_readv$auto(pid intptr, lvec intptr, liovcnt intptr, rvec intptr, riovcnt intptr, flags intptr) (automatic)
process_vm_writev$auto(pid intptr, lvec intptr, liovcnt intptr, rvec intptr, riovcnt intptr, flags intptr) (automatic)
pselect6$auto(n intptr, inp intptr, outp intptr, exp intptr, tsp intptr, sig intptr) (automatic)
pselect6_time64$auto(n intptr, inp intptr, outp intptr, exp intptr, tsp intptr, sig intptr) (automatic)
ptrace$auto(request intptr, pid intptr, addr intptr, data intptr) (automatic)
pwrite64$auto(fd intptr, buf intptr, count intptr, pos intptr) (automatic)
pwritev$auto(fd intptr, vec intptr, vlen intptr, pos_l intptr, pos_h intptr) (automatic)
pwritev2$auto(fd intptr, vec intptr, vlen intptr, pos_l intptr, pos_h intptr, flags intptr) (automatic)
quotactl$auto(cmd intptr, special intptr, id intptr, addr intptr) (automatic)
quotactl_fd$auto(fd intptr, cmd intptr, id intptr, addr intptr) (automatic)
read$auto(fd intptr, buf intptr, count intptr) (automatic)
readahead$auto(fd intptr, offset intptr, count intptr) (automatic)
readdir$auto(fd intptr, dirent intptr, count intptr) (automatic)
readlink$auto(path intptr, buf intptr, bufsiz intptr) (automatic)
readlinkat$auto(dfd intptr, pathname intptr, buf intptr, bufsiz intptr) (automatic)
readv$auto(fd intptr, vec intptr, vlen intptr) (automatic)
recv$auto(fd intptr, ubuf intptr, size intptr, flags intptr) (automatic)
recvfrom$auto(fd intptr, ubuf intptr, size intptr, flags intptr, addr intptr, addr_len intptr) (automatic)
recvmmsg$auto(fd intptr, mmsg intptr, vlen intptr, flags intptr, timeout intptr) (automatic)
recvmmsg_time64$auto(fd intptr, mmsg intptr, vlen intptr, flags intptr, timeout intptr) (automatic)
recvmsg$auto(fd intptr, msg intptr, flags intptr) (automatic)
remap_file_pages$auto(start intptr, size intptr, prot intptr, pgoff intptr, flags intptr) (automatic)
removexattr$auto(pathname intptr, name intptr) (automatic)
rename$auto(oldname intptr, newname intptr) (automatic)
renameat$auto(olddfd intptr, oldname intptr, newdfd intptr, newname intptr) (automatic)
renameat2$auto(olddfd intptr, oldname intptr, newdfd intptr, newname intptr, flags intptr) (automatic)
request_key$auto(_type intptr, _description intptr, _callout_info intptr, destringid intptr) (automatic)
restart_syscall$auto() (automatic)
rmdir$auto(pathname intptr) (automatic)
rseq$auto(rseq intptr, rseq_len intptr, flags intptr, sig intptr) (automatic)
rt_sigaction$auto(sig intptr, act intptr, oact intptr, sigsetsize intptr) (automatic)
rt_sigpending$auto(uset intptr, sigsetsize intptr) (automatic)
rt_sigprocmask$auto(how intptr, nset intptr, oset intptr, sigsetsize intptr) (automatic)
rt_sigqueueinfo$auto(pid intptr, sig intptr, uinfo intptr) (automatic)
rt_sigreturn$auto() (automatic)
rt_sigsuspend$auto(unewset intptr, sigsetsize intptr) (automatic)
rt_sigtimedwait$auto(uthese intptr, uinfo intptr, uts intptr, sigsetsize intptr) (automatic)
rt_sigtimedwait_time64$auto(uthese intptr, uinfo intptr, uts intptr, sigsetsize intptr) (automatic)
rt_tgsigqueueinfo$auto(tgid intptr, pid intptr, sig intptr, uinfo intptr) (automatic)
sched_get_priority_max$auto(policy intptr) (automatic)
sched_get_priority_min$auto(policy intptr) (automatic)
sched_getaffinity$auto(pid intptr, len intptr, user_mask_ptr intptr) (automatic)
sched_getattr$auto(pid intptr, uattr intptr, usize intptr, flags intptr) (automatic)
sched_getparam$auto(pid intptr, param intptr) (automatic)
sched_getscheduler$auto(pid intptr) (automatic)
sched_rr_get_interval$auto(pid intptr, interval intptr) (automatic)
sched_rr_get_interval_time64$auto(pid intptr, interval intptr) (automatic)
sched_setaffinity$auto(pid intptr, len intptr, user_mask_ptr intptr) (automatic)
sched_setattr$auto(pid intptr, uattr intptr, flags intptr) (automatic)
sched_setparam$auto(pid intptr, param intptr) (automatic)
sched_setscheduler$auto(pid intptr, policy intptr, param intptr) (automatic)
sched_yield$auto() (automatic)
seccomp$auto(op intptr, flags intptr, uargs intptr) (automatic)
select$auto(n intptr, inp intptr, outp intptr, exp intptr, tvp intptr) (automatic)
semctl$auto(semid intptr, semnum intptr, cmd intptr, arg intptr) (automatic)
semget$auto(key intptr, nsems intptr, semflg intptr) (automatic)
semop$auto(semid intptr, tsops intptr, nsops intptr) (automatic)
semtimedop$auto(semid intptr, tsems intptr, nsops intptr, timeout intptr) (automatic)
semtimedop_time64$auto(semid intptr, tsops intptr, nsops intptr, timeout intptr) (automatic)
send$auto(fd intptr, buff intptr, len intptr, flags intptr) (automatic)
sendfile$auto(out_fd intptr, in_fd intptr, offset intptr, count intptr) (automatic)
sendfile64$auto(out_fd intptr, in_fd intptr, offset intptr, count intptr) (automatic)
sendmmsg$auto(fd intptr, mmsg intptr, vlen intptr, flags intptr) (automatic)
sendmsg$auto(fd intptr, msg intptr, flags intptr) (automatic)
sendto$auto(fd intptr, buff intptr, len intptr, flags intptr, addr intptr, addr_len intptr) (automatic)
set_mempolicy$auto(mode intptr, nmask intptr, maxnode intptr) (automatic)
set_mempolicy_home_node$auto(start intptr, len intptr, home_node intptr, flags intptr) (automatic)
set_robust_list$auto(head intptr, len intptr) (automatic)
set_thread_area$auto(u_info intptr) (automatic)
set_tid_address$auto(tidptr intptr) (automatic)
setdomainname$auto(name intptr, len intptr) (automatic)
setfsgid$auto(gid intptr) (automatic)
setfsgid32$auto(gid intptr) (automatic)
setfsuid$auto(uid intptr) (automatic)
setfsuid32$auto(uid intptr) (automatic)
setgid$auto(gid intptr) (automatic)
setgid32$auto(gid intptr) (automatic)
setgroups$auto(gidsetsize intptr, grouplist intptr) (automatic)
setgroups32$auto(gidsetsize intptr, grouplist intptr) (automatic)
sethostname$auto(name intptr, len intptr) (automatic)
setitimer$auto(which intptr, value intptr, ovalue intptr) (automatic)
setns$auto(fd intptr, flags intptr) (automatic)
setpgid$auto(pid intptr, pgid intptr) (automatic)
setpriority$auto(which intptr, who intptr, niceval intptr) (automatic)
setregid$auto(rgid intptr, egid intptr) (automatic)
setregid32$auto(rgid intptr, egid intptr) (automatic)
setresgid$auto(rgid intptr, egid intptr, sgid intptr) (automatic)
setresgid32$auto(rgid intptr, egid intptr, sgid intptr) (automatic)
setresuid$auto(ruid intptr, euid intptr, suid intptr) (automatic)
setresuid32$auto(ruid intptr, euid intptr, suid intptr) (automatic)
setreuid$auto(ruid intptr, euid intptr) (automatic)
setreuid32$auto(ruid intptr, euid intptr) (automatic)
setrlimit$auto(rsrc intptr, rlim intptr) (automatic)
setsid$auto() (automatic)
setsockopt$auto(fd intptr, level intptr, optname intptr, optval intptr, optlen intptr) (automatic)
settimeofday$auto(tv intptr, tz intptr) (automatic)
setuid$auto(uid intptr) (automatic)
setuid32$auto(uid intptr) (automatic)
setxattr$auto(pathname intptr, name intptr, value intptr, size intptr, flags intptr) (automatic)
sgetmask$auto() (automatic)
shmat$auto(shmid intptr, shmaddr intptr, shmflg intptr) (automatic)
shmctl$auto(shmid intptr, cmd intptr, buf intptr) (automatic)
shmdt$auto(shmaddr intptr) (automatic)
shmget$auto(key intptr, size intptr, shmflg intptr) (automatic)
shutdown$auto(fd intptr, how intptr) (automatic)
sigaltstack$auto(uss intptr, uoss intptr) (automatic)
signal$auto(sig intptr, handler intptr) (automatic)
signalfd$auto(ufd intptr, user_mask intptr, sizemask intptr) (automatic)
signalfd4$auto(ufd intptr, user_mask intptr, sizemask intptr, flags intptr) (automatic)
sigpending$auto(uset intptr) (automatic)
sigprocmask$auto(how intptr, nset intptr, oset intptr) (automatic)
sigsuspend$auto(unused1 intptr, unused2 intptr, mask intptr) (automatic)
socket$auto(family intptr, type intptr, protocol intptr) (automatic)
socketcall$auto(call intptr, args intptr) (automatic)
socketpair$auto(family intptr, type intptr, protocol intptr, usockvec intptr) (automatic)
splice$auto(fd_in intptr, off_in intptr, fd_out intptr, off_out intptr, len intptr, flags intptr) (automatic)
ssetmask$auto(newmask intptr) (automatic)
stat$auto(filename intptr, statbuf intptr) (automatic)
statfs$auto(pathname intptr, buf intptr) (automatic)
statfs64$auto(pathname intptr, sz intptr, buf intptr) (automatic)
statmount$auto(req intptr, buf intptr, bufsize intptr, flags intptr) (automatic)
statx$auto(dfd intptr, filename intptr, flags intptr, mask intptr, buffer intptr) (automatic)
stime$auto(tptr intptr) (automatic)
swapoff$auto(specialfile intptr) (automatic)
swapon$auto(specialfile intptr, swap_flags intptr) (automatic)
symlink$auto(oldname intptr, newname intptr) (automatic)
symlinkat$auto(oldname intptr, newdfd intptr, newname intptr) (automatic)
sync$auto() (automatic)
sync_file_range$auto(fd intptr, offset intptr, nbytes intptr, flags intptr) (automatic)
sync_file_range2$auto(fd intptr, flags intptr, offset intptr, nbytes intptr) (automatic)
syncfs$auto(fd intptr) (automatic)
sysfs$auto(option intptr, arg1 intptr, arg2 intptr) (automatic)
sysinfo$auto(info intptr) (automatic)
syslog$auto(type intptr, buf intptr, len intptr) (automatic)
tee$auto(fdin intptr, fdout intptr, len intptr, flags intptr) (automatic)
tgkill$auto(tgid intptr, pid intptr, sig intptr) (automatic)
time$auto(tloc intptr) (automatic)
timer_create$auto(which_clock intptr, timer_event_spec intptr, created_timer_id intptr) (automatic)
timer_delete$auto(timer_id intptr) (automatic)
timer_getoverrun$auto(timer_id intptr) (automatic)
timer_gettime$auto(timer_id intptr, setting intptr) (automatic)
timer_gettime64$auto(timer_id intptr, setting intptr) (automatic)
timer_settime$auto(timer_id intptr, flags intptr, new intptr, old intptr) (automatic)
timer_settime64$auto(timer_id intptr, flags intptr, new_setting intptr, old_setting intptr) (automatic)
timerfd_create$auto(clockid intptr, flags intptr) (automatic)
timerfd_gettime$auto(ufd intptr, otmr intptr) (automatic)
timerfd_gettime64$auto(ufd intptr, otmr intptr) (automatic)
timerfd_settime$auto(ufd intptr, flags intptr, utmr intptr, otmr intptr) (automatic)
timerfd_settime64$auto(ufd intptr, flags intptr, utmr intptr, otmr intptr) (automatic)
times$auto(tbuf intptr) (automatic)
tkill$auto(pid intptr, sig intptr) (automatic)
truncate$auto(path intptr, length intptr) (automatic)
ugetrlimit$auto(rsrc intptr, rlim intptr) (automatic)
umask$auto(mask intptr) (automatic)
umount$auto(name intptr) (automatic)
umount2$auto(name intptr, flags intptr) (automatic)
uname$auto(name intptr) (automatic)
unlink$auto(pathname intptr) (automatic)
unlinkat$auto(dfd intptr, pathname intptr, flag intptr) (automatic)
unshare$auto(unshare_flags intptr) (automatic)
uretprobe$auto() (automatic)
ustat$auto(dev intptr, ubuf intptr) (automatic)
utime$auto(filename intptr, t intptr) (automatic)
utimensat$auto(dfd intptr, filename intptr, utimes intptr, flags intptr) (automatic)
utimensat_time64$auto(dfd intptr, filename intptr, utimes intptr, flags intptr) (automatic)
utimes$auto(filename intptr, utimes intptr) (automatic)
vfork$auto() (automatic)
vhangup$auto() (automatic)
vmsplice$auto(fd intptr, uiov intptr, nr_segs intptr, flags intptr) (automatic)
wait4$auto(upid intptr, stat_addr intptr, options intptr, ru intptr) (automatic)
waitid$auto(which intptr, upid intptr, infop intptr, options intptr, ru intptr) (automatic)
waitpid$auto(pid intptr, stat_addr intptr, options intptr) (automatic)
write$auto(fd intptr, buf intptr, count intptr) (automatic)
writev$auto(fd intptr, vec intptr, vlen intptr) (automatic)
_ = __NR_mmap2

bit_policy$auto [
	ETHTOOL_A_BITSET_BIT_INDEX	nlattr[ETHTOOL_A_BITSET_BIT_INDEX, int32]
	ETHTOOL_A_BITSET_BIT_NAME	nlattr[ETHTOOL_A_BITSET_BIT_NAME, string]
	ETHTOOL_A_BITSET_BIT_VALUE	nlattr[ETHTOOL_A_BITSET_BIT_VALUE, void]
] [varlen]

bitset_policy$auto [
	ETHTOOL_A_BITSET_NOMASK	nlattr[ETHTOOL_A_BITSET_NOMASK, void]
	ETHTOOL_A_BITSET_SIZE	nlattr[ETHTOOL_A_BITSET_SIZE, intptr]
	ETHTOOL_A_BITSET_BITS	nlattr[ETHTOOL_A_BITSET_BITS, intptr]
	ETHTOOL_A_BITSET_VALUE	nlattr[ETHTOOL_A_BITSET_VALUE, int16]
	ETHTOOL_A_BITSET_MASK	nlattr[ETHTOOL_A_BITSET_MASK, int16]
] [varlen]

cable_test_tdr_act_cfg_policy$auto [
	ETHTOOL_A_CABLE_TEST_TDR_CFG_FIRST	nlattr[ETHTOOL_A_CABLE_TEST_TDR_CFG_FIRST, int32]
	ETHTOOL_A_CABLE_TEST_TDR_CFG_LAST	nlattr[ETHTOOL_A_CABLE_TEST_TDR_CFG_LAST, int32]
	ETHTOOL_A_CABLE_TEST_TDR_CFG_STEP	nlattr[ETHTOOL_A_CABLE_TEST_TDR_CFG_STEP, int32]
	ETHTOOL_A_CABLE_TEST_TDR_CFG_PAIR	nlattr[ETHTOOL_A_CABLE_TEST_TDR_CFG_PAIR, int8]
] [varlen]

calipso_genl_policy$auto [
	NLBL_CALIPSO_A_DOI	nlattr[NLBL_CALIPSO_A_DOI, int32]
	NLBL_CALIPSO_A_MTYPE	nlattr[NLBL_CALIPSO_A_MTYPE, int32]
] [varlen]

cgroup_policy$auto [
	TCA_CGROUP_EMATCHES	nlattr[TCA_CGROUP_EMATCHES, intptr]
] [varlen]

cgroupstats_cmd_get_policy$auto [
	CGROUPSTATS_CMD_ATTR_FD	nlattr[CGROUPSTATS_CMD_ATTR_FD, int32]
] [varlen]

coalesce_irq_moderation_policy$auto [
	ETHTOOL_A_IRQ_MODERATION_USEC	nlattr[ETHTOOL_A_IRQ_MODERATION_USEC, int32]
	ETHTOOL_A_IRQ_MODERATION_PKTS	nlattr[ETHTOOL_A_IRQ_MODERATION_PKTS, int32]
	ETHTOOL_A_IRQ_MODERATION_COMPS	nlattr[ETHTOOL_A_IRQ_MODERATION_COMPS, int32]
] [varlen]

coalesce_profile_policy$auto [
	ETHTOOL_A_PROFILE_IRQ_MODERATION	nlattr[ETHTOOL_A_PROFILE_IRQ_MODERATION, intptr]
] [varlen]

ct_nla_policy$auto [
	CTA_TUPLE_ORIG		nlattr[CTA_TUPLE_ORIG, intptr]
	CTA_TUPLE_REPLY		nlattr[CTA_TUPLE_REPLY, intptr]
	CTA_STATUS		nlattr[CTA_STATUS, int32]
	CTA_PROTOINFO		nlattr[CTA_PROTOINFO, intptr]
	CTA_HELP		nlattr[CTA_HELP, intptr]
	CTA_NAT_SRC		nlattr[CTA_NAT_SRC, intptr]
	CTA_TIMEOUT		nlattr[CTA_TIMEOUT, int32]
	CTA_MARK		nlattr[CTA_MARK, int32]
	CTA_ID			nlattr[CTA_ID, int32]
	CTA_NAT_DST		nlattr[CTA_NAT_DST, intptr]
	CTA_TUPLE_MASTER	nlattr[CTA_TUPLE_MASTER, intptr]
	CTA_NAT_SEQ_ADJ_ORIG	nlattr[CTA_NAT_SEQ_ADJ_ORIG, intptr]
	CTA_NAT_SEQ_ADJ_REPLY	nlattr[CTA_NAT_SEQ_ADJ_REPLY, intptr]
	CTA_ZONE		nlattr[CTA_ZONE, int16]
	CTA_MARK_MASK		nlattr[CTA_MARK_MASK, int32]
	CTA_LABELS		nlattr[CTA_LABELS, int16]
	CTA_LABELS_MASK		nlattr[CTA_LABELS_MASK, int16]
	CTA_FILTER		nlattr[CTA_FILTER, intptr]
	CTA_STATUS_MASK		nlattr[CTA_STATUS_MASK, int32]
] [varlen]

cta_filter_nla_policy$auto [
	CTA_FILTER_ORIG_FLAGS	nlattr[CTA_FILTER_ORIG_FLAGS, int32]
	CTA_FILTER_REPLY_FLAGS	nlattr[CTA_FILTER_REPLY_FLAGS, int32]
] [varlen]

cta_ip_nla_policy$auto [
	CTA_IP_V4_SRC	nlattr[CTA_IP_V4_SRC, int32]
	CTA_IP_V4_DST	nlattr[CTA_IP_V4_DST, int32]
	CTA_IP_V6_SRC	nlattr[CTA_IP_V6_SRC, intptr]
	CTA_IP_V6_DST	nlattr[CTA_IP_V6_DST, intptr]
] [varlen]

devconf_ipv4_policy$auto [
	NETCONFA_IFINDEX			nlattr[NETCONFA_IFINDEX, intptr]
	NETCONFA_FORWARDING			nlattr[NETCONFA_FORWARDING, intptr]
	NETCONFA_RP_FILTER			nlattr[NETCONFA_RP_FILTER, intptr]
	NETCONFA_PROXY_NEIGH			nlattr[NETCONFA_PROXY_NEIGH, intptr]
	NETCONFA_IGNORE_ROUTES_WITH_LINKDOWN	nlattr[NETCONFA_IGNORE_ROUTES_WITH_LINKDOWN, intptr]
] [varlen]

devconf_ipv6_policy$auto [
	NETCONFA_IFINDEX			nlattr[NETCONFA_IFINDEX, intptr]
	NETCONFA_FORWARDING			nlattr[NETCONFA_FORWARDING, intptr]
	NETCONFA_PROXY_NEIGH			nlattr[NETCONFA_PROXY_NEIGH, intptr]
	NETCONFA_IGNORE_ROUTES_WITH_LINKDOWN	nlattr[NETCONFA_IGNORE_ROUTES_WITH_LINKDOWN, intptr]
] [varlen]

em_policy$auto [
	TCA_EMATCH_TREE_HDR	nlattr[TCA_EMATCH_TREE_HDR, intptr]
	TCA_EMATCH_TREE_LIST	nlattr[TCA_EMATCH_TREE_LIST, intptr]
] [varlen]

erspan_opt_policy$auto [
	LWTUNNEL_IP_OPT_ERSPAN_VER	nlattr[LWTUNNEL_IP_OPT_ERSPAN_VER, int8]
	LWTUNNEL_IP_OPT_ERSPAN_INDEX	nlattr[LWTUNNEL_IP_OPT_ERSPAN_INDEX, int32]
	LWTUNNEL_IP_OPT_ERSPAN_DIR	nlattr[LWTUNNEL_IP_OPT_ERSPAN_DIR, int8]
	LWTUNNEL_IP_OPT_ERSPAN_HWID	nlattr[LWTUNNEL_IP_OPT_ERSPAN_HWID, int8]
] [varlen]

ethnl_cable_test_act_policy$auto [
	ETHTOOL_A_CABLE_TEST_HEADER	nlattr[ETHTOOL_A_CABLE_TEST_HEADER, intptr]
] [varlen]

ethnl_cable_test_tdr_act_policy$auto [
	ETHTOOL_A_CABLE_TEST_TDR_HEADER	nlattr[ETHTOOL_A_CABLE_TEST_TDR_HEADER, intptr]
	ETHTOOL_A_CABLE_TEST_TDR_CFG	nlattr[ETHTOOL_A_CABLE_TEST_TDR_CFG, intptr]
] [varlen]

ethnl_channels_get_policy$auto [
	ETHTOOL_A_CHANNELS_HEADER	nlattr[ETHTOOL_A_CHANNELS_HEADER, intptr]
] [varlen]

ethnl_channels_set_policy$auto [
	ETHTOOL_A_CHANNELS_HEADER		nlattr[ETHTOOL_A_CHANNELS_HEADER, intptr]
	ETHTOOL_A_CHANNELS_RX_COUNT		nlattr[ETHTOOL_A_CHANNELS_RX_COUNT, int32]
	ETHTOOL_A_CHANNELS_TX_COUNT		nlattr[ETHTOOL_A_CHANNELS_TX_COUNT, int32]
	ETHTOOL_A_CHANNELS_OTHER_COUNT		nlattr[ETHTOOL_A_CHANNELS_OTHER_COUNT, int32]
	ETHTOOL_A_CHANNELS_COMBINED_COUNT	nlattr[ETHTOOL_A_CHANNELS_COMBINED_COUNT, int32]
] [varlen]

ethnl_coalesce_get_policy$auto [
	ETHTOOL_A_COALESCE_HEADER	nlattr[ETHTOOL_A_COALESCE_HEADER, intptr]
] [varlen]

ethnl_coalesce_set_policy$auto [
	ETHTOOL_A_COALESCE_HEADER		nlattr[ETHTOOL_A_COALESCE_HEADER, intptr]
	ETHTOOL_A_COALESCE_RX_USECS		nlattr[ETHTOOL_A_COALESCE_RX_USECS, int32]
	ETHTOOL_A_COALESCE_RX_MAX_FRAMES	nlattr[ETHTOOL_A_COALESCE_RX_MAX_FRAMES, int32]
	ETHTOOL_A_COALESCE_RX_USECS_IRQ		nlattr[ETHTOOL_A_COALESCE_RX_USECS_IRQ, int32]
	ETHTOOL_A_COALESCE_RX_MAX_FRAMES_IRQ	nlattr[ETHTOOL_A_COALESCE_RX_MAX_FRAMES_IRQ, int32]
	ETHTOOL_A_COALESCE_TX_USECS		nlattr[ETHTOOL_A_COALESCE_TX_USECS, int32]
	ETHTOOL_A_COALESCE_TX_MAX_FRAMES	nlattr[ETHTOOL_A_COALESCE_TX_MAX_FRAMES, int32]
	ETHTOOL_A_COALESCE_TX_USECS_IRQ		nlattr[ETHTOOL_A_COALESCE_TX_USECS_IRQ, int32]
	ETHTOOL_A_COALESCE_TX_MAX_FRAMES_IRQ	nlattr[ETHTOOL_A_COALESCE_TX_MAX_FRAMES_IRQ, int32]
	ETHTOOL_A_COALESCE_STATS_BLOCK_USECS	nlattr[ETHTOOL_A_COALESCE_STATS_BLOCK_USECS, int32]
	ETHTOOL_A_COALESCE_USE_ADAPTIVE_RX	nlattr[ETHTOOL_A_COALESCE_USE_ADAPTIVE_RX, int8]
	ETHTOOL_A_COALESCE_USE_ADAPTIVE_TX	nlattr[ETHTOOL_A_COALESCE_USE_ADAPTIVE_TX, int8]
	ETHTOOL_A_COALESCE_PKT_RATE_LOW		nlattr[ETHTOOL_A_COALESCE_PKT_RATE_LOW, int32]
	ETHTOOL_A_COALESCE_RX_USECS_LOW		nlattr[ETHTOOL_A_COALESCE_RX_USECS_LOW, int32]
	ETHTOOL_A_COALESCE_RX_MAX_FRAMES_LOW	nlattr[ETHTOOL_A_COALESCE_RX_MAX_FRAMES_LOW, int32]
	ETHTOOL_A_COALESCE_TX_USECS_LOW		nlattr[ETHTOOL_A_COALESCE_TX_USECS_LOW, int32]
	ETHTOOL_A_COALESCE_TX_MAX_FRAMES_LOW	nlattr[ETHTOOL_A_COALESCE_TX_MAX_FRAMES_LOW, int32]
	ETHTOOL_A_COALESCE_PKT_RATE_HIGH	nlattr[ETHTOOL_A_COALESCE_PKT_RATE_HIGH, int32]
	ETHTOOL_A_COALESCE_RX_USECS_HIGH	nlattr[ETHTOOL_A_COALESCE_RX_USECS_HIGH, int32]
	ETHTOOL_A_COALESCE_RX_MAX_FRAMES_HIGH	nlattr[ETHTOOL_A_COALESCE_RX_MAX_FRAMES_HIGH, int32]
	ETHTOOL_A_COALESCE_TX_USECS_HIGH	nlattr[ETHTOOL_A_COALESCE_TX_USECS_HIGH, int32]
	ETHTOOL_A_COALESCE_TX_MAX_FRAMES_HIGH	nlattr[ETHTOOL_A_COALESCE_TX_MAX_FRAMES_HIGH, int32]
	ETHTOOL_A_COALESCE_RATE_SAMPLE_INTERVAL	nlattr[ETHTOOL_A_COALESCE_RATE_SAMPLE_INTERVAL, int32]
	ETHTOOL_A_COALESCE_USE_CQE_MODE_TX	nlattr[ETHTOOL_A_COALESCE_USE_CQE_MODE_TX, intptr]
	ETHTOOL_A_COALESCE_USE_CQE_MODE_RX	nlattr[ETHTOOL_A_COALESCE_USE_CQE_MODE_RX, intptr]
	ETHTOOL_A_COALESCE_TX_AGGR_MAX_BYTES	nlattr[ETHTOOL_A_COALESCE_TX_AGGR_MAX_BYTES, int32]
	ETHTOOL_A_COALESCE_TX_AGGR_MAX_FRAMES	nlattr[ETHTOOL_A_COALESCE_TX_AGGR_MAX_FRAMES, int32]
	ETHTOOL_A_COALESCE_TX_AGGR_TIME_USECS	nlattr[ETHTOOL_A_COALESCE_TX_AGGR_TIME_USECS, int32]
	ETHTOOL_A_COALESCE_RX_PROFILE		nlattr[ETHTOOL_A_COALESCE_RX_PROFILE, intptr]
	ETHTOOL_A_COALESCE_TX_PROFILE		nlattr[ETHTOOL_A_COALESCE_TX_PROFILE, intptr]
] [varlen]

ethnl_debug_get_policy$auto [
	ETHTOOL_A_DEBUG_HEADER	nlattr[ETHTOOL_A_DEBUG_HEADER, intptr]
] [varlen]

ethnl_debug_set_policy$auto [
	ETHTOOL_A_DEBUG_HEADER	nlattr[ETHTOOL_A_DEBUG_HEADER, intptr]
	ETHTOOL_A_DEBUG_MSGMASK	nlattr[ETHTOOL_A_DEBUG_MSGMASK, intptr]
] [varlen]

ethnl_eee_get_policy$auto [
	ETHTOOL_A_EEE_HEADER	nlattr[ETHTOOL_A_EEE_HEADER, intptr]
] [varlen]

ethnl_eee_set_policy$auto [
	ETHTOOL_A_EEE_HEADER		nlattr[ETHTOOL_A_EEE_HEADER, intptr]
	ETHTOOL_A_EEE_MODES_OURS	nlattr[ETHTOOL_A_EEE_MODES_OURS, intptr]
	ETHTOOL_A_EEE_ENABLED		nlattr[ETHTOOL_A_EEE_ENABLED, int8]
	ETHTOOL_A_EEE_TX_LPI_ENABLED	nlattr[ETHTOOL_A_EEE_TX_LPI_ENABLED, int8]
	ETHTOOL_A_EEE_TX_LPI_TIMER	nlattr[ETHTOOL_A_EEE_TX_LPI_TIMER, int32]
] [varlen]

ethnl_features_get_policy$auto [
	ETHTOOL_A_FEATURES_HEADER	nlattr[ETHTOOL_A_FEATURES_HEADER, intptr]
] [varlen]

ethnl_features_set_policy$auto [
	ETHTOOL_A_FEATURES_HEADER	nlattr[ETHTOOL_A_FEATURES_HEADER, intptr]
	ETHTOOL_A_FEATURES_WANTED	nlattr[ETHTOOL_A_FEATURES_WANTED, intptr]
] [varlen]

ethnl_fec_get_policy$auto [
	ETHTOOL_A_FEC_HEADER	nlattr[ETHTOOL_A_FEC_HEADER, intptr]
] [varlen]

ethnl_fec_set_policy$auto [
	ETHTOOL_A_FEC_HEADER	nlattr[ETHTOOL_A_FEC_HEADER, intptr]
	ETHTOOL_A_FEC_MODES	nlattr[ETHTOOL_A_FEC_MODES, intptr]
	ETHTOOL_A_FEC_AUTO	nlattr[ETHTOOL_A_FEC_AUTO, intptr]
] [varlen]

ethnl_header_policy$auto [
	ETHTOOL_A_HEADER_DEV_INDEX	nlattr[ETHTOOL_A_HEADER_DEV_INDEX, int32]
	ETHTOOL_A_HEADER_DEV_NAME	nlattr[ETHTOOL_A_HEADER_DEV_NAME, string]
	ETHTOOL_A_HEADER_FLAGS		nlattr[ETHTOOL_A_HEADER_FLAGS, intptr]
] [varlen]

ethnl_header_policy_stats$auto [
	ETHTOOL_A_HEADER_DEV_INDEX	nlattr[ETHTOOL_A_HEADER_DEV_INDEX, int32]
	ETHTOOL_A_HEADER_DEV_NAME	nlattr[ETHTOOL_A_HEADER_DEV_NAME, string]
	ETHTOOL_A_HEADER_FLAGS		nlattr[ETHTOOL_A_HEADER_FLAGS, intptr]
] [varlen]

ethnl_linkinfo_get_policy$auto [
	ETHTOOL_A_LINKINFO_HEADER	nlattr[ETHTOOL_A_LINKINFO_HEADER, intptr]
] [varlen]

ethnl_linkinfo_set_policy$auto [
	ETHTOOL_A_LINKINFO_HEADER	nlattr[ETHTOOL_A_LINKINFO_HEADER, intptr]
	ETHTOOL_A_LINKINFO_PORT		nlattr[ETHTOOL_A_LINKINFO_PORT, int8]
	ETHTOOL_A_LINKINFO_PHYADDR	nlattr[ETHTOOL_A_LINKINFO_PHYADDR, int8]
	ETHTOOL_A_LINKINFO_TP_MDIX_CTRL	nlattr[ETHTOOL_A_LINKINFO_TP_MDIX_CTRL, int8]
] [varlen]

ethnl_linkmodes_get_policy$auto [
	ETHTOOL_A_LINKMODES_HEADER	nlattr[ETHTOOL_A_LINKMODES_HEADER, intptr]
] [varlen]

ethnl_linkmodes_set_policy$auto [
	ETHTOOL_A_LINKMODES_HEADER		nlattr[ETHTOOL_A_LINKMODES_HEADER, intptr]
	ETHTOOL_A_LINKMODES_AUTONEG		nlattr[ETHTOOL_A_LINKMODES_AUTONEG, int8]
	ETHTOOL_A_LINKMODES_OURS		nlattr[ETHTOOL_A_LINKMODES_OURS, intptr]
	ETHTOOL_A_LINKMODES_SPEED		nlattr[ETHTOOL_A_LINKMODES_SPEED, int32]
	ETHTOOL_A_LINKMODES_DUPLEX		nlattr[ETHTOOL_A_LINKMODES_DUPLEX, int8]
	ETHTOOL_A_LINKMODES_MASTER_SLAVE_CFG	nlattr[ETHTOOL_A_LINKMODES_MASTER_SLAVE_CFG, int8]
	ETHTOOL_A_LINKMODES_LANES		nlattr[ETHTOOL_A_LINKMODES_LANES, intptr]
] [varlen]

ethnl_linkstate_get_policy$auto [
	ETHTOOL_A_LINKSTATE_HEADER	nlattr[ETHTOOL_A_LINKSTATE_HEADER, intptr]
] [varlen]

ethnl_mm_get_policy$auto [
	ETHTOOL_A_MM_HEADER	nlattr[ETHTOOL_A_MM_HEADER, intptr]
] [varlen]

ethnl_mm_set_policy$auto [
	ETHTOOL_A_MM_HEADER		nlattr[ETHTOOL_A_MM_HEADER, intptr]
	ETHTOOL_A_MM_VERIFY_ENABLED	nlattr[ETHTOOL_A_MM_VERIFY_ENABLED, intptr]
	ETHTOOL_A_MM_VERIFY_TIME	nlattr[ETHTOOL_A_MM_VERIFY_TIME, intptr]
	ETHTOOL_A_MM_TX_ENABLED		nlattr[ETHTOOL_A_MM_TX_ENABLED, intptr]
	ETHTOOL_A_MM_PMAC_ENABLED	nlattr[ETHTOOL_A_MM_PMAC_ENABLED, intptr]
	ETHTOOL_A_MM_TX_MIN_FRAG_SIZE	nlattr[ETHTOOL_A_MM_TX_MIN_FRAG_SIZE, intptr]
] [varlen]

ethnl_module_eeprom_get_policy$auto [
	ETHTOOL_A_MODULE_EEPROM_HEADER		nlattr[ETHTOOL_A_MODULE_EEPROM_HEADER, intptr]
	ETHTOOL_A_MODULE_EEPROM_OFFSET		nlattr[ETHTOOL_A_MODULE_EEPROM_OFFSET, intptr]
	ETHTOOL_A_MODULE_EEPROM_LENGTH		nlattr[ETHTOOL_A_MODULE_EEPROM_LENGTH, intptr]
	ETHTOOL_A_MODULE_EEPROM_PAGE		nlattr[ETHTOOL_A_MODULE_EEPROM_PAGE, int8]
	ETHTOOL_A_MODULE_EEPROM_BANK		nlattr[ETHTOOL_A_MODULE_EEPROM_BANK, int8]
	ETHTOOL_A_MODULE_EEPROM_I2C_ADDRESS	nlattr[ETHTOOL_A_MODULE_EEPROM_I2C_ADDRESS, intptr]
] [varlen]

ethnl_module_fw_flash_act_policy$auto [
	ETHTOOL_A_MODULE_FW_FLASH_HEADER	nlattr[ETHTOOL_A_MODULE_FW_FLASH_HEADER, intptr]
	ETHTOOL_A_MODULE_FW_FLASH_FILE_NAME	nlattr[ETHTOOL_A_MODULE_FW_FLASH_FILE_NAME, string]
	ETHTOOL_A_MODULE_FW_FLASH_PASSWORD	nlattr[ETHTOOL_A_MODULE_FW_FLASH_PASSWORD, int32]
] [varlen]

ethnl_module_get_policy$auto [
	ETHTOOL_A_MODULE_HEADER	nlattr[ETHTOOL_A_MODULE_HEADER, intptr]
] [varlen]

ethnl_module_set_policy$auto [
	ETHTOOL_A_MODULE_HEADER			nlattr[ETHTOOL_A_MODULE_HEADER, intptr]
	ETHTOOL_A_MODULE_POWER_MODE_POLICY	nlattr[ETHTOOL_A_MODULE_POWER_MODE_POLICY, intptr]
] [varlen]

ethnl_pause_get_policy$auto [
	ETHTOOL_A_PAUSE_HEADER		nlattr[ETHTOOL_A_PAUSE_HEADER, intptr]
	ETHTOOL_A_PAUSE_STATS_SRC	nlattr[ETHTOOL_A_PAUSE_STATS_SRC, intptr]
] [varlen]

ethnl_pause_set_policy$auto [
	ETHTOOL_A_PAUSE_HEADER	nlattr[ETHTOOL_A_PAUSE_HEADER, intptr]
	ETHTOOL_A_PAUSE_AUTONEG	nlattr[ETHTOOL_A_PAUSE_AUTONEG, int8]
	ETHTOOL_A_PAUSE_RX	nlattr[ETHTOOL_A_PAUSE_RX, int8]
	ETHTOOL_A_PAUSE_TX	nlattr[ETHTOOL_A_PAUSE_TX, int8]
] [varlen]

ethnl_phc_vclocks_get_policy$auto [
	ETHTOOL_A_PHC_VCLOCKS_HEADER	nlattr[ETHTOOL_A_PHC_VCLOCKS_HEADER, intptr]
] [varlen]

ethnl_plca_get_cfg_policy$auto [
	ETHTOOL_A_PLCA_HEADER	nlattr[ETHTOOL_A_PLCA_HEADER, intptr]
] [varlen]

ethnl_plca_get_status_policy$auto [
	ETHTOOL_A_PLCA_HEADER	nlattr[ETHTOOL_A_PLCA_HEADER, intptr]
] [varlen]

ethnl_plca_set_cfg_policy$auto [
	ETHTOOL_A_PLCA_HEADER		nlattr[ETHTOOL_A_PLCA_HEADER, intptr]
	ETHTOOL_A_PLCA_ENABLED		nlattr[ETHTOOL_A_PLCA_ENABLED, intptr]
	ETHTOOL_A_PLCA_NODE_ID		nlattr[ETHTOOL_A_PLCA_NODE_ID, intptr]
	ETHTOOL_A_PLCA_NODE_CNT		nlattr[ETHTOOL_A_PLCA_NODE_CNT, intptr]
	ETHTOOL_A_PLCA_TO_TMR		nlattr[ETHTOOL_A_PLCA_TO_TMR, intptr]
	ETHTOOL_A_PLCA_BURST_CNT	nlattr[ETHTOOL_A_PLCA_BURST_CNT, intptr]
	ETHTOOL_A_PLCA_BURST_TMR	nlattr[ETHTOOL_A_PLCA_BURST_TMR, intptr]
] [varlen]

ethnl_privflags_get_policy$auto [
	ETHTOOL_A_PRIVFLAGS_HEADER	nlattr[ETHTOOL_A_PRIVFLAGS_HEADER, intptr]
] [varlen]

ethnl_privflags_set_policy$auto [
	ETHTOOL_A_PRIVFLAGS_HEADER	nlattr[ETHTOOL_A_PRIVFLAGS_HEADER, intptr]
	ETHTOOL_A_PRIVFLAGS_FLAGS	nlattr[ETHTOOL_A_PRIVFLAGS_FLAGS, intptr]
] [varlen]

ethnl_pse_get_policy$auto [
	ETHTOOL_A_PSE_HEADER	nlattr[ETHTOOL_A_PSE_HEADER, intptr]
] [varlen]

ethnl_pse_set_policy$auto [
	ETHTOOL_A_PSE_HEADER			nlattr[ETHTOOL_A_PSE_HEADER, intptr]
	ETHTOOL_A_PODL_PSE_ADMIN_CONTROL	nlattr[ETHTOOL_A_PODL_PSE_ADMIN_CONTROL, intptr]
	ETHTOOL_A_C33_PSE_ADMIN_CONTROL		nlattr[ETHTOOL_A_C33_PSE_ADMIN_CONTROL, intptr]
	ETHTOOL_A_C33_PSE_AVAIL_PW_LIMIT	nlattr[ETHTOOL_A_C33_PSE_AVAIL_PW_LIMIT, int32]
] [varlen]

ethnl_rings_get_policy$auto [
	ETHTOOL_A_RINGS_HEADER	nlattr[ETHTOOL_A_RINGS_HEADER, intptr]
] [varlen]

ethnl_rings_set_policy$auto [
	ETHTOOL_A_RINGS_HEADER		nlattr[ETHTOOL_A_RINGS_HEADER, intptr]
	ETHTOOL_A_RINGS_RX		nlattr[ETHTOOL_A_RINGS_RX, int32]
	ETHTOOL_A_RINGS_RX_MINI		nlattr[ETHTOOL_A_RINGS_RX_MINI, int32]
	ETHTOOL_A_RINGS_RX_JUMBO	nlattr[ETHTOOL_A_RINGS_RX_JUMBO, int32]
	ETHTOOL_A_RINGS_TX		nlattr[ETHTOOL_A_RINGS_TX, int32]
	ETHTOOL_A_RINGS_RX_BUF_LEN	nlattr[ETHTOOL_A_RINGS_RX_BUF_LEN, intptr]
	ETHTOOL_A_RINGS_TCP_DATA_SPLIT	nlattr[ETHTOOL_A_RINGS_TCP_DATA_SPLIT, intptr]
	ETHTOOL_A_RINGS_CQE_SIZE	nlattr[ETHTOOL_A_RINGS_CQE_SIZE, intptr]
	ETHTOOL_A_RINGS_TX_PUSH		nlattr[ETHTOOL_A_RINGS_TX_PUSH, intptr]
	ETHTOOL_A_RINGS_RX_PUSH		nlattr[ETHTOOL_A_RINGS_RX_PUSH, intptr]
	ETHTOOL_A_RINGS_TX_PUSH_BUF_LEN	nlattr[ETHTOOL_A_RINGS_TX_PUSH_BUF_LEN, int32]
] [varlen]

ethnl_rss_get_policy$auto [
	ETHTOOL_A_RSS_HEADER	nlattr[ETHTOOL_A_RSS_HEADER, intptr]
	ETHTOOL_A_RSS_CONTEXT	nlattr[ETHTOOL_A_RSS_CONTEXT, int32]
] [varlen]

ethnl_stats_get_policy$auto [
	ETHTOOL_A_STATS_HEADER	nlattr[ETHTOOL_A_STATS_HEADER, intptr]
	ETHTOOL_A_STATS_GROUPS	nlattr[ETHTOOL_A_STATS_GROUPS, intptr]
	ETHTOOL_A_STATS_SRC	nlattr[ETHTOOL_A_STATS_SRC, intptr]
] [varlen]

ethnl_strset_get_policy$auto [
	ETHTOOL_A_STRSET_HEADER		nlattr[ETHTOOL_A_STRSET_HEADER, intptr]
	ETHTOOL_A_STRSET_STRINGSETS	nlattr[ETHTOOL_A_STRSET_STRINGSETS, intptr]
	ETHTOOL_A_STRSET_COUNTS_ONLY	nlattr[ETHTOOL_A_STRSET_COUNTS_ONLY, void]
] [varlen]

ethnl_tsinfo_get_policy$auto [
	ETHTOOL_A_TSINFO_HEADER	nlattr[ETHTOOL_A_TSINFO_HEADER, intptr]
] [varlen]

ethnl_tunnel_info_get_policy$auto [
	ETHTOOL_A_TUNNEL_INFO_HEADER	nlattr[ETHTOOL_A_TUNNEL_INFO_HEADER, intptr]
] [varlen]

ethnl_wol_get_policy$auto [
	ETHTOOL_A_WOL_HEADER	nlattr[ETHTOOL_A_WOL_HEADER, intptr]
] [varlen]

ethnl_wol_set_policy$auto [
	ETHTOOL_A_WOL_HEADER	nlattr[ETHTOOL_A_WOL_HEADER, intptr]
	ETHTOOL_A_WOL_MODES	nlattr[ETHTOOL_A_WOL_MODES, intptr]
	ETHTOOL_A_WOL_SOPASS	nlattr[ETHTOOL_A_WOL_SOPASS, int16]
] [varlen]

exp_nat_nla_policy$auto [
	CTA_EXPECT_NAT_DIR	nlattr[CTA_EXPECT_NAT_DIR, int32]
	CTA_EXPECT_NAT_TUPLE	nlattr[CTA_EXPECT_NAT_TUPLE, intptr]
] [varlen]

exp_nla_policy$auto [
	CTA_EXPECT_MASTER	nlattr[CTA_EXPECT_MASTER, intptr]
	CTA_EXPECT_TUPLE	nlattr[CTA_EXPECT_TUPLE, intptr]
	CTA_EXPECT_MASK		nlattr[CTA_EXPECT_MASK, intptr]
	CTA_EXPECT_TIMEOUT	nlattr[CTA_EXPECT_TIMEOUT, int32]
	CTA_EXPECT_ID		nlattr[CTA_EXPECT_ID, int32]
	CTA_EXPECT_HELP_NAME	nlattr[CTA_EXPECT_HELP_NAME, string]
	CTA_EXPECT_ZONE		nlattr[CTA_EXPECT_ZONE, int16]
	CTA_EXPECT_FLAGS	nlattr[CTA_EXPECT_FLAGS, int32]
	CTA_EXPECT_CLASS	nlattr[CTA_EXPECT_CLASS, int32]
	CTA_EXPECT_NAT		nlattr[CTA_EXPECT_NAT, intptr]
	CTA_EXPECT_FN		nlattr[CTA_EXPECT_FN, string]
] [varlen]

fib_rule_policy$auto [
	FRA_UNSPEC		nlattr[FRA_UNSPEC, intptr]
	FRA_IIFNAME		nlattr[FRA_IIFNAME, stringnoz]
	FRA_OIFNAME		nlattr[FRA_OIFNAME, int32]
	FRA_PRIORITY		nlattr[FRA_PRIORITY, int32]
	FRA_FWMARK		nlattr[FRA_FWMARK, int32]
	FRA_FLOW		nlattr[FRA_FLOW, int32]
	FRA_TUN_ID		nlattr[FRA_TUN_ID, int64]
	FRA_FWMASK		nlattr[FRA_FWMASK, int32]
	FRA_TABLE		nlattr[FRA_TABLE, int32]
	FRA_SUPPRESS_PREFIXLEN	nlattr[FRA_SUPPRESS_PREFIXLEN, int32]
	FRA_SUPPRESS_IFGROUP	nlattr[FRA_SUPPRESS_IFGROUP, int32]
	FRA_GOTO		nlattr[FRA_GOTO, stringnoz]
	FRA_L3MDEV		nlattr[FRA_L3MDEV, int8]
	FRA_UID_RANGE		nlattr[FRA_UID_RANGE, intptr]
	FRA_PROTOCOL		nlattr[FRA_PROTOCOL, int8]
	FRA_IP_PROTO		nlattr[FRA_IP_PROTO, int8]
	FRA_SPORT_RANGE		nlattr[FRA_SPORT_RANGE, intptr]
	FRA_DPORT_RANGE		nlattr[FRA_DPORT_RANGE, intptr]
] [varlen]

geneve_opt_policy$auto [
	LWTUNNEL_IP_OPT_GENEVE_CLASS	nlattr[LWTUNNEL_IP_OPT_GENEVE_CLASS, int16]
	LWTUNNEL_IP_OPT_GENEVE_TYPE	nlattr[LWTUNNEL_IP_OPT_GENEVE_TYPE, int8]
	LWTUNNEL_IP_OPT_GENEVE_DATA	nlattr[LWTUNNEL_IP_OPT_GENEVE_DATA, int16]
] [varlen]

get_stringset_policy$auto [
	ETHTOOL_A_STRINGSET_ID	nlattr[ETHTOOL_A_STRINGSET_ID, int32]
] [varlen]

handshake_accept_nl_policy$auto [
	HANDSHAKE_A_ACCEPT_HANDLER_CLASS	nlattr[HANDSHAKE_A_ACCEPT_HANDLER_CLASS, intptr]
] [varlen]

handshake_done_nl_policy$auto [
	HANDSHAKE_A_DONE_STATUS		nlattr[HANDSHAKE_A_DONE_STATUS, int32]
	HANDSHAKE_A_DONE_SOCKFD		nlattr[HANDSHAKE_A_DONE_SOCKFD, int32]
	HANDSHAKE_A_DONE_REMOTE_AUTH	nlattr[HANDSHAKE_A_DONE_REMOTE_AUTH, int32]
] [varlen]

help_nla_policy$auto [
	CTA_HELP_NAME	nlattr[CTA_HELP_NAME, string]
] [varlen]

icmp_nla_policy$auto [
	CTA_PROTO_ICMP_TYPE	nlattr[CTA_PROTO_ICMP_TYPE, int16]
	CTA_PROTO_ICMP_CODE	nlattr[CTA_PROTO_ICMP_CODE, int8]
	CTA_PROTO_ICMP_ID	nlattr[CTA_PROTO_ICMP_ID, int8]
] [varlen]

icmpv6_nla_policy$auto [
	CTA_PROTO_ICMPV6_TYPE	nlattr[CTA_PROTO_ICMPV6_TYPE, int16]
	CTA_PROTO_ICMPV6_CODE	nlattr[CTA_PROTO_ICMPV6_CODE, int8]
	CTA_PROTO_ICMPV6_ID	nlattr[CTA_PROTO_ICMPV6_ID, int8]
] [varlen]

ifa_ipv4_policy$auto [
	IFA_LOCAL		nlattr[IFA_LOCAL, int32]
	IFA_ADDRESS		nlattr[IFA_ADDRESS, int32]
	IFA_BROADCAST		nlattr[IFA_BROADCAST, stringnoz]
	IFA_LABEL		nlattr[IFA_LABEL, int32]
	IFA_CACHEINFO		nlattr[IFA_CACHEINFO, intptr]
	IFA_FLAGS		nlattr[IFA_FLAGS, int32]
	IFA_RT_PRIORITY		nlattr[IFA_RT_PRIORITY, int32]
	IFA_TARGET_NETNSID	nlattr[IFA_TARGET_NETNSID, int32]
	IFA_PROTO		nlattr[IFA_PROTO, int8]
] [varlen]

ifa_ipv6_policy$auto [
	IFA_ADDRESS		nlattr[IFA_ADDRESS, intptr]
	IFA_LOCAL		nlattr[IFA_LOCAL, intptr]
	IFA_CACHEINFO		nlattr[IFA_CACHEINFO, intptr]
	IFA_FLAGS		nlattr[IFA_FLAGS, intptr]
	IFA_RT_PRIORITY		nlattr[IFA_RT_PRIORITY, intptr]
	IFA_TARGET_NETNSID	nlattr[IFA_TARGET_NETNSID, int32]
	IFA_PROTO		nlattr[IFA_PROTO, int8]
] [varlen]

ifal_policy$auto [
	IFAL_ADDRESS	nlattr[IFAL_ADDRESS, intptr]
	IFAL_LABEL	nlattr[IFAL_LABEL, intptr]
] [varlen]

ifla_info_policy$auto [
	IFLA_INFO_KIND		nlattr[IFLA_INFO_KIND, stringnoz]
	IFLA_INFO_DATA		nlattr[IFLA_INFO_DATA, intptr]
	IFLA_INFO_SLAVE_KIND	nlattr[IFLA_INFO_SLAVE_KIND, stringnoz]
	IFLA_INFO_SLAVE_DATA	nlattr[IFLA_INFO_SLAVE_DATA, intptr]
] [varlen]

ifla_policy$auto [
	IFLA_IFNAME		nlattr[IFLA_IFNAME, int16]
	IFLA_ADDRESS		nlattr[IFLA_ADDRESS, int16]
	IFLA_BROADCAST		nlattr[IFLA_BROADCAST, stringnoz]
	IFLA_MAP		nlattr[IFLA_MAP, int32]
	IFLA_MTU		nlattr[IFLA_MTU, int32]
	IFLA_LINK		nlattr[IFLA_LINK, int32]
	IFLA_MASTER		nlattr[IFLA_MASTER, int32]
	IFLA_CARRIER		nlattr[IFLA_CARRIER, intptr]
	IFLA_TXQLEN		nlattr[IFLA_TXQLEN, int32]
	IFLA_WEIGHT		nlattr[IFLA_WEIGHT, int8]
	IFLA_OPERSTATE		nlattr[IFLA_OPERSTATE, int8]
	IFLA_LINKMODE		nlattr[IFLA_LINKMODE, intptr]
	IFLA_LINKINFO		nlattr[IFLA_LINKINFO, int32]
	IFLA_NET_NS_PID		nlattr[IFLA_NET_NS_PID, int16]
	IFLA_NET_NS_FD		nlattr[IFLA_NET_NS_FD, intptr]
	IFLA_IFALIAS		nlattr[IFLA_IFALIAS, intptr]
	IFLA_VFINFO_LIST	nlattr[IFLA_VFINFO_LIST, intptr]
	IFLA_VF_PORTS		nlattr[IFLA_VF_PORTS, intptr]
	IFLA_PORT_SELF		nlattr[IFLA_PORT_SELF, int32]
	IFLA_AF_SPEC		nlattr[IFLA_AF_SPEC, int32]
	IFLA_EXT_MASK		nlattr[IFLA_EXT_MASK, int32]
	IFLA_PROMISCUITY	nlattr[IFLA_PROMISCUITY, int32]
	IFLA_NUM_TX_QUEUES	nlattr[IFLA_NUM_TX_QUEUES, int32]
	IFLA_NUM_RX_QUEUES	nlattr[IFLA_NUM_RX_QUEUES, int32]
	IFLA_GSO_MAX_SEGS	nlattr[IFLA_GSO_MAX_SEGS, int8]
	IFLA_GSO_MAX_SIZE	nlattr[IFLA_GSO_MAX_SIZE, int16]
	IFLA_PHYS_PORT_ID	nlattr[IFLA_PHYS_PORT_ID, int32]
	IFLA_CARRIER_CHANGES	nlattr[IFLA_CARRIER_CHANGES, int16]
	IFLA_PHYS_SWITCH_ID	nlattr[IFLA_PHYS_SWITCH_ID, int32]
	IFLA_LINK_NETNSID	nlattr[IFLA_LINK_NETNSID, int8]
	IFLA_PROTO_DOWN		nlattr[IFLA_PROTO_DOWN, int32]
	IFLA_XDP		nlattr[IFLA_XDP, int32]
	IFLA_EVENT		nlattr[IFLA_EVENT, intptr]
	IFLA_GROUP		nlattr[IFLA_GROUP, int32]
	IFLA_TARGET_NETNSID	nlattr[IFLA_TARGET_NETNSID, int32]
	IFLA_CARRIER_UP_COUNT	nlattr[IFLA_CARRIER_UP_COUNT, int32]
	IFLA_CARRIER_DOWN_COUNT	nlattr[IFLA_CARRIER_DOWN_COUNT, int32]
	IFLA_MIN_MTU		nlattr[IFLA_MIN_MTU, intptr]
	IFLA_MAX_MTU		nlattr[IFLA_MAX_MTU, int32]
	IFLA_PROP_LIST		nlattr[IFLA_PROP_LIST, int32]
	IFLA_ALT_IFNAME		nlattr[IFLA_ALT_IFNAME, intptr]
	IFLA_PERM_ADDRESS	nlattr[IFLA_PERM_ADDRESS, stringnoz]
	IFLA_PROTO_DOWN_REASON	nlattr[IFLA_PROTO_DOWN_REASON, intptr]
	IFLA_NEW_IFINDEX	nlattr[IFLA_NEW_IFINDEX, intptr]
	IFLA_PARENT_DEV_NAME	nlattr[IFLA_PARENT_DEV_NAME, string]
	IFLA_GRO_MAX_SIZE	nlattr[IFLA_GRO_MAX_SIZE, int32]
	IFLA_TSO_MAX_SIZE	nlattr[IFLA_TSO_MAX_SIZE, intptr]
	IFLA_TSO_MAX_SEGS	nlattr[IFLA_TSO_MAX_SEGS, intptr]
	IFLA_ALLMULTI		nlattr[IFLA_ALLMULTI, intptr]
	IFLA_GSO_IPV4_MAX_SIZE	nlattr[IFLA_GSO_IPV4_MAX_SIZE, int32]
	IFLA_GRO_IPV4_MAX_SIZE	nlattr[IFLA_GRO_IPV4_MAX_SIZE, int32]
] [varlen]

ifla_port_policy$auto [
	IFLA_PORT_VF		nlattr[IFLA_PORT_VF, int32]
	IFLA_PORT_PROFILE	nlattr[IFLA_PORT_PROFILE, stringnoz]
	IFLA_PORT_INSTANCE_UUID	nlattr[IFLA_PORT_INSTANCE_UUID, int16]
	IFLA_PORT_HOST_UUID	nlattr[IFLA_PORT_HOST_UUID, int16]
	IFLA_PORT_REQUEST	nlattr[IFLA_PORT_REQUEST, stringnoz]
	IFLA_PORT_RESPONSE	nlattr[IFLA_PORT_RESPONSE, int8]
	IFLA_PORT_VSI_TYPE	nlattr[IFLA_PORT_VSI_TYPE, int16]
] [varlen]

ifla_proto_down_reason_policy$auto [
	IFLA_PROTO_DOWN_REASON_MASK	nlattr[IFLA_PROTO_DOWN_REASON_MASK, int32]
	IFLA_PROTO_DOWN_REASON_VALUE	nlattr[IFLA_PROTO_DOWN_REASON_VALUE, int32]
] [varlen]

ifla_stats_set_policy$auto [
	IFLA_STATS_SET_OFFLOAD_XSTATS_L3_STATS	nlattr[IFLA_STATS_SET_OFFLOAD_XSTATS_L3_STATS, intptr]
] [varlen]

ifla_vf_policy$auto [
	IFLA_VF_MAC		nlattr[IFLA_VF_MAC, intptr]
	IFLA_VF_BROADCAST	nlattr[IFLA_VF_BROADCAST, intptr]
	IFLA_VF_VLAN		nlattr[IFLA_VF_VLAN, intptr]
	IFLA_VF_VLAN_LIST	nlattr[IFLA_VF_VLAN_LIST, intptr]
	IFLA_VF_TX_RATE		nlattr[IFLA_VF_TX_RATE, intptr]
	IFLA_VF_SPOOFCHK	nlattr[IFLA_VF_SPOOFCHK, intptr]
	IFLA_VF_RATE		nlattr[IFLA_VF_RATE, intptr]
	IFLA_VF_LINK_STATE	nlattr[IFLA_VF_LINK_STATE, intptr]
	IFLA_VF_RSS_QUERY_EN	nlattr[IFLA_VF_RSS_QUERY_EN, intptr]
	IFLA_VF_STATS		nlattr[IFLA_VF_STATS, intptr]
	IFLA_VF_TRUST		nlattr[IFLA_VF_TRUST, intptr]
	IFLA_VF_IB_NODE_GUID	nlattr[IFLA_VF_IB_NODE_GUID, intptr]
	IFLA_VF_IB_PORT_GUID	nlattr[IFLA_VF_IB_PORT_GUID, intptr]
] [varlen]

ifla_xdp_policy$auto [
	IFLA_XDP_UNSPEC		nlattr[IFLA_XDP_UNSPEC, intptr]
	IFLA_XDP_FD		nlattr[IFLA_XDP_FD, int32]
	IFLA_XDP_EXPECTED_FD	nlattr[IFLA_XDP_EXPECTED_FD, int8]
	IFLA_XDP_ATTACHED	nlattr[IFLA_XDP_ATTACHED, int32]
	IFLA_XDP_FLAGS		nlattr[IFLA_XDP_FLAGS, int32]
	IFLA_XDP_PROG_ID	nlattr[IFLA_XDP_PROG_ID, int32]
] [varlen]

inet6_af_policy$auto [
	IFLA_INET6_ADDR_GEN_MODE	nlattr[IFLA_INET6_ADDR_GEN_MODE, intptr]
	IFLA_INET6_TOKEN		nlattr[IFLA_INET6_TOKEN, int8]
	IFLA_INET6_RA_MTU		nlattr[IFLA_INET6_RA_MTU, intptr]
] [varlen]

inet_af_policy$auto [
	IFLA_INET_CONF	nlattr[IFLA_INET_CONF, intptr]
] [varlen]

ioam6_genl_policy_addns$auto [
	IOAM6_ATTR_NS_ID	nlattr[IOAM6_ATTR_NS_ID, int16]
	IOAM6_ATTR_NS_DATA	nlattr[IOAM6_ATTR_NS_DATA, int32]
	IOAM6_ATTR_NS_DATA_WIDE	nlattr[IOAM6_ATTR_NS_DATA_WIDE, int64]
] [varlen]

ioam6_genl_policy_addsc$auto [
	IOAM6_ATTR_SC_ID	nlattr[IOAM6_ATTR_SC_ID, int32]
	IOAM6_ATTR_SC_DATA	nlattr[IOAM6_ATTR_SC_DATA, int16]
] [varlen]

ioam6_genl_policy_delns$auto [
	IOAM6_ATTR_NS_ID	nlattr[IOAM6_ATTR_NS_ID, int16]
] [varlen]

ioam6_genl_policy_delsc$auto [
	IOAM6_ATTR_SC_ID	nlattr[IOAM6_ATTR_SC_ID, int32]
] [varlen]

ioam6_genl_policy_ns_sc$auto [
	IOAM6_ATTR_NS_ID	nlattr[IOAM6_ATTR_NS_ID, int16]
	IOAM6_ATTR_SC_ID	nlattr[IOAM6_ATTR_SC_ID, int32]
	IOAM6_ATTR_SC_NONE	nlattr[IOAM6_ATTR_SC_NONE, void]
] [varlen]

ip6_tun_policy$auto [
	LWTUNNEL_IP6_UNSPEC	nlattr[LWTUNNEL_IP6_UNSPEC, intptr]
	LWTUNNEL_IP6_ID		nlattr[LWTUNNEL_IP6_ID, int64]
	LWTUNNEL_IP6_DST	nlattr[LWTUNNEL_IP6_DST, intptr]
	LWTUNNEL_IP6_SRC	nlattr[LWTUNNEL_IP6_SRC, intptr]
	LWTUNNEL_IP6_HOPLIMIT	nlattr[LWTUNNEL_IP6_HOPLIMIT, int8]
	LWTUNNEL_IP6_TC		nlattr[LWTUNNEL_IP6_TC, int8]
	LWTUNNEL_IP6_FLAGS	nlattr[LWTUNNEL_IP6_FLAGS, int16]
	LWTUNNEL_IP6_OPTS	nlattr[LWTUNNEL_IP6_OPTS, intptr]
] [varlen]

ip_opts_policy$auto [
	LWTUNNEL_IP_OPTS_GENEVE	nlattr[LWTUNNEL_IP_OPTS_GENEVE, intptr]
	LWTUNNEL_IP_OPTS_VXLAN	nlattr[LWTUNNEL_IP_OPTS_VXLAN, intptr]
	LWTUNNEL_IP_OPTS_ERSPAN	nlattr[LWTUNNEL_IP_OPTS_ERSPAN, intptr]
] [varlen]

ip_tun_policy$auto [
	LWTUNNEL_IP_UNSPEC	nlattr[LWTUNNEL_IP_UNSPEC, intptr]
	LWTUNNEL_IP_ID		nlattr[LWTUNNEL_IP_ID, int64]
	LWTUNNEL_IP_DST		nlattr[LWTUNNEL_IP_DST, int32]
	LWTUNNEL_IP_SRC		nlattr[LWTUNNEL_IP_SRC, int32]
	LWTUNNEL_IP_TTL		nlattr[LWTUNNEL_IP_TTL, int8]
	LWTUNNEL_IP_TOS		nlattr[LWTUNNEL_IP_TOS, int8]
	LWTUNNEL_IP_FLAGS	nlattr[LWTUNNEL_IP_FLAGS, int16]
	LWTUNNEL_IP_OPTS	nlattr[LWTUNNEL_IP_OPTS, intptr]
] [varlen]

ipip6_policy$auto [
	IFLA_IPTUN_LINK		nlattr[IFLA_IPTUN_LINK, int32]
	IFLA_IPTUN_LOCAL	nlattr[IFLA_IPTUN_LOCAL, int32]
	IFLA_IPTUN_REMOTE	nlattr[IFLA_IPTUN_REMOTE, int32]
	IFLA_IPTUN_TTL		nlattr[IFLA_IPTUN_TTL, int8]
	IFLA_IPTUN_TOS		nlattr[IFLA_IPTUN_TOS, int8]
	IFLA_IPTUN_PMTUDISC	nlattr[IFLA_IPTUN_PMTUDISC, int16]
	IFLA_IPTUN_FLAGS	nlattr[IFLA_IPTUN_FLAGS, int8]
	IFLA_IPTUN_PROTO	nlattr[IFLA_IPTUN_PROTO, int8]
	IFLA_IPTUN_ENCAP_TYPE	nlattr[IFLA_IPTUN_ENCAP_TYPE, int16]
	IFLA_IPTUN_ENCAP_FLAGS	nlattr[IFLA_IPTUN_ENCAP_FLAGS, int16]
	IFLA_IPTUN_ENCAP_SPORT	nlattr[IFLA_IPTUN_ENCAP_SPORT, int16]
	IFLA_IPTUN_ENCAP_DPORT	nlattr[IFLA_IPTUN_ENCAP_DPORT, int16]
	IFLA_IPTUN_FWMARK	nlattr[IFLA_IPTUN_FWMARK, int32]
] [varlen]

mdba_del_bulk_policy$auto [
	MDBA_SET_ENTRY		nlattr[MDBA_SET_ENTRY, intptr]
	MDBA_SET_ENTRY_ATTRS	nlattr[MDBA_SET_ENTRY_ATTRS, intptr]
] [varlen]

mdba_get_policy$auto [
	MDBA_GET_ENTRY		nlattr[MDBA_GET_ENTRY, intptr]
	MDBA_GET_ENTRY_ATTRS	nlattr[MDBA_GET_ENTRY_ATTRS, intptr]
] [varlen]

mdba_policy$auto [
	MDBA_SET_ENTRY_UNSPEC	nlattr[MDBA_SET_ENTRY_UNSPEC, intptr]
	MDBA_SET_ENTRY		nlattr[MDBA_SET_ENTRY, intptr]
	MDBA_SET_ENTRY_ATTRS	nlattr[MDBA_SET_ENTRY_ATTRS, intptr]
] [varlen]

nat_nla_policy$auto [
	CTA_NAT_V4_MINIP	nlattr[CTA_NAT_V4_MINIP, int32]
	CTA_NAT_V4_MAXIP	nlattr[CTA_NAT_V4_MAXIP, int32]
	CTA_NAT_V6_MINIP	nlattr[CTA_NAT_V6_MINIP, intptr]
	CTA_NAT_V6_MAXIP	nlattr[CTA_NAT_V6_MAXIP, intptr]
	CTA_NAT_PROTO		nlattr[CTA_NAT_PROTO, intptr]
] [varlen]

nda_policy$auto [
	NDA_UNSPEC		nlattr[NDA_UNSPEC, intptr]
	NDA_DST			nlattr[NDA_DST, int16]
	NDA_LLADDR		nlattr[NDA_LLADDR, int16]
	NDA_CACHEINFO		nlattr[NDA_CACHEINFO, intptr]
	NDA_PROBES		nlattr[NDA_PROBES, int32]
	NDA_VLAN		nlattr[NDA_VLAN, int16]
	NDA_PORT		nlattr[NDA_PORT, int16]
	NDA_VNI			nlattr[NDA_VNI, int32]
	NDA_IFINDEX		nlattr[NDA_IFINDEX, int32]
	NDA_MASTER		nlattr[NDA_MASTER, int32]
	NDA_PROTOCOL		nlattr[NDA_PROTOCOL, int8]
	NDA_NH_ID		nlattr[NDA_NH_ID, int32]
	NDA_FLAGS_EXT		nlattr[NDA_FLAGS_EXT, intptr]
	NDA_FDB_EXT_ATTRS	nlattr[NDA_FDB_EXT_ATTRS, intptr]
] [varlen]

netdev_dev_get_nl_policy$auto [
	NETDEV_A_DEV_IFINDEX	nlattr[NETDEV_A_DEV_IFINDEX, intptr]
] [varlen]

netdev_napi_get_do_nl_policy$auto [
	NETDEV_A_NAPI_ID	nlattr[NETDEV_A_NAPI_ID, int32]
] [varlen]

netdev_napi_get_dump_nl_policy$auto [
	NETDEV_A_NAPI_IFINDEX	nlattr[NETDEV_A_NAPI_IFINDEX, intptr]
] [varlen]

netdev_page_pool_info_nl_policy$auto [
	NETDEV_A_PAGE_POOL_ID		nlattr[NETDEV_A_PAGE_POOL_ID, intptr]
	NETDEV_A_PAGE_POOL_IFINDEX	nlattr[NETDEV_A_PAGE_POOL_IFINDEX, intptr]
] [varlen]

netdev_qstats_get_nl_policy$auto [
	NETDEV_A_QSTATS_IFINDEX	nlattr[NETDEV_A_QSTATS_IFINDEX, intptr]
	NETDEV_A_QSTATS_SCOPE	nlattr[NETDEV_A_QSTATS_SCOPE, intptr]
] [varlen]

netdev_queue_get_do_nl_policy$auto [
	NETDEV_A_QUEUE_IFINDEX	nlattr[NETDEV_A_QUEUE_IFINDEX, int32]
	NETDEV_A_QUEUE_TYPE	nlattr[NETDEV_A_QUEUE_TYPE, intptr]
	NETDEV_A_QUEUE_ID	nlattr[NETDEV_A_QUEUE_ID, intptr]
] [varlen]

netdev_queue_get_dump_nl_policy$auto [
	NETDEV_A_QUEUE_IFINDEX	nlattr[NETDEV_A_QUEUE_IFINDEX, intptr]
] [varlen]

netlbl_cipsov4_genl_policy$auto [
	NLBL_CIPSOV4_A_DOI		nlattr[NLBL_CIPSOV4_A_DOI, int32]
	NLBL_CIPSOV4_A_MTYPE		nlattr[NLBL_CIPSOV4_A_MTYPE, int32]
	NLBL_CIPSOV4_A_TAG		nlattr[NLBL_CIPSOV4_A_TAG, int8]
	NLBL_CIPSOV4_A_TAGLST		nlattr[NLBL_CIPSOV4_A_TAGLST, intptr]
	NLBL_CIPSOV4_A_MLSLVLLOC	nlattr[NLBL_CIPSOV4_A_MLSLVLLOC, int32]
	NLBL_CIPSOV4_A_MLSLVLREM	nlattr[NLBL_CIPSOV4_A_MLSLVLREM, int32]
	NLBL_CIPSOV4_A_MLSLVL		nlattr[NLBL_CIPSOV4_A_MLSLVL, intptr]
	NLBL_CIPSOV4_A_MLSLVLLST	nlattr[NLBL_CIPSOV4_A_MLSLVLLST, intptr]
	NLBL_CIPSOV4_A_MLSCATLOC	nlattr[NLBL_CIPSOV4_A_MLSCATLOC, int32]
	NLBL_CIPSOV4_A_MLSCATREM	nlattr[NLBL_CIPSOV4_A_MLSCATREM, int32]
	NLBL_CIPSOV4_A_MLSCAT		nlattr[NLBL_CIPSOV4_A_MLSCAT, intptr]
	NLBL_CIPSOV4_A_MLSCATLST	nlattr[NLBL_CIPSOV4_A_MLSCATLST, intptr]
] [varlen]

netlbl_mgmt_genl_policy$auto [
	NLBL_MGMT_A_DOMAIN	nlattr[NLBL_MGMT_A_DOMAIN, string]
	NLBL_MGMT_A_PROTOCOL	nlattr[NLBL_MGMT_A_PROTOCOL, int32]
	NLBL_MGMT_A_VERSION	nlattr[NLBL_MGMT_A_VERSION, int32]
	NLBL_MGMT_A_CV4DOI	nlattr[NLBL_MGMT_A_CV4DOI, int32]
	NLBL_MGMT_A_FAMILY	nlattr[NLBL_MGMT_A_FAMILY, int16]
	NLBL_MGMT_A_CLPDOI	nlattr[NLBL_MGMT_A_CLPDOI, int32]
] [varlen]

netlbl_unlabel_genl_policy$auto [
	NLBL_UNLABEL_A_ACPTFLG	nlattr[NLBL_UNLABEL_A_ACPTFLG, int8]
	NLBL_UNLABEL_A_IPV6ADDR	nlattr[NLBL_UNLABEL_A_IPV6ADDR, int16]
	NLBL_UNLABEL_A_IPV6MASK	nlattr[NLBL_UNLABEL_A_IPV6MASK, int16]
	NLBL_UNLABEL_A_IPV4ADDR	nlattr[NLBL_UNLABEL_A_IPV4ADDR, int16]
	NLBL_UNLABEL_A_IPV4MASK	nlattr[NLBL_UNLABEL_A_IPV4MASK, int16]
	NLBL_UNLABEL_A_IFACE	nlattr[NLBL_UNLABEL_A_IFACE, string]
	NLBL_UNLABEL_A_SECCTX	nlattr[NLBL_UNLABEL_A_SECCTX, int16]
] [varlen]

nf_ct_port_nla_policy$auto [
	CTA_PROTO_SRC_PORT	nlattr[CTA_PROTO_SRC_PORT, int16]
	CTA_PROTO_DST_PORT	nlattr[CTA_PROTO_DST_PORT, int16]
] [varlen]

nfnl_batch_policy$auto [
	NFNL_BATCH_GENID	nlattr[NFNL_BATCH_GENID, int32]
] [varlen]

nfula_cfg_policy$auto [
	NFULA_CFG_CMD		nlattr[NFULA_CFG_CMD, intptr]
	NFULA_CFG_MODE		nlattr[NFULA_CFG_MODE, intptr]
	NFULA_CFG_TIMEOUT	nlattr[NFULA_CFG_TIMEOUT, int32]
	NFULA_CFG_QTHRESH	nlattr[NFULA_CFG_QTHRESH, int32]
	NFULA_CFG_NLBUFSIZ	nlattr[NFULA_CFG_NLBUFSIZ, int32]
	NFULA_CFG_FLAGS		nlattr[NFULA_CFG_FLAGS, int16]
] [varlen]

nl_neightbl_policy$auto [
	NDTA_NAME		nlattr[NDTA_NAME, stringnoz]
	NDTA_THRESH1		nlattr[NDTA_THRESH1, int32]
	NDTA_THRESH2		nlattr[NDTA_THRESH2, int32]
	NDTA_THRESH3		nlattr[NDTA_THRESH3, int32]
	NDTA_GC_INTERVAL	nlattr[NDTA_GC_INTERVAL, intptr]
	NDTA_PARMS		nlattr[NDTA_PARMS, int64]
] [varlen]

nl_ntbl_parm_policy$auto [
	NDTPA_IFINDEX			nlattr[NDTPA_IFINDEX, int32]
	NDTPA_QUEUE_LEN			nlattr[NDTPA_QUEUE_LEN, int64]
	NDTPA_PROXY_QLEN		nlattr[NDTPA_PROXY_QLEN, int64]
	NDTPA_APP_PROBES		nlattr[NDTPA_APP_PROBES, int64]
	NDTPA_UCAST_PROBES		nlattr[NDTPA_UCAST_PROBES, int64]
	NDTPA_MCAST_PROBES		nlattr[NDTPA_MCAST_PROBES, int32]
	NDTPA_MCAST_REPROBES		nlattr[NDTPA_MCAST_REPROBES, int32]
	NDTPA_BASE_REACHABLE_TIME	nlattr[NDTPA_BASE_REACHABLE_TIME, int32]
	NDTPA_GC_STALETIME		nlattr[NDTPA_GC_STALETIME, int32]
	NDTPA_DELAY_PROBE_TIME		nlattr[NDTPA_DELAY_PROBE_TIME, int64]
	NDTPA_RETRANS_TIME		nlattr[NDTPA_RETRANS_TIME, int64]
	NDTPA_ANYCAST_DELAY		nlattr[NDTPA_ANYCAST_DELAY, int32]
	NDTPA_PROXY_DELAY		nlattr[NDTPA_PROXY_DELAY, int64]
	NDTPA_LOCKTIME			nlattr[NDTPA_LOCKTIME, int32]
	NDTPA_INTERVAL_PROBE_TIME_MS	nlattr[NDTPA_INTERVAL_PROBE_TIME_MS, int64]
] [varlen]

proto_nla_policy$auto [
	CTA_PROTO_NUM	nlattr[CTA_PROTO_NUM, int8]
] [varlen]

protoinfo_policy$auto [
	CTA_PROTOINFO_TCP	nlattr[CTA_PROTOINFO_TCP, intptr]
	CTA_PROTOINFO_DCCP	nlattr[CTA_PROTOINFO_DCCP, intptr]
	CTA_PROTOINFO_SCTP	nlattr[CTA_PROTOINFO_SCTP, intptr]
] [varlen]

protonat_nla_policy$auto [
	CTA_PROTONAT_PORT_MIN	nlattr[CTA_PROTONAT_PORT_MIN, int16]
	CTA_PROTONAT_PORT_MAX	nlattr[CTA_PROTONAT_PORT_MAX, int16]
] [varlen]

rtm_ipmr_policy$auto [
	RTA_SRC		nlattr[RTA_SRC, int32]
	RTA_DST		nlattr[RTA_DST, int32]
	RTA_IIF		nlattr[RTA_IIF, int32]
	RTA_TABLE	nlattr[RTA_TABLE, intptr]
	RTA_MULTIPATH	nlattr[RTA_MULTIPATH, int32]
] [varlen]

rtm_ipv4_policy$auto [
	RTA_UNSPEC	nlattr[RTA_UNSPEC, intptr]
	RTA_DST		nlattr[RTA_DST, int32]
	RTA_SRC		nlattr[RTA_SRC, int32]
	RTA_IIF		nlattr[RTA_IIF, int32]
	RTA_OIF		nlattr[RTA_OIF, int32]
	RTA_GATEWAY	nlattr[RTA_GATEWAY, int32]
	RTA_PRIORITY	nlattr[RTA_PRIORITY, int32]
	RTA_PREFSRC	nlattr[RTA_PREFSRC, int32]
	RTA_METRICS	nlattr[RTA_METRICS, intptr]
	RTA_MULTIPATH	nlattr[RTA_MULTIPATH, intptr]
	RTA_FLOW	nlattr[RTA_FLOW, int32]
	RTA_ENCAP_TYPE	nlattr[RTA_ENCAP_TYPE, int32]
	RTA_ENCAP	nlattr[RTA_ENCAP, int32]
	RTA_UID		nlattr[RTA_UID, int16]
	RTA_MARK	nlattr[RTA_MARK, intptr]
	RTA_TABLE	nlattr[RTA_TABLE, int32]
	RTA_IP_PROTO	nlattr[RTA_IP_PROTO, int8]
	RTA_SPORT	nlattr[RTA_SPORT, int16]
	RTA_DPORT	nlattr[RTA_DPORT, int16]
	RTA_NH_ID	nlattr[RTA_NH_ID, int32]
] [varlen]

rtm_ipv6_policy$auto [
	RTA_UNSPEC	nlattr[RTA_UNSPEC, intptr]
	RTA_GATEWAY	nlattr[RTA_GATEWAY, int32]
	RTA_PREFSRC	nlattr[RTA_PREFSRC, int32]
	RTA_OIF		nlattr[RTA_OIF, intptr]
	RTA_IIF		nlattr[RTA_IIF, int32]
	RTA_PRIORITY	nlattr[RTA_PRIORITY, intptr]
	RTA_METRICS	nlattr[RTA_METRICS, intptr]
	RTA_MULTIPATH	nlattr[RTA_MULTIPATH, intptr]
	RTA_PREF	nlattr[RTA_PREF, int32]
	RTA_ENCAP_TYPE	nlattr[RTA_ENCAP_TYPE, int32]
	RTA_ENCAP	nlattr[RTA_ENCAP, int8]
	RTA_EXPIRES	nlattr[RTA_EXPIRES, int16]
	RTA_UID		nlattr[RTA_UID, intptr]
	RTA_MARK	nlattr[RTA_MARK, int32]
	RTA_TABLE	nlattr[RTA_TABLE, int32]
	RTA_IP_PROTO	nlattr[RTA_IP_PROTO, int8]
	RTA_SPORT	nlattr[RTA_SPORT, int16]
	RTA_DPORT	nlattr[RTA_DPORT, int16]
	RTA_NH_ID	nlattr[RTA_NH_ID, int32]
] [varlen]

rtm_nh_policy_del$auto [
	NHA_ID	nlattr[NHA_ID, int32]
] [varlen]

rtm_nh_policy_dump$auto [
	NHA_OIF		nlattr[NHA_OIF, int32]
	NHA_GROUPS	nlattr[NHA_GROUPS, void]
	NHA_MASTER	nlattr[NHA_MASTER, int32]
	NHA_FDB		nlattr[NHA_FDB, void]
	NHA_OP_FLAGS	nlattr[NHA_OP_FLAGS, intptr]
] [varlen]

rtm_nh_policy_dump_bucket$auto [
	NHA_ID		nlattr[NHA_ID, int32]
	NHA_OIF		nlattr[NHA_OIF, int32]
	NHA_MASTER	nlattr[NHA_MASTER, int32]
	NHA_RES_BUCKET	nlattr[NHA_RES_BUCKET, intptr]
] [varlen]

rtm_nh_policy_get$auto [
	NHA_ID		nlattr[NHA_ID, int32]
	NHA_OP_FLAGS	nlattr[NHA_OP_FLAGS, intptr]
] [varlen]

rtm_nh_policy_get_bucket$auto [
	NHA_ID		nlattr[NHA_ID, int32]
	NHA_RES_BUCKET	nlattr[NHA_RES_BUCKET, intptr]
] [varlen]

rtm_nh_policy_new$auto [
	NHA_ID			nlattr[NHA_ID, int32]
	NHA_GROUP		nlattr[NHA_GROUP, int16]
	NHA_GROUP_TYPE		nlattr[NHA_GROUP_TYPE, int16]
	NHA_BLACKHOLE		nlattr[NHA_BLACKHOLE, void]
	NHA_OIF			nlattr[NHA_OIF, int32]
	NHA_GATEWAY		nlattr[NHA_GATEWAY, int16]
	NHA_ENCAP_TYPE		nlattr[NHA_ENCAP_TYPE, int16]
	NHA_ENCAP		nlattr[NHA_ENCAP, intptr]
	NHA_FDB			nlattr[NHA_FDB, void]
	NHA_RES_GROUP		nlattr[NHA_RES_GROUP, intptr]
	NHA_HW_STATS_ENABLE	nlattr[NHA_HW_STATS_ENABLE, intptr]
] [varlen]

rtm_nh_res_bucket_policy_dump$auto [
	NHA_RES_BUCKET_NH_ID	nlattr[NHA_RES_BUCKET_NH_ID, int32]
] [varlen]

rtm_nh_res_bucket_policy_get$auto [
	NHA_RES_BUCKET_INDEX	nlattr[NHA_RES_BUCKET_INDEX, int16]
] [varlen]

rtm_nh_res_policy_new$auto [
	NHA_RES_GROUP_BUCKETS		nlattr[NHA_RES_GROUP_BUCKETS, int16]
	NHA_RES_GROUP_IDLE_TIMER	nlattr[NHA_RES_GROUP_IDLE_TIMER, int32]
	NHA_RES_GROUP_UNBALANCED_TIMER	nlattr[NHA_RES_GROUP_UNBALANCED_TIMER, int32]
] [varlen]

rtm_tca_policy$auto [
	TCA_KIND		nlattr[TCA_KIND, stringnoz]
	TCA_RATE		nlattr[TCA_RATE, int16]
	TCA_STAB		nlattr[TCA_STAB, intptr]
	TCA_DUMP_INVISIBLE	nlattr[TCA_DUMP_INVISIBLE, void]
	TCA_CHAIN		nlattr[TCA_CHAIN, int32]
	TCA_INGRESS_BLOCK	nlattr[TCA_INGRESS_BLOCK, int32]
	TCA_EGRESS_BLOCK	nlattr[TCA_EGRESS_BLOCK, int32]
] [varlen]

rtnl_net_policy$auto [
	NETNSA_NONE		nlattr[NETNSA_NONE, intptr]
	NETNSA_NSID		nlattr[NETNSA_NSID, int32]
	NETNSA_PID		nlattr[NETNSA_PID, int32]
	NETNSA_FD		nlattr[NETNSA_FD, int32]
	NETNSA_TARGET_NSID	nlattr[NETNSA_TARGET_NSID, int32]
] [varlen]

rtnl_stats_get_policy$auto [
	IFLA_STATS_GET_FILTERS	nlattr[IFLA_STATS_GET_FILTERS, intptr]
] [varlen]

rtnl_stats_get_policy_filters$auto [
	IFLA_STATS_LINK_OFFLOAD_XSTATS	nlattr[IFLA_STATS_LINK_OFFLOAD_XSTATS, intptr]
] [varlen]

seg6_genl_policy$auto [
	SEG6_ATTR_DST		nlattr[SEG6_ATTR_DST, int16]
	SEG6_ATTR_DSTLEN	nlattr[SEG6_ATTR_DSTLEN, int32]
	SEG6_ATTR_HMACKEYID	nlattr[SEG6_ATTR_HMACKEYID, int32]
	SEG6_ATTR_SECRET	nlattr[SEG6_ATTR_SECRET, int16]
	SEG6_ATTR_SECRETLEN	nlattr[SEG6_ATTR_SECRETLEN, int8]
	SEG6_ATTR_ALGID		nlattr[SEG6_ATTR_ALGID, int8]
	SEG6_ATTR_HMACINFO	nlattr[SEG6_ATTR_HMACINFO, intptr]
] [varlen]

seqadj_policy$auto [
	CTA_SEQADJ_CORRECTION_POS	nlattr[CTA_SEQADJ_CORRECTION_POS, int32]
	CTA_SEQADJ_OFFSET_BEFORE	nlattr[CTA_SEQADJ_OFFSET_BEFORE, int32]
	CTA_SEQADJ_OFFSET_AFTER		nlattr[CTA_SEQADJ_OFFSET_AFTER, int32]
] [varlen]

stab_policy$auto [
	TCA_STAB_BASE	nlattr[TCA_STAB_BASE, intptr]
	TCA_STAB_DATA	nlattr[TCA_STAB_DATA, int16]
] [varlen]

strset_stringsets_policy$auto [
	ETHTOOL_A_STRINGSETS_STRINGSET	nlattr[ETHTOOL_A_STRINGSETS_STRINGSET, intptr]
] [varlen]

synproxy_policy$auto [
	CTA_SYNPROXY_ISN	nlattr[CTA_SYNPROXY_ISN, int32]
	CTA_SYNPROXY_ITS	nlattr[CTA_SYNPROXY_ITS, int32]
	CTA_SYNPROXY_TSOFF	nlattr[CTA_SYNPROXY_TSOFF, int32]
] [varlen]

taskstats_cmd_get_policy$auto [
	TASKSTATS_CMD_ATTR_PID			nlattr[TASKSTATS_CMD_ATTR_PID, int32]
	TASKSTATS_CMD_ATTR_TGID			nlattr[TASKSTATS_CMD_ATTR_TGID, int32]
	TASKSTATS_CMD_ATTR_REGISTER_CPUMASK	nlattr[TASKSTATS_CMD_ATTR_REGISTER_CPUMASK, stringnoz]
	TASKSTATS_CMD_ATTR_DEREGISTER_CPUMASK	nlattr[TASKSTATS_CMD_ATTR_DEREGISTER_CPUMASK, stringnoz]
] [varlen]

tcaa_policy$auto [
	TCA_ROOT_FLAGS		nlattr[TCA_ROOT_FLAGS, int32]
	TCA_ROOT_TIME_DELTA	nlattr[TCA_ROOT_TIME_DELTA, int32]
] [varlen]

tcf_action_policy$auto [
	TCA_ACT_KIND		nlattr[TCA_ACT_KIND, stringnoz]
	TCA_ACT_INDEX		nlattr[TCA_ACT_INDEX, intptr]
	TCA_ACT_COOKIE		nlattr[TCA_ACT_COOKIE, int32]
	TCA_ACT_OPTIONS		nlattr[TCA_ACT_OPTIONS, int16]
	TCA_ACT_FLAGS		nlattr[TCA_ACT_FLAGS, int32]
	TCA_ACT_HW_STATS	nlattr[TCA_ACT_HW_STATS, int32]
] [varlen]

tcf_tfilter_dump_policy$auto [
	TCA_CHAIN	nlattr[TCA_CHAIN, int32]
	TCA_DUMP_FLAGS	nlattr[TCA_DUMP_FLAGS, int32]
] [varlen]

tcp_metrics_nl_policy$auto [
	TCP_METRICS_ATTR_ADDR_IPV4	nlattr[TCP_METRICS_ATTR_ADDR_IPV4, int32]
	TCP_METRICS_ATTR_ADDR_IPV6	nlattr[TCP_METRICS_ATTR_ADDR_IPV6, int16]
	TCP_METRICS_ATTR_SADDR_IPV4	nlattr[TCP_METRICS_ATTR_SADDR_IPV4, int32]
] [varlen]

tcp_nla_policy$auto [
	CTA_PROTOINFO_TCP_STATE			nlattr[CTA_PROTOINFO_TCP_STATE, int8]
	CTA_PROTOINFO_TCP_WSCALE_ORIGINAL	nlattr[CTA_PROTOINFO_TCP_WSCALE_ORIGINAL, int8]
	CTA_PROTOINFO_TCP_WSCALE_REPLY		nlattr[CTA_PROTOINFO_TCP_WSCALE_REPLY, int8]
	CTA_PROTOINFO_TCP_FLAGS_ORIGINAL	nlattr[CTA_PROTOINFO_TCP_FLAGS_ORIGINAL, intptr]
	CTA_PROTOINFO_TCP_FLAGS_REPLY		nlattr[CTA_PROTOINFO_TCP_FLAGS_REPLY, intptr]
] [varlen]

tuple_nla_policy$auto [
	CTA_TUPLE_IP	nlattr[CTA_TUPLE_IP, intptr]
	CTA_TUPLE_PROTO	nlattr[CTA_TUPLE_PROTO, intptr]
	CTA_TUPLE_ZONE	nlattr[CTA_TUPLE_ZONE, int16]
] [varlen]

vxlan_opt_policy$auto [
	LWTUNNEL_IP_OPT_VXLAN_GBP	nlattr[LWTUNNEL_IP_OPT_VXLAN_GBP, int32]
] [varlen]

xfrma_policy$auto [
	XFRMA_UNSPEC			nlattr[XFRMA_UNSPEC, intptr]
	XFRMA_SA			nlattr[XFRMA_SA, intptr]
	XFRMA_POLICY			nlattr[XFRMA_POLICY, intptr]
	XFRMA_LASTUSED			nlattr[XFRMA_LASTUSED, intptr]
	XFRMA_ALG_AUTH_TRUNC		nlattr[XFRMA_ALG_AUTH_TRUNC, intptr]
	XFRMA_ALG_AEAD			nlattr[XFRMA_ALG_AEAD, intptr]
	XFRMA_ALG_AUTH			nlattr[XFRMA_ALG_AUTH, intptr]
	XFRMA_ALG_CRYPT			nlattr[XFRMA_ALG_CRYPT, intptr]
	XFRMA_ALG_COMP			nlattr[XFRMA_ALG_COMP, intptr]
	XFRMA_ENCAP			nlattr[XFRMA_ENCAP, intptr]
	XFRMA_TMPL			nlattr[XFRMA_TMPL, intptr]
	XFRMA_SEC_CTX			nlattr[XFRMA_SEC_CTX, int32]
	XFRMA_LTIME_VAL			nlattr[XFRMA_LTIME_VAL, int32]
	XFRMA_REPLAY_VAL		nlattr[XFRMA_REPLAY_VAL, intptr]
	XFRMA_REPLAY_THRESH		nlattr[XFRMA_REPLAY_THRESH, intptr]
	XFRMA_ETIMER_THRESH		nlattr[XFRMA_ETIMER_THRESH, int64]
	XFRMA_SRCADDR			nlattr[XFRMA_SRCADDR, intptr]
	XFRMA_COADDR			nlattr[XFRMA_COADDR, intptr]
	XFRMA_POLICY_TYPE		nlattr[XFRMA_POLICY_TYPE, intptr]
	XFRMA_MIGRATE			nlattr[XFRMA_MIGRATE, intptr]
	XFRMA_KMADDRESS			nlattr[XFRMA_KMADDRESS, intptr]
	XFRMA_MARK			nlattr[XFRMA_MARK, intptr]
	XFRMA_TFCPAD			nlattr[XFRMA_TFCPAD, int32]
	XFRMA_REPLAY_ESN_VAL		nlattr[XFRMA_REPLAY_ESN_VAL, intptr]
	XFRMA_SA_EXTRA_FLAGS		nlattr[XFRMA_SA_EXTRA_FLAGS, int32]
	XFRMA_PROTO			nlattr[XFRMA_PROTO, int8]
	XFRMA_ADDRESS_FILTER		nlattr[XFRMA_ADDRESS_FILTER, intptr]
	XFRMA_OFFLOAD_DEV		nlattr[XFRMA_OFFLOAD_DEV, intptr]
	XFRMA_SET_MARK			nlattr[XFRMA_SET_MARK, int32]
	XFRMA_SET_MARK_MASK		nlattr[XFRMA_SET_MARK_MASK, int32]
	XFRMA_IF_ID			nlattr[XFRMA_IF_ID, int32]
	XFRMA_MTIMER_THRESH		nlattr[XFRMA_MTIMER_THRESH, int32]
	XFRMA_SA_DIR			nlattr[XFRMA_SA_DIR, intptr]
	XFRMA_NAT_KEEPALIVE_INTERVAL	nlattr[XFRMA_NAT_KEEPALIVE_INTERVAL, int32]
] [varlen]

xfrma_spd_policy$auto [
	XFRMA_SPD_IPV4_HTHRESH	nlattr[XFRMA_SPD_IPV4_HTHRESH, intptr]
	XFRMA_SPD_IPV6_HTHRESH	nlattr[XFRMA_SPD_IPV6_HTHRESH, intptr]
] [varlen]

type msghdr_auto[POLICY] msghdr_netlink[netlink_msg_t[autogenerated_netlink, genlmsghdr, POLICY]]
resource autogenerated_netlink[int16]
syz_genetlink_get_family_id$auto(name ptr[in, string], fd sock_nl_generic) autogenerated_netlink
sendmsg$autorun(fd sock_nl_generic, msg ptr[in, auto_union], f flags[send_flags])

auto_union [
	policy0		msghdr_auto[bit_policy$auto]
	policy1		msghdr_auto[bitset_policy$auto]
	policy2		msghdr_auto[cable_test_tdr_act_cfg_policy$auto]
	policy3		msghdr_auto[calipso_genl_policy$auto]
	policy4		msghdr_auto[cgroup_policy$auto]
	policy5		msghdr_auto[cgroupstats_cmd_get_policy$auto]
	policy6		msghdr_auto[coalesce_irq_moderation_policy$auto]
	policy7		msghdr_auto[coalesce_profile_policy$auto]
	policy8		msghdr_auto[ct_nla_policy$auto]
	policy9		msghdr_auto[cta_filter_nla_policy$auto]
	policy10	msghdr_auto[cta_ip_nla_policy$auto]
	policy11	msghdr_auto[devconf_ipv4_policy$auto]
	policy12	msghdr_auto[devconf_ipv6_policy$auto]
	policy13	msghdr_auto[em_policy$auto]
	policy14	msghdr_auto[erspan_opt_policy$auto]
	policy15	msghdr_auto[ethnl_cable_test_act_policy$auto]
	policy16	msghdr_auto[ethnl_cable_test_tdr_act_policy$auto]
	policy17	msghdr_auto[ethnl_channels_get_policy$auto]
	policy18	msghdr_auto[ethnl_channels_set_policy$auto]
	policy19	msghdr_auto[ethnl_coalesce_get_policy$auto]
	policy20	msghdr_auto[ethnl_coalesce_set_policy$auto]
	policy21	msghdr_auto[ethnl_debug_get_policy$auto]
	policy22	msghdr_auto[ethnl_debug_set_policy$auto]
	policy23	msghdr_auto[ethnl_eee_get_policy$auto]
	policy24	msghdr_auto[ethnl_eee_set_policy$auto]
	policy25	msghdr_auto[ethnl_features_get_policy$auto]
	policy26	msghdr_auto[ethnl_features_set_policy$auto]
	policy27	msghdr_auto[ethnl_fec_get_policy$auto]
	policy28	msghdr_auto[ethnl_fec_set_policy$auto]
	policy29	msghdr_auto[ethnl_header_policy$auto]
	policy30	msghdr_auto[ethnl_header_policy_stats$auto]
	policy31	msghdr_auto[ethnl_linkinfo_get_policy$auto]
	policy32	msghdr_auto[ethnl_linkinfo_set_policy$auto]
	policy33	msghdr_auto[ethnl_linkmodes_get_policy$auto]
	policy34	msghdr_auto[ethnl_linkmodes_set_policy$auto]
	policy35	msghdr_auto[ethnl_linkstate_get_policy$auto]
	policy36	msghdr_auto[ethnl_mm_get_policy$auto]
	policy37	msghdr_auto[ethnl_mm_set_policy$auto]
	policy38	msghdr_auto[ethnl_module_eeprom_get_policy$auto]
	policy39	msghdr_auto[ethnl_module_fw_flash_act_policy$auto]
	policy40	msghdr_auto[ethnl_module_get_policy$auto]
	policy41	msghdr_auto[ethnl_module_set_policy$auto]
	policy42	msghdr_auto[ethnl_pause_get_policy$auto]
	policy43	msghdr_auto[ethnl_pause_set_policy$auto]
	policy44	msghdr_auto[ethnl_phc_vclocks_get_policy$auto]
	policy45	msghdr_auto[ethnl_plca_get_cfg_policy$auto]
	policy46	msghdr_auto[ethnl_plca_get_status_policy$auto]
	policy47	msghdr_auto[ethnl_plca_set_cfg_policy$auto]
	policy48	msghdr_auto[ethnl_privflags_get_policy$auto]
	policy49	msghdr_auto[ethnl_privflags_set_policy$auto]
	policy50	msghdr_auto[ethnl_pse_get_policy$auto]
	policy51	msghdr_auto[ethnl_pse_set_policy$auto]
	policy52	msghdr_auto[ethnl_rings_get_policy$auto]
	policy53	msghdr_auto[ethnl_rings_set_policy$auto]
	policy54	msghdr_auto[ethnl_rss_get_policy$auto]
	policy55	msghdr_auto[ethnl_stats_get_policy$auto]
	policy56	msghdr_auto[ethnl_strset_get_policy$auto]
	policy57	msghdr_auto[ethnl_tsinfo_get_policy$auto]
	policy58	msghdr_auto[ethnl_tunnel_info_get_policy$auto]
	policy59	msghdr_auto[ethnl_wol_get_policy$auto]
	policy60	msghdr_auto[ethnl_wol_set_policy$auto]
	policy61	msghdr_auto[exp_nat_nla_policy$auto]
	policy62	msghdr_auto[exp_nla_policy$auto]
	policy63	msghdr_auto[fib_rule_policy$auto]
	policy64	msghdr_auto[geneve_opt_policy$auto]
	policy65	msghdr_auto[get_stringset_policy$auto]
	policy66	msghdr_auto[handshake_accept_nl_policy$auto]
	policy67	msghdr_auto[handshake_done_nl_policy$auto]
	policy68	msghdr_auto[help_nla_policy$auto]
	policy69	msghdr_auto[icmp_nla_policy$auto]
	policy70	msghdr_auto[icmpv6_nla_policy$auto]
	policy71	msghdr_auto[ifa_ipv4_policy$auto]
	policy72	msghdr_auto[ifa_ipv6_policy$auto]
	policy73	msghdr_auto[ifal_policy$auto]
	policy74	msghdr_auto[ifla_info_policy$auto]
	policy75	msghdr_auto[ifla_policy$auto]
	policy76	msghdr_auto[ifla_port_policy$auto]
	policy77	msghdr_auto[ifla_proto_down_reason_policy$auto]
	policy78	msghdr_auto[ifla_stats_set_policy$auto]
	policy79	msghdr_auto[ifla_vf_policy$auto]
	policy80	msghdr_auto[ifla_xdp_policy$auto]
	policy81	msghdr_auto[inet6_af_policy$auto]
	policy82	msghdr_auto[inet_af_policy$auto]
	policy83	msghdr_auto[ioam6_genl_policy_addns$auto]
	policy84	msghdr_auto[ioam6_genl_policy_addsc$auto]
	policy85	msghdr_auto[ioam6_genl_policy_delns$auto]
	policy86	msghdr_auto[ioam6_genl_policy_delsc$auto]
	policy87	msghdr_auto[ioam6_genl_policy_ns_sc$auto]
	policy88	msghdr_auto[ip6_tun_policy$auto]
	policy89	msghdr_auto[ip_opts_policy$auto]
	policy90	msghdr_auto[ip_tun_policy$auto]
	policy91	msghdr_auto[ipip6_policy$auto]
	policy92	msghdr_auto[mdba_del_bulk_policy$auto]
	policy93	msghdr_auto[mdba_get_policy$auto]
	policy94	msghdr_auto[mdba_policy$auto]
	policy95	msghdr_auto[nat_nla_policy$auto]
	policy96	msghdr_auto[nda_policy$auto]
	policy97	msghdr_auto[netdev_dev_get_nl_policy$auto]
	policy98	msghdr_auto[netdev_napi_get_do_nl_policy$auto]
	policy99	msghdr_auto[netdev_napi_get_dump_nl_policy$auto]
	policy100	msghdr_auto[netdev_page_pool_info_nl_policy$auto]
	policy101	msghdr_auto[netdev_qstats_get_nl_policy$auto]
	policy102	msghdr_auto[netdev_queue_get_do_nl_policy$auto]
	policy103	msghdr_auto[netdev_queue_get_dump_nl_policy$auto]
	policy104	msghdr_auto[netlbl_cipsov4_genl_policy$auto]
	policy105	msghdr_auto[netlbl_mgmt_genl_policy$auto]
	policy106	msghdr_auto[netlbl_unlabel_genl_policy$auto]
	policy107	msghdr_auto[nf_ct_port_nla_policy$auto]
	policy108	msghdr_auto[nfnl_batch_policy$auto]
	policy109	msghdr_auto[nfula_cfg_policy$auto]
	policy110	msghdr_auto[nl_neightbl_policy$auto]
	policy111	msghdr_auto[nl_ntbl_parm_policy$auto]
	policy112	msghdr_auto[proto_nla_policy$auto]
	policy113	msghdr_auto[protoinfo_policy$auto]
	policy114	msghdr_auto[protonat_nla_policy$auto]
	policy115	msghdr_auto[rtm_ipmr_policy$auto]
	policy116	msghdr_auto[rtm_ipv4_policy$auto]
	policy117	msghdr_auto[rtm_ipv6_policy$auto]
	policy118	msghdr_auto[rtm_nh_policy_del$auto]
	policy119	msghdr_auto[rtm_nh_policy_dump$auto]
	policy120	msghdr_auto[rtm_nh_policy_dump_bucket$auto]
	policy121	msghdr_auto[rtm_nh_policy_get$auto]
	policy122	msghdr_auto[rtm_nh_policy_get_bucket$auto]
	policy123	msghdr_auto[rtm_nh_policy_new$auto]
	policy124	msghdr_auto[rtm_nh_res_bucket_policy_dump$auto]
	policy125	msghdr_auto[rtm_nh_res_bucket_policy_get$auto]
	policy126	msghdr_auto[rtm_nh_res_policy_new$auto]
	policy127	msghdr_auto[rtm_tca_policy$auto]
	policy128	msghdr_auto[rtnl_net_policy$auto]
	policy129	msghdr_auto[rtnl_stats_get_policy$auto]
	policy130	msghdr_auto[rtnl_stats_get_policy_filters$auto]
	policy131	msghdr_auto[seg6_genl_policy$auto]
	policy132	msghdr_auto[seqadj_policy$auto]
	policy133	msghdr_auto[stab_policy$auto]
	policy134	msghdr_auto[strset_stringsets_policy$auto]
	policy135	msghdr_auto[synproxy_policy$auto]
	policy136	msghdr_auto[taskstats_cmd_get_policy$auto]
	policy137	msghdr_auto[tcaa_policy$auto]
	policy138	msghdr_auto[tcf_action_policy$auto]
	policy139	msghdr_auto[tcf_tfilter_dump_policy$auto]
	policy140	msghdr_auto[tcp_metrics_nl_policy$auto]
	policy141	msghdr_auto[tcp_nla_policy$auto]
	policy142	msghdr_auto[tuple_nla_policy$auto]
	policy143	msghdr_auto[vxlan_opt_policy$auto]
	policy144	msghdr_auto[xfrma_policy$auto]
	policy145	msghdr_auto[xfrma_spd_policy$auto]
]
