# Code generated by syz-declextract. DO NOT EDIT.
include <include/vdso/bits.h>
include <include/linux/types.h>
include <drivers/net/ieee802154/mac802154_hwsim.h>
include <drivers/net/wireless/virtual/mac80211_hwsim.h>
include <include/linux/nl802154.h>
include <include/net/nl802154.h>
include <include/uapi/linux/batman_adv.h>
include <include/uapi/linux/caif/if_caif.h>
include <include/uapi/linux/can/gw.h>
include <include/uapi/linux/can/netlink.h>
include <include/uapi/linux/can/vxcan.h>
include <include/uapi/linux/cgroupstats.h>
include <include/uapi/linux/cifs/cifs_netlink.h>
include <include/uapi/linux/cryptouser.h>
include <include/uapi/linux/dcbnl.h>
include <include/uapi/linux/devlink.h>
include <include/uapi/linux/ethtool_netlink.h>
include <include/uapi/linux/fib_rules.h>
include <include/uapi/linux/fou.h>
include <include/uapi/linux/genetlink.h>
include <include/uapi/linux/gtp.h>
include <include/uapi/linux/handshake.h>
include <include/uapi/linux/hsr_netlink.h>
include <include/uapi/linux/if_addr.h>
include <include/uapi/linux/if_addrlabel.h>
include <include/uapi/linux/if_bridge.h>
include <include/uapi/linux/if_link.h>
include <include/uapi/linux/if_macsec.h>
include <include/uapi/linux/if_team.h>
include <include/uapi/linux/if_tunnel.h>
include <include/uapi/linux/ila.h>
include <include/uapi/linux/ioam6_genl.h>
include <include/uapi/linux/ip_vs.h>
include <include/uapi/linux/l2tp.h>
include <include/uapi/linux/lwtunnel.h>
include <include/uapi/linux/mpls_iptunnel.h>
include <include/uapi/linux/mptcp_pm.h>
include <include/uapi/linux/nbd-netlink.h>
include <include/uapi/linux/ncsi.h>
include <include/uapi/linux/neighbour.h>
include <include/uapi/linux/net_dropmon.h>
include <include/uapi/linux/net_namespace.h>
include <include/uapi/linux/netconf.h>
include <include/uapi/linux/netdev.h>
include <include/uapi/linux/netfilter/ipset/ip_set.h>
include <include/uapi/linux/netfilter/nf_tables.h>
include <include/uapi/linux/netfilter/nf_tables_compat.h>
include <include/uapi/linux/netfilter/nfnetlink.h>
include <include/uapi/linux/netfilter/nfnetlink_acct.h>
include <include/uapi/linux/netfilter/nfnetlink_conntrack.h>
include <include/uapi/linux/netfilter/nfnetlink_cthelper.h>
include <include/uapi/linux/netfilter/nfnetlink_cttimeout.h>
include <include/uapi/linux/netfilter/nfnetlink_log.h>
include <include/uapi/linux/netfilter/nfnetlink_osf.h>
include <include/uapi/linux/netfilter/nfnetlink_queue.h>
include <include/uapi/linux/nexthop.h>
include <include/uapi/linux/nfc.h>
include <include/uapi/linux/nfsd_netlink.h>
include <include/uapi/linux/nl80211.h>
include <include/uapi/linux/openvswitch.h>
include <include/uapi/linux/pkt_cls.h>
include <include/uapi/linux/pkt_sched.h>
include <include/uapi/linux/rpl_iptunnel.h>
include <include/uapi/linux/rtnetlink.h>
include <include/uapi/linux/seg6_genl.h>
include <include/uapi/linux/seg6_iptunnel.h>
include <include/uapi/linux/seg6_local.h>
include <include/uapi/linux/smc.h>
include <include/uapi/linux/taskstats.h>
include <include/uapi/linux/tc_act/tc_bpf.h>
include <include/uapi/linux/tc_act/tc_connmark.h>
include <include/uapi/linux/tc_act/tc_csum.h>
include <include/uapi/linux/tc_act/tc_ct.h>
include <include/uapi/linux/tc_act/tc_ctinfo.h>
include <include/uapi/linux/tc_act/tc_defact.h>
include <include/uapi/linux/tc_act/tc_gact.h>
include <include/uapi/linux/tc_act/tc_gate.h>
include <include/uapi/linux/tc_act/tc_ife.h>
include <include/uapi/linux/tc_act/tc_mirred.h>
include <include/uapi/linux/tc_act/tc_mpls.h>
include <include/uapi/linux/tc_act/tc_nat.h>
include <include/uapi/linux/tc_act/tc_pedit.h>
include <include/uapi/linux/tc_act/tc_sample.h>
include <include/uapi/linux/tc_act/tc_skbedit.h>
include <include/uapi/linux/tc_act/tc_skbmod.h>
include <include/uapi/linux/tc_act/tc_tunnel_key.h>
include <include/uapi/linux/tc_act/tc_vlan.h>
include <include/uapi/linux/tc_ematch/tc_em_ipt.h>
include <include/uapi/linux/tc_ematch/tc_em_meta.h>
include <include/uapi/linux/tcp_metrics.h>
include <include/uapi/linux/thermal.h>
include <include/uapi/linux/tipc_netlink.h>
include <include/uapi/linux/vdpa.h>
include <include/uapi/linux/veth.h>
include <include/uapi/linux/wireguard.h>
include <include/uapi/linux/wwan.h>
include <include/uapi/linux/xfrm.h>
include <include/uapi/rdma/rdma_netlink.h>
include <net/netlabel/netlabel_calipso.h>
include <net/netlabel/netlabel_cipso_v4.h>
include <net/netlabel/netlabel_mgmt.h>
include <net/netlabel/netlabel_unlabeled.h>
resource genl_802_15_4_MAC_family_id_auto[int16]
resource genl_HSR_family_id_auto[int16]
resource genl_IOAM6_family_id_auto[int16]
resource genl_IPVS_family_id_auto[int16]
resource genl_MAC80211_HWSIM_family_id_auto[int16]
resource genl_MAC802154_HWSIM_family_id_auto[int16]
resource genl_NCSI_family_id_auto[int16]
resource genl_NET_DM_family_id_auto[int16]
resource genl_NLBL_CALIPSO_family_id_auto[int16]
resource genl_NLBL_CIPSOv4_family_id_auto[int16]
resource genl_NLBL_MGMT_family_id_auto[int16]
resource genl_NLBL_UNLBL_family_id_auto[int16]
resource genl_SEG6_family_id_auto[int16]
resource genl_SMC_GEN_NETLINK_family_id_auto[int16]
resource genl_SMC_PNETID_family_id_auto[int16]
resource genl_TASKSTATS_family_id_auto[int16]
resource genl_TIPCv2_family_id_auto[int16]
resource genl_batadv_family_id_auto[int16]
resource genl_cifs_family_id_auto[int16]
resource genl_ethtool_family_id_auto[int16]
resource genl_gtp_family_id_auto[int16]
resource genl_handshake_family_id_auto[int16]
resource genl_ila_family_id_auto[int16]
resource genl_l2tp_family_id_auto[int16]
resource genl_macsec_family_id_auto[int16]
resource genl_nbd_family_id_auto[int16]
resource genl_netdev_family_id_auto[int16]
resource genl_nfc_family_id_auto[int16]
resource genl_nfsd_family_id_auto[int16]
resource genl_nl80211_family_id_auto[int16]
resource genl_nl802154_family_id_auto[int16]
resource genl_nlctrl_family_id_auto[int16]
resource genl_ovs_ct_limit_family_id_auto[int16]
resource genl_ovs_datapath_family_id_auto[int16]
resource genl_ovs_flow_family_id_auto[int16]
resource genl_ovs_meter_family_id_auto[int16]
resource genl_ovs_packet_family_id_auto[int16]
resource genl_ovs_vport_family_id_auto[int16]
resource genl_tcp_metrics_family_id_auto[int16]
resource genl_thermal_family_id_auto[int16]
resource genl_vdpa_family_id_auto[int16]
resource genl_wireguard_family_id_auto[int16]
type msghdr_802_15_4_MAC_auto[CMD, POLICY] msghdr_netlink[netlink_msg_t[genl_802_15_4_MAC_family_id_auto, genlmsghdr_t[CMD], POLICY]]
type msghdr_HSR_auto[CMD, POLICY] msghdr_netlink[netlink_msg_t[genl_HSR_family_id_auto, genlmsghdr_t[CMD], POLICY]]
type msghdr_IOAM6_auto[CMD, POLICY] msghdr_netlink[netlink_msg_t[genl_IOAM6_family_id_auto, genlmsghdr_t[CMD], POLICY]]
type msghdr_IPVS_auto[CMD, POLICY] msghdr_netlink[netlink_msg_t[genl_IPVS_family_id_auto, genlmsghdr_t[CMD], POLICY]]
type msghdr_MAC80211_HWSIM_auto[CMD, POLICY] msghdr_netlink[netlink_msg_t[genl_MAC80211_HWSIM_family_id_auto, genlmsghdr_t[CMD], POLICY]]
type msghdr_MAC802154_HWSIM_auto[CMD, POLICY] msghdr_netlink[netlink_msg_t[genl_MAC802154_HWSIM_family_id_auto, genlmsghdr_t[CMD], POLICY]]
type msghdr_NCSI_auto[CMD, POLICY] msghdr_netlink[netlink_msg_t[genl_NCSI_family_id_auto, genlmsghdr_t[CMD], POLICY]]
type msghdr_NET_DM_auto[CMD, POLICY] msghdr_netlink[netlink_msg_t[genl_NET_DM_family_id_auto, genlmsghdr_t[CMD], POLICY]]
type msghdr_NLBL_CALIPSO_auto[CMD, POLICY] msghdr_netlink[netlink_msg_t[genl_NLBL_CALIPSO_family_id_auto, genlmsghdr_t[CMD], POLICY]]
type msghdr_NLBL_CIPSOv4_auto[CMD, POLICY] msghdr_netlink[netlink_msg_t[genl_NLBL_CIPSOv4_family_id_auto, genlmsghdr_t[CMD], POLICY]]
type msghdr_NLBL_MGMT_auto[CMD, POLICY] msghdr_netlink[netlink_msg_t[genl_NLBL_MGMT_family_id_auto, genlmsghdr_t[CMD], POLICY]]
type msghdr_NLBL_UNLBL_auto[CMD, POLICY] msghdr_netlink[netlink_msg_t[genl_NLBL_UNLBL_family_id_auto, genlmsghdr_t[CMD], POLICY]]
type msghdr_SEG6_auto[CMD, POLICY] msghdr_netlink[netlink_msg_t[genl_SEG6_family_id_auto, genlmsghdr_t[CMD], POLICY]]
type msghdr_SMC_GEN_NETLINK_auto[CMD, POLICY] msghdr_netlink[netlink_msg_t[genl_SMC_GEN_NETLINK_family_id_auto, genlmsghdr_t[CMD], POLICY]]
type msghdr_SMC_PNETID_auto[CMD, POLICY] msghdr_netlink[netlink_msg_t[genl_SMC_PNETID_family_id_auto, genlmsghdr_t[CMD], POLICY]]
type msghdr_TASKSTATS_auto[CMD, POLICY] msghdr_netlink[netlink_msg_t[genl_TASKSTATS_family_id_auto, genlmsghdr_t[CMD], POLICY]]
type msghdr_TIPCv2_auto[CMD, POLICY] msghdr_netlink[netlink_msg_t[genl_TIPCv2_family_id_auto, genlmsghdr_t[CMD], POLICY]]
type msghdr_batadv_auto[CMD, POLICY] msghdr_netlink[netlink_msg_t[genl_batadv_family_id_auto, genlmsghdr_t[CMD], POLICY]]
type msghdr_cifs_auto[CMD, POLICY] msghdr_netlink[netlink_msg_t[genl_cifs_family_id_auto, genlmsghdr_t[CMD], POLICY]]
type msghdr_ethtool_auto[CMD, POLICY] msghdr_netlink[netlink_msg_t[genl_ethtool_family_id_auto, genlmsghdr_t[CMD], POLICY]]
type msghdr_gtp_auto[CMD, POLICY] msghdr_netlink[netlink_msg_t[genl_gtp_family_id_auto, genlmsghdr_t[CMD], POLICY]]
type msghdr_handshake_auto[CMD, POLICY] msghdr_netlink[netlink_msg_t[genl_handshake_family_id_auto, genlmsghdr_t[CMD], POLICY]]
type msghdr_ila_auto[CMD, POLICY] msghdr_netlink[netlink_msg_t[genl_ila_family_id_auto, genlmsghdr_t[CMD], POLICY]]
type msghdr_l2tp_auto[CMD, POLICY] msghdr_netlink[netlink_msg_t[genl_l2tp_family_id_auto, genlmsghdr_t[CMD], POLICY]]
type msghdr_macsec_auto[CMD, POLICY] msghdr_netlink[netlink_msg_t[genl_macsec_family_id_auto, genlmsghdr_t[CMD], POLICY]]
type msghdr_nbd_auto[CMD, POLICY] msghdr_netlink[netlink_msg_t[genl_nbd_family_id_auto, genlmsghdr_t[CMD], POLICY]]
type msghdr_netdev_auto[CMD, POLICY] msghdr_netlink[netlink_msg_t[genl_netdev_family_id_auto, genlmsghdr_t[CMD], POLICY]]
type msghdr_nfc_auto[CMD, POLICY] msghdr_netlink[netlink_msg_t[genl_nfc_family_id_auto, genlmsghdr_t[CMD], POLICY]]
type msghdr_nfsd_auto[CMD, POLICY] msghdr_netlink[netlink_msg_t[genl_nfsd_family_id_auto, genlmsghdr_t[CMD], POLICY]]
type msghdr_nl80211_auto[CMD, POLICY] msghdr_netlink[netlink_msg_t[genl_nl80211_family_id_auto, genlmsghdr_t[CMD], POLICY]]
type msghdr_nl802154_auto[CMD, POLICY] msghdr_netlink[netlink_msg_t[genl_nl802154_family_id_auto, genlmsghdr_t[CMD], POLICY]]
type msghdr_nlctrl_auto[CMD, POLICY] msghdr_netlink[netlink_msg_t[genl_nlctrl_family_id_auto, genlmsghdr_t[CMD], POLICY]]
type msghdr_ovs_ct_limit_auto[CMD, POLICY] msghdr_netlink[netlink_msg_t[genl_ovs_ct_limit_family_id_auto, genlmsghdr_t[CMD], POLICY]]
type msghdr_ovs_datapath_auto[CMD, POLICY] msghdr_netlink[netlink_msg_t[genl_ovs_datapath_family_id_auto, genlmsghdr_t[CMD], POLICY]]
type msghdr_ovs_flow_auto[CMD, POLICY] msghdr_netlink[netlink_msg_t[genl_ovs_flow_family_id_auto, genlmsghdr_t[CMD], POLICY]]
type msghdr_ovs_meter_auto[CMD, POLICY] msghdr_netlink[netlink_msg_t[genl_ovs_meter_family_id_auto, genlmsghdr_t[CMD], POLICY]]
type msghdr_ovs_packet_auto[CMD, POLICY] msghdr_netlink[netlink_msg_t[genl_ovs_packet_family_id_auto, genlmsghdr_t[CMD], POLICY]]
type msghdr_ovs_vport_auto[CMD, POLICY] msghdr_netlink[netlink_msg_t[genl_ovs_vport_family_id_auto, genlmsghdr_t[CMD], POLICY]]
type msghdr_tcp_metrics_auto[CMD, POLICY] msghdr_netlink[netlink_msg_t[genl_tcp_metrics_family_id_auto, genlmsghdr_t[CMD], POLICY]]
type msghdr_thermal_auto[CMD, POLICY] msghdr_netlink[netlink_msg_t[genl_thermal_family_id_auto, genlmsghdr_t[CMD], POLICY]]
type msghdr_vdpa_auto[CMD, POLICY] msghdr_netlink[netlink_msg_t[genl_vdpa_family_id_auto, genlmsghdr_t[CMD], POLICY]]
type msghdr_wireguard_auto[CMD, POLICY] msghdr_netlink[netlink_msg_t[genl_wireguard_family_id_auto, genlmsghdr_t[CMD], POLICY]]
_llseek$auto(fd intptr, offset_high intptr, offset_low intptr, result intptr, whence intptr) (automatic)
_newselect$auto(n intptr, inp intptr, outp intptr, exp intptr, tvp intptr) (automatic)
accept$auto(fd intptr, upeer_sockaddr intptr, upeer_addrlen intptr) (automatic)
accept4$auto(fd intptr, upeer_sockaddr intptr, upeer_addrlen intptr, flags intptr) (automatic)
access$auto(filename intptr, mode intptr) (automatic)
acct$auto(name intptr) (automatic)
add_key$auto(_type intptr, _description intptr, _payload intptr, plen intptr, ringid intptr) (automatic)
adjtimex$auto(txc_p intptr) (automatic)
alarm$auto(seconds intptr) (automatic)
arch_prctl$auto(option intptr, arg2 intptr) (automatic)
arm_sync_file_range$auto(fd intptr, flags intptr, offset intptr, nbytes intptr) (automatic)
bind$auto(fd intptr, umyaddr intptr, addrlen intptr) (automatic)
bpf$auto(cmd intptr, uattr intptr, size intptr) (automatic)
brk$auto(brk intptr) (automatic)
cachestat$auto(fd intptr, cstat_range intptr, cstat intptr, flags intptr) (automatic)
capget$auto(header intptr, dataptr intptr) (automatic)
capset$auto(header intptr, data intptr) (automatic)
chdir$auto(filename intptr) (automatic)
chmod$auto(filename intptr, mode intptr) (automatic)
chown$auto(filename intptr, user intptr, group intptr) (automatic)
chown32$auto(filename intptr, user intptr, group intptr) (automatic)
chroot$auto(filename intptr) (automatic)
clock_adjtime$auto(which_clock intptr, utp intptr) (automatic)
clock_adjtime64$auto(which_clock intptr, utx intptr) (automatic)
clock_getres$auto(which_clock intptr, tp intptr) (automatic)
clock_getres_time64$auto(which_clock intptr, tp intptr) (automatic)
clock_gettime$auto(which_clock intptr, tp intptr) (automatic)
clock_gettime64$auto(which_clock intptr, tp intptr) (automatic)
clock_nanosleep$auto(which_clock intptr, flags intptr, rqtp intptr, rmtp intptr) (automatic)
clock_nanosleep_time64$auto(which_clock intptr, flags intptr, rqtp intptr, rmtp intptr) (automatic)
clock_settime$auto(which_clock intptr, tp intptr) (automatic)
clock_settime64$auto(which_clock intptr, tp intptr) (automatic)
clone$auto(clone_flags intptr, newsp intptr, parent_tidptr intptr, child_tidptr intptr, tls intptr) (automatic)
clone3$auto(uargs intptr, size intptr) (automatic)
close$auto(fd intptr) (automatic)
close_range$auto(fd intptr, max_fd intptr, flags intptr) (automatic)
connect$auto(fd intptr, uservaddr intptr, addrlen intptr) (automatic)
copy_file_range$auto(fd_in intptr, off_in intptr, fd_out intptr, off_out intptr, len intptr, flags intptr) (automatic)
creat$auto(pathname intptr, mode intptr) (automatic)
delete_module$auto(name_user intptr, flags intptr) (automatic)
dup$auto(fildes intptr) (automatic)
dup2$auto(oldfd intptr, newfd intptr) (automatic)
dup3$auto(oldfd intptr, newfd intptr, flags intptr) (automatic)
epoll_create$auto(size intptr) (automatic)
epoll_create1$auto(flags intptr) (automatic)
epoll_ctl$auto(epfd intptr, op intptr, fd intptr, event intptr) (automatic)
epoll_pwait$auto(epfd intptr, events intptr, maxevents intptr, timeout intptr, sigmask intptr, sigsetsize intptr) (automatic)
epoll_pwait2$auto(epfd intptr, events intptr, maxevents intptr, timeout intptr, sigmask intptr, sigsetsize intptr) (automatic)
epoll_wait$auto(epfd intptr, events intptr, maxevents intptr, timeout intptr) (automatic)
eventfd$auto(count intptr) (automatic)
eventfd2$auto(count intptr, flags intptr) (automatic)
execve$auto(filename intptr, argv intptr, envp intptr) (automatic)
execveat$auto(fd intptr, filename intptr, argv intptr, envp intptr, flags intptr) (automatic)
exit$auto(error_code intptr) (automatic)
exit_group$auto(error_code intptr) (automatic)
faccessat$auto(dfd intptr, filename intptr, mode intptr) (automatic)
faccessat2$auto(dfd intptr, filename intptr, mode intptr, flags intptr) (automatic)
fadvise64$auto(fd intptr, offset intptr, len intptr, advice intptr) (automatic)
fallocate$auto(fd intptr, mode intptr, offset intptr, len intptr) (automatic)
fanotify_init$auto(flags intptr, event_f_flags intptr) (automatic)
fanotify_mark$auto(fanotify_fd intptr, flags intptr, mask intptr, dfd intptr, pathname intptr) (automatic)
fchdir$auto(fd intptr) (automatic)
fchmod$auto(fd intptr, mode intptr) (automatic)
fchmodat$auto(dfd intptr, filename intptr, mode intptr) (automatic)
fchmodat2$auto(dfd intptr, filename intptr, mode intptr, flags intptr) (automatic)
fchown$auto(fd intptr, user intptr, group intptr) (automatic)
fchown32$auto(fd intptr, user intptr, group intptr) (automatic)
fchownat$auto(dfd intptr, filename intptr, user intptr, group intptr, flag intptr) (automatic)
fcntl$auto(fd intptr, cmd intptr, arg intptr) (automatic)
fdatasync$auto(fd intptr) (automatic)
fgetxattr$auto(fd intptr, name intptr, value intptr, size intptr) (automatic)
finit_module$auto(fd intptr, uargs intptr, flags intptr) (automatic)
flistxattr$auto(fd intptr, list intptr, size intptr) (automatic)
flock$auto(fd intptr, cmd intptr) (automatic)
fork$auto() (automatic)
fremovexattr$auto(fd intptr, name intptr) (automatic)
fsconfig$auto(fd intptr, cmd intptr, _key intptr, _value intptr, aux intptr) (automatic)
fsetxattr$auto(fd intptr, name intptr, value intptr, size intptr, flags intptr) (automatic)
fsmount$auto(fs_fd intptr, flags intptr, attr_flags intptr) (automatic)
fsopen$auto(_fs_name intptr, flags intptr) (automatic)
fspick$auto(dfd intptr, path intptr, flags intptr) (automatic)
fstat$auto(fd intptr, statbuf intptr) (automatic)
fstatfs$auto(fd intptr, buf intptr) (automatic)
fstatfs64$auto(fd intptr, sz intptr, buf intptr) (automatic)
fsync$auto(fd intptr) (automatic)
ftruncate$auto(fd intptr, length intptr) (automatic)
futex$auto(uaddr intptr, op intptr, val intptr, utime intptr, uaddr2 intptr, val3 intptr) (automatic)
futex_requeue$auto(waiters intptr, flags intptr, nr_wake intptr, nr_requeue intptr) (automatic)
futex_time64$auto(uaddr intptr, op intptr, val intptr, utime intptr, uaddr2 intptr, val3 intptr) (automatic)
futex_wait$auto(uaddr intptr, val intptr, mask intptr, flags intptr, timeout intptr, clockid intptr) (automatic)
futex_waitv$auto(waiters intptr, nr_futexes intptr, flags intptr, timeout intptr, clockid intptr) (automatic)
futex_wake$auto(uaddr intptr, mask intptr, nr intptr, flags intptr) (automatic)
futimesat$auto(dfd intptr, filename intptr, t intptr) (automatic)
get_mempolicy$auto(policy intptr, nmask intptr, maxnode intptr, addr intptr, flags intptr) (automatic)
get_robust_list$auto(pid intptr, head_ptr intptr, len_ptr intptr) (automatic)
get_thread_area$auto(u_info intptr) (automatic)
getcpu$auto(cpup intptr, nodep intptr, unused intptr) (automatic)
getcwd$auto(buf intptr, size intptr) (automatic)
getdents$auto(fd intptr, dirent intptr, count intptr) (automatic)
getdents64$auto(fd intptr, dirent intptr, count intptr) (automatic)
getegid$auto() (automatic)
getegid32$auto() (automatic)
geteuid$auto() (automatic)
geteuid32$auto() (automatic)
getgid$auto() (automatic)
getgid32$auto() (automatic)
getgroups$auto(gidsetsize intptr, grouplist intptr) (automatic)
getgroups32$auto(gidsetsize intptr, grouplist intptr) (automatic)
getitimer$auto(which intptr, value intptr) (automatic)
getpeername$auto(fd intptr, usockaddr intptr, usockaddr_len intptr) (automatic)
getpgid$auto(pid intptr) (automatic)
getpgrp$auto() (automatic)
getpid$auto() (automatic)
getppid$auto() (automatic)
getpriority$auto(which intptr, who intptr) (automatic)
getrandom$auto(ubuf intptr, len intptr, flags intptr) (automatic)
getresgid$auto(rgidp intptr, egidp intptr, sgidp intptr) (automatic)
getresgid32$auto(rgidp intptr, egidp intptr, sgidp intptr) (automatic)
getresuid$auto(ruidp intptr, euidp intptr, suidp intptr) (automatic)
getresuid32$auto(ruidp intptr, euidp intptr, suidp intptr) (automatic)
getrlimit$auto(rsrc intptr, rlim intptr) (automatic)
getrusage$auto(who intptr, ru intptr) (automatic)
getsid$auto(pid intptr) (automatic)
getsockname$auto(fd intptr, usockaddr intptr, usockaddr_len intptr) (automatic)
getsockopt$auto(fd intptr, level intptr, optname intptr, optval intptr, optlen intptr) (automatic)
gettid$auto() (automatic)
gettimeofday$auto(tv intptr, tz intptr) (automatic)
getuid$auto() (automatic)
getuid32$auto() (automatic)
getxattr$auto(pathname intptr, name intptr, value intptr, size intptr) (automatic)
init_module$auto(umod intptr, len intptr, uargs intptr) (automatic)
inotify_add_watch$auto(fd intptr, pathname intptr, mask intptr) (automatic)
inotify_init$auto() (automatic)
inotify_init1$auto(flags intptr) (automatic)
inotify_rm_watch$auto(fd intptr, wd intptr) (automatic)
io_cancel$auto(ctx_id intptr, iocb intptr, result intptr) (automatic)
io_destroy$auto(ctx intptr) (automatic)
io_getevents$auto(ctx_id intptr, min_nr intptr, nr intptr, events intptr, timeout intptr) (automatic)
io_pgetevents$auto(ctx_id intptr, min_nr intptr, nr intptr, events intptr, timeout intptr, usig intptr) (automatic)
io_pgetevents_time64$auto(ctx_id intptr, min_nr intptr, nr intptr, events intptr, timeout intptr, usig intptr) (automatic)
io_setup$auto(nr_events intptr, ctxp intptr) (automatic)
io_submit$auto(ctx_id intptr, nr intptr, iocbpp intptr) (automatic)
io_uring_enter$auto(fd intptr, to_submit intptr, min_complete intptr, flags intptr, argp intptr, argsz intptr) (automatic)
io_uring_register$auto(fd intptr, opcode intptr, arg intptr, nr_args intptr) (automatic)
io_uring_setup$auto(entries intptr, params intptr) (automatic)
ioctl$auto(fd intptr, cmd intptr, arg intptr) (automatic)
ioperm$auto(from intptr, num intptr, turn_on intptr) (automatic)
iopl$auto(level intptr) (automatic)
ioprio_get$auto(which intptr, who intptr) (automatic)
ioprio_set$auto(which intptr, who intptr, ioprio intptr) (automatic)
kcmp$auto(pid1 intptr, pid2 intptr, type intptr, idx1 intptr, idx2 intptr) (automatic)
kexec_load$auto(entry intptr, nr_segments intptr, segments intptr, flags intptr) (automatic)
keyctl$auto(option intptr, arg2 intptr, arg3 intptr, arg4 intptr, arg5 intptr) (automatic)
kill$auto(pid intptr, sig intptr) (automatic)
landlock_add_rule$auto(ruleset_fd intptr, rule_type intptr, rule_attr intptr, flags intptr) (automatic)
landlock_create_ruleset$auto(attr intptr, size intptr, flags intptr) (automatic)
landlock_restrict_self$auto(ruleset_fd intptr, flags intptr) (automatic)
lchown$auto(filename intptr, user intptr, group intptr) (automatic)
lchown32$auto(filename intptr, user intptr, group intptr) (automatic)
lgetxattr$auto(pathname intptr, name intptr, value intptr, size intptr) (automatic)
link$auto(oldname intptr, newname intptr) (automatic)
linkat$auto(olddfd intptr, oldname intptr, newdfd intptr, newname intptr, flags intptr) (automatic)
listen$auto(fd intptr, backlog intptr) (automatic)
listmount$auto(req intptr, mnt_ids intptr, nr_mnt_ids intptr, flags intptr) (automatic)
listxattr$auto(pathname intptr, list intptr, size intptr) (automatic)
llistxattr$auto(pathname intptr, list intptr, size intptr) (automatic)
lremovexattr$auto(pathname intptr, name intptr) (automatic)
lseek$auto(fd intptr, offset intptr, whence intptr) (automatic)
lsetxattr$auto(pathname intptr, name intptr, value intptr, size intptr, flags intptr) (automatic)
lsm_get_self_attr$auto(attr intptr, ctx intptr, size intptr, flags intptr) (automatic)
lsm_list_modules$auto(ids intptr, size intptr, flags intptr) (automatic)
lsm_set_self_attr$auto(attr intptr, ctx intptr, size intptr, flags intptr) (automatic)
lstat$auto(filename intptr, statbuf intptr) (automatic)
madvise$auto(start intptr, len_in intptr, behavior intptr) (automatic)
map_shadow_stack$auto(addr intptr, size intptr, flags intptr) (automatic)
mbind$auto(start intptr, len intptr, mode intptr, nmask intptr, maxnode intptr, flags intptr) (automatic)
membarrier$auto(cmd intptr, flags intptr, cpu_id intptr) (automatic)
memfd_create$auto(uname intptr, flags intptr) (automatic)
memfd_secret$auto(flags intptr) (automatic)
migrate_pages$auto(pid intptr, maxnode intptr, old_nodes intptr, new_nodes intptr) (automatic)
mincore$auto(start intptr, len intptr, vec intptr) (automatic)
mkdir$auto(pathname intptr, mode intptr) (automatic)
mkdirat$auto(dfd intptr, pathname intptr, mode intptr) (automatic)
mknod$auto(filename intptr, mode intptr, dev intptr) (automatic)
mknodat$auto(dfd intptr, filename intptr, mode intptr, dev intptr) (automatic)
mlock$auto(start intptr, len intptr) (automatic)
mlock2$auto(start intptr, len intptr, flags intptr) (automatic)
mlockall$auto(flags intptr) (automatic)
mmap$auto(addr intptr, len intptr, prot intptr, flags intptr, fd intptr, off intptr) (automatic)
mmap2$auto(addr intptr, len intptr, prot intptr, flags intptr, fd intptr, pgoff intptr) (automatic)
modify_ldt$auto(func intptr, ptr intptr, bytecount intptr) (automatic)
mount$auto(dev_name intptr, dir_name intptr, type intptr, flags intptr, data intptr) (automatic)
mount_setattr$auto(dfd intptr, path intptr, flags intptr, uattr intptr, usize intptr) (automatic)
move_mount$auto(from_dfd intptr, from_pathname intptr, to_dfd intptr, to_pathname intptr, flags intptr) (automatic)
move_pages$auto(pid intptr, nr_pages intptr, pages intptr, nodes intptr, status intptr, flags intptr) (automatic)
mprotect$auto(start intptr, len intptr, prot intptr) (automatic)
mq_getsetattr$auto(mqdes intptr, u_mqstat intptr, u_omqstat intptr) (automatic)
mq_notify$auto(mqdes intptr, u_notification intptr) (automatic)
mq_open$auto(u_name intptr, oflag intptr, mode intptr, u_attr intptr) (automatic)
mq_timedreceive$auto(mqdes intptr, u_msg_ptr intptr, msg_len intptr, u_msg_prio intptr, u_abs_timeout intptr) (automatic)
mq_timedreceive_time64$auto(mqdes intptr, u_msg_ptr intptr, msg_len intptr, u_msg_prio intptr, u_abs_timeout intptr) (automatic)
mq_timedsend$auto(mqdes intptr, u_msg_ptr intptr, msg_len intptr, msg_prio intptr, u_abs_timeout intptr) (automatic)
mq_timedsend_time64$auto(mqdes intptr, u_msg_ptr intptr, msg_len intptr, msg_prio intptr, u_abs_timeout intptr) (automatic)
mq_unlink$auto(u_name intptr) (automatic)
mremap$auto(addr intptr, old_len intptr, new_len intptr, flags intptr, new_addr intptr) (automatic)
mseal$auto(start intptr, len intptr, flags intptr) (automatic)
msgctl$auto(msqid intptr, cmd intptr, buf intptr) (automatic)
msgget$auto(key intptr, msgflg intptr) (automatic)
msgrcv$auto(msqid intptr, msgp intptr, msgsz intptr, msgtyp intptr, msgflg intptr) (automatic)
msgsnd$auto(msqid intptr, msgp intptr, msgsz intptr, msgflg intptr) (automatic)
msync$auto(start intptr, len intptr, flags intptr) (automatic)
munlock$auto(start intptr, len intptr) (automatic)
munlockall$auto() (automatic)
munmap$auto(addr intptr, len intptr) (automatic)
name_to_handle_at$auto(dfd intptr, name intptr, handle intptr, mnt_id intptr, flag intptr) (automatic)
nanosleep$auto(rqtp intptr, rmtp intptr) (automatic)
newfstatat$auto(dfd intptr, filename intptr, statbuf intptr, flag intptr) (automatic)
nice$auto(increment intptr) (automatic)
oldfstat$auto(fd intptr, statbuf intptr) (automatic)
oldlstat$auto(filename intptr, statbuf intptr) (automatic)
oldolduname$auto(name intptr) (automatic)
oldstat$auto(filename intptr, statbuf intptr) (automatic)
olduname$auto(name intptr) (automatic)
open$auto(filename intptr, flags intptr, mode intptr) (automatic)
open_by_handle_at$auto(mountdirfd intptr, handle intptr, flags intptr) (automatic)
open_tree$auto(dfd intptr, filename intptr, flags intptr) (automatic)
openat$auto(dfd intptr, filename intptr, flags intptr, mode intptr) (automatic)
openat2$auto(dfd intptr, filename intptr, how intptr, usize intptr) (automatic)
pause$auto() (automatic)
perf_event_open$auto(attr_uptr intptr, pid intptr, cpu intptr, group_fd intptr, flags intptr) (automatic)
personality$auto(personality intptr) (automatic)
pidfd_getfd$auto(pidfd intptr, fd intptr, flags intptr) (automatic)
pidfd_open$auto(pid intptr, flags intptr) (automatic)
pidfd_send_signal$auto(pidfd intptr, sig intptr, info intptr, flags intptr) (automatic)
pipe$auto(fildes intptr) (automatic)
pipe2$auto(fildes intptr, flags intptr) (automatic)
pivot_root$auto(new_root intptr, put_old intptr) (automatic)
pkey_alloc$auto(flags intptr, init_val intptr) (automatic)
pkey_free$auto(pkey intptr) (automatic)
pkey_mprotect$auto(start intptr, len intptr, prot intptr, pkey intptr) (automatic)
poll$auto(ufds intptr, nfds intptr, timeout_msecs intptr) (automatic)
ppoll$auto(ufds intptr, nfds intptr, tsp intptr, sigmask intptr, sigsetsize intptr) (automatic)
ppoll_time64$auto(ufds intptr, nfds intptr, tsp intptr, sigmask intptr, sigsetsize intptr) (automatic)
prctl$auto(option intptr, arg2 intptr, arg3 intptr, arg4 intptr, arg5 intptr) (automatic)
pread64$auto(fd intptr, buf intptr, count intptr, pos intptr) (automatic)
preadv$auto(fd intptr, vec intptr, vlen intptr, pos_l intptr, pos_h intptr) (automatic)
preadv2$auto(fd intptr, vec intptr, vlen intptr, pos_l intptr, pos_h intptr, flags intptr) (automatic)
prlimit64$auto(pid intptr, rsrc intptr, new_rlim intptr, old_rlim intptr) (automatic)
process_madvise$auto(pidfd intptr, vec intptr, vlen intptr, behavior intptr, flags intptr) (automatic)
process_mrelease$auto(pidfd intptr, flags intptr) (automatic)
process_vm_readv$auto(pid intptr, lvec intptr, liovcnt intptr, rvec intptr, riovcnt intptr, flags intptr) (automatic)
process_vm_writev$auto(pid intptr, lvec intptr, liovcnt intptr, rvec intptr, riovcnt intptr, flags intptr) (automatic)
pselect6$auto(n intptr, inp intptr, outp intptr, exp intptr, tsp intptr, sig intptr) (automatic)
pselect6_time64$auto(n intptr, inp intptr, outp intptr, exp intptr, tsp intptr, sig intptr) (automatic)
ptrace$auto(request intptr, pid intptr, addr intptr, data intptr) (automatic)
pwrite64$auto(fd intptr, buf intptr, count intptr, pos intptr) (automatic)
pwritev$auto(fd intptr, vec intptr, vlen intptr, pos_l intptr, pos_h intptr) (automatic)
pwritev2$auto(fd intptr, vec intptr, vlen intptr, pos_l intptr, pos_h intptr, flags intptr) (automatic)
quotactl$auto(cmd intptr, special intptr, id intptr, addr intptr) (automatic)
quotactl_fd$auto(fd intptr, cmd intptr, id intptr, addr intptr) (automatic)
read$auto(fd intptr, buf intptr, count intptr) (automatic)
readahead$auto(fd intptr, offset intptr, count intptr) (automatic)
readdir$auto(fd intptr, dirent intptr, count intptr) (automatic)
readlink$auto(path intptr, buf intptr, bufsiz intptr) (automatic)
readlinkat$auto(dfd intptr, pathname intptr, buf intptr, bufsiz intptr) (automatic)
readv$auto(fd intptr, vec intptr, vlen intptr) (automatic)
recv$auto(fd intptr, ubuf intptr, size intptr, flags intptr) (automatic)
recvfrom$auto(fd intptr, ubuf intptr, size intptr, flags intptr, addr intptr, addr_len intptr) (automatic)
recvmmsg$auto(fd intptr, mmsg intptr, vlen intptr, flags intptr, timeout intptr) (automatic)
recvmmsg_time64$auto(fd intptr, mmsg intptr, vlen intptr, flags intptr, timeout intptr) (automatic)
recvmsg$auto(fd intptr, msg intptr, flags intptr) (automatic)
remap_file_pages$auto(start intptr, size intptr, prot intptr, pgoff intptr, flags intptr) (automatic)
removexattr$auto(pathname intptr, name intptr) (automatic)
rename$auto(oldname intptr, newname intptr) (automatic)
renameat$auto(olddfd intptr, oldname intptr, newdfd intptr, newname intptr) (automatic)
renameat2$auto(olddfd intptr, oldname intptr, newdfd intptr, newname intptr, flags intptr) (automatic)
request_key$auto(_type intptr, _description intptr, _callout_info intptr, destringid intptr) (automatic)
restart_syscall$auto() (automatic)
rmdir$auto(pathname intptr) (automatic)
rseq$auto(rseq intptr, rseq_len intptr, flags intptr, sig intptr) (automatic)
rt_sigaction$auto(sig intptr, act intptr, oact intptr, sigsetsize intptr) (automatic)
rt_sigpending$auto(uset intptr, sigsetsize intptr) (automatic)
rt_sigprocmask$auto(how intptr, nset intptr, oset intptr, sigsetsize intptr) (automatic)
rt_sigqueueinfo$auto(pid intptr, sig intptr, uinfo intptr) (automatic)
rt_sigreturn$auto() (automatic)
rt_sigsuspend$auto(unewset intptr, sigsetsize intptr) (automatic)
rt_sigtimedwait$auto(uthese intptr, uinfo intptr, uts intptr, sigsetsize intptr) (automatic)
rt_sigtimedwait_time64$auto(uthese intptr, uinfo intptr, uts intptr, sigsetsize intptr) (automatic)
rt_tgsigqueueinfo$auto(tgid intptr, pid intptr, sig intptr, uinfo intptr) (automatic)
sched_get_priority_max$auto(policy intptr) (automatic)
sched_get_priority_min$auto(policy intptr) (automatic)
sched_getaffinity$auto(pid intptr, len intptr, user_mask_ptr intptr) (automatic)
sched_getattr$auto(pid intptr, uattr intptr, usize intptr, flags intptr) (automatic)
sched_getparam$auto(pid intptr, param intptr) (automatic)
sched_getscheduler$auto(pid intptr) (automatic)
sched_rr_get_interval$auto(pid intptr, interval intptr) (automatic)
sched_rr_get_interval_time64$auto(pid intptr, interval intptr) (automatic)
sched_setaffinity$auto(pid intptr, len intptr, user_mask_ptr intptr) (automatic)
sched_setattr$auto(pid intptr, uattr intptr, flags intptr) (automatic)
sched_setparam$auto(pid intptr, param intptr) (automatic)
sched_setscheduler$auto(pid intptr, policy intptr, param intptr) (automatic)
sched_yield$auto() (automatic)
seccomp$auto(op intptr, flags intptr, uargs intptr) (automatic)
select$auto(n intptr, inp intptr, outp intptr, exp intptr, tvp intptr) (automatic)
semctl$auto(semid intptr, semnum intptr, cmd intptr, arg intptr) (automatic)
semget$auto(key intptr, nsems intptr, semflg intptr) (automatic)
semop$auto(semid intptr, tsops intptr, nsops intptr) (automatic)
semtimedop$auto(semid intptr, tsems intptr, nsops intptr, timeout intptr) (automatic)
semtimedop_time64$auto(semid intptr, tsops intptr, nsops intptr, timeout intptr) (automatic)
send$auto(fd intptr, buff intptr, len intptr, flags intptr) (automatic)
sendfile$auto(out_fd intptr, in_fd intptr, offset intptr, count intptr) (automatic)
sendfile64$auto(out_fd intptr, in_fd intptr, offset intptr, count intptr) (automatic)
sendmmsg$auto(fd intptr, mmsg intptr, vlen intptr, flags intptr) (automatic)
sendmsg$auto0(fd intptr, msg intptr, flags intptr) (automatic)
sendmsg$auto_BATADV_CMD_GET_BLA_BACKBONE1(fd sock_nl_generic, msg ptr[in, msghdr_batadv_auto[BATADV_CMD_GET_BLA_BACKBONE, batadv_netlink_policy$auto_netlink]], f flags[send_flags]) (automatic)
sendmsg$auto_BATADV_CMD_GET_BLA_CLAIM2(fd sock_nl_generic, msg ptr[in, msghdr_batadv_auto[BATADV_CMD_GET_BLA_CLAIM, batadv_netlink_policy$auto_netlink]], f flags[send_flags]) (automatic)
sendmsg$auto_BATADV_CMD_GET_DAT_CACHE3(fd sock_nl_generic, msg ptr[in, msghdr_batadv_auto[BATADV_CMD_GET_DAT_CACHE, batadv_netlink_policy$auto_netlink]], f flags[send_flags]) (automatic)
sendmsg$auto_BATADV_CMD_GET_GATEWAYS4(fd sock_nl_generic, msg ptr[in, msghdr_batadv_auto[BATADV_CMD_GET_GATEWAYS, batadv_netlink_policy$auto_netlink]], f flags[send_flags]) (automatic)
sendmsg$auto_BATADV_CMD_GET_HARDIF5(fd sock_nl_generic, msg ptr[in, msghdr_batadv_auto[BATADV_CMD_GET_HARDIF, batadv_netlink_policy$auto_netlink]], f flags[send_flags]) (automatic)
sendmsg$auto_BATADV_CMD_GET_MCAST_FLAGS6(fd sock_nl_generic, msg ptr[in, msghdr_batadv_auto[BATADV_CMD_GET_MCAST_FLAGS, batadv_netlink_policy$auto_netlink]], f flags[send_flags]) (automatic)
sendmsg$auto_BATADV_CMD_GET_MESH7(fd sock_nl_generic, msg ptr[in, msghdr_batadv_auto[BATADV_CMD_GET_MESH, batadv_netlink_policy$auto_netlink]], f flags[send_flags]) (automatic)
sendmsg$auto_BATADV_CMD_GET_NEIGHBORS8(fd sock_nl_generic, msg ptr[in, msghdr_batadv_auto[BATADV_CMD_GET_NEIGHBORS, batadv_netlink_policy$auto_netlink]], f flags[send_flags]) (automatic)
sendmsg$auto_BATADV_CMD_GET_ORIGINATORS9(fd sock_nl_generic, msg ptr[in, msghdr_batadv_auto[BATADV_CMD_GET_ORIGINATORS, batadv_netlink_policy$auto_netlink]], f flags[send_flags]) (automatic)
sendmsg$auto_BATADV_CMD_GET_ROUTING_ALGOS10(fd sock_nl_generic, msg ptr[in, msghdr_batadv_auto[BATADV_CMD_GET_ROUTING_ALGOS, batadv_netlink_policy$auto_netlink]], f flags[send_flags]) (automatic)
sendmsg$auto_BATADV_CMD_GET_TRANSTABLE_GLOBAL11(fd sock_nl_generic, msg ptr[in, msghdr_batadv_auto[BATADV_CMD_GET_TRANSTABLE_GLOBAL, batadv_netlink_policy$auto_netlink]], f flags[send_flags]) (automatic)
sendmsg$auto_BATADV_CMD_GET_TRANSTABLE_LOCAL12(fd sock_nl_generic, msg ptr[in, msghdr_batadv_auto[BATADV_CMD_GET_TRANSTABLE_LOCAL, batadv_netlink_policy$auto_netlink]], f flags[send_flags]) (automatic)
sendmsg$auto_BATADV_CMD_GET_VLAN13(fd sock_nl_generic, msg ptr[in, msghdr_batadv_auto[BATADV_CMD_GET_VLAN, batadv_netlink_policy$auto_netlink]], f flags[send_flags]) (automatic)
sendmsg$auto_BATADV_CMD_SET_HARDIF14(fd sock_nl_generic, msg ptr[in, msghdr_batadv_auto[BATADV_CMD_SET_HARDIF, batadv_netlink_policy$auto_netlink]], f flags[send_flags]) (automatic)
sendmsg$auto_BATADV_CMD_SET_MESH15(fd sock_nl_generic, msg ptr[in, msghdr_batadv_auto[BATADV_CMD_SET_MESH, batadv_netlink_policy$auto_netlink]], f flags[send_flags]) (automatic)
sendmsg$auto_BATADV_CMD_SET_VLAN16(fd sock_nl_generic, msg ptr[in, msghdr_batadv_auto[BATADV_CMD_SET_VLAN, batadv_netlink_policy$auto_netlink]], f flags[send_flags]) (automatic)
sendmsg$auto_BATADV_CMD_TP_METER17(fd sock_nl_generic, msg ptr[in, msghdr_batadv_auto[BATADV_CMD_TP_METER, batadv_netlink_policy$auto_netlink]], f flags[send_flags]) (automatic)
sendmsg$auto_BATADV_CMD_TP_METER_CANCEL18(fd sock_nl_generic, msg ptr[in, msghdr_batadv_auto[BATADV_CMD_TP_METER_CANCEL, batadv_netlink_policy$auto_netlink]], f flags[send_flags]) (automatic)
sendmsg$auto_CGROUPSTATS_CMD_GET19(fd sock_nl_generic, msg ptr[in, msghdr_TASKSTATS_auto[CGROUPSTATS_CMD_GET, cgroupstats_cmd_get_policy$auto_taskstats]], f flags[send_flags]) (automatic)
sendmsg$auto_CIFS_GENL_CMD_SWN_NOTIFY20(fd sock_nl_generic, msg ptr[in, msghdr_cifs_auto[CIFS_GENL_CMD_SWN_NOTIFY, cifs_genl_policy$auto_netlink]], f flags[send_flags]) (automatic)
sendmsg$auto_CTRL_CMD_GETFAMILY21(fd sock_nl_generic, msg ptr[in, msghdr_nlctrl_auto[CTRL_CMD_GETFAMILY, ctrl_policy_family$auto_genetlink]], f flags[send_flags]) (automatic)
sendmsg$auto_CTRL_CMD_GETFAMILY22(fd sock_nl_generic, msg ptr[in, msghdr_nlctrl_auto[CTRL_CMD_GETFAMILY, ctrl_policy_family$auto_genetlink]], f flags[send_flags]) (automatic)
sendmsg$auto_CTRL_CMD_GETPOLICY23(fd sock_nl_generic, msg ptr[in, msghdr_nlctrl_auto[CTRL_CMD_GETPOLICY, ctrl_policy_policy$auto_genetlink]], f flags[send_flags]) (automatic)
sendmsg$auto_ETHTOOL_MSG_CABLE_TEST_ACT24(fd sock_nl_generic, msg ptr[in, msghdr_ethtool_auto[ETHTOOL_MSG_CABLE_TEST_ACT, ethnl_cable_test_act_policy$auto_netlink]], f flags[send_flags]) (automatic)
sendmsg$auto_ETHTOOL_MSG_CABLE_TEST_TDR_ACT25(fd sock_nl_generic, msg ptr[in, msghdr_ethtool_auto[ETHTOOL_MSG_CABLE_TEST_TDR_ACT, ethnl_cable_test_tdr_act_policy$auto_netlink]], f flags[send_flags]) (automatic)
sendmsg$auto_ETHTOOL_MSG_CHANNELS_GET26(fd sock_nl_generic, msg ptr[in, msghdr_ethtool_auto[ETHTOOL_MSG_CHANNELS_GET, ethnl_channels_get_policy$auto_netlink]], f flags[send_flags]) (automatic)
sendmsg$auto_ETHTOOL_MSG_CHANNELS_SET27(fd sock_nl_generic, msg ptr[in, msghdr_ethtool_auto[ETHTOOL_MSG_CHANNELS_SET, ethnl_channels_set_policy$auto_netlink]], f flags[send_flags]) (automatic)
sendmsg$auto_ETHTOOL_MSG_COALESCE_GET28(fd sock_nl_generic, msg ptr[in, msghdr_ethtool_auto[ETHTOOL_MSG_COALESCE_GET, ethnl_coalesce_get_policy$auto_netlink]], f flags[send_flags]) (automatic)
sendmsg$auto_ETHTOOL_MSG_COALESCE_SET29(fd sock_nl_generic, msg ptr[in, msghdr_ethtool_auto[ETHTOOL_MSG_COALESCE_SET, ethnl_coalesce_set_policy$auto_netlink]], f flags[send_flags]) (automatic)
sendmsg$auto_ETHTOOL_MSG_DEBUG_GET30(fd sock_nl_generic, msg ptr[in, msghdr_ethtool_auto[ETHTOOL_MSG_DEBUG_GET, ethnl_debug_get_policy$auto_netlink]], f flags[send_flags]) (automatic)
sendmsg$auto_ETHTOOL_MSG_DEBUG_SET31(fd sock_nl_generic, msg ptr[in, msghdr_ethtool_auto[ETHTOOL_MSG_DEBUG_SET, ethnl_debug_set_policy$auto_netlink]], f flags[send_flags]) (automatic)
sendmsg$auto_ETHTOOL_MSG_EEE_GET32(fd sock_nl_generic, msg ptr[in, msghdr_ethtool_auto[ETHTOOL_MSG_EEE_GET, ethnl_eee_get_policy$auto_netlink]], f flags[send_flags]) (automatic)
sendmsg$auto_ETHTOOL_MSG_EEE_SET33(fd sock_nl_generic, msg ptr[in, msghdr_ethtool_auto[ETHTOOL_MSG_EEE_SET, ethnl_eee_set_policy$auto_netlink]], f flags[send_flags]) (automatic)
sendmsg$auto_ETHTOOL_MSG_FEATURES_GET34(fd sock_nl_generic, msg ptr[in, msghdr_ethtool_auto[ETHTOOL_MSG_FEATURES_GET, ethnl_features_get_policy$auto_netlink]], f flags[send_flags]) (automatic)
sendmsg$auto_ETHTOOL_MSG_FEATURES_SET35(fd sock_nl_generic, msg ptr[in, msghdr_ethtool_auto[ETHTOOL_MSG_FEATURES_SET, ethnl_features_set_policy$auto_netlink]], f flags[send_flags]) (automatic)
sendmsg$auto_ETHTOOL_MSG_FEC_GET36(fd sock_nl_generic, msg ptr[in, msghdr_ethtool_auto[ETHTOOL_MSG_FEC_GET, ethnl_fec_get_policy$auto_netlink]], f flags[send_flags]) (automatic)
sendmsg$auto_ETHTOOL_MSG_FEC_SET37(fd sock_nl_generic, msg ptr[in, msghdr_ethtool_auto[ETHTOOL_MSG_FEC_SET, ethnl_fec_set_policy$auto_netlink]], f flags[send_flags]) (automatic)
sendmsg$auto_ETHTOOL_MSG_LINKINFO_GET38(fd sock_nl_generic, msg ptr[in, msghdr_ethtool_auto[ETHTOOL_MSG_LINKINFO_GET, ethnl_linkinfo_get_policy$auto_netlink]], f flags[send_flags]) (automatic)
sendmsg$auto_ETHTOOL_MSG_LINKINFO_SET39(fd sock_nl_generic, msg ptr[in, msghdr_ethtool_auto[ETHTOOL_MSG_LINKINFO_SET, ethnl_linkinfo_set_policy$auto_netlink]], f flags[send_flags]) (automatic)
sendmsg$auto_ETHTOOL_MSG_LINKMODES_GET40(fd sock_nl_generic, msg ptr[in, msghdr_ethtool_auto[ETHTOOL_MSG_LINKMODES_GET, ethnl_linkmodes_get_policy$auto_netlink]], f flags[send_flags]) (automatic)
sendmsg$auto_ETHTOOL_MSG_LINKMODES_SET41(fd sock_nl_generic, msg ptr[in, msghdr_ethtool_auto[ETHTOOL_MSG_LINKMODES_SET, ethnl_linkmodes_set_policy$auto_netlink]], f flags[send_flags]) (automatic)
sendmsg$auto_ETHTOOL_MSG_LINKSTATE_GET42(fd sock_nl_generic, msg ptr[in, msghdr_ethtool_auto[ETHTOOL_MSG_LINKSTATE_GET, ethnl_linkstate_get_policy$auto_netlink]], f flags[send_flags]) (automatic)
sendmsg$auto_ETHTOOL_MSG_MM_GET43(fd sock_nl_generic, msg ptr[in, msghdr_ethtool_auto[ETHTOOL_MSG_MM_GET, ethnl_mm_get_policy$auto_netlink]], f flags[send_flags]) (automatic)
sendmsg$auto_ETHTOOL_MSG_MM_SET44(fd sock_nl_generic, msg ptr[in, msghdr_ethtool_auto[ETHTOOL_MSG_MM_SET, ethnl_mm_set_policy$auto_netlink]], f flags[send_flags]) (automatic)
sendmsg$auto_ETHTOOL_MSG_MODULE_EEPROM_GET45(fd sock_nl_generic, msg ptr[in, msghdr_ethtool_auto[ETHTOOL_MSG_MODULE_EEPROM_GET, ethnl_module_eeprom_get_policy$auto_netlink]], f flags[send_flags]) (automatic)
sendmsg$auto_ETHTOOL_MSG_MODULE_FW_FLASH_ACT46(fd sock_nl_generic, msg ptr[in, msghdr_ethtool_auto[ETHTOOL_MSG_MODULE_FW_FLASH_ACT, ethnl_module_fw_flash_act_policy$auto_netlink]], f flags[send_flags]) (automatic)
sendmsg$auto_ETHTOOL_MSG_MODULE_GET47(fd sock_nl_generic, msg ptr[in, msghdr_ethtool_auto[ETHTOOL_MSG_MODULE_GET, ethnl_module_get_policy$auto_netlink]], f flags[send_flags]) (automatic)
sendmsg$auto_ETHTOOL_MSG_MODULE_SET48(fd sock_nl_generic, msg ptr[in, msghdr_ethtool_auto[ETHTOOL_MSG_MODULE_SET, ethnl_module_set_policy$auto_netlink]], f flags[send_flags]) (automatic)
sendmsg$auto_ETHTOOL_MSG_PAUSE_GET49(fd sock_nl_generic, msg ptr[in, msghdr_ethtool_auto[ETHTOOL_MSG_PAUSE_GET, ethnl_pause_get_policy$auto_netlink]], f flags[send_flags]) (automatic)
sendmsg$auto_ETHTOOL_MSG_PAUSE_SET50(fd sock_nl_generic, msg ptr[in, msghdr_ethtool_auto[ETHTOOL_MSG_PAUSE_SET, ethnl_pause_set_policy$auto_netlink]], f flags[send_flags]) (automatic)
sendmsg$auto_ETHTOOL_MSG_PHC_VCLOCKS_GET51(fd sock_nl_generic, msg ptr[in, msghdr_ethtool_auto[ETHTOOL_MSG_PHC_VCLOCKS_GET, ethnl_phc_vclocks_get_policy$auto_netlink]], f flags[send_flags]) (automatic)
sendmsg$auto_ETHTOOL_MSG_PLCA_GET_CFG52(fd sock_nl_generic, msg ptr[in, msghdr_ethtool_auto[ETHTOOL_MSG_PLCA_GET_CFG, ethnl_plca_get_cfg_policy$auto_netlink]], f flags[send_flags]) (automatic)
sendmsg$auto_ETHTOOL_MSG_PLCA_GET_STATUS53(fd sock_nl_generic, msg ptr[in, msghdr_ethtool_auto[ETHTOOL_MSG_PLCA_GET_STATUS, ethnl_plca_get_status_policy$auto_netlink]], f flags[send_flags]) (automatic)
sendmsg$auto_ETHTOOL_MSG_PLCA_SET_CFG54(fd sock_nl_generic, msg ptr[in, msghdr_ethtool_auto[ETHTOOL_MSG_PLCA_SET_CFG, ethnl_plca_set_cfg_policy$auto_netlink]], f flags[send_flags]) (automatic)
sendmsg$auto_ETHTOOL_MSG_PRIVFLAGS_GET55(fd sock_nl_generic, msg ptr[in, msghdr_ethtool_auto[ETHTOOL_MSG_PRIVFLAGS_GET, ethnl_privflags_get_policy$auto_netlink]], f flags[send_flags]) (automatic)
sendmsg$auto_ETHTOOL_MSG_PRIVFLAGS_SET56(fd sock_nl_generic, msg ptr[in, msghdr_ethtool_auto[ETHTOOL_MSG_PRIVFLAGS_SET, ethnl_privflags_set_policy$auto_netlink]], f flags[send_flags]) (automatic)
sendmsg$auto_ETHTOOL_MSG_PSE_GET57(fd sock_nl_generic, msg ptr[in, msghdr_ethtool_auto[ETHTOOL_MSG_PSE_GET, ethnl_pse_get_policy$auto_netlink]], f flags[send_flags]) (automatic)
sendmsg$auto_ETHTOOL_MSG_PSE_SET58(fd sock_nl_generic, msg ptr[in, msghdr_ethtool_auto[ETHTOOL_MSG_PSE_SET, ethnl_pse_set_policy$auto_netlink]], f flags[send_flags]) (automatic)
sendmsg$auto_ETHTOOL_MSG_RINGS_GET59(fd sock_nl_generic, msg ptr[in, msghdr_ethtool_auto[ETHTOOL_MSG_RINGS_GET, ethnl_rings_get_policy$auto_netlink]], f flags[send_flags]) (automatic)
sendmsg$auto_ETHTOOL_MSG_RINGS_SET60(fd sock_nl_generic, msg ptr[in, msghdr_ethtool_auto[ETHTOOL_MSG_RINGS_SET, ethnl_rings_set_policy$auto_netlink]], f flags[send_flags]) (automatic)
sendmsg$auto_ETHTOOL_MSG_RSS_GET61(fd sock_nl_generic, msg ptr[in, msghdr_ethtool_auto[ETHTOOL_MSG_RSS_GET, ethnl_rss_get_policy$auto_netlink]], f flags[send_flags]) (automatic)
sendmsg$auto_ETHTOOL_MSG_STATS_GET62(fd sock_nl_generic, msg ptr[in, msghdr_ethtool_auto[ETHTOOL_MSG_STATS_GET, ethnl_stats_get_policy$auto_netlink]], f flags[send_flags]) (automatic)
sendmsg$auto_ETHTOOL_MSG_STRSET_GET63(fd sock_nl_generic, msg ptr[in, msghdr_ethtool_auto[ETHTOOL_MSG_STRSET_GET, ethnl_strset_get_policy$auto_netlink]], f flags[send_flags]) (automatic)
sendmsg$auto_ETHTOOL_MSG_TSINFO_GET64(fd sock_nl_generic, msg ptr[in, msghdr_ethtool_auto[ETHTOOL_MSG_TSINFO_GET, ethnl_tsinfo_get_policy$auto_netlink]], f flags[send_flags]) (automatic)
sendmsg$auto_ETHTOOL_MSG_TUNNEL_INFO_GET65(fd sock_nl_generic, msg ptr[in, msghdr_ethtool_auto[ETHTOOL_MSG_TUNNEL_INFO_GET, ethnl_tunnel_info_get_policy$auto_netlink]], f flags[send_flags]) (automatic)
sendmsg$auto_ETHTOOL_MSG_WOL_GET66(fd sock_nl_generic, msg ptr[in, msghdr_ethtool_auto[ETHTOOL_MSG_WOL_GET, ethnl_wol_get_policy$auto_netlink]], f flags[send_flags]) (automatic)
sendmsg$auto_ETHTOOL_MSG_WOL_SET67(fd sock_nl_generic, msg ptr[in, msghdr_ethtool_auto[ETHTOOL_MSG_WOL_SET, ethnl_wol_set_policy$auto_netlink]], f flags[send_flags]) (automatic)
sendmsg$auto_GTP_CMD_DELPDP68(fd sock_nl_generic, msg ptr[in, msghdr_gtp_auto[GTP_CMD_DELPDP, gtp_genl_policy$auto_gtp]], f flags[send_flags]) (automatic)
sendmsg$auto_GTP_CMD_ECHOREQ69(fd sock_nl_generic, msg ptr[in, msghdr_gtp_auto[GTP_CMD_ECHOREQ, gtp_genl_policy$auto_gtp]], f flags[send_flags]) (automatic)
sendmsg$auto_GTP_CMD_GETPDP70(fd sock_nl_generic, msg ptr[in, msghdr_gtp_auto[GTP_CMD_GETPDP, gtp_genl_policy$auto_gtp]], f flags[send_flags]) (automatic)
sendmsg$auto_GTP_CMD_NEWPDP71(fd sock_nl_generic, msg ptr[in, msghdr_gtp_auto[GTP_CMD_NEWPDP, gtp_genl_policy$auto_gtp]], f flags[send_flags]) (automatic)
sendmsg$auto_HANDSHAKE_CMD_ACCEPT72(fd sock_nl_generic, msg ptr[in, msghdr_handshake_auto[HANDSHAKE_CMD_ACCEPT, handshake_accept_nl_policy$auto_genl]], f flags[send_flags]) (automatic)
sendmsg$auto_HANDSHAKE_CMD_DONE73(fd sock_nl_generic, msg ptr[in, msghdr_handshake_auto[HANDSHAKE_CMD_DONE, handshake_done_nl_policy$auto_genl]], f flags[send_flags]) (automatic)
sendmsg$auto_HSR_C_GET_NODE_LIST74(fd sock_nl_generic, msg ptr[in, msghdr_HSR_auto[HSR_C_GET_NODE_LIST, hsr_genl_policy$auto_hsr_netlink]], f flags[send_flags]) (automatic)
sendmsg$auto_HSR_C_GET_NODE_STATUS75(fd sock_nl_generic, msg ptr[in, msghdr_HSR_auto[HSR_C_GET_NODE_STATUS, hsr_genl_policy$auto_hsr_netlink]], f flags[send_flags]) (automatic)
sendmsg$auto_HWSIM_CMD_DEL_RADIO76(fd sock_nl_generic, msg ptr[in, msghdr_MAC80211_HWSIM_auto[HWSIM_CMD_DEL_RADIO, hwsim_genl_policy$auto_mac80211_hwsim]], f flags[send_flags]) (automatic)
sendmsg$auto_HWSIM_CMD_FRAME77(fd sock_nl_generic, msg ptr[in, msghdr_MAC80211_HWSIM_auto[HWSIM_CMD_FRAME, hwsim_genl_policy$auto_mac80211_hwsim]], f flags[send_flags]) (automatic)
sendmsg$auto_HWSIM_CMD_GET_RADIO78(fd sock_nl_generic, msg ptr[in, msghdr_MAC80211_HWSIM_auto[HWSIM_CMD_GET_RADIO, hwsim_genl_policy$auto_mac80211_hwsim]], f flags[send_flags]) (automatic)
sendmsg$auto_HWSIM_CMD_NEW_RADIO79(fd sock_nl_generic, msg ptr[in, msghdr_MAC80211_HWSIM_auto[HWSIM_CMD_NEW_RADIO, hwsim_genl_policy$auto_mac80211_hwsim]], f flags[send_flags]) (automatic)
sendmsg$auto_HWSIM_CMD_REGISTER80(fd sock_nl_generic, msg ptr[in, msghdr_MAC80211_HWSIM_auto[HWSIM_CMD_REGISTER, hwsim_genl_policy$auto_mac80211_hwsim]], f flags[send_flags]) (automatic)
sendmsg$auto_HWSIM_CMD_REPORT_PMSR81(fd sock_nl_generic, msg ptr[in, msghdr_MAC80211_HWSIM_auto[HWSIM_CMD_REPORT_PMSR, hwsim_genl_policy$auto_mac80211_hwsim]], f flags[send_flags]) (automatic)
sendmsg$auto_HWSIM_CMD_TX_INFO_FRAME82(fd sock_nl_generic, msg ptr[in, msghdr_MAC80211_HWSIM_auto[HWSIM_CMD_TX_INFO_FRAME, hwsim_genl_policy$auto_mac80211_hwsim]], f flags[send_flags]) (automatic)
sendmsg$auto_IEEE802154_ADD_IFACE83(fd sock_nl_generic, msg ptr[in, msghdr_802_15_4_MAC_auto[IEEE802154_ADD_IFACE, ieee802154_policy$auto_nl802154]], f flags[send_flags]) (automatic)
sendmsg$auto_IEEE802154_ASSOCIATE_REQ84(fd sock_nl_generic, msg ptr[in, msghdr_802_15_4_MAC_auto[IEEE802154_ASSOCIATE_REQ, ieee802154_policy$auto_nl802154]], f flags[send_flags]) (automatic)
sendmsg$auto_IEEE802154_ASSOCIATE_RESP85(fd sock_nl_generic, msg ptr[in, msghdr_802_15_4_MAC_auto[IEEE802154_ASSOCIATE_RESP, ieee802154_policy$auto_nl802154]], f flags[send_flags]) (automatic)
sendmsg$auto_IEEE802154_DEL_IFACE86(fd sock_nl_generic, msg ptr[in, msghdr_802_15_4_MAC_auto[IEEE802154_DEL_IFACE, ieee802154_policy$auto_nl802154]], f flags[send_flags]) (automatic)
sendmsg$auto_IEEE802154_DISASSOCIATE_REQ87(fd sock_nl_generic, msg ptr[in, msghdr_802_15_4_MAC_auto[IEEE802154_DISASSOCIATE_REQ, ieee802154_policy$auto_nl802154]], f flags[send_flags]) (automatic)
sendmsg$auto_IEEE802154_LIST_IFACE88(fd sock_nl_generic, msg ptr[in, msghdr_802_15_4_MAC_auto[IEEE802154_LIST_IFACE, ieee802154_policy$auto_nl802154]], f flags[send_flags]) (automatic)
sendmsg$auto_IEEE802154_LIST_PHY89(fd sock_nl_generic, msg ptr[in, msghdr_802_15_4_MAC_auto[IEEE802154_LIST_PHY, ieee802154_policy$auto_nl802154]], f flags[send_flags]) (automatic)
sendmsg$auto_IEEE802154_LLSEC_ADD_DEV90(fd sock_nl_generic, msg ptr[in, msghdr_802_15_4_MAC_auto[IEEE802154_LLSEC_ADD_DEV, ieee802154_policy$auto_nl802154]], f flags[send_flags]) (automatic)
sendmsg$auto_IEEE802154_LLSEC_ADD_DEVKEY91(fd sock_nl_generic, msg ptr[in, msghdr_802_15_4_MAC_auto[IEEE802154_LLSEC_ADD_DEVKEY, ieee802154_policy$auto_nl802154]], f flags[send_flags]) (automatic)
sendmsg$auto_IEEE802154_LLSEC_ADD_KEY92(fd sock_nl_generic, msg ptr[in, msghdr_802_15_4_MAC_auto[IEEE802154_LLSEC_ADD_KEY, ieee802154_policy$auto_nl802154]], f flags[send_flags]) (automatic)
sendmsg$auto_IEEE802154_LLSEC_ADD_SECLEVEL93(fd sock_nl_generic, msg ptr[in, msghdr_802_15_4_MAC_auto[IEEE802154_LLSEC_ADD_SECLEVEL, ieee802154_policy$auto_nl802154]], f flags[send_flags]) (automatic)
sendmsg$auto_IEEE802154_LLSEC_DEL_DEV94(fd sock_nl_generic, msg ptr[in, msghdr_802_15_4_MAC_auto[IEEE802154_LLSEC_DEL_DEV, ieee802154_policy$auto_nl802154]], f flags[send_flags]) (automatic)
sendmsg$auto_IEEE802154_LLSEC_DEL_DEVKEY95(fd sock_nl_generic, msg ptr[in, msghdr_802_15_4_MAC_auto[IEEE802154_LLSEC_DEL_DEVKEY, ieee802154_policy$auto_nl802154]], f flags[send_flags]) (automatic)
sendmsg$auto_IEEE802154_LLSEC_DEL_KEY96(fd sock_nl_generic, msg ptr[in, msghdr_802_15_4_MAC_auto[IEEE802154_LLSEC_DEL_KEY, ieee802154_policy$auto_nl802154]], f flags[send_flags]) (automatic)
sendmsg$auto_IEEE802154_LLSEC_DEL_SECLEVEL97(fd sock_nl_generic, msg ptr[in, msghdr_802_15_4_MAC_auto[IEEE802154_LLSEC_DEL_SECLEVEL, ieee802154_policy$auto_nl802154]], f flags[send_flags]) (automatic)
sendmsg$auto_IEEE802154_LLSEC_GETPARAMS98(fd sock_nl_generic, msg ptr[in, msghdr_802_15_4_MAC_auto[IEEE802154_LLSEC_GETPARAMS, ieee802154_policy$auto_nl802154]], f flags[send_flags]) (automatic)
sendmsg$auto_IEEE802154_LLSEC_LIST_DEV99(fd sock_nl_generic, msg ptr[in, msghdr_802_15_4_MAC_auto[IEEE802154_LLSEC_LIST_DEV, ieee802154_policy$auto_nl802154]], f flags[send_flags]) (automatic)
sendmsg$auto_IEEE802154_LLSEC_LIST_DEVKEY100(fd sock_nl_generic, msg ptr[in, msghdr_802_15_4_MAC_auto[IEEE802154_LLSEC_LIST_DEVKEY, ieee802154_policy$auto_nl802154]], f flags[send_flags]) (automatic)
sendmsg$auto_IEEE802154_LLSEC_LIST_KEY101(fd sock_nl_generic, msg ptr[in, msghdr_802_15_4_MAC_auto[IEEE802154_LLSEC_LIST_KEY, ieee802154_policy$auto_nl802154]], f flags[send_flags]) (automatic)
sendmsg$auto_IEEE802154_LLSEC_LIST_SECLEVEL102(fd sock_nl_generic, msg ptr[in, msghdr_802_15_4_MAC_auto[IEEE802154_LLSEC_LIST_SECLEVEL, ieee802154_policy$auto_nl802154]], f flags[send_flags]) (automatic)
sendmsg$auto_IEEE802154_LLSEC_SETPARAMS103(fd sock_nl_generic, msg ptr[in, msghdr_802_15_4_MAC_auto[IEEE802154_LLSEC_SETPARAMS, ieee802154_policy$auto_nl802154]], f flags[send_flags]) (automatic)
sendmsg$auto_IEEE802154_SCAN_REQ104(fd sock_nl_generic, msg ptr[in, msghdr_802_15_4_MAC_auto[IEEE802154_SCAN_REQ, ieee802154_policy$auto_nl802154]], f flags[send_flags]) (automatic)
sendmsg$auto_IEEE802154_SET_MACPARAMS105(fd sock_nl_generic, msg ptr[in, msghdr_802_15_4_MAC_auto[IEEE802154_SET_MACPARAMS, ieee802154_policy$auto_nl802154]], f flags[send_flags]) (automatic)
sendmsg$auto_IEEE802154_START_REQ106(fd sock_nl_generic, msg ptr[in, msghdr_802_15_4_MAC_auto[IEEE802154_START_REQ, ieee802154_policy$auto_nl802154]], f flags[send_flags]) (automatic)
sendmsg$auto_ILA_CMD_ADD107(fd sock_nl_generic, msg ptr[in, msghdr_ila_auto[ILA_CMD_ADD, ila_nl_policy$auto_ila_main]], f flags[send_flags]) (automatic)
sendmsg$auto_ILA_CMD_DEL108(fd sock_nl_generic, msg ptr[in, msghdr_ila_auto[ILA_CMD_DEL, ila_nl_policy$auto_ila_main]], f flags[send_flags]) (automatic)
sendmsg$auto_ILA_CMD_FLUSH109(fd sock_nl_generic, msg ptr[in, msghdr_ila_auto[ILA_CMD_FLUSH, ila_nl_policy$auto_ila_main]], f flags[send_flags]) (automatic)
sendmsg$auto_ILA_CMD_GET110(fd sock_nl_generic, msg ptr[in, msghdr_ila_auto[ILA_CMD_GET, ila_nl_policy$auto_ila_main]], f flags[send_flags]) (automatic)
sendmsg$auto_IOAM6_CMD_ADD_NAMESPACE111(fd sock_nl_generic, msg ptr[in, msghdr_IOAM6_auto[IOAM6_CMD_ADD_NAMESPACE, ioam6_genl_policy_addns$auto_ioam6]], f flags[send_flags]) (automatic)
sendmsg$auto_IOAM6_CMD_ADD_SCHEMA112(fd sock_nl_generic, msg ptr[in, msghdr_IOAM6_auto[IOAM6_CMD_ADD_SCHEMA, ioam6_genl_policy_addsc$auto_ioam6]], f flags[send_flags]) (automatic)
sendmsg$auto_IOAM6_CMD_DEL_NAMESPACE113(fd sock_nl_generic, msg ptr[in, msghdr_IOAM6_auto[IOAM6_CMD_DEL_NAMESPACE, ioam6_genl_policy_delns$auto_ioam6]], f flags[send_flags]) (automatic)
sendmsg$auto_IOAM6_CMD_DEL_SCHEMA114(fd sock_nl_generic, msg ptr[in, msghdr_IOAM6_auto[IOAM6_CMD_DEL_SCHEMA, ioam6_genl_policy_delsc$auto_ioam6]], f flags[send_flags]) (automatic)
sendmsg$auto_IOAM6_CMD_NS_SET_SCHEMA115(fd sock_nl_generic, msg ptr[in, msghdr_IOAM6_auto[IOAM6_CMD_NS_SET_SCHEMA, ioam6_genl_policy_ns_sc$auto_ioam6]], f flags[send_flags]) (automatic)
sendmsg$auto_IPVS_CMD_DEL_DAEMON116(fd sock_nl_generic, msg ptr[in, msghdr_IPVS_auto[IPVS_CMD_DEL_DAEMON, ip_vs_cmd_policy$auto_ip_vs_ctl]], f flags[send_flags]) (automatic)
sendmsg$auto_IPVS_CMD_DEL_DEST117(fd sock_nl_generic, msg ptr[in, msghdr_IPVS_auto[IPVS_CMD_DEL_DEST, ip_vs_cmd_policy$auto_ip_vs_ctl]], f flags[send_flags]) (automatic)
sendmsg$auto_IPVS_CMD_DEL_SERVICE118(fd sock_nl_generic, msg ptr[in, msghdr_IPVS_auto[IPVS_CMD_DEL_SERVICE, ip_vs_cmd_policy$auto_ip_vs_ctl]], f flags[send_flags]) (automatic)
sendmsg$auto_IPVS_CMD_FLUSH119(fd sock_nl_generic, msg ptr[in, msghdr_IPVS_auto[IPVS_CMD_FLUSH, ip_vs_cmd_policy$auto_ip_vs_ctl]], f flags[send_flags]) (automatic)
sendmsg$auto_IPVS_CMD_GET_CONFIG120(fd sock_nl_generic, msg ptr[in, msghdr_IPVS_auto[IPVS_CMD_GET_CONFIG, ip_vs_cmd_policy$auto_ip_vs_ctl]], f flags[send_flags]) (automatic)
sendmsg$auto_IPVS_CMD_GET_DAEMON121(fd sock_nl_generic, msg ptr[in, msghdr_IPVS_auto[IPVS_CMD_GET_DAEMON, ip_vs_cmd_policy$auto_ip_vs_ctl]], f flags[send_flags]) (automatic)
sendmsg$auto_IPVS_CMD_GET_DEST122(fd sock_nl_generic, msg ptr[in, msghdr_IPVS_auto[IPVS_CMD_GET_DEST, ip_vs_cmd_policy$auto_ip_vs_ctl]], f flags[send_flags]) (automatic)
sendmsg$auto_IPVS_CMD_GET_INFO123(fd sock_nl_generic, msg ptr[in, msghdr_IPVS_auto[IPVS_CMD_GET_INFO, ip_vs_cmd_policy$auto_ip_vs_ctl]], f flags[send_flags]) (automatic)
sendmsg$auto_IPVS_CMD_GET_SERVICE124(fd sock_nl_generic, msg ptr[in, msghdr_IPVS_auto[IPVS_CMD_GET_SERVICE, ip_vs_cmd_policy$auto_ip_vs_ctl]], f flags[send_flags]) (automatic)
sendmsg$auto_IPVS_CMD_NEW_DAEMON125(fd sock_nl_generic, msg ptr[in, msghdr_IPVS_auto[IPVS_CMD_NEW_DAEMON, ip_vs_cmd_policy$auto_ip_vs_ctl]], f flags[send_flags]) (automatic)
sendmsg$auto_IPVS_CMD_NEW_DEST126(fd sock_nl_generic, msg ptr[in, msghdr_IPVS_auto[IPVS_CMD_NEW_DEST, ip_vs_cmd_policy$auto_ip_vs_ctl]], f flags[send_flags]) (automatic)
sendmsg$auto_IPVS_CMD_NEW_SERVICE127(fd sock_nl_generic, msg ptr[in, msghdr_IPVS_auto[IPVS_CMD_NEW_SERVICE, ip_vs_cmd_policy$auto_ip_vs_ctl]], f flags[send_flags]) (automatic)
sendmsg$auto_IPVS_CMD_SET_CONFIG128(fd sock_nl_generic, msg ptr[in, msghdr_IPVS_auto[IPVS_CMD_SET_CONFIG, ip_vs_cmd_policy$auto_ip_vs_ctl]], f flags[send_flags]) (automatic)
sendmsg$auto_IPVS_CMD_SET_DEST129(fd sock_nl_generic, msg ptr[in, msghdr_IPVS_auto[IPVS_CMD_SET_DEST, ip_vs_cmd_policy$auto_ip_vs_ctl]], f flags[send_flags]) (automatic)
sendmsg$auto_IPVS_CMD_SET_SERVICE130(fd sock_nl_generic, msg ptr[in, msghdr_IPVS_auto[IPVS_CMD_SET_SERVICE, ip_vs_cmd_policy$auto_ip_vs_ctl]], f flags[send_flags]) (automatic)
sendmsg$auto_IPVS_CMD_ZERO131(fd sock_nl_generic, msg ptr[in, msghdr_IPVS_auto[IPVS_CMD_ZERO, ip_vs_cmd_policy$auto_ip_vs_ctl]], f flags[send_flags]) (automatic)
sendmsg$auto_L2TP_CMD_NOOP132(fd sock_nl_generic, msg ptr[in, msghdr_l2tp_auto[L2TP_CMD_NOOP, l2tp_nl_policy$auto_l2tp_netlink]], f flags[send_flags]) (automatic)
sendmsg$auto_L2TP_CMD_SESSION_CREATE133(fd sock_nl_generic, msg ptr[in, msghdr_l2tp_auto[L2TP_CMD_SESSION_CREATE, l2tp_nl_policy$auto_l2tp_netlink]], f flags[send_flags]) (automatic)
sendmsg$auto_L2TP_CMD_SESSION_DELETE134(fd sock_nl_generic, msg ptr[in, msghdr_l2tp_auto[L2TP_CMD_SESSION_DELETE, l2tp_nl_policy$auto_l2tp_netlink]], f flags[send_flags]) (automatic)
sendmsg$auto_L2TP_CMD_SESSION_GET135(fd sock_nl_generic, msg ptr[in, msghdr_l2tp_auto[L2TP_CMD_SESSION_GET, l2tp_nl_policy$auto_l2tp_netlink]], f flags[send_flags]) (automatic)
sendmsg$auto_L2TP_CMD_SESSION_MODIFY136(fd sock_nl_generic, msg ptr[in, msghdr_l2tp_auto[L2TP_CMD_SESSION_MODIFY, l2tp_nl_policy$auto_l2tp_netlink]], f flags[send_flags]) (automatic)
sendmsg$auto_L2TP_CMD_TUNNEL_CREATE137(fd sock_nl_generic, msg ptr[in, msghdr_l2tp_auto[L2TP_CMD_TUNNEL_CREATE, l2tp_nl_policy$auto_l2tp_netlink]], f flags[send_flags]) (automatic)
sendmsg$auto_L2TP_CMD_TUNNEL_DELETE138(fd sock_nl_generic, msg ptr[in, msghdr_l2tp_auto[L2TP_CMD_TUNNEL_DELETE, l2tp_nl_policy$auto_l2tp_netlink]], f flags[send_flags]) (automatic)
sendmsg$auto_L2TP_CMD_TUNNEL_GET139(fd sock_nl_generic, msg ptr[in, msghdr_l2tp_auto[L2TP_CMD_TUNNEL_GET, l2tp_nl_policy$auto_l2tp_netlink]], f flags[send_flags]) (automatic)
sendmsg$auto_L2TP_CMD_TUNNEL_MODIFY140(fd sock_nl_generic, msg ptr[in, msghdr_l2tp_auto[L2TP_CMD_TUNNEL_MODIFY, l2tp_nl_policy$auto_l2tp_netlink]], f flags[send_flags]) (automatic)
sendmsg$auto_MAC802154_HWSIM_CMD_DEL_EDGE141(fd sock_nl_generic, msg ptr[in, msghdr_MAC802154_HWSIM_auto[MAC802154_HWSIM_CMD_DEL_EDGE, hwsim_genl_policy$auto_mac802154_hwsim]], f flags[send_flags]) (automatic)
sendmsg$auto_MAC802154_HWSIM_CMD_DEL_RADIO142(fd sock_nl_generic, msg ptr[in, msghdr_MAC802154_HWSIM_auto[MAC802154_HWSIM_CMD_DEL_RADIO, hwsim_genl_policy$auto_mac802154_hwsim]], f flags[send_flags]) (automatic)
sendmsg$auto_MAC802154_HWSIM_CMD_GET_RADIO143(fd sock_nl_generic, msg ptr[in, msghdr_MAC802154_HWSIM_auto[MAC802154_HWSIM_CMD_GET_RADIO, hwsim_genl_policy$auto_mac802154_hwsim]], f flags[send_flags]) (automatic)
sendmsg$auto_MAC802154_HWSIM_CMD_NEW_EDGE144(fd sock_nl_generic, msg ptr[in, msghdr_MAC802154_HWSIM_auto[MAC802154_HWSIM_CMD_NEW_EDGE, hwsim_genl_policy$auto_mac802154_hwsim]], f flags[send_flags]) (automatic)
sendmsg$auto_MAC802154_HWSIM_CMD_NEW_RADIO145(fd sock_nl_generic, msg ptr[in, msghdr_MAC802154_HWSIM_auto[MAC802154_HWSIM_CMD_NEW_RADIO, hwsim_genl_policy$auto_mac802154_hwsim]], f flags[send_flags]) (automatic)
sendmsg$auto_MAC802154_HWSIM_CMD_SET_EDGE146(fd sock_nl_generic, msg ptr[in, msghdr_MAC802154_HWSIM_auto[MAC802154_HWSIM_CMD_SET_EDGE, hwsim_genl_policy$auto_mac802154_hwsim]], f flags[send_flags]) (automatic)
sendmsg$auto_MACSEC_CMD_ADD_RXSA147(fd sock_nl_generic, msg ptr[in, msghdr_macsec_auto[MACSEC_CMD_ADD_RXSA, macsec_genl_policy$auto_macsec]], f flags[send_flags]) (automatic)
sendmsg$auto_MACSEC_CMD_ADD_RXSC148(fd sock_nl_generic, msg ptr[in, msghdr_macsec_auto[MACSEC_CMD_ADD_RXSC, macsec_genl_policy$auto_macsec]], f flags[send_flags]) (automatic)
sendmsg$auto_MACSEC_CMD_ADD_TXSA149(fd sock_nl_generic, msg ptr[in, msghdr_macsec_auto[MACSEC_CMD_ADD_TXSA, macsec_genl_policy$auto_macsec]], f flags[send_flags]) (automatic)
sendmsg$auto_MACSEC_CMD_DEL_RXSA150(fd sock_nl_generic, msg ptr[in, msghdr_macsec_auto[MACSEC_CMD_DEL_RXSA, macsec_genl_policy$auto_macsec]], f flags[send_flags]) (automatic)
sendmsg$auto_MACSEC_CMD_DEL_RXSC151(fd sock_nl_generic, msg ptr[in, msghdr_macsec_auto[MACSEC_CMD_DEL_RXSC, macsec_genl_policy$auto_macsec]], f flags[send_flags]) (automatic)
sendmsg$auto_MACSEC_CMD_DEL_TXSA152(fd sock_nl_generic, msg ptr[in, msghdr_macsec_auto[MACSEC_CMD_DEL_TXSA, macsec_genl_policy$auto_macsec]], f flags[send_flags]) (automatic)
sendmsg$auto_MACSEC_CMD_GET_TXSC153(fd sock_nl_generic, msg ptr[in, msghdr_macsec_auto[MACSEC_CMD_GET_TXSC, macsec_genl_policy$auto_macsec]], f flags[send_flags]) (automatic)
sendmsg$auto_MACSEC_CMD_UPD_OFFLOAD154(fd sock_nl_generic, msg ptr[in, msghdr_macsec_auto[MACSEC_CMD_UPD_OFFLOAD, macsec_genl_policy$auto_macsec]], f flags[send_flags]) (automatic)
sendmsg$auto_MACSEC_CMD_UPD_RXSA155(fd sock_nl_generic, msg ptr[in, msghdr_macsec_auto[MACSEC_CMD_UPD_RXSA, macsec_genl_policy$auto_macsec]], f flags[send_flags]) (automatic)
sendmsg$auto_MACSEC_CMD_UPD_RXSC156(fd sock_nl_generic, msg ptr[in, msghdr_macsec_auto[MACSEC_CMD_UPD_RXSC, macsec_genl_policy$auto_macsec]], f flags[send_flags]) (automatic)
sendmsg$auto_MACSEC_CMD_UPD_TXSA157(fd sock_nl_generic, msg ptr[in, msghdr_macsec_auto[MACSEC_CMD_UPD_TXSA, macsec_genl_policy$auto_macsec]], f flags[send_flags]) (automatic)
sendmsg$auto_NBD_CMD_CONNECT158(fd sock_nl_generic, msg ptr[in, msghdr_nbd_auto[NBD_CMD_CONNECT, nbd_attr_policy$auto_nbd]], f flags[send_flags]) (automatic)
sendmsg$auto_NBD_CMD_DISCONNECT159(fd sock_nl_generic, msg ptr[in, msghdr_nbd_auto[NBD_CMD_DISCONNECT, nbd_attr_policy$auto_nbd]], f flags[send_flags]) (automatic)
sendmsg$auto_NBD_CMD_RECONFIGURE160(fd sock_nl_generic, msg ptr[in, msghdr_nbd_auto[NBD_CMD_RECONFIGURE, nbd_attr_policy$auto_nbd]], f flags[send_flags]) (automatic)
sendmsg$auto_NBD_CMD_STATUS161(fd sock_nl_generic, msg ptr[in, msghdr_nbd_auto[NBD_CMD_STATUS, nbd_attr_policy$auto_nbd]], f flags[send_flags]) (automatic)
sendmsg$auto_NCSI_CMD_CLEAR_INTERFACE162(fd sock_nl_generic, msg ptr[in, msghdr_NCSI_auto[NCSI_CMD_CLEAR_INTERFACE, ncsi_genl_policy$auto_ncsi_netlink]], f flags[send_flags]) (automatic)
sendmsg$auto_NCSI_CMD_PKG_INFO163(fd sock_nl_generic, msg ptr[in, msghdr_NCSI_auto[NCSI_CMD_PKG_INFO, ncsi_genl_policy$auto_ncsi_netlink]], f flags[send_flags]) (automatic)
sendmsg$auto_NCSI_CMD_SEND_CMD164(fd sock_nl_generic, msg ptr[in, msghdr_NCSI_auto[NCSI_CMD_SEND_CMD, ncsi_genl_policy$auto_ncsi_netlink]], f flags[send_flags]) (automatic)
sendmsg$auto_NCSI_CMD_SET_CHANNEL_MASK165(fd sock_nl_generic, msg ptr[in, msghdr_NCSI_auto[NCSI_CMD_SET_CHANNEL_MASK, ncsi_genl_policy$auto_ncsi_netlink]], f flags[send_flags]) (automatic)
sendmsg$auto_NCSI_CMD_SET_INTERFACE166(fd sock_nl_generic, msg ptr[in, msghdr_NCSI_auto[NCSI_CMD_SET_INTERFACE, ncsi_genl_policy$auto_ncsi_netlink]], f flags[send_flags]) (automatic)
sendmsg$auto_NCSI_CMD_SET_PACKAGE_MASK167(fd sock_nl_generic, msg ptr[in, msghdr_NCSI_auto[NCSI_CMD_SET_PACKAGE_MASK, ncsi_genl_policy$auto_ncsi_netlink]], f flags[send_flags]) (automatic)
sendmsg$auto_NETDEV_CMD_DEV_GET168(fd sock_nl_generic, msg ptr[in, msghdr_netdev_auto[NETDEV_CMD_DEV_GET, netdev_dev_get_nl_policy$auto_netdev_genl_gen]], f flags[send_flags]) (automatic)
sendmsg$auto_NETDEV_CMD_NAPI_GET169(fd sock_nl_generic, msg ptr[in, msghdr_netdev_auto[NETDEV_CMD_NAPI_GET, netdev_napi_get_do_nl_policy$auto_netdev_genl_gen]], f flags[send_flags]) (automatic)
sendmsg$auto_NETDEV_CMD_NAPI_GET170(fd sock_nl_generic, msg ptr[in, msghdr_netdev_auto[NETDEV_CMD_NAPI_GET, netdev_napi_get_dump_nl_policy$auto_netdev_genl_gen]], f flags[send_flags]) (automatic)
sendmsg$auto_NETDEV_CMD_PAGE_POOL_GET171(fd sock_nl_generic, msg ptr[in, msghdr_netdev_auto[NETDEV_CMD_PAGE_POOL_GET, netdev_page_pool_get_nl_policy$auto_netdev_genl_gen]], f flags[send_flags]) (automatic)
sendmsg$auto_NETDEV_CMD_QSTATS_GET172(fd sock_nl_generic, msg ptr[in, msghdr_netdev_auto[NETDEV_CMD_QSTATS_GET, netdev_qstats_get_nl_policy$auto_netdev_genl_gen]], f flags[send_flags]) (automatic)
sendmsg$auto_NETDEV_CMD_QUEUE_GET173(fd sock_nl_generic, msg ptr[in, msghdr_netdev_auto[NETDEV_CMD_QUEUE_GET, netdev_queue_get_do_nl_policy$auto_netdev_genl_gen]], f flags[send_flags]) (automatic)
sendmsg$auto_NETDEV_CMD_QUEUE_GET174(fd sock_nl_generic, msg ptr[in, msghdr_netdev_auto[NETDEV_CMD_QUEUE_GET, netdev_queue_get_dump_nl_policy$auto_netdev_genl_gen]], f flags[send_flags]) (automatic)
sendmsg$auto_NET_DM_CMD_CONFIG175(fd sock_nl_generic, msg ptr[in, msghdr_NET_DM_auto[NET_DM_CMD_CONFIG, net_dm_nl_policy$auto_drop_monitor]], f flags[send_flags]) (automatic)
sendmsg$auto_NET_DM_CMD_CONFIG_GET176(fd sock_nl_generic, msg ptr[in, msghdr_NET_DM_auto[NET_DM_CMD_CONFIG_GET, net_dm_nl_policy$auto_drop_monitor]], f flags[send_flags]) (automatic)
sendmsg$auto_NET_DM_CMD_START177(fd sock_nl_generic, msg ptr[in, msghdr_NET_DM_auto[NET_DM_CMD_START, net_dm_nl_policy$auto_drop_monitor]], f flags[send_flags]) (automatic)
sendmsg$auto_NET_DM_CMD_STATS_GET178(fd sock_nl_generic, msg ptr[in, msghdr_NET_DM_auto[NET_DM_CMD_STATS_GET, net_dm_nl_policy$auto_drop_monitor]], f flags[send_flags]) (automatic)
sendmsg$auto_NET_DM_CMD_STOP179(fd sock_nl_generic, msg ptr[in, msghdr_NET_DM_auto[NET_DM_CMD_STOP, net_dm_nl_policy$auto_drop_monitor]], f flags[send_flags]) (automatic)
sendmsg$auto_NFC_CMD_ACTIVATE_TARGET180(fd sock_nl_generic, msg ptr[in, msghdr_nfc_auto[NFC_CMD_ACTIVATE_TARGET, nfc_genl_policy$auto_netlink]], f flags[send_flags]) (automatic)
sendmsg$auto_NFC_CMD_DEACTIVATE_TARGET181(fd sock_nl_generic, msg ptr[in, msghdr_nfc_auto[NFC_CMD_DEACTIVATE_TARGET, nfc_genl_policy$auto_netlink]], f flags[send_flags]) (automatic)
sendmsg$auto_NFC_CMD_DEP_LINK_DOWN182(fd sock_nl_generic, msg ptr[in, msghdr_nfc_auto[NFC_CMD_DEP_LINK_DOWN, nfc_genl_policy$auto_netlink]], f flags[send_flags]) (automatic)
sendmsg$auto_NFC_CMD_DEP_LINK_UP183(fd sock_nl_generic, msg ptr[in, msghdr_nfc_auto[NFC_CMD_DEP_LINK_UP, nfc_genl_policy$auto_netlink]], f flags[send_flags]) (automatic)
sendmsg$auto_NFC_CMD_DEV_DOWN184(fd sock_nl_generic, msg ptr[in, msghdr_nfc_auto[NFC_CMD_DEV_DOWN, nfc_genl_policy$auto_netlink]], f flags[send_flags]) (automatic)
sendmsg$auto_NFC_CMD_DEV_UP185(fd sock_nl_generic, msg ptr[in, msghdr_nfc_auto[NFC_CMD_DEV_UP, nfc_genl_policy$auto_netlink]], f flags[send_flags]) (automatic)
sendmsg$auto_NFC_CMD_DISABLE_SE186(fd sock_nl_generic, msg ptr[in, msghdr_nfc_auto[NFC_CMD_DISABLE_SE, nfc_genl_policy$auto_netlink]], f flags[send_flags]) (automatic)
sendmsg$auto_NFC_CMD_ENABLE_SE187(fd sock_nl_generic, msg ptr[in, msghdr_nfc_auto[NFC_CMD_ENABLE_SE, nfc_genl_policy$auto_netlink]], f flags[send_flags]) (automatic)
sendmsg$auto_NFC_CMD_FW_DOWNLOAD188(fd sock_nl_generic, msg ptr[in, msghdr_nfc_auto[NFC_CMD_FW_DOWNLOAD, nfc_genl_policy$auto_netlink]], f flags[send_flags]) (automatic)
sendmsg$auto_NFC_CMD_GET_DEVICE189(fd sock_nl_generic, msg ptr[in, msghdr_nfc_auto[NFC_CMD_GET_DEVICE, nfc_genl_policy$auto_netlink]], f flags[send_flags]) (automatic)
sendmsg$auto_NFC_CMD_GET_SE190(fd sock_nl_generic, msg ptr[in, msghdr_nfc_auto[NFC_CMD_GET_SE, nfc_genl_policy$auto_netlink]], f flags[send_flags]) (automatic)
sendmsg$auto_NFC_CMD_GET_TARGET191(fd sock_nl_generic, msg ptr[in, msghdr_nfc_auto[NFC_CMD_GET_TARGET, nfc_genl_policy$auto_netlink]], f flags[send_flags]) (automatic)
sendmsg$auto_NFC_CMD_LLC_GET_PARAMS192(fd sock_nl_generic, msg ptr[in, msghdr_nfc_auto[NFC_CMD_LLC_GET_PARAMS, nfc_genl_policy$auto_netlink]], f flags[send_flags]) (automatic)
sendmsg$auto_NFC_CMD_LLC_SDREQ193(fd sock_nl_generic, msg ptr[in, msghdr_nfc_auto[NFC_CMD_LLC_SDREQ, nfc_genl_policy$auto_netlink]], f flags[send_flags]) (automatic)
sendmsg$auto_NFC_CMD_LLC_SET_PARAMS194(fd sock_nl_generic, msg ptr[in, msghdr_nfc_auto[NFC_CMD_LLC_SET_PARAMS, nfc_genl_policy$auto_netlink]], f flags[send_flags]) (automatic)
sendmsg$auto_NFC_CMD_SE_IO195(fd sock_nl_generic, msg ptr[in, msghdr_nfc_auto[NFC_CMD_SE_IO, nfc_genl_policy$auto_netlink]], f flags[send_flags]) (automatic)
sendmsg$auto_NFC_CMD_START_POLL196(fd sock_nl_generic, msg ptr[in, msghdr_nfc_auto[NFC_CMD_START_POLL, nfc_genl_policy$auto_netlink]], f flags[send_flags]) (automatic)
sendmsg$auto_NFC_CMD_STOP_POLL197(fd sock_nl_generic, msg ptr[in, msghdr_nfc_auto[NFC_CMD_STOP_POLL, nfc_genl_policy$auto_netlink]], f flags[send_flags]) (automatic)
sendmsg$auto_NFC_CMD_VENDOR198(fd sock_nl_generic, msg ptr[in, msghdr_nfc_auto[NFC_CMD_VENDOR, nfc_genl_policy$auto_netlink]], f flags[send_flags]) (automatic)
sendmsg$auto_NFSD_CMD_LISTENER_SET199(fd sock_nl_generic, msg ptr[in, msghdr_nfsd_auto[NFSD_CMD_LISTENER_SET, nfsd_listener_set_nl_policy$auto_netlink]], f flags[send_flags]) (automatic)
sendmsg$auto_NFSD_CMD_POOL_MODE_SET200(fd sock_nl_generic, msg ptr[in, msghdr_nfsd_auto[NFSD_CMD_POOL_MODE_SET, nfsd_pool_mode_set_nl_policy$auto_netlink]], f flags[send_flags]) (automatic)
sendmsg$auto_NFSD_CMD_THREADS_SET201(fd sock_nl_generic, msg ptr[in, msghdr_nfsd_auto[NFSD_CMD_THREADS_SET, nfsd_threads_set_nl_policy$auto_netlink]], f flags[send_flags]) (automatic)
sendmsg$auto_NFSD_CMD_VERSION_SET202(fd sock_nl_generic, msg ptr[in, msghdr_nfsd_auto[NFSD_CMD_VERSION_SET, nfsd_version_set_nl_policy$auto_netlink]], f flags[send_flags]) (automatic)
sendmsg$auto_NL80211_CMD_ABORT_SCAN203(fd sock_nl_generic, msg ptr[in, msghdr_nl80211_auto[NL80211_CMD_ABORT_SCAN, nl80211_policy$auto_nl80211]], f flags[send_flags]) (automatic)
sendmsg$auto_NL80211_CMD_ADD_LINK204(fd sock_nl_generic, msg ptr[in, msghdr_nl80211_auto[NL80211_CMD_ADD_LINK, nl80211_policy$auto_nl80211]], f flags[send_flags]) (automatic)
sendmsg$auto_NL80211_CMD_ADD_LINK_STA205(fd sock_nl_generic, msg ptr[in, msghdr_nl80211_auto[NL80211_CMD_ADD_LINK_STA, nl80211_policy$auto_nl80211]], f flags[send_flags]) (automatic)
sendmsg$auto_NL80211_CMD_ADD_NAN_FUNCTION206(fd sock_nl_generic, msg ptr[in, msghdr_nl80211_auto[NL80211_CMD_ADD_NAN_FUNCTION, nl80211_policy$auto_nl80211]], f flags[send_flags]) (automatic)
sendmsg$auto_NL80211_CMD_ADD_TX_TS207(fd sock_nl_generic, msg ptr[in, msghdr_nl80211_auto[NL80211_CMD_ADD_TX_TS, nl80211_policy$auto_nl80211]], f flags[send_flags]) (automatic)
sendmsg$auto_NL80211_CMD_ASSOCIATE208(fd sock_nl_generic, msg ptr[in, msghdr_nl80211_auto[NL80211_CMD_ASSOCIATE, nl80211_policy$auto_nl80211]], f flags[send_flags]) (automatic)
sendmsg$auto_NL80211_CMD_AUTHENTICATE209(fd sock_nl_generic, msg ptr[in, msghdr_nl80211_auto[NL80211_CMD_AUTHENTICATE, nl80211_policy$auto_nl80211]], f flags[send_flags]) (automatic)
sendmsg$auto_NL80211_CMD_CANCEL_REMAIN_ON_CHANNEL210(fd sock_nl_generic, msg ptr[in, msghdr_nl80211_auto[NL80211_CMD_CANCEL_REMAIN_ON_CHANNEL, nl80211_policy$auto_nl80211]], f flags[send_flags]) (automatic)
sendmsg$auto_NL80211_CMD_CHANGE_NAN_CONFIG211(fd sock_nl_generic, msg ptr[in, msghdr_nl80211_auto[NL80211_CMD_CHANGE_NAN_CONFIG, nl80211_policy$auto_nl80211]], f flags[send_flags]) (automatic)
sendmsg$auto_NL80211_CMD_CHANNEL_SWITCH212(fd sock_nl_generic, msg ptr[in, msghdr_nl80211_auto[NL80211_CMD_CHANNEL_SWITCH, nl80211_policy$auto_nl80211]], f flags[send_flags]) (automatic)
sendmsg$auto_NL80211_CMD_COLOR_CHANGE_REQUEST213(fd sock_nl_generic, msg ptr[in, msghdr_nl80211_auto[NL80211_CMD_COLOR_CHANGE_REQUEST, nl80211_policy$auto_nl80211]], f flags[send_flags]) (automatic)
sendmsg$auto_NL80211_CMD_CONNECT214(fd sock_nl_generic, msg ptr[in, msghdr_nl80211_auto[NL80211_CMD_CONNECT, nl80211_policy$auto_nl80211]], f flags[send_flags]) (automatic)
sendmsg$auto_NL80211_CMD_CONTROL_PORT_FRAME215(fd sock_nl_generic, msg ptr[in, msghdr_nl80211_auto[NL80211_CMD_CONTROL_PORT_FRAME, nl80211_policy$auto_nl80211]], f flags[send_flags]) (automatic)
sendmsg$auto_NL80211_CMD_CRIT_PROTOCOL_START216(fd sock_nl_generic, msg ptr[in, msghdr_nl80211_auto[NL80211_CMD_CRIT_PROTOCOL_START, nl80211_policy$auto_nl80211]], f flags[send_flags]) (automatic)
sendmsg$auto_NL80211_CMD_CRIT_PROTOCOL_STOP217(fd sock_nl_generic, msg ptr[in, msghdr_nl80211_auto[NL80211_CMD_CRIT_PROTOCOL_STOP, nl80211_policy$auto_nl80211]], f flags[send_flags]) (automatic)
sendmsg$auto_NL80211_CMD_DEAUTHENTICATE218(fd sock_nl_generic, msg ptr[in, msghdr_nl80211_auto[NL80211_CMD_DEAUTHENTICATE, nl80211_policy$auto_nl80211]], f flags[send_flags]) (automatic)
sendmsg$auto_NL80211_CMD_DEL_INTERFACE219(fd sock_nl_generic, msg ptr[in, msghdr_nl80211_auto[NL80211_CMD_DEL_INTERFACE, nl80211_policy$auto_nl80211]], f flags[send_flags]) (automatic)
sendmsg$auto_NL80211_CMD_DEL_KEY220(fd sock_nl_generic, msg ptr[in, msghdr_nl80211_auto[NL80211_CMD_DEL_KEY, nl80211_policy$auto_nl80211]], f flags[send_flags]) (automatic)
sendmsg$auto_NL80211_CMD_DEL_MPATH221(fd sock_nl_generic, msg ptr[in, msghdr_nl80211_auto[NL80211_CMD_DEL_MPATH, nl80211_policy$auto_nl80211]], f flags[send_flags]) (automatic)
sendmsg$auto_NL80211_CMD_DEL_NAN_FUNCTION222(fd sock_nl_generic, msg ptr[in, msghdr_nl80211_auto[NL80211_CMD_DEL_NAN_FUNCTION, nl80211_policy$auto_nl80211]], f flags[send_flags]) (automatic)
sendmsg$auto_NL80211_CMD_DEL_PMK223(fd sock_nl_generic, msg ptr[in, msghdr_nl80211_auto[NL80211_CMD_DEL_PMK, nl80211_policy$auto_nl80211]], f flags[send_flags]) (automatic)
sendmsg$auto_NL80211_CMD_DEL_PMKSA224(fd sock_nl_generic, msg ptr[in, msghdr_nl80211_auto[NL80211_CMD_DEL_PMKSA, nl80211_policy$auto_nl80211]], f flags[send_flags]) (automatic)
sendmsg$auto_NL80211_CMD_DEL_STATION225(fd sock_nl_generic, msg ptr[in, msghdr_nl80211_auto[NL80211_CMD_DEL_STATION, nl80211_policy$auto_nl80211]], f flags[send_flags]) (automatic)
sendmsg$auto_NL80211_CMD_DEL_TX_TS226(fd sock_nl_generic, msg ptr[in, msghdr_nl80211_auto[NL80211_CMD_DEL_TX_TS, nl80211_policy$auto_nl80211]], f flags[send_flags]) (automatic)
sendmsg$auto_NL80211_CMD_DISASSOCIATE227(fd sock_nl_generic, msg ptr[in, msghdr_nl80211_auto[NL80211_CMD_DISASSOCIATE, nl80211_policy$auto_nl80211]], f flags[send_flags]) (automatic)
sendmsg$auto_NL80211_CMD_DISCONNECT228(fd sock_nl_generic, msg ptr[in, msghdr_nl80211_auto[NL80211_CMD_DISCONNECT, nl80211_policy$auto_nl80211]], f flags[send_flags]) (automatic)
sendmsg$auto_NL80211_CMD_EXTERNAL_AUTH229(fd sock_nl_generic, msg ptr[in, msghdr_nl80211_auto[NL80211_CMD_EXTERNAL_AUTH, nl80211_policy$auto_nl80211]], f flags[send_flags]) (automatic)
sendmsg$auto_NL80211_CMD_FLUSH_PMKSA230(fd sock_nl_generic, msg ptr[in, msghdr_nl80211_auto[NL80211_CMD_FLUSH_PMKSA, nl80211_policy$auto_nl80211]], f flags[send_flags]) (automatic)
sendmsg$auto_NL80211_CMD_FRAME231(fd sock_nl_generic, msg ptr[in, msghdr_nl80211_auto[NL80211_CMD_FRAME, nl80211_policy$auto_nl80211]], f flags[send_flags]) (automatic)
sendmsg$auto_NL80211_CMD_FRAME_WAIT_CANCEL232(fd sock_nl_generic, msg ptr[in, msghdr_nl80211_auto[NL80211_CMD_FRAME_WAIT_CANCEL, nl80211_policy$auto_nl80211]], f flags[send_flags]) (automatic)
sendmsg$auto_NL80211_CMD_GET_COALESCE233(fd sock_nl_generic, msg ptr[in, msghdr_nl80211_auto[NL80211_CMD_GET_COALESCE, nl80211_policy$auto_nl80211]], f flags[send_flags]) (automatic)
sendmsg$auto_NL80211_CMD_GET_FTM_RESPONDER_STATS234(fd sock_nl_generic, msg ptr[in, msghdr_nl80211_auto[NL80211_CMD_GET_FTM_RESPONDER_STATS, nl80211_policy$auto_nl80211]], f flags[send_flags]) (automatic)
sendmsg$auto_NL80211_CMD_GET_INTERFACE235(fd sock_nl_generic, msg ptr[in, msghdr_nl80211_auto[NL80211_CMD_GET_INTERFACE, nl80211_policy$auto_nl80211]], f flags[send_flags]) (automatic)
sendmsg$auto_NL80211_CMD_GET_KEY236(fd sock_nl_generic, msg ptr[in, msghdr_nl80211_auto[NL80211_CMD_GET_KEY, nl80211_policy$auto_nl80211]], f flags[send_flags]) (automatic)
sendmsg$auto_NL80211_CMD_GET_MESH_CONFIG237(fd sock_nl_generic, msg ptr[in, msghdr_nl80211_auto[NL80211_CMD_GET_MESH_CONFIG, nl80211_policy$auto_nl80211]], f flags[send_flags]) (automatic)
sendmsg$auto_NL80211_CMD_GET_MPATH238(fd sock_nl_generic, msg ptr[in, msghdr_nl80211_auto[NL80211_CMD_GET_MPATH, nl80211_policy$auto_nl80211]], f flags[send_flags]) (automatic)
sendmsg$auto_NL80211_CMD_GET_MPP239(fd sock_nl_generic, msg ptr[in, msghdr_nl80211_auto[NL80211_CMD_GET_MPP, nl80211_policy$auto_nl80211]], f flags[send_flags]) (automatic)
sendmsg$auto_NL80211_CMD_GET_POWER_SAVE240(fd sock_nl_generic, msg ptr[in, msghdr_nl80211_auto[NL80211_CMD_GET_POWER_SAVE, nl80211_policy$auto_nl80211]], f flags[send_flags]) (automatic)
sendmsg$auto_NL80211_CMD_GET_PROTOCOL_FEATURES241(fd sock_nl_generic, msg ptr[in, msghdr_nl80211_auto[NL80211_CMD_GET_PROTOCOL_FEATURES, nl80211_policy$auto_nl80211]], f flags[send_flags]) (automatic)
sendmsg$auto_NL80211_CMD_GET_REG242(fd sock_nl_generic, msg ptr[in, msghdr_nl80211_auto[NL80211_CMD_GET_REG, nl80211_policy$auto_nl80211]], f flags[send_flags]) (automatic)
sendmsg$auto_NL80211_CMD_GET_SCAN243(fd sock_nl_generic, msg ptr[in, msghdr_nl80211_auto[NL80211_CMD_GET_SCAN, nl80211_policy$auto_nl80211]], f flags[send_flags]) (automatic)
sendmsg$auto_NL80211_CMD_GET_STATION244(fd sock_nl_generic, msg ptr[in, msghdr_nl80211_auto[NL80211_CMD_GET_STATION, nl80211_policy$auto_nl80211]], f flags[send_flags]) (automatic)
sendmsg$auto_NL80211_CMD_GET_SURVEY245(fd sock_nl_generic, msg ptr[in, msghdr_nl80211_auto[NL80211_CMD_GET_SURVEY, nl80211_policy$auto_nl80211]], f flags[send_flags]) (automatic)
sendmsg$auto_NL80211_CMD_GET_WIPHY246(fd sock_nl_generic, msg ptr[in, msghdr_nl80211_auto[NL80211_CMD_GET_WIPHY, nl80211_policy$auto_nl80211]], f flags[send_flags]) (automatic)
sendmsg$auto_NL80211_CMD_GET_WOWLAN247(fd sock_nl_generic, msg ptr[in, msghdr_nl80211_auto[NL80211_CMD_GET_WOWLAN, nl80211_policy$auto_nl80211]], f flags[send_flags]) (automatic)
sendmsg$auto_NL80211_CMD_JOIN_IBSS248(fd sock_nl_generic, msg ptr[in, msghdr_nl80211_auto[NL80211_CMD_JOIN_IBSS, nl80211_policy$auto_nl80211]], f flags[send_flags]) (automatic)
sendmsg$auto_NL80211_CMD_JOIN_MESH249(fd sock_nl_generic, msg ptr[in, msghdr_nl80211_auto[NL80211_CMD_JOIN_MESH, nl80211_policy$auto_nl80211]], f flags[send_flags]) (automatic)
sendmsg$auto_NL80211_CMD_JOIN_OCB250(fd sock_nl_generic, msg ptr[in, msghdr_nl80211_auto[NL80211_CMD_JOIN_OCB, nl80211_policy$auto_nl80211]], f flags[send_flags]) (automatic)
sendmsg$auto_NL80211_CMD_LEAVE_IBSS251(fd sock_nl_generic, msg ptr[in, msghdr_nl80211_auto[NL80211_CMD_LEAVE_IBSS, nl80211_policy$auto_nl80211]], f flags[send_flags]) (automatic)
sendmsg$auto_NL80211_CMD_LEAVE_MESH252(fd sock_nl_generic, msg ptr[in, msghdr_nl80211_auto[NL80211_CMD_LEAVE_MESH, nl80211_policy$auto_nl80211]], f flags[send_flags]) (automatic)
sendmsg$auto_NL80211_CMD_LEAVE_OCB253(fd sock_nl_generic, msg ptr[in, msghdr_nl80211_auto[NL80211_CMD_LEAVE_OCB, nl80211_policy$auto_nl80211]], f flags[send_flags]) (automatic)
sendmsg$auto_NL80211_CMD_MODIFY_LINK_STA254(fd sock_nl_generic, msg ptr[in, msghdr_nl80211_auto[NL80211_CMD_MODIFY_LINK_STA, nl80211_policy$auto_nl80211]], f flags[send_flags]) (automatic)
sendmsg$auto_NL80211_CMD_NEW_INTERFACE255(fd sock_nl_generic, msg ptr[in, msghdr_nl80211_auto[NL80211_CMD_NEW_INTERFACE, nl80211_policy$auto_nl80211]], f flags[send_flags]) (automatic)
sendmsg$auto_NL80211_CMD_NEW_KEY256(fd sock_nl_generic, msg ptr[in, msghdr_nl80211_auto[NL80211_CMD_NEW_KEY, nl80211_policy$auto_nl80211]], f flags[send_flags]) (automatic)
sendmsg$auto_NL80211_CMD_NEW_MPATH257(fd sock_nl_generic, msg ptr[in, msghdr_nl80211_auto[NL80211_CMD_NEW_MPATH, nl80211_policy$auto_nl80211]], f flags[send_flags]) (automatic)
sendmsg$auto_NL80211_CMD_NEW_STATION258(fd sock_nl_generic, msg ptr[in, msghdr_nl80211_auto[NL80211_CMD_NEW_STATION, nl80211_policy$auto_nl80211]], f flags[send_flags]) (automatic)
sendmsg$auto_NL80211_CMD_NOTIFY_RADAR259(fd sock_nl_generic, msg ptr[in, msghdr_nl80211_auto[NL80211_CMD_NOTIFY_RADAR, nl80211_policy$auto_nl80211]], f flags[send_flags]) (automatic)
sendmsg$auto_NL80211_CMD_PEER_MEASUREMENT_START260(fd sock_nl_generic, msg ptr[in, msghdr_nl80211_auto[NL80211_CMD_PEER_MEASUREMENT_START, nl80211_policy$auto_nl80211]], f flags[send_flags]) (automatic)
sendmsg$auto_NL80211_CMD_PROBE_CLIENT261(fd sock_nl_generic, msg ptr[in, msghdr_nl80211_auto[NL80211_CMD_PROBE_CLIENT, nl80211_policy$auto_nl80211]], f flags[send_flags]) (automatic)
sendmsg$auto_NL80211_CMD_PROBE_MESH_LINK262(fd sock_nl_generic, msg ptr[in, msghdr_nl80211_auto[NL80211_CMD_PROBE_MESH_LINK, nl80211_policy$auto_nl80211]], f flags[send_flags]) (automatic)
sendmsg$auto_NL80211_CMD_RADAR_DETECT263(fd sock_nl_generic, msg ptr[in, msghdr_nl80211_auto[NL80211_CMD_RADAR_DETECT, nl80211_policy$auto_nl80211]], f flags[send_flags]) (automatic)
sendmsg$auto_NL80211_CMD_REGISTER_BEACONS264(fd sock_nl_generic, msg ptr[in, msghdr_nl80211_auto[NL80211_CMD_REGISTER_BEACONS, nl80211_policy$auto_nl80211]], f flags[send_flags]) (automatic)
sendmsg$auto_NL80211_CMD_REGISTER_FRAME265(fd sock_nl_generic, msg ptr[in, msghdr_nl80211_auto[NL80211_CMD_REGISTER_FRAME, nl80211_policy$auto_nl80211]], f flags[send_flags]) (automatic)
sendmsg$auto_NL80211_CMD_RELOAD_REGDB266(fd sock_nl_generic, msg ptr[in, msghdr_nl80211_auto[NL80211_CMD_RELOAD_REGDB, nl80211_policy$auto_nl80211]], f flags[send_flags]) (automatic)
sendmsg$auto_NL80211_CMD_REMAIN_ON_CHANNEL267(fd sock_nl_generic, msg ptr[in, msghdr_nl80211_auto[NL80211_CMD_REMAIN_ON_CHANNEL, nl80211_policy$auto_nl80211]], f flags[send_flags]) (automatic)
sendmsg$auto_NL80211_CMD_REMOVE_LINK268(fd sock_nl_generic, msg ptr[in, msghdr_nl80211_auto[NL80211_CMD_REMOVE_LINK, nl80211_policy$auto_nl80211]], f flags[send_flags]) (automatic)
sendmsg$auto_NL80211_CMD_REMOVE_LINK_STA269(fd sock_nl_generic, msg ptr[in, msghdr_nl80211_auto[NL80211_CMD_REMOVE_LINK_STA, nl80211_policy$auto_nl80211]], f flags[send_flags]) (automatic)
sendmsg$auto_NL80211_CMD_REQ_SET_REG270(fd sock_nl_generic, msg ptr[in, msghdr_nl80211_auto[NL80211_CMD_REQ_SET_REG, nl80211_policy$auto_nl80211]], f flags[send_flags]) (automatic)
sendmsg$auto_NL80211_CMD_SET_BEACON271(fd sock_nl_generic, msg ptr[in, msghdr_nl80211_auto[NL80211_CMD_SET_BEACON, nl80211_policy$auto_nl80211]], f flags[send_flags]) (automatic)
sendmsg$auto_NL80211_CMD_SET_BSS272(fd sock_nl_generic, msg ptr[in, msghdr_nl80211_auto[NL80211_CMD_SET_BSS, nl80211_policy$auto_nl80211]], f flags[send_flags]) (automatic)
sendmsg$auto_NL80211_CMD_SET_CHANNEL273(fd sock_nl_generic, msg ptr[in, msghdr_nl80211_auto[NL80211_CMD_SET_CHANNEL, nl80211_policy$auto_nl80211]], f flags[send_flags]) (automatic)
sendmsg$auto_NL80211_CMD_SET_COALESCE274(fd sock_nl_generic, msg ptr[in, msghdr_nl80211_auto[NL80211_CMD_SET_COALESCE, nl80211_policy$auto_nl80211]], f flags[send_flags]) (automatic)
sendmsg$auto_NL80211_CMD_SET_CQM275(fd sock_nl_generic, msg ptr[in, msghdr_nl80211_auto[NL80211_CMD_SET_CQM, nl80211_policy$auto_nl80211]], f flags[send_flags]) (automatic)
sendmsg$auto_NL80211_CMD_SET_FILS_AAD276(fd sock_nl_generic, msg ptr[in, msghdr_nl80211_auto[NL80211_CMD_SET_FILS_AAD, nl80211_policy$auto_nl80211]], f flags[send_flags]) (automatic)
sendmsg$auto_NL80211_CMD_SET_HW_TIMESTAMP277(fd sock_nl_generic, msg ptr[in, msghdr_nl80211_auto[NL80211_CMD_SET_HW_TIMESTAMP, nl80211_policy$auto_nl80211]], f flags[send_flags]) (automatic)
sendmsg$auto_NL80211_CMD_SET_INTERFACE278(fd sock_nl_generic, msg ptr[in, msghdr_nl80211_auto[NL80211_CMD_SET_INTERFACE, nl80211_policy$auto_nl80211]], f flags[send_flags]) (automatic)
sendmsg$auto_NL80211_CMD_SET_KEY279(fd sock_nl_generic, msg ptr[in, msghdr_nl80211_auto[NL80211_CMD_SET_KEY, nl80211_policy$auto_nl80211]], f flags[send_flags]) (automatic)
sendmsg$auto_NL80211_CMD_SET_MAC_ACL280(fd sock_nl_generic, msg ptr[in, msghdr_nl80211_auto[NL80211_CMD_SET_MAC_ACL, nl80211_policy$auto_nl80211]], f flags[send_flags]) (automatic)
sendmsg$auto_NL80211_CMD_SET_MCAST_RATE281(fd sock_nl_generic, msg ptr[in, msghdr_nl80211_auto[NL80211_CMD_SET_MCAST_RATE, nl80211_policy$auto_nl80211]], f flags[send_flags]) (automatic)
sendmsg$auto_NL80211_CMD_SET_MESH_CONFIG282(fd sock_nl_generic, msg ptr[in, msghdr_nl80211_auto[NL80211_CMD_SET_MESH_CONFIG, nl80211_policy$auto_nl80211]], f flags[send_flags]) (automatic)
sendmsg$auto_NL80211_CMD_SET_MPATH283(fd sock_nl_generic, msg ptr[in, msghdr_nl80211_auto[NL80211_CMD_SET_MPATH, nl80211_policy$auto_nl80211]], f flags[send_flags]) (automatic)
sendmsg$auto_NL80211_CMD_SET_MULTICAST_TO_UNICAST284(fd sock_nl_generic, msg ptr[in, msghdr_nl80211_auto[NL80211_CMD_SET_MULTICAST_TO_UNICAST, nl80211_policy$auto_nl80211]], f flags[send_flags]) (automatic)
sendmsg$auto_NL80211_CMD_SET_NOACK_MAP285(fd sock_nl_generic, msg ptr[in, msghdr_nl80211_auto[NL80211_CMD_SET_NOACK_MAP, nl80211_policy$auto_nl80211]], f flags[send_flags]) (automatic)
sendmsg$auto_NL80211_CMD_SET_PMK286(fd sock_nl_generic, msg ptr[in, msghdr_nl80211_auto[NL80211_CMD_SET_PMK, nl80211_policy$auto_nl80211]], f flags[send_flags]) (automatic)
sendmsg$auto_NL80211_CMD_SET_PMKSA287(fd sock_nl_generic, msg ptr[in, msghdr_nl80211_auto[NL80211_CMD_SET_PMKSA, nl80211_policy$auto_nl80211]], f flags[send_flags]) (automatic)
sendmsg$auto_NL80211_CMD_SET_POWER_SAVE288(fd sock_nl_generic, msg ptr[in, msghdr_nl80211_auto[NL80211_CMD_SET_POWER_SAVE, nl80211_policy$auto_nl80211]], f flags[send_flags]) (automatic)
sendmsg$auto_NL80211_CMD_SET_QOS_MAP289(fd sock_nl_generic, msg ptr[in, msghdr_nl80211_auto[NL80211_CMD_SET_QOS_MAP, nl80211_policy$auto_nl80211]], f flags[send_flags]) (automatic)
sendmsg$auto_NL80211_CMD_SET_REG290(fd sock_nl_generic, msg ptr[in, msghdr_nl80211_auto[NL80211_CMD_SET_REG, nl80211_policy$auto_nl80211]], f flags[send_flags]) (automatic)
sendmsg$auto_NL80211_CMD_SET_REKEY_OFFLOAD291(fd sock_nl_generic, msg ptr[in, msghdr_nl80211_auto[NL80211_CMD_SET_REKEY_OFFLOAD, nl80211_policy$auto_nl80211]], f flags[send_flags]) (automatic)
sendmsg$auto_NL80211_CMD_SET_SAR_SPECS292(fd sock_nl_generic, msg ptr[in, msghdr_nl80211_auto[NL80211_CMD_SET_SAR_SPECS, nl80211_policy$auto_nl80211]], f flags[send_flags]) (automatic)
sendmsg$auto_NL80211_CMD_SET_STATION293(fd sock_nl_generic, msg ptr[in, msghdr_nl80211_auto[NL80211_CMD_SET_STATION, nl80211_policy$auto_nl80211]], f flags[send_flags]) (automatic)
sendmsg$auto_NL80211_CMD_SET_TID_CONFIG294(fd sock_nl_generic, msg ptr[in, msghdr_nl80211_auto[NL80211_CMD_SET_TID_CONFIG, nl80211_policy$auto_nl80211]], f flags[send_flags]) (automatic)
sendmsg$auto_NL80211_CMD_SET_TID_TO_LINK_MAPPING295(fd sock_nl_generic, msg ptr[in, msghdr_nl80211_auto[NL80211_CMD_SET_TID_TO_LINK_MAPPING, nl80211_policy$auto_nl80211]], f flags[send_flags]) (automatic)
sendmsg$auto_NL80211_CMD_SET_TX_BITRATE_MASK296(fd sock_nl_generic, msg ptr[in, msghdr_nl80211_auto[NL80211_CMD_SET_TX_BITRATE_MASK, nl80211_policy$auto_nl80211]], f flags[send_flags]) (automatic)
sendmsg$auto_NL80211_CMD_SET_WIPHY297(fd sock_nl_generic, msg ptr[in, msghdr_nl80211_auto[NL80211_CMD_SET_WIPHY, nl80211_policy$auto_nl80211]], f flags[send_flags]) (automatic)
sendmsg$auto_NL80211_CMD_SET_WIPHY_NETNS298(fd sock_nl_generic, msg ptr[in, msghdr_nl80211_auto[NL80211_CMD_SET_WIPHY_NETNS, nl80211_policy$auto_nl80211]], f flags[send_flags]) (automatic)
sendmsg$auto_NL80211_CMD_SET_WOWLAN299(fd sock_nl_generic, msg ptr[in, msghdr_nl80211_auto[NL80211_CMD_SET_WOWLAN, nl80211_policy$auto_nl80211]], f flags[send_flags]) (automatic)
sendmsg$auto_NL80211_CMD_START_AP300(fd sock_nl_generic, msg ptr[in, msghdr_nl80211_auto[NL80211_CMD_START_AP, nl80211_policy$auto_nl80211]], f flags[send_flags]) (automatic)
sendmsg$auto_NL80211_CMD_START_NAN301(fd sock_nl_generic, msg ptr[in, msghdr_nl80211_auto[NL80211_CMD_START_NAN, nl80211_policy$auto_nl80211]], f flags[send_flags]) (automatic)
sendmsg$auto_NL80211_CMD_START_P2P_DEVICE302(fd sock_nl_generic, msg ptr[in, msghdr_nl80211_auto[NL80211_CMD_START_P2P_DEVICE, nl80211_policy$auto_nl80211]], f flags[send_flags]) (automatic)
sendmsg$auto_NL80211_CMD_START_SCHED_SCAN303(fd sock_nl_generic, msg ptr[in, msghdr_nl80211_auto[NL80211_CMD_START_SCHED_SCAN, nl80211_policy$auto_nl80211]], f flags[send_flags]) (automatic)
sendmsg$auto_NL80211_CMD_STOP_AP304(fd sock_nl_generic, msg ptr[in, msghdr_nl80211_auto[NL80211_CMD_STOP_AP, nl80211_policy$auto_nl80211]], f flags[send_flags]) (automatic)
sendmsg$auto_NL80211_CMD_STOP_NAN305(fd sock_nl_generic, msg ptr[in, msghdr_nl80211_auto[NL80211_CMD_STOP_NAN, nl80211_policy$auto_nl80211]], f flags[send_flags]) (automatic)
sendmsg$auto_NL80211_CMD_STOP_P2P_DEVICE306(fd sock_nl_generic, msg ptr[in, msghdr_nl80211_auto[NL80211_CMD_STOP_P2P_DEVICE, nl80211_policy$auto_nl80211]], f flags[send_flags]) (automatic)
sendmsg$auto_NL80211_CMD_STOP_SCHED_SCAN307(fd sock_nl_generic, msg ptr[in, msghdr_nl80211_auto[NL80211_CMD_STOP_SCHED_SCAN, nl80211_policy$auto_nl80211]], f flags[send_flags]) (automatic)
sendmsg$auto_NL80211_CMD_TDLS_CANCEL_CHANNEL_SWITCH308(fd sock_nl_generic, msg ptr[in, msghdr_nl80211_auto[NL80211_CMD_TDLS_CANCEL_CHANNEL_SWITCH, nl80211_policy$auto_nl80211]], f flags[send_flags]) (automatic)
sendmsg$auto_NL80211_CMD_TDLS_CHANNEL_SWITCH309(fd sock_nl_generic, msg ptr[in, msghdr_nl80211_auto[NL80211_CMD_TDLS_CHANNEL_SWITCH, nl80211_policy$auto_nl80211]], f flags[send_flags]) (automatic)
sendmsg$auto_NL80211_CMD_TDLS_MGMT310(fd sock_nl_generic, msg ptr[in, msghdr_nl80211_auto[NL80211_CMD_TDLS_MGMT, nl80211_policy$auto_nl80211]], f flags[send_flags]) (automatic)
sendmsg$auto_NL80211_CMD_TDLS_OPER311(fd sock_nl_generic, msg ptr[in, msghdr_nl80211_auto[NL80211_CMD_TDLS_OPER, nl80211_policy$auto_nl80211]], f flags[send_flags]) (automatic)
sendmsg$auto_NL80211_CMD_TRIGGER_SCAN312(fd sock_nl_generic, msg ptr[in, msghdr_nl80211_auto[NL80211_CMD_TRIGGER_SCAN, nl80211_policy$auto_nl80211]], f flags[send_flags]) (automatic)
sendmsg$auto_NL80211_CMD_UNEXPECTED_FRAME313(fd sock_nl_generic, msg ptr[in, msghdr_nl80211_auto[NL80211_CMD_UNEXPECTED_FRAME, nl80211_policy$auto_nl80211]], f flags[send_flags]) (automatic)
sendmsg$auto_NL80211_CMD_UPDATE_CONNECT_PARAMS314(fd sock_nl_generic, msg ptr[in, msghdr_nl80211_auto[NL80211_CMD_UPDATE_CONNECT_PARAMS, nl80211_policy$auto_nl80211]], f flags[send_flags]) (automatic)
sendmsg$auto_NL80211_CMD_UPDATE_FT_IES315(fd sock_nl_generic, msg ptr[in, msghdr_nl80211_auto[NL80211_CMD_UPDATE_FT_IES, nl80211_policy$auto_nl80211]], f flags[send_flags]) (automatic)
sendmsg$auto_NL80211_CMD_UPDATE_OWE_INFO316(fd sock_nl_generic, msg ptr[in, msghdr_nl80211_auto[NL80211_CMD_UPDATE_OWE_INFO, nl80211_policy$auto_nl80211]], f flags[send_flags]) (automatic)
sendmsg$auto_NL80211_CMD_VENDOR317(fd sock_nl_generic, msg ptr[in, msghdr_nl80211_auto[NL80211_CMD_VENDOR, nl80211_policy$auto_nl80211]], f flags[send_flags]) (automatic)
sendmsg$auto_NL802154_CMD_ABORT_SCAN318(fd sock_nl_generic, msg ptr[in, msghdr_nl802154_auto[NL802154_CMD_ABORT_SCAN, nl802154_policy$auto_nl802154]], f flags[send_flags]) (automatic)
sendmsg$auto_NL802154_CMD_ASSOCIATE319(fd sock_nl_generic, msg ptr[in, msghdr_nl802154_auto[NL802154_CMD_ASSOCIATE, nl802154_policy$auto_nl802154]], f flags[send_flags]) (automatic)
sendmsg$auto_NL802154_CMD_DEL_INTERFACE320(fd sock_nl_generic, msg ptr[in, msghdr_nl802154_auto[NL802154_CMD_DEL_INTERFACE, nl802154_policy$auto_nl802154]], f flags[send_flags]) (automatic)
sendmsg$auto_NL802154_CMD_DEL_SEC_DEV321(fd sock_nl_generic, msg ptr[in, msghdr_nl802154_auto[NL802154_CMD_DEL_SEC_DEV, nl802154_policy$auto_nl802154]], f flags[send_flags]) (automatic)
sendmsg$auto_NL802154_CMD_DEL_SEC_DEVKEY322(fd sock_nl_generic, msg ptr[in, msghdr_nl802154_auto[NL802154_CMD_DEL_SEC_DEVKEY, nl802154_policy$auto_nl802154]], f flags[send_flags]) (automatic)
sendmsg$auto_NL802154_CMD_DEL_SEC_KEY323(fd sock_nl_generic, msg ptr[in, msghdr_nl802154_auto[NL802154_CMD_DEL_SEC_KEY, nl802154_policy$auto_nl802154]], f flags[send_flags]) (automatic)
sendmsg$auto_NL802154_CMD_DEL_SEC_LEVEL324(fd sock_nl_generic, msg ptr[in, msghdr_nl802154_auto[NL802154_CMD_DEL_SEC_LEVEL, nl802154_policy$auto_nl802154]], f flags[send_flags]) (automatic)
sendmsg$auto_NL802154_CMD_DISASSOCIATE325(fd sock_nl_generic, msg ptr[in, msghdr_nl802154_auto[NL802154_CMD_DISASSOCIATE, nl802154_policy$auto_nl802154]], f flags[send_flags]) (automatic)
sendmsg$auto_NL802154_CMD_GET_INTERFACE326(fd sock_nl_generic, msg ptr[in, msghdr_nl802154_auto[NL802154_CMD_GET_INTERFACE, nl802154_policy$auto_nl802154]], f flags[send_flags]) (automatic)
sendmsg$auto_NL802154_CMD_GET_SEC_DEV327(fd sock_nl_generic, msg ptr[in, msghdr_nl802154_auto[NL802154_CMD_GET_SEC_DEV, nl802154_policy$auto_nl802154]], f flags[send_flags]) (automatic)
sendmsg$auto_NL802154_CMD_GET_SEC_DEVKEY328(fd sock_nl_generic, msg ptr[in, msghdr_nl802154_auto[NL802154_CMD_GET_SEC_DEVKEY, nl802154_policy$auto_nl802154]], f flags[send_flags]) (automatic)
sendmsg$auto_NL802154_CMD_GET_SEC_KEY329(fd sock_nl_generic, msg ptr[in, msghdr_nl802154_auto[NL802154_CMD_GET_SEC_KEY, nl802154_policy$auto_nl802154]], f flags[send_flags]) (automatic)
sendmsg$auto_NL802154_CMD_GET_SEC_LEVEL330(fd sock_nl_generic, msg ptr[in, msghdr_nl802154_auto[NL802154_CMD_GET_SEC_LEVEL, nl802154_policy$auto_nl802154]], f flags[send_flags]) (automatic)
sendmsg$auto_NL802154_CMD_GET_WPAN_PHY331(fd sock_nl_generic, msg ptr[in, msghdr_nl802154_auto[NL802154_CMD_GET_WPAN_PHY, nl802154_policy$auto_nl802154]], f flags[send_flags]) (automatic)
sendmsg$auto_NL802154_CMD_LIST_ASSOCIATIONS332(fd sock_nl_generic, msg ptr[in, msghdr_nl802154_auto[NL802154_CMD_LIST_ASSOCIATIONS, nl802154_policy$auto_nl802154]], f flags[send_flags]) (automatic)
sendmsg$auto_NL802154_CMD_NEW_INTERFACE333(fd sock_nl_generic, msg ptr[in, msghdr_nl802154_auto[NL802154_CMD_NEW_INTERFACE, nl802154_policy$auto_nl802154]], f flags[send_flags]) (automatic)
sendmsg$auto_NL802154_CMD_NEW_SEC_DEV334(fd sock_nl_generic, msg ptr[in, msghdr_nl802154_auto[NL802154_CMD_NEW_SEC_DEV, nl802154_policy$auto_nl802154]], f flags[send_flags]) (automatic)
sendmsg$auto_NL802154_CMD_NEW_SEC_DEVKEY335(fd sock_nl_generic, msg ptr[in, msghdr_nl802154_auto[NL802154_CMD_NEW_SEC_DEVKEY, nl802154_policy$auto_nl802154]], f flags[send_flags]) (automatic)
sendmsg$auto_NL802154_CMD_NEW_SEC_KEY336(fd sock_nl_generic, msg ptr[in, msghdr_nl802154_auto[NL802154_CMD_NEW_SEC_KEY, nl802154_policy$auto_nl802154]], f flags[send_flags]) (automatic)
sendmsg$auto_NL802154_CMD_NEW_SEC_LEVEL337(fd sock_nl_generic, msg ptr[in, msghdr_nl802154_auto[NL802154_CMD_NEW_SEC_LEVEL, nl802154_policy$auto_nl802154]], f flags[send_flags]) (automatic)
sendmsg$auto_NL802154_CMD_SEND_BEACONS338(fd sock_nl_generic, msg ptr[in, msghdr_nl802154_auto[NL802154_CMD_SEND_BEACONS, nl802154_policy$auto_nl802154]], f flags[send_flags]) (automatic)
sendmsg$auto_NL802154_CMD_SET_ACKREQ_DEFAULT339(fd sock_nl_generic, msg ptr[in, msghdr_nl802154_auto[NL802154_CMD_SET_ACKREQ_DEFAULT, nl802154_policy$auto_nl802154]], f flags[send_flags]) (automatic)
sendmsg$auto_NL802154_CMD_SET_BACKOFF_EXPONENT340(fd sock_nl_generic, msg ptr[in, msghdr_nl802154_auto[NL802154_CMD_SET_BACKOFF_EXPONENT, nl802154_policy$auto_nl802154]], f flags[send_flags]) (automatic)
sendmsg$auto_NL802154_CMD_SET_CCA_ED_LEVEL341(fd sock_nl_generic, msg ptr[in, msghdr_nl802154_auto[NL802154_CMD_SET_CCA_ED_LEVEL, nl802154_policy$auto_nl802154]], f flags[send_flags]) (automatic)
sendmsg$auto_NL802154_CMD_SET_CCA_MODE342(fd sock_nl_generic, msg ptr[in, msghdr_nl802154_auto[NL802154_CMD_SET_CCA_MODE, nl802154_policy$auto_nl802154]], f flags[send_flags]) (automatic)
sendmsg$auto_NL802154_CMD_SET_CHANNEL343(fd sock_nl_generic, msg ptr[in, msghdr_nl802154_auto[NL802154_CMD_SET_CHANNEL, nl802154_policy$auto_nl802154]], f flags[send_flags]) (automatic)
sendmsg$auto_NL802154_CMD_SET_LBT_MODE344(fd sock_nl_generic, msg ptr[in, msghdr_nl802154_auto[NL802154_CMD_SET_LBT_MODE, nl802154_policy$auto_nl802154]], f flags[send_flags]) (automatic)
sendmsg$auto_NL802154_CMD_SET_MAX_ASSOCIATIONS345(fd sock_nl_generic, msg ptr[in, msghdr_nl802154_auto[NL802154_CMD_SET_MAX_ASSOCIATIONS, nl802154_policy$auto_nl802154]], f flags[send_flags]) (automatic)
sendmsg$auto_NL802154_CMD_SET_MAX_CSMA_BACKOFFS346(fd sock_nl_generic, msg ptr[in, msghdr_nl802154_auto[NL802154_CMD_SET_MAX_CSMA_BACKOFFS, nl802154_policy$auto_nl802154]], f flags[send_flags]) (automatic)
sendmsg$auto_NL802154_CMD_SET_MAX_FRAME_RETRIES347(fd sock_nl_generic, msg ptr[in, msghdr_nl802154_auto[NL802154_CMD_SET_MAX_FRAME_RETRIES, nl802154_policy$auto_nl802154]], f flags[send_flags]) (automatic)
sendmsg$auto_NL802154_CMD_SET_PAN_ID348(fd sock_nl_generic, msg ptr[in, msghdr_nl802154_auto[NL802154_CMD_SET_PAN_ID, nl802154_policy$auto_nl802154]], f flags[send_flags]) (automatic)
sendmsg$auto_NL802154_CMD_SET_SEC_PARAMS349(fd sock_nl_generic, msg ptr[in, msghdr_nl802154_auto[NL802154_CMD_SET_SEC_PARAMS, nl802154_policy$auto_nl802154]], f flags[send_flags]) (automatic)
sendmsg$auto_NL802154_CMD_SET_SHORT_ADDR350(fd sock_nl_generic, msg ptr[in, msghdr_nl802154_auto[NL802154_CMD_SET_SHORT_ADDR, nl802154_policy$auto_nl802154]], f flags[send_flags]) (automatic)
sendmsg$auto_NL802154_CMD_SET_TX_POWER351(fd sock_nl_generic, msg ptr[in, msghdr_nl802154_auto[NL802154_CMD_SET_TX_POWER, nl802154_policy$auto_nl802154]], f flags[send_flags]) (automatic)
sendmsg$auto_NL802154_CMD_SET_WPAN_PHY_NETNS352(fd sock_nl_generic, msg ptr[in, msghdr_nl802154_auto[NL802154_CMD_SET_WPAN_PHY_NETNS, nl802154_policy$auto_nl802154]], f flags[send_flags]) (automatic)
sendmsg$auto_NL802154_CMD_STOP_BEACONS353(fd sock_nl_generic, msg ptr[in, msghdr_nl802154_auto[NL802154_CMD_STOP_BEACONS, nl802154_policy$auto_nl802154]], f flags[send_flags]) (automatic)
sendmsg$auto_NL802154_CMD_TRIGGER_SCAN354(fd sock_nl_generic, msg ptr[in, msghdr_nl802154_auto[NL802154_CMD_TRIGGER_SCAN, nl802154_policy$auto_nl802154]], f flags[send_flags]) (automatic)
sendmsg$auto_NLBL_CALIPSO_C_ADD355(fd sock_nl_generic, msg ptr[in, msghdr_NLBL_CALIPSO_auto[NLBL_CALIPSO_C_ADD, calipso_genl_policy$auto_netlabel_calipso]], f flags[send_flags]) (automatic)
sendmsg$auto_NLBL_CALIPSO_C_LIST356(fd sock_nl_generic, msg ptr[in, msghdr_NLBL_CALIPSO_auto[NLBL_CALIPSO_C_LIST, calipso_genl_policy$auto_netlabel_calipso]], f flags[send_flags]) (automatic)
sendmsg$auto_NLBL_CALIPSO_C_LISTALL357(fd sock_nl_generic, msg ptr[in, msghdr_NLBL_CALIPSO_auto[NLBL_CALIPSO_C_LISTALL, calipso_genl_policy$auto_netlabel_calipso]], f flags[send_flags]) (automatic)
sendmsg$auto_NLBL_CALIPSO_C_REMOVE358(fd sock_nl_generic, msg ptr[in, msghdr_NLBL_CALIPSO_auto[NLBL_CALIPSO_C_REMOVE, calipso_genl_policy$auto_netlabel_calipso]], f flags[send_flags]) (automatic)
sendmsg$auto_NLBL_CIPSOV4_C_ADD359(fd sock_nl_generic, msg ptr[in, msghdr_NLBL_CIPSOv4_auto[NLBL_CIPSOV4_C_ADD, netlbl_cipsov4_genl_policy$auto_netlabel_cipso_v4]], f flags[send_flags]) (automatic)
sendmsg$auto_NLBL_CIPSOV4_C_LIST360(fd sock_nl_generic, msg ptr[in, msghdr_NLBL_CIPSOv4_auto[NLBL_CIPSOV4_C_LIST, netlbl_cipsov4_genl_policy$auto_netlabel_cipso_v4]], f flags[send_flags]) (automatic)
sendmsg$auto_NLBL_CIPSOV4_C_LISTALL361(fd sock_nl_generic, msg ptr[in, msghdr_NLBL_CIPSOv4_auto[NLBL_CIPSOV4_C_LISTALL, netlbl_cipsov4_genl_policy$auto_netlabel_cipso_v4]], f flags[send_flags]) (automatic)
sendmsg$auto_NLBL_CIPSOV4_C_REMOVE362(fd sock_nl_generic, msg ptr[in, msghdr_NLBL_CIPSOv4_auto[NLBL_CIPSOV4_C_REMOVE, netlbl_cipsov4_genl_policy$auto_netlabel_cipso_v4]], f flags[send_flags]) (automatic)
sendmsg$auto_NLBL_MGMT_C_ADD363(fd sock_nl_generic, msg ptr[in, msghdr_NLBL_MGMT_auto[NLBL_MGMT_C_ADD, netlbl_mgmt_genl_policy$auto_netlabel_mgmt]], f flags[send_flags]) (automatic)
sendmsg$auto_NLBL_MGMT_C_ADDDEF364(fd sock_nl_generic, msg ptr[in, msghdr_NLBL_MGMT_auto[NLBL_MGMT_C_ADDDEF, netlbl_mgmt_genl_policy$auto_netlabel_mgmt]], f flags[send_flags]) (automatic)
sendmsg$auto_NLBL_MGMT_C_LISTALL365(fd sock_nl_generic, msg ptr[in, msghdr_NLBL_MGMT_auto[NLBL_MGMT_C_LISTALL, netlbl_mgmt_genl_policy$auto_netlabel_mgmt]], f flags[send_flags]) (automatic)
sendmsg$auto_NLBL_MGMT_C_LISTDEF366(fd sock_nl_generic, msg ptr[in, msghdr_NLBL_MGMT_auto[NLBL_MGMT_C_LISTDEF, netlbl_mgmt_genl_policy$auto_netlabel_mgmt]], f flags[send_flags]) (automatic)
sendmsg$auto_NLBL_MGMT_C_PROTOCOLS367(fd sock_nl_generic, msg ptr[in, msghdr_NLBL_MGMT_auto[NLBL_MGMT_C_PROTOCOLS, netlbl_mgmt_genl_policy$auto_netlabel_mgmt]], f flags[send_flags]) (automatic)
sendmsg$auto_NLBL_MGMT_C_REMOVE368(fd sock_nl_generic, msg ptr[in, msghdr_NLBL_MGMT_auto[NLBL_MGMT_C_REMOVE, netlbl_mgmt_genl_policy$auto_netlabel_mgmt]], f flags[send_flags]) (automatic)
sendmsg$auto_NLBL_MGMT_C_REMOVEDEF369(fd sock_nl_generic, msg ptr[in, msghdr_NLBL_MGMT_auto[NLBL_MGMT_C_REMOVEDEF, netlbl_mgmt_genl_policy$auto_netlabel_mgmt]], f flags[send_flags]) (automatic)
sendmsg$auto_NLBL_MGMT_C_VERSION370(fd sock_nl_generic, msg ptr[in, msghdr_NLBL_MGMT_auto[NLBL_MGMT_C_VERSION, netlbl_mgmt_genl_policy$auto_netlabel_mgmt]], f flags[send_flags]) (automatic)
sendmsg$auto_NLBL_UNLABEL_C_ACCEPT371(fd sock_nl_generic, msg ptr[in, msghdr_NLBL_UNLBL_auto[NLBL_UNLABEL_C_ACCEPT, netlbl_unlabel_genl_policy$auto_netlabel_unlabeled]], f flags[send_flags]) (automatic)
sendmsg$auto_NLBL_UNLABEL_C_LIST372(fd sock_nl_generic, msg ptr[in, msghdr_NLBL_UNLBL_auto[NLBL_UNLABEL_C_LIST, netlbl_unlabel_genl_policy$auto_netlabel_unlabeled]], f flags[send_flags]) (automatic)
sendmsg$auto_NLBL_UNLABEL_C_STATICADD373(fd sock_nl_generic, msg ptr[in, msghdr_NLBL_UNLBL_auto[NLBL_UNLABEL_C_STATICADD, netlbl_unlabel_genl_policy$auto_netlabel_unlabeled]], f flags[send_flags]) (automatic)
sendmsg$auto_NLBL_UNLABEL_C_STATICADDDEF374(fd sock_nl_generic, msg ptr[in, msghdr_NLBL_UNLBL_auto[NLBL_UNLABEL_C_STATICADDDEF, netlbl_unlabel_genl_policy$auto_netlabel_unlabeled]], f flags[send_flags]) (automatic)
sendmsg$auto_NLBL_UNLABEL_C_STATICLIST375(fd sock_nl_generic, msg ptr[in, msghdr_NLBL_UNLBL_auto[NLBL_UNLABEL_C_STATICLIST, netlbl_unlabel_genl_policy$auto_netlabel_unlabeled]], f flags[send_flags]) (automatic)
sendmsg$auto_NLBL_UNLABEL_C_STATICLISTDEF376(fd sock_nl_generic, msg ptr[in, msghdr_NLBL_UNLBL_auto[NLBL_UNLABEL_C_STATICLISTDEF, netlbl_unlabel_genl_policy$auto_netlabel_unlabeled]], f flags[send_flags]) (automatic)
sendmsg$auto_NLBL_UNLABEL_C_STATICREMOVE377(fd sock_nl_generic, msg ptr[in, msghdr_NLBL_UNLBL_auto[NLBL_UNLABEL_C_STATICREMOVE, netlbl_unlabel_genl_policy$auto_netlabel_unlabeled]], f flags[send_flags]) (automatic)
sendmsg$auto_NLBL_UNLABEL_C_STATICREMOVEDEF378(fd sock_nl_generic, msg ptr[in, msghdr_NLBL_UNLBL_auto[NLBL_UNLABEL_C_STATICREMOVEDEF, netlbl_unlabel_genl_policy$auto_netlabel_unlabeled]], f flags[send_flags]) (automatic)
sendmsg$auto_OVS_CT_LIMIT_CMD_DEL379(fd sock_nl_generic, msg ptr[in, msghdr_ovs_ct_limit_auto[OVS_CT_LIMIT_CMD_DEL, ct_limit_policy$auto_conntrack]], f flags[send_flags]) (automatic)
sendmsg$auto_OVS_CT_LIMIT_CMD_GET380(fd sock_nl_generic, msg ptr[in, msghdr_ovs_ct_limit_auto[OVS_CT_LIMIT_CMD_GET, ct_limit_policy$auto_conntrack]], f flags[send_flags]) (automatic)
sendmsg$auto_OVS_CT_LIMIT_CMD_SET381(fd sock_nl_generic, msg ptr[in, msghdr_ovs_ct_limit_auto[OVS_CT_LIMIT_CMD_SET, ct_limit_policy$auto_conntrack]], f flags[send_flags]) (automatic)
sendmsg$auto_OVS_DP_CMD_DEL382(fd sock_nl_generic, msg ptr[in, msghdr_ovs_datapath_auto[OVS_DP_CMD_DEL, datapath_policy$auto_datapath]], f flags[send_flags]) (automatic)
sendmsg$auto_OVS_DP_CMD_GET383(fd sock_nl_generic, msg ptr[in, msghdr_ovs_datapath_auto[OVS_DP_CMD_GET, datapath_policy$auto_datapath]], f flags[send_flags]) (automatic)
sendmsg$auto_OVS_DP_CMD_NEW384(fd sock_nl_generic, msg ptr[in, msghdr_ovs_datapath_auto[OVS_DP_CMD_NEW, datapath_policy$auto_datapath]], f flags[send_flags]) (automatic)
sendmsg$auto_OVS_DP_CMD_SET385(fd sock_nl_generic, msg ptr[in, msghdr_ovs_datapath_auto[OVS_DP_CMD_SET, datapath_policy$auto_datapath]], f flags[send_flags]) (automatic)
sendmsg$auto_OVS_FLOW_CMD_DEL386(fd sock_nl_generic, msg ptr[in, msghdr_ovs_flow_auto[OVS_FLOW_CMD_DEL, flow_policy$auto_datapath]], f flags[send_flags]) (automatic)
sendmsg$auto_OVS_FLOW_CMD_GET387(fd sock_nl_generic, msg ptr[in, msghdr_ovs_flow_auto[OVS_FLOW_CMD_GET, flow_policy$auto_datapath]], f flags[send_flags]) (automatic)
sendmsg$auto_OVS_FLOW_CMD_NEW388(fd sock_nl_generic, msg ptr[in, msghdr_ovs_flow_auto[OVS_FLOW_CMD_NEW, flow_policy$auto_datapath]], f flags[send_flags]) (automatic)
sendmsg$auto_OVS_FLOW_CMD_SET389(fd sock_nl_generic, msg ptr[in, msghdr_ovs_flow_auto[OVS_FLOW_CMD_SET, flow_policy$auto_datapath]], f flags[send_flags]) (automatic)
sendmsg$auto_OVS_METER_CMD_DEL390(fd sock_nl_generic, msg ptr[in, msghdr_ovs_meter_auto[OVS_METER_CMD_DEL, meter_policy$auto_meter]], f flags[send_flags]) (automatic)
sendmsg$auto_OVS_METER_CMD_FEATURES391(fd sock_nl_generic, msg ptr[in, msghdr_ovs_meter_auto[OVS_METER_CMD_FEATURES, meter_policy$auto_meter]], f flags[send_flags]) (automatic)
sendmsg$auto_OVS_METER_CMD_GET392(fd sock_nl_generic, msg ptr[in, msghdr_ovs_meter_auto[OVS_METER_CMD_GET, meter_policy$auto_meter]], f flags[send_flags]) (automatic)
sendmsg$auto_OVS_METER_CMD_SET393(fd sock_nl_generic, msg ptr[in, msghdr_ovs_meter_auto[OVS_METER_CMD_SET, meter_policy$auto_meter]], f flags[send_flags]) (automatic)
sendmsg$auto_OVS_PACKET_CMD_EXECUTE394(fd sock_nl_generic, msg ptr[in, msghdr_ovs_packet_auto[OVS_PACKET_CMD_EXECUTE, packet_policy$auto_datapath]], f flags[send_flags]) (automatic)
sendmsg$auto_OVS_VPORT_CMD_DEL395(fd sock_nl_generic, msg ptr[in, msghdr_ovs_vport_auto[OVS_VPORT_CMD_DEL, vport_policy$auto_datapath]], f flags[send_flags]) (automatic)
sendmsg$auto_OVS_VPORT_CMD_GET396(fd sock_nl_generic, msg ptr[in, msghdr_ovs_vport_auto[OVS_VPORT_CMD_GET, vport_policy$auto_datapath]], f flags[send_flags]) (automatic)
sendmsg$auto_OVS_VPORT_CMD_NEW397(fd sock_nl_generic, msg ptr[in, msghdr_ovs_vport_auto[OVS_VPORT_CMD_NEW, vport_policy$auto_datapath]], f flags[send_flags]) (automatic)
sendmsg$auto_OVS_VPORT_CMD_SET398(fd sock_nl_generic, msg ptr[in, msghdr_ovs_vport_auto[OVS_VPORT_CMD_SET, vport_policy$auto_datapath]], f flags[send_flags]) (automatic)
sendmsg$auto_SEG6_CMD_DUMPHMAC399(fd sock_nl_generic, msg ptr[in, msghdr_SEG6_auto[SEG6_CMD_DUMPHMAC, seg6_genl_policy$auto_seg6]], f flags[send_flags]) (automatic)
sendmsg$auto_SEG6_CMD_GET_TUNSRC400(fd sock_nl_generic, msg ptr[in, msghdr_SEG6_auto[SEG6_CMD_GET_TUNSRC, seg6_genl_policy$auto_seg6]], f flags[send_flags]) (automatic)
sendmsg$auto_SEG6_CMD_SETHMAC401(fd sock_nl_generic, msg ptr[in, msghdr_SEG6_auto[SEG6_CMD_SETHMAC, seg6_genl_policy$auto_seg6]], f flags[send_flags]) (automatic)
sendmsg$auto_SEG6_CMD_SET_TUNSRC402(fd sock_nl_generic, msg ptr[in, msghdr_SEG6_auto[SEG6_CMD_SET_TUNSRC, seg6_genl_policy$auto_seg6]], f flags[send_flags]) (automatic)
sendmsg$auto_SMC_NETLINK_ADD_UEID403(fd sock_nl_generic, msg ptr[in, msghdr_SMC_GEN_NETLINK_auto[SMC_NETLINK_ADD_UEID, smc_gen_ueid_policy$auto_smc_netlink]], f flags[send_flags]) (automatic)
sendmsg$auto_SMC_NETLINK_REMOVE_UEID420(fd sock_nl_generic, msg ptr[in, msghdr_SMC_GEN_NETLINK_auto[SMC_NETLINK_REMOVE_UEID, smc_gen_ueid_policy$auto_smc_netlink]], f flags[send_flags]) (automatic)
sendmsg$auto_SMC_PNETID_ADD421(fd sock_nl_generic, msg ptr[in, msghdr_SMC_PNETID_auto[SMC_PNETID_ADD, smc_pnet_policy$auto_smc_pnet]], f flags[send_flags]) (automatic)
sendmsg$auto_SMC_PNETID_DEL422(fd sock_nl_generic, msg ptr[in, msghdr_SMC_PNETID_auto[SMC_PNETID_DEL, smc_pnet_policy$auto_smc_pnet]], f flags[send_flags]) (automatic)
sendmsg$auto_SMC_PNETID_FLUSH423(fd sock_nl_generic, msg ptr[in, msghdr_SMC_PNETID_auto[SMC_PNETID_FLUSH, smc_pnet_policy$auto_smc_pnet]], f flags[send_flags]) (automatic)
sendmsg$auto_SMC_PNETID_GET424(fd sock_nl_generic, msg ptr[in, msghdr_SMC_PNETID_auto[SMC_PNETID_GET, smc_pnet_policy$auto_smc_pnet]], f flags[send_flags]) (automatic)
sendmsg$auto_TASKSTATS_CMD_GET425(fd sock_nl_generic, msg ptr[in, msghdr_TASKSTATS_auto[TASKSTATS_CMD_GET, taskstats_cmd_get_policy$auto_taskstats]], f flags[send_flags]) (automatic)
sendmsg$auto_TCP_METRICS_CMD_DEL426(fd sock_nl_generic, msg ptr[in, msghdr_tcp_metrics_auto[TCP_METRICS_CMD_DEL, tcp_metrics_nl_policy$auto_tcp_metrics]], f flags[send_flags]) (automatic)
sendmsg$auto_TCP_METRICS_CMD_GET427(fd sock_nl_generic, msg ptr[in, msghdr_tcp_metrics_auto[TCP_METRICS_CMD_GET, tcp_metrics_nl_policy$auto_tcp_metrics]], f flags[send_flags]) (automatic)
sendmsg$auto_THERMAL_GENL_CMD_CDEV_GET428(fd sock_nl_generic, msg ptr[in, msghdr_thermal_auto[THERMAL_GENL_CMD_CDEV_GET, thermal_genl_policy$auto_thermal_netlink]], f flags[send_flags]) (automatic)
sendmsg$auto_THERMAL_GENL_CMD_TZ_GET_GOV429(fd sock_nl_generic, msg ptr[in, msghdr_thermal_auto[THERMAL_GENL_CMD_TZ_GET_GOV, thermal_genl_policy$auto_thermal_netlink]], f flags[send_flags]) (automatic)
sendmsg$auto_THERMAL_GENL_CMD_TZ_GET_ID430(fd sock_nl_generic, msg ptr[in, msghdr_thermal_auto[THERMAL_GENL_CMD_TZ_GET_ID, thermal_genl_policy$auto_thermal_netlink]], f flags[send_flags]) (automatic)
sendmsg$auto_THERMAL_GENL_CMD_TZ_GET_TEMP431(fd sock_nl_generic, msg ptr[in, msghdr_thermal_auto[THERMAL_GENL_CMD_TZ_GET_TEMP, thermal_genl_policy$auto_thermal_netlink]], f flags[send_flags]) (automatic)
sendmsg$auto_THERMAL_GENL_CMD_TZ_GET_TRIP432(fd sock_nl_generic, msg ptr[in, msghdr_thermal_auto[THERMAL_GENL_CMD_TZ_GET_TRIP, thermal_genl_policy$auto_thermal_netlink]], f flags[send_flags]) (automatic)
sendmsg$auto_TIPC_NL_ADDR_LEGACY_GET433(fd sock_nl_generic, msg ptr[in, msghdr_TIPCv2_auto[TIPC_NL_ADDR_LEGACY_GET, tipc_nl_policy$auto_netlink]], f flags[send_flags]) (automatic)
sendmsg$auto_TIPC_NL_BEARER_ADD434(fd sock_nl_generic, msg ptr[in, msghdr_TIPCv2_auto[TIPC_NL_BEARER_ADD, tipc_nl_policy$auto_netlink]], f flags[send_flags]) (automatic)
sendmsg$auto_TIPC_NL_BEARER_DISABLE435(fd sock_nl_generic, msg ptr[in, msghdr_TIPCv2_auto[TIPC_NL_BEARER_DISABLE, tipc_nl_policy$auto_netlink]], f flags[send_flags]) (automatic)
sendmsg$auto_TIPC_NL_BEARER_ENABLE436(fd sock_nl_generic, msg ptr[in, msghdr_TIPCv2_auto[TIPC_NL_BEARER_ENABLE, tipc_nl_policy$auto_netlink]], f flags[send_flags]) (automatic)
sendmsg$auto_TIPC_NL_BEARER_GET437(fd sock_nl_generic, msg ptr[in, msghdr_TIPCv2_auto[TIPC_NL_BEARER_GET, tipc_nl_policy$auto_netlink]], f flags[send_flags]) (automatic)
sendmsg$auto_TIPC_NL_BEARER_SET438(fd sock_nl_generic, msg ptr[in, msghdr_TIPCv2_auto[TIPC_NL_BEARER_SET, tipc_nl_policy$auto_netlink]], f flags[send_flags]) (automatic)
sendmsg$auto_TIPC_NL_KEY_FLUSH439(fd sock_nl_generic, msg ptr[in, msghdr_TIPCv2_auto[TIPC_NL_KEY_FLUSH, tipc_nl_policy$auto_netlink]], f flags[send_flags]) (automatic)
sendmsg$auto_TIPC_NL_KEY_SET440(fd sock_nl_generic, msg ptr[in, msghdr_TIPCv2_auto[TIPC_NL_KEY_SET, tipc_nl_policy$auto_netlink]], f flags[send_flags]) (automatic)
sendmsg$auto_TIPC_NL_LINK_GET441(fd sock_nl_generic, msg ptr[in, msghdr_TIPCv2_auto[TIPC_NL_LINK_GET, tipc_nl_policy$auto_netlink]], f flags[send_flags]) (automatic)
sendmsg$auto_TIPC_NL_LINK_RESET_STATS442(fd sock_nl_generic, msg ptr[in, msghdr_TIPCv2_auto[TIPC_NL_LINK_RESET_STATS, tipc_nl_policy$auto_netlink]], f flags[send_flags]) (automatic)
sendmsg$auto_TIPC_NL_LINK_SET443(fd sock_nl_generic, msg ptr[in, msghdr_TIPCv2_auto[TIPC_NL_LINK_SET, tipc_nl_policy$auto_netlink]], f flags[send_flags]) (automatic)
sendmsg$auto_TIPC_NL_MEDIA_GET444(fd sock_nl_generic, msg ptr[in, msghdr_TIPCv2_auto[TIPC_NL_MEDIA_GET, tipc_nl_policy$auto_netlink]], f flags[send_flags]) (automatic)
sendmsg$auto_TIPC_NL_MEDIA_SET445(fd sock_nl_generic, msg ptr[in, msghdr_TIPCv2_auto[TIPC_NL_MEDIA_SET, tipc_nl_policy$auto_netlink]], f flags[send_flags]) (automatic)
sendmsg$auto_TIPC_NL_MON_GET446(fd sock_nl_generic, msg ptr[in, msghdr_TIPCv2_auto[TIPC_NL_MON_GET, tipc_nl_policy$auto_netlink]], f flags[send_flags]) (automatic)
sendmsg$auto_TIPC_NL_MON_PEER_GET447(fd sock_nl_generic, msg ptr[in, msghdr_TIPCv2_auto[TIPC_NL_MON_PEER_GET, tipc_nl_policy$auto_netlink]], f flags[send_flags]) (automatic)
sendmsg$auto_TIPC_NL_MON_SET448(fd sock_nl_generic, msg ptr[in, msghdr_TIPCv2_auto[TIPC_NL_MON_SET, tipc_nl_policy$auto_netlink]], f flags[send_flags]) (automatic)
sendmsg$auto_TIPC_NL_NAME_TABLE_GET449(fd sock_nl_generic, msg ptr[in, msghdr_TIPCv2_auto[TIPC_NL_NAME_TABLE_GET, tipc_nl_policy$auto_netlink]], f flags[send_flags]) (automatic)
sendmsg$auto_TIPC_NL_NET_GET450(fd sock_nl_generic, msg ptr[in, msghdr_TIPCv2_auto[TIPC_NL_NET_GET, tipc_nl_policy$auto_netlink]], f flags[send_flags]) (automatic)
sendmsg$auto_TIPC_NL_NET_SET451(fd sock_nl_generic, msg ptr[in, msghdr_TIPCv2_auto[TIPC_NL_NET_SET, tipc_nl_policy$auto_netlink]], f flags[send_flags]) (automatic)
sendmsg$auto_TIPC_NL_NODE_GET452(fd sock_nl_generic, msg ptr[in, msghdr_TIPCv2_auto[TIPC_NL_NODE_GET, tipc_nl_policy$auto_netlink]], f flags[send_flags]) (automatic)
sendmsg$auto_TIPC_NL_PEER_REMOVE453(fd sock_nl_generic, msg ptr[in, msghdr_TIPCv2_auto[TIPC_NL_PEER_REMOVE, tipc_nl_policy$auto_netlink]], f flags[send_flags]) (automatic)
sendmsg$auto_TIPC_NL_PUBL_GET454(fd sock_nl_generic, msg ptr[in, msghdr_TIPCv2_auto[TIPC_NL_PUBL_GET, tipc_nl_policy$auto_netlink]], f flags[send_flags]) (automatic)
sendmsg$auto_TIPC_NL_SOCK_GET455(fd sock_nl_generic, msg ptr[in, msghdr_TIPCv2_auto[TIPC_NL_SOCK_GET, tipc_nl_policy$auto_netlink]], f flags[send_flags]) (automatic)
sendmsg$auto_TIPC_NL_UDP_GET_REMOTEIP456(fd sock_nl_generic, msg ptr[in, msghdr_TIPCv2_auto[TIPC_NL_UDP_GET_REMOTEIP, tipc_nl_policy$auto_netlink]], f flags[send_flags]) (automatic)
sendmsg$auto_VDPA_CMD_DEV_CONFIG_GET457(fd sock_nl_generic, msg ptr[in, msghdr_vdpa_auto[VDPA_CMD_DEV_CONFIG_GET, vdpa_nl_policy$auto_vdpa]], f flags[send_flags]) (automatic)
sendmsg$auto_VDPA_CMD_DEV_DEL458(fd sock_nl_generic, msg ptr[in, msghdr_vdpa_auto[VDPA_CMD_DEV_DEL, vdpa_nl_policy$auto_vdpa]], f flags[send_flags]) (automatic)
sendmsg$auto_VDPA_CMD_DEV_GET459(fd sock_nl_generic, msg ptr[in, msghdr_vdpa_auto[VDPA_CMD_DEV_GET, vdpa_nl_policy$auto_vdpa]], f flags[send_flags]) (automatic)
sendmsg$auto_VDPA_CMD_DEV_NEW460(fd sock_nl_generic, msg ptr[in, msghdr_vdpa_auto[VDPA_CMD_DEV_NEW, vdpa_nl_policy$auto_vdpa]], f flags[send_flags]) (automatic)
sendmsg$auto_VDPA_CMD_DEV_VSTATS_GET461(fd sock_nl_generic, msg ptr[in, msghdr_vdpa_auto[VDPA_CMD_DEV_VSTATS_GET, vdpa_nl_policy$auto_vdpa]], f flags[send_flags]) (automatic)
sendmsg$auto_VDPA_CMD_MGMTDEV_GET462(fd sock_nl_generic, msg ptr[in, msghdr_vdpa_auto[VDPA_CMD_MGMTDEV_GET, vdpa_nl_policy$auto_vdpa]], f flags[send_flags]) (automatic)
sendmsg$auto_WG_CMD_GET_DEVICE463(fd sock_nl_generic, msg ptr[in, msghdr_wireguard_auto[WG_CMD_GET_DEVICE, device_policy$auto_netlink]], f flags[send_flags]) (automatic)
sendmsg$auto_WG_CMD_SET_DEVICE464(fd sock_nl_generic, msg ptr[in, msghdr_wireguard_auto[WG_CMD_SET_DEVICE, device_policy$auto_netlink]], f flags[send_flags]) (automatic)
sendto$auto(fd intptr, buff intptr, len intptr, flags intptr, addr intptr, addr_len intptr) (automatic)
set_mempolicy$auto(mode intptr, nmask intptr, maxnode intptr) (automatic)
set_mempolicy_home_node$auto(start intptr, len intptr, home_node intptr, flags intptr) (automatic)
set_robust_list$auto(head intptr, len intptr) (automatic)
set_thread_area$auto(u_info intptr) (automatic)
set_tid_address$auto(tidptr intptr) (automatic)
setdomainname$auto(name intptr, len intptr) (automatic)
setfsgid$auto(gid intptr) (automatic)
setfsgid32$auto(gid intptr) (automatic)
setfsuid$auto(uid intptr) (automatic)
setfsuid32$auto(uid intptr) (automatic)
setgid$auto(gid intptr) (automatic)
setgid32$auto(gid intptr) (automatic)
setgroups$auto(gidsetsize intptr, grouplist intptr) (automatic)
setgroups32$auto(gidsetsize intptr, grouplist intptr) (automatic)
sethostname$auto(name intptr, len intptr) (automatic)
setitimer$auto(which intptr, value intptr, ovalue intptr) (automatic)
setns$auto(fd intptr, flags intptr) (automatic)
setpgid$auto(pid intptr, pgid intptr) (automatic)
setpriority$auto(which intptr, who intptr, niceval intptr) (automatic)
setregid$auto(rgid intptr, egid intptr) (automatic)
setregid32$auto(rgid intptr, egid intptr) (automatic)
setresgid$auto(rgid intptr, egid intptr, sgid intptr) (automatic)
setresgid32$auto(rgid intptr, egid intptr, sgid intptr) (automatic)
setresuid$auto(ruid intptr, euid intptr, suid intptr) (automatic)
setresuid32$auto(ruid intptr, euid intptr, suid intptr) (automatic)
setreuid$auto(ruid intptr, euid intptr) (automatic)
setreuid32$auto(ruid intptr, euid intptr) (automatic)
setrlimit$auto(rsrc intptr, rlim intptr) (automatic)
setsid$auto() (automatic)
setsockopt$auto(fd intptr, level intptr, optname intptr, optval intptr, optlen intptr) (automatic)
settimeofday$auto(tv intptr, tz intptr) (automatic)
setuid$auto(uid intptr) (automatic)
setuid32$auto(uid intptr) (automatic)
setxattr$auto(pathname intptr, name intptr, value intptr, size intptr, flags intptr) (automatic)
sgetmask$auto() (automatic)
shmat$auto(shmid intptr, shmaddr intptr, shmflg intptr) (automatic)
shmctl$auto(shmid intptr, cmd intptr, buf intptr) (automatic)
shmdt$auto(shmaddr intptr) (automatic)
shmget$auto(key intptr, size intptr, shmflg intptr) (automatic)
shutdown$auto(fd intptr, how intptr) (automatic)
sigaltstack$auto(uss intptr, uoss intptr) (automatic)
signal$auto(sig intptr, handler intptr) (automatic)
signalfd$auto(ufd intptr, user_mask intptr, sizemask intptr) (automatic)
signalfd4$auto(ufd intptr, user_mask intptr, sizemask intptr, flags intptr) (automatic)
sigpending$auto(uset intptr) (automatic)
sigprocmask$auto(how intptr, nset intptr, oset intptr) (automatic)
sigsuspend$auto(unused1 intptr, unused2 intptr, mask intptr) (automatic)
socket$auto(family intptr, type intptr, protocol intptr) (automatic)
socketcall$auto(call intptr, args intptr) (automatic)
socketpair$auto(family intptr, type intptr, protocol intptr, usockvec intptr) (automatic)
splice$auto(fd_in intptr, off_in intptr, fd_out intptr, off_out intptr, len intptr, flags intptr) (automatic)
ssetmask$auto(newmask intptr) (automatic)
stat$auto(filename intptr, statbuf intptr) (automatic)
statfs$auto(pathname intptr, buf intptr) (automatic)
statfs64$auto(pathname intptr, sz intptr, buf intptr) (automatic)
statmount$auto(req intptr, buf intptr, bufsize intptr, flags intptr) (automatic)
statx$auto(dfd intptr, filename intptr, flags intptr, mask intptr, buffer intptr) (automatic)
stime$auto(tptr intptr) (automatic)
swapoff$auto(specialfile intptr) (automatic)
swapon$auto(specialfile intptr, swap_flags intptr) (automatic)
symlink$auto(oldname intptr, newname intptr) (automatic)
symlinkat$auto(oldname intptr, newdfd intptr, newname intptr) (automatic)
sync$auto() (automatic)
sync_file_range$auto(fd intptr, offset intptr, nbytes intptr, flags intptr) (automatic)
sync_file_range2$auto(fd intptr, flags intptr, offset intptr, nbytes intptr) (automatic)
syncfs$auto(fd intptr) (automatic)
sysfs$auto(option intptr, arg1 intptr, arg2 intptr) (automatic)
sysinfo$auto(info intptr) (automatic)
syslog$auto(type intptr, buf intptr, len intptr) (automatic)
syz_genetlink_get_family_id$auto_802_15_4_MAC(name ptr[in, string["802_15_4_MAC"]], fd sock_nl_generic) genl_802_15_4_MAC_family_id_auto (automatic)
syz_genetlink_get_family_id$auto_HSR(name ptr[in, string["HSR"]], fd sock_nl_generic) genl_HSR_family_id_auto (automatic)
syz_genetlink_get_family_id$auto_IOAM6(name ptr[in, string["IOAM6"]], fd sock_nl_generic) genl_IOAM6_family_id_auto (automatic)
syz_genetlink_get_family_id$auto_IPVS(name ptr[in, string["IPVS"]], fd sock_nl_generic) genl_IPVS_family_id_auto (automatic)
syz_genetlink_get_family_id$auto_MAC80211_HWSIM(name ptr[in, string["MAC80211_HWSIM"]], fd sock_nl_generic) genl_MAC80211_HWSIM_family_id_auto (automatic)
syz_genetlink_get_family_id$auto_MAC802154_HWSIM(name ptr[in, string["MAC802154_HWSIM"]], fd sock_nl_generic) genl_MAC802154_HWSIM_family_id_auto (automatic)
syz_genetlink_get_family_id$auto_NCSI(name ptr[in, string["NCSI"]], fd sock_nl_generic) genl_NCSI_family_id_auto (automatic)
syz_genetlink_get_family_id$auto_NET_DM(name ptr[in, string["NET_DM"]], fd sock_nl_generic) genl_NET_DM_family_id_auto (automatic)
syz_genetlink_get_family_id$auto_NLBL_CALIPSO(name ptr[in, string["NLBL_CALIPSO"]], fd sock_nl_generic) genl_NLBL_CALIPSO_family_id_auto (automatic)
syz_genetlink_get_family_id$auto_NLBL_CIPSOv4(name ptr[in, string["NLBL_CIPSOv4"]], fd sock_nl_generic) genl_NLBL_CIPSOv4_family_id_auto (automatic)
syz_genetlink_get_family_id$auto_NLBL_MGMT(name ptr[in, string["NLBL_MGMT"]], fd sock_nl_generic) genl_NLBL_MGMT_family_id_auto (automatic)
syz_genetlink_get_family_id$auto_NLBL_UNLBL(name ptr[in, string["NLBL_UNLBL"]], fd sock_nl_generic) genl_NLBL_UNLBL_family_id_auto (automatic)
syz_genetlink_get_family_id$auto_SEG6(name ptr[in, string["SEG6"]], fd sock_nl_generic) genl_SEG6_family_id_auto (automatic)
syz_genetlink_get_family_id$auto_SMC_GEN_NETLINK(name ptr[in, string["SMC_GEN_NETLINK"]], fd sock_nl_generic) genl_SMC_GEN_NETLINK_family_id_auto (automatic)
syz_genetlink_get_family_id$auto_SMC_PNETID(name ptr[in, string["SMC_PNETID"]], fd sock_nl_generic) genl_SMC_PNETID_family_id_auto (automatic)
syz_genetlink_get_family_id$auto_TASKSTATS(name ptr[in, string["TASKSTATS"]], fd sock_nl_generic) genl_TASKSTATS_family_id_auto (automatic)
syz_genetlink_get_family_id$auto_TIPCv2(name ptr[in, string["TIPCv2"]], fd sock_nl_generic) genl_TIPCv2_family_id_auto (automatic)
syz_genetlink_get_family_id$auto_batadv(name ptr[in, string["batadv"]], fd sock_nl_generic) genl_batadv_family_id_auto (automatic)
syz_genetlink_get_family_id$auto_cifs(name ptr[in, string["cifs"]], fd sock_nl_generic) genl_cifs_family_id_auto (automatic)
syz_genetlink_get_family_id$auto_ethtool(name ptr[in, string["ethtool"]], fd sock_nl_generic) genl_ethtool_family_id_auto (automatic)
syz_genetlink_get_family_id$auto_gtp(name ptr[in, string["gtp"]], fd sock_nl_generic) genl_gtp_family_id_auto (automatic)
syz_genetlink_get_family_id$auto_handshake(name ptr[in, string["handshake"]], fd sock_nl_generic) genl_handshake_family_id_auto (automatic)
syz_genetlink_get_family_id$auto_ila(name ptr[in, string["ila"]], fd sock_nl_generic) genl_ila_family_id_auto (automatic)
syz_genetlink_get_family_id$auto_l2tp(name ptr[in, string["l2tp"]], fd sock_nl_generic) genl_l2tp_family_id_auto (automatic)
syz_genetlink_get_family_id$auto_macsec(name ptr[in, string["macsec"]], fd sock_nl_generic) genl_macsec_family_id_auto (automatic)
syz_genetlink_get_family_id$auto_nbd(name ptr[in, string["nbd"]], fd sock_nl_generic) genl_nbd_family_id_auto (automatic)
syz_genetlink_get_family_id$auto_netdev(name ptr[in, string["netdev"]], fd sock_nl_generic) genl_netdev_family_id_auto (automatic)
syz_genetlink_get_family_id$auto_nfc(name ptr[in, string["nfc"]], fd sock_nl_generic) genl_nfc_family_id_auto (automatic)
syz_genetlink_get_family_id$auto_nfsd(name ptr[in, string["nfsd"]], fd sock_nl_generic) genl_nfsd_family_id_auto (automatic)
syz_genetlink_get_family_id$auto_nl80211(name ptr[in, string["nl80211"]], fd sock_nl_generic) genl_nl80211_family_id_auto (automatic)
syz_genetlink_get_family_id$auto_nl802154(name ptr[in, string["nl802154"]], fd sock_nl_generic) genl_nl802154_family_id_auto (automatic)
syz_genetlink_get_family_id$auto_nlctrl(name ptr[in, string["nlctrl"]], fd sock_nl_generic) genl_nlctrl_family_id_auto (automatic)
syz_genetlink_get_family_id$auto_ovs_ct_limit(name ptr[in, string["ovs_ct_limit"]], fd sock_nl_generic) genl_ovs_ct_limit_family_id_auto (automatic)
syz_genetlink_get_family_id$auto_ovs_datapath(name ptr[in, string["ovs_datapath"]], fd sock_nl_generic) genl_ovs_datapath_family_id_auto (automatic)
syz_genetlink_get_family_id$auto_ovs_flow(name ptr[in, string["ovs_flow"]], fd sock_nl_generic) genl_ovs_flow_family_id_auto (automatic)
syz_genetlink_get_family_id$auto_ovs_meter(name ptr[in, string["ovs_meter"]], fd sock_nl_generic) genl_ovs_meter_family_id_auto (automatic)
syz_genetlink_get_family_id$auto_ovs_packet(name ptr[in, string["ovs_packet"]], fd sock_nl_generic) genl_ovs_packet_family_id_auto (automatic)
syz_genetlink_get_family_id$auto_ovs_vport(name ptr[in, string["ovs_vport"]], fd sock_nl_generic) genl_ovs_vport_family_id_auto (automatic)
syz_genetlink_get_family_id$auto_tcp_metrics(name ptr[in, string["tcp_metrics"]], fd sock_nl_generic) genl_tcp_metrics_family_id_auto (automatic)
syz_genetlink_get_family_id$auto_thermal(name ptr[in, string["thermal"]], fd sock_nl_generic) genl_thermal_family_id_auto (automatic)
syz_genetlink_get_family_id$auto_vdpa(name ptr[in, string["vdpa"]], fd sock_nl_generic) genl_vdpa_family_id_auto (automatic)
syz_genetlink_get_family_id$auto_wireguard(name ptr[in, string["wireguard"]], fd sock_nl_generic) genl_wireguard_family_id_auto (automatic)
tee$auto(fdin intptr, fdout intptr, len intptr, flags intptr) (automatic)
tgkill$auto(tgid intptr, pid intptr, sig intptr) (automatic)
time$auto(tloc intptr) (automatic)
timer_create$auto(which_clock intptr, timer_event_spec intptr, created_timer_id intptr) (automatic)
timer_delete$auto(timer_id intptr) (automatic)
timer_getoverrun$auto(timer_id intptr) (automatic)
timer_gettime$auto(timer_id intptr, setting intptr) (automatic)
timer_gettime64$auto(timer_id intptr, setting intptr) (automatic)
timer_settime$auto(timer_id intptr, flags intptr, new intptr, old intptr) (automatic)
timer_settime64$auto(timer_id intptr, flags intptr, new_setting intptr, old_setting intptr) (automatic)
timerfd_create$auto(clockid intptr, flags intptr) (automatic)
timerfd_gettime$auto(ufd intptr, otmr intptr) (automatic)
timerfd_gettime64$auto(ufd intptr, otmr intptr) (automatic)
timerfd_settime$auto(ufd intptr, flags intptr, utmr intptr, otmr intptr) (automatic)
timerfd_settime64$auto(ufd intptr, flags intptr, utmr intptr, otmr intptr) (automatic)
times$auto(tbuf intptr) (automatic)
tkill$auto(pid intptr, sig intptr) (automatic)
truncate$auto(path intptr, length intptr) (automatic)
ugetrlimit$auto(rsrc intptr, rlim intptr) (automatic)
umask$auto(mask intptr) (automatic)
umount$auto(name intptr) (automatic)
umount2$auto(name intptr, flags intptr) (automatic)
uname$auto(name intptr) (automatic)
unlink$auto(pathname intptr) (automatic)
unlinkat$auto(dfd intptr, pathname intptr, flag intptr) (automatic)
unshare$auto(unshare_flags intptr) (automatic)
uretprobe$auto() (automatic)
userfaultfd$auto(flags intptr) (automatic)
ustat$auto(dev intptr, ubuf intptr) (automatic)
utime$auto(filename intptr, t intptr) (automatic)
utimensat$auto(dfd intptr, filename intptr, t intptr, flags intptr) (automatic)
utimensat_time64$auto(dfd intptr, filename intptr, utimes intptr, flags intptr) (automatic)
utimes$auto(filename intptr, t intptr) (automatic)
vfork$auto() (automatic)
vhangup$auto() (automatic)
vmsplice$auto(fd intptr, uiov intptr, nr_segs intptr, flags intptr) (automatic)
wait4$auto(upid intptr, stat_addr intptr, options intptr, ru intptr) (automatic)
waitid$auto(which intptr, upid intptr, infop intptr, options intptr, ru intptr) (automatic)
waitpid$auto(pid intptr, stat_addr intptr, options intptr) (automatic)
write$auto(fd intptr, buf intptr, count intptr) (automatic)
writev$auto(fd intptr, vec intptr, vlen intptr) (automatic)
_ = __NR_mmap2

ack_mapinfo_policy$auto_iwpm_msg [
	IWPM_NLA_MAPINFO_SEQ		nlattr[IWPM_NLA_MAPINFO_SEQ, int32]
	IWPM_NLA_MAPINFO_SEND_NUM	nlattr[IWPM_NLA_MAPINFO_SEND_NUM, int32]
	IWPM_NLA_MAPINFO_ACK_NUM	nlattr[IWPM_NLA_MAPINFO_ACK_NUM, int32]
] [varlen]

act_bpf_policy$auto_act_bpf [
	TCA_ACT_BPF_PARMS	nlattr[TCA_ACT_BPF_PARMS, array[int8, 20]]
	TCA_ACT_BPF_OPS_LEN	nlattr[TCA_ACT_BPF_OPS_LEN, int16]
	TCA_ACT_BPF_OPS		nlattr[TCA_ACT_BPF_OPS, array[int8, 0:32768]]
	TCA_ACT_BPF_FD		nlattr[TCA_ACT_BPF_FD, fd]
	TCA_ACT_BPF_NAME	nlattr[TCA_ACT_BPF_NAME, string]
] [varlen]

allowedip_policy$auto_netlink [
	WGALLOWEDIP_A_FAMILY	nlattr[WGALLOWEDIP_A_FAMILY, int16]
	WGALLOWEDIP_A_IPADDR	nlattr[WGALLOWEDIP_A_IPADDR, array[int8]]
	WGALLOWEDIP_A_CIDR_MASK	nlattr[WGALLOWEDIP_A_CIDR_MASK, int8]
] [varlen]

band_policy$auto_meter [
	OVS_BAND_ATTR_TYPE	nlattr[OVS_BAND_ATTR_TYPE, int32]
	OVS_BAND_ATTR_RATE	nlattr[OVS_BAND_ATTR_RATE, int32]
	OVS_BAND_ATTR_BURST	nlattr[OVS_BAND_ATTR_BURST, int32]
	OVS_BAND_ATTR_STATS	nlattr[OVS_BAND_ATTR_STATS, array[int8, 16]]
] [varlen]

bareudp_policy$auto_bareudp [
	IFLA_BAREUDP_PORT		nlattr[IFLA_BAREUDP_PORT, sock_port]
	IFLA_BAREUDP_ETHERTYPE		nlattr[IFLA_BAREUDP_ETHERTYPE, int16]
	IFLA_BAREUDP_SRCPORT_MIN	nlattr[IFLA_BAREUDP_SRCPORT_MIN, sock_port]
	IFLA_BAREUDP_MULTIPROTO_MODE	nlattr[IFLA_BAREUDP_MULTIPROTO_MODE, void]
] [varlen]

basic_policy$auto_cls_basic [
	TCA_BASIC_CLASSID	nlattr[TCA_BASIC_CLASSID, int32]
	TCA_BASIC_EMATCHES	nlattr[TCA_BASIC_EMATCHES, array[int8]]
] [varlen]

batadv_ifla_policy$auto_soft_interface [
	IFLA_BATADV_ALGO_NAME	nlattr[IFLA_BATADV_ALGO_NAME, string]
] [varlen]

batadv_netlink_policy$auto_netlink [
	BATADV_ATTR_VERSION				nlattr[BATADV_ATTR_VERSION, stringnoz]
	BATADV_ATTR_ALGO_NAME				nlattr[BATADV_ATTR_ALGO_NAME, stringnoz]
	BATADV_ATTR_MESH_IFINDEX			nlattr[BATADV_ATTR_MESH_IFINDEX, ifindex]
	BATADV_ATTR_MESH_IFNAME				nlattr[BATADV_ATTR_MESH_IFNAME, stringnoz]
	BATADV_ATTR_MESH_ADDRESS			nlattr[BATADV_ATTR_MESH_ADDRESS, array[int8, 6]]
	BATADV_ATTR_HARD_IFINDEX			nlattr[BATADV_ATTR_HARD_IFINDEX, ifindex]
	BATADV_ATTR_HARD_IFNAME				nlattr[BATADV_ATTR_HARD_IFNAME, stringnoz]
	BATADV_ATTR_HARD_ADDRESS			nlattr[BATADV_ATTR_HARD_ADDRESS, array[int8, 6]]
	BATADV_ATTR_ORIG_ADDRESS			nlattr[BATADV_ATTR_ORIG_ADDRESS, array[int8, 6]]
	BATADV_ATTR_TPMETER_RESULT			nlattr[BATADV_ATTR_TPMETER_RESULT, int8]
	BATADV_ATTR_TPMETER_TEST_TIME			nlattr[BATADV_ATTR_TPMETER_TEST_TIME, int32]
	BATADV_ATTR_TPMETER_BYTES			nlattr[BATADV_ATTR_TPMETER_BYTES, int64]
	BATADV_ATTR_TPMETER_COOKIE			nlattr[BATADV_ATTR_TPMETER_COOKIE, int32]
	BATADV_ATTR_ACTIVE				nlattr[BATADV_ATTR_ACTIVE, void]
	BATADV_ATTR_TT_ADDRESS				nlattr[BATADV_ATTR_TT_ADDRESS, array[int8, 6]]
	BATADV_ATTR_TT_TTVN				nlattr[BATADV_ATTR_TT_TTVN, int8]
	BATADV_ATTR_TT_LAST_TTVN			nlattr[BATADV_ATTR_TT_LAST_TTVN, int8]
	BATADV_ATTR_TT_CRC32				nlattr[BATADV_ATTR_TT_CRC32, int32]
	BATADV_ATTR_TT_VID				nlattr[BATADV_ATTR_TT_VID, int16]
	BATADV_ATTR_TT_FLAGS				nlattr[BATADV_ATTR_TT_FLAGS, int32]
	BATADV_ATTR_FLAG_BEST				nlattr[BATADV_ATTR_FLAG_BEST, void]
	BATADV_ATTR_LAST_SEEN_MSECS			nlattr[BATADV_ATTR_LAST_SEEN_MSECS, int32]
	BATADV_ATTR_NEIGH_ADDRESS			nlattr[BATADV_ATTR_NEIGH_ADDRESS, array[int8, 6]]
	BATADV_ATTR_TQ					nlattr[BATADV_ATTR_TQ, int8]
	BATADV_ATTR_THROUGHPUT				nlattr[BATADV_ATTR_THROUGHPUT, int32]
	BATADV_ATTR_BANDWIDTH_UP			nlattr[BATADV_ATTR_BANDWIDTH_UP, int32]
	BATADV_ATTR_BANDWIDTH_DOWN			nlattr[BATADV_ATTR_BANDWIDTH_DOWN, int32]
	BATADV_ATTR_ROUTER				nlattr[BATADV_ATTR_ROUTER, array[int8, 6]]
	BATADV_ATTR_BLA_OWN				nlattr[BATADV_ATTR_BLA_OWN, void]
	BATADV_ATTR_BLA_ADDRESS				nlattr[BATADV_ATTR_BLA_ADDRESS, array[int8, 6]]
	BATADV_ATTR_BLA_VID				nlattr[BATADV_ATTR_BLA_VID, int16]
	BATADV_ATTR_BLA_BACKBONE			nlattr[BATADV_ATTR_BLA_BACKBONE, array[int8, 6]]
	BATADV_ATTR_BLA_CRC				nlattr[BATADV_ATTR_BLA_CRC, int16]
	BATADV_ATTR_DAT_CACHE_IP4ADDRESS		nlattr[BATADV_ATTR_DAT_CACHE_IP4ADDRESS, int32]
	BATADV_ATTR_DAT_CACHE_HWADDRESS			nlattr[BATADV_ATTR_DAT_CACHE_HWADDRESS, array[int8, 6]]
	BATADV_ATTR_DAT_CACHE_VID			nlattr[BATADV_ATTR_DAT_CACHE_VID, int16]
	BATADV_ATTR_MCAST_FLAGS				nlattr[BATADV_ATTR_MCAST_FLAGS, int32]
	BATADV_ATTR_MCAST_FLAGS_PRIV			nlattr[BATADV_ATTR_MCAST_FLAGS_PRIV, int32]
	BATADV_ATTR_VLANID				nlattr[BATADV_ATTR_VLANID, int16]
	BATADV_ATTR_AGGREGATED_OGMS_ENABLED		nlattr[BATADV_ATTR_AGGREGATED_OGMS_ENABLED, bool8]
	BATADV_ATTR_AP_ISOLATION_ENABLED		nlattr[BATADV_ATTR_AP_ISOLATION_ENABLED, bool8]
	BATADV_ATTR_ISOLATION_MARK			nlattr[BATADV_ATTR_ISOLATION_MARK, int32]
	BATADV_ATTR_ISOLATION_MASK			nlattr[BATADV_ATTR_ISOLATION_MASK, int32]
	BATADV_ATTR_BONDING_ENABLED			nlattr[BATADV_ATTR_BONDING_ENABLED, bool8]
	BATADV_ATTR_BRIDGE_LOOP_AVOIDANCE_ENABLED	nlattr[BATADV_ATTR_BRIDGE_LOOP_AVOIDANCE_ENABLED, bool8]
	BATADV_ATTR_DISTRIBUTED_ARP_TABLE_ENABLED	nlattr[BATADV_ATTR_DISTRIBUTED_ARP_TABLE_ENABLED, bool8]
	BATADV_ATTR_FRAGMENTATION_ENABLED		nlattr[BATADV_ATTR_FRAGMENTATION_ENABLED, bool8]
	BATADV_ATTR_GW_BANDWIDTH_DOWN			nlattr[BATADV_ATTR_GW_BANDWIDTH_DOWN, int32]
	BATADV_ATTR_GW_BANDWIDTH_UP			nlattr[BATADV_ATTR_GW_BANDWIDTH_UP, int32]
	BATADV_ATTR_GW_MODE				nlattr[BATADV_ATTR_GW_MODE, int8]
	BATADV_ATTR_GW_SEL_CLASS			nlattr[BATADV_ATTR_GW_SEL_CLASS, int32]
	BATADV_ATTR_HOP_PENALTY				nlattr[BATADV_ATTR_HOP_PENALTY, int8]
	BATADV_ATTR_LOG_LEVEL				nlattr[BATADV_ATTR_LOG_LEVEL, int32]
	BATADV_ATTR_MULTICAST_FORCEFLOOD_ENABLED	nlattr[BATADV_ATTR_MULTICAST_FORCEFLOOD_ENABLED, bool8]
	BATADV_ATTR_NETWORK_CODING_ENABLED		nlattr[BATADV_ATTR_NETWORK_CODING_ENABLED, bool8]
	BATADV_ATTR_ORIG_INTERVAL			nlattr[BATADV_ATTR_ORIG_INTERVAL, int32]
	BATADV_ATTR_ELP_INTERVAL			nlattr[BATADV_ATTR_ELP_INTERVAL, int32]
	BATADV_ATTR_THROUGHPUT_OVERRIDE			nlattr[BATADV_ATTR_THROUGHPUT_OVERRIDE, int32]
	BATADV_ATTR_MULTICAST_FANOUT			nlattr[BATADV_ATTR_MULTICAST_FANOUT, int32]
] [varlen]

bit_policy$auto_bitset [
	ETHTOOL_A_BITSET_BIT_INDEX	nlattr[ETHTOOL_A_BITSET_BIT_INDEX, int32]
	ETHTOOL_A_BITSET_BIT_NAME	nlattr[ETHTOOL_A_BITSET_BIT_NAME, string]
	ETHTOOL_A_BITSET_BIT_VALUE	nlattr[ETHTOOL_A_BITSET_BIT_VALUE, void]
] [varlen]

bitset_policy$auto_bitset [
	ETHTOOL_A_BITSET_NOMASK	nlattr[ETHTOOL_A_BITSET_NOMASK, void]
	ETHTOOL_A_BITSET_SIZE	nlattr[ETHTOOL_A_BITSET_SIZE, int32]
	ETHTOOL_A_BITSET_BITS	nlattr[ETHTOOL_A_BITSET_BITS, array[int8]]
	ETHTOOL_A_BITSET_VALUE	nlattr[ETHTOOL_A_BITSET_VALUE, array[int8]]
	ETHTOOL_A_BITSET_MASK	nlattr[ETHTOOL_A_BITSET_MASK, array[int8]]
] [varlen]

bond_policy$auto_bond_netlink [
	IFLA_BOND_MODE			nlattr[IFLA_BOND_MODE, int8]
	IFLA_BOND_ACTIVE_SLAVE		nlattr[IFLA_BOND_ACTIVE_SLAVE, int32]
	IFLA_BOND_MIIMON		nlattr[IFLA_BOND_MIIMON, int32]
	IFLA_BOND_UPDELAY		nlattr[IFLA_BOND_UPDELAY, int32]
	IFLA_BOND_DOWNDELAY		nlattr[IFLA_BOND_DOWNDELAY, int32]
	IFLA_BOND_USE_CARRIER		nlattr[IFLA_BOND_USE_CARRIER, int8]
	IFLA_BOND_ARP_INTERVAL		nlattr[IFLA_BOND_ARP_INTERVAL, int32]
	IFLA_BOND_ARP_IP_TARGET		nlattr[IFLA_BOND_ARP_IP_TARGET, array[int8]]
	IFLA_BOND_ARP_VALIDATE		nlattr[IFLA_BOND_ARP_VALIDATE, int32]
	IFLA_BOND_ARP_ALL_TARGETS	nlattr[IFLA_BOND_ARP_ALL_TARGETS, int32]
	IFLA_BOND_PRIMARY		nlattr[IFLA_BOND_PRIMARY, int32]
	IFLA_BOND_PRIMARY_RESELECT	nlattr[IFLA_BOND_PRIMARY_RESELECT, int8]
	IFLA_BOND_FAIL_OVER_MAC		nlattr[IFLA_BOND_FAIL_OVER_MAC, int8]
	IFLA_BOND_XMIT_HASH_POLICY	nlattr[IFLA_BOND_XMIT_HASH_POLICY, int8]
	IFLA_BOND_RESEND_IGMP		nlattr[IFLA_BOND_RESEND_IGMP, int32]
	IFLA_BOND_NUM_PEER_NOTIF	nlattr[IFLA_BOND_NUM_PEER_NOTIF, int8]
	IFLA_BOND_ALL_SLAVES_ACTIVE	nlattr[IFLA_BOND_ALL_SLAVES_ACTIVE, int8]
	IFLA_BOND_MIN_LINKS		nlattr[IFLA_BOND_MIN_LINKS, int32]
	IFLA_BOND_LP_INTERVAL		nlattr[IFLA_BOND_LP_INTERVAL, int32]
	IFLA_BOND_PACKETS_PER_SLAVE	nlattr[IFLA_BOND_PACKETS_PER_SLAVE, int32]
	IFLA_BOND_AD_LACP_RATE		nlattr[IFLA_BOND_AD_LACP_RATE, int8]
	IFLA_BOND_AD_SELECT		nlattr[IFLA_BOND_AD_SELECT, int8]
	IFLA_BOND_AD_INFO		nlattr[IFLA_BOND_AD_INFO, array[int8]]
	IFLA_BOND_AD_ACTOR_SYS_PRIO	nlattr[IFLA_BOND_AD_ACTOR_SYS_PRIO, int16]
	IFLA_BOND_AD_USER_PORT_KEY	nlattr[IFLA_BOND_AD_USER_PORT_KEY, sock_port]
	IFLA_BOND_AD_ACTOR_SYSTEM	nlattr[IFLA_BOND_AD_ACTOR_SYSTEM, array[int8, 0:6]]
	IFLA_BOND_TLB_DYNAMIC_LB	nlattr[IFLA_BOND_TLB_DYNAMIC_LB, int8]
	IFLA_BOND_PEER_NOTIF_DELAY	nlattr[IFLA_BOND_PEER_NOTIF_DELAY, int32]
	IFLA_BOND_AD_LACP_ACTIVE	nlattr[IFLA_BOND_AD_LACP_ACTIVE, int8]
	IFLA_BOND_MISSED_MAX		nlattr[IFLA_BOND_MISSED_MAX, int8]
	IFLA_BOND_NS_IP6_TARGET		nlattr[IFLA_BOND_NS_IP6_TARGET, array[int8]]
	IFLA_BOND_COUPLED_CONTROL	nlattr[IFLA_BOND_COUPLED_CONTROL, int8]
] [varlen]

bond_slave_policy$auto_bond_netlink [
	IFLA_BOND_SLAVE_QUEUE_ID	nlattr[IFLA_BOND_SLAVE_QUEUE_ID, int16]
	IFLA_BOND_SLAVE_PRIO		nlattr[IFLA_BOND_SLAVE_PRIO, int32]
] [varlen]

bpf_nl_policy$auto_lwt_bpf [
	LWT_BPF_IN		nlattr[LWT_BPF_IN, array[int8]]
	LWT_BPF_OUT		nlattr[LWT_BPF_OUT, array[int8]]
	LWT_BPF_XMIT		nlattr[LWT_BPF_XMIT, array[int8]]
	LWT_BPF_XMIT_HEADROOM	nlattr[LWT_BPF_XMIT_HEADROOM, int32]
] [varlen]

bpf_policy$auto_cls_bpf [
	TCA_BPF_CLASSID		nlattr[TCA_BPF_CLASSID, int32]
	TCA_BPF_OPS_LEN		nlattr[TCA_BPF_OPS_LEN, int16]
	TCA_BPF_OPS		nlattr[TCA_BPF_OPS, array[int8, 0:32768]]
	TCA_BPF_FD		nlattr[TCA_BPF_FD, fd]
	TCA_BPF_NAME		nlattr[TCA_BPF_NAME, string]
	TCA_BPF_FLAGS		nlattr[TCA_BPF_FLAGS, int32]
	TCA_BPF_FLAGS_GEN	nlattr[TCA_BPF_FLAGS_GEN, int32]
] [varlen]

bpf_prog_policy$auto_lwt_bpf [
	LWT_BPF_PROG_FD		nlattr[LWT_BPF_PROG_FD, fd]
	LWT_BPF_PROG_NAME	nlattr[LWT_BPF_PROG_NAME, string]
] [varlen]

bpf_prog_policy$auto_seg6_local [
	SEG6_LOCAL_BPF_PROG		nlattr[SEG6_LOCAL_BPF_PROG, int32]
	SEG6_LOCAL_BPF_PROG_NAME	nlattr[SEG6_LOCAL_BPF_PROG_NAME, string]
] [varlen]

br_cfm_cc_ccm_tx_policy$auto_br_cfm_netlink [
	IFLA_BRIDGE_CFM_CC_CCM_TX_UNSPEC		nlattr[IFLA_BRIDGE_CFM_CC_CCM_TX_UNSPEC, array[int8]]
	IFLA_BRIDGE_CFM_CC_CCM_TX_INSTANCE		nlattr[IFLA_BRIDGE_CFM_CC_CCM_TX_INSTANCE, int32]
	IFLA_BRIDGE_CFM_CC_CCM_TX_DMAC			nlattr[IFLA_BRIDGE_CFM_CC_CCM_TX_DMAC, array[int8]]
	IFLA_BRIDGE_CFM_CC_CCM_TX_SEQ_NO_UPDATE		nlattr[IFLA_BRIDGE_CFM_CC_CCM_TX_SEQ_NO_UPDATE, int32]
	IFLA_BRIDGE_CFM_CC_CCM_TX_PERIOD		nlattr[IFLA_BRIDGE_CFM_CC_CCM_TX_PERIOD, int32]
	IFLA_BRIDGE_CFM_CC_CCM_TX_IF_TLV		nlattr[IFLA_BRIDGE_CFM_CC_CCM_TX_IF_TLV, int32]
	IFLA_BRIDGE_CFM_CC_CCM_TX_IF_TLV_VALUE		nlattr[IFLA_BRIDGE_CFM_CC_CCM_TX_IF_TLV_VALUE, int8]
	IFLA_BRIDGE_CFM_CC_CCM_TX_PORT_TLV		nlattr[IFLA_BRIDGE_CFM_CC_CCM_TX_PORT_TLV, int32]
	IFLA_BRIDGE_CFM_CC_CCM_TX_PORT_TLV_VALUE	nlattr[IFLA_BRIDGE_CFM_CC_CCM_TX_PORT_TLV_VALUE, int8]
] [varlen]

br_cfm_cc_config_policy$auto_br_cfm_netlink [
	IFLA_BRIDGE_CFM_CC_CONFIG_UNSPEC	nlattr[IFLA_BRIDGE_CFM_CC_CONFIG_UNSPEC, array[int8]]
	IFLA_BRIDGE_CFM_CC_CONFIG_INSTANCE	nlattr[IFLA_BRIDGE_CFM_CC_CONFIG_INSTANCE, int32]
	IFLA_BRIDGE_CFM_CC_CONFIG_ENABLE	nlattr[IFLA_BRIDGE_CFM_CC_CONFIG_ENABLE, bool32]
	IFLA_BRIDGE_CFM_CC_CONFIG_EXP_INTERVAL	nlattr[IFLA_BRIDGE_CFM_CC_CONFIG_EXP_INTERVAL, int32]
	IFLA_BRIDGE_CFM_CC_CONFIG_EXP_MAID	nlattr[IFLA_BRIDGE_CFM_CC_CONFIG_EXP_MAID, array[int8, 0:48]]
] [varlen]

br_cfm_cc_peer_mep_policy$auto_br_cfm_netlink [
	IFLA_BRIDGE_CFM_CC_PEER_MEP_UNSPEC	nlattr[IFLA_BRIDGE_CFM_CC_PEER_MEP_UNSPEC, array[int8]]
	IFLA_BRIDGE_CFM_CC_PEER_MEP_INSTANCE	nlattr[IFLA_BRIDGE_CFM_CC_PEER_MEP_INSTANCE, int32]
	IFLA_BRIDGE_CFM_CC_PEER_MEPID		nlattr[IFLA_BRIDGE_CFM_CC_PEER_MEPID, int32]
] [varlen]

br_cfm_cc_rdi_policy$auto_br_cfm_netlink [
	IFLA_BRIDGE_CFM_CC_RDI_UNSPEC	nlattr[IFLA_BRIDGE_CFM_CC_RDI_UNSPEC, array[int8]]
	IFLA_BRIDGE_CFM_CC_RDI_INSTANCE	nlattr[IFLA_BRIDGE_CFM_CC_RDI_INSTANCE, int32]
	IFLA_BRIDGE_CFM_CC_RDI_RDI	nlattr[IFLA_BRIDGE_CFM_CC_RDI_RDI, int32]
] [varlen]

br_cfm_mep_config_policy$auto_br_cfm_netlink [
	IFLA_BRIDGE_CFM_MEP_CONFIG_UNSPEC	nlattr[IFLA_BRIDGE_CFM_MEP_CONFIG_UNSPEC, array[int8]]
	IFLA_BRIDGE_CFM_MEP_CONFIG_INSTANCE	nlattr[IFLA_BRIDGE_CFM_MEP_CONFIG_INSTANCE, int32]
	IFLA_BRIDGE_CFM_MEP_CONFIG_UNICAST_MAC	nlattr[IFLA_BRIDGE_CFM_MEP_CONFIG_UNICAST_MAC, array[int8]]
	IFLA_BRIDGE_CFM_MEP_CONFIG_MDLEVEL	nlattr[IFLA_BRIDGE_CFM_MEP_CONFIG_MDLEVEL, int32]
	IFLA_BRIDGE_CFM_MEP_CONFIG_MEPID	nlattr[IFLA_BRIDGE_CFM_MEP_CONFIG_MEPID, int32]
] [varlen]

br_cfm_mep_create_policy$auto_br_cfm_netlink [
	IFLA_BRIDGE_CFM_MEP_CREATE_UNSPEC	nlattr[IFLA_BRIDGE_CFM_MEP_CREATE_UNSPEC, array[int8]]
	IFLA_BRIDGE_CFM_MEP_CREATE_INSTANCE	nlattr[IFLA_BRIDGE_CFM_MEP_CREATE_INSTANCE, int32]
	IFLA_BRIDGE_CFM_MEP_CREATE_DOMAIN	nlattr[IFLA_BRIDGE_CFM_MEP_CREATE_DOMAIN, int32]
	IFLA_BRIDGE_CFM_MEP_CREATE_DIRECTION	nlattr[IFLA_BRIDGE_CFM_MEP_CREATE_DIRECTION, int32]
	IFLA_BRIDGE_CFM_MEP_CREATE_IFINDEX	nlattr[IFLA_BRIDGE_CFM_MEP_CREATE_IFINDEX, ifindex]
] [varlen]

br_cfm_mep_delete_policy$auto_br_cfm_netlink [
	IFLA_BRIDGE_CFM_MEP_DELETE_UNSPEC	nlattr[IFLA_BRIDGE_CFM_MEP_DELETE_UNSPEC, array[int8]]
	IFLA_BRIDGE_CFM_MEP_DELETE_INSTANCE	nlattr[IFLA_BRIDGE_CFM_MEP_DELETE_INSTANCE, int32]
] [varlen]

br_cfm_policy$auto_br_cfm_netlink [
	IFLA_BRIDGE_CFM_UNSPEC			nlattr[IFLA_BRIDGE_CFM_UNSPEC, array[int8]]
	IFLA_BRIDGE_CFM_MEP_CREATE		nlattr[IFLA_BRIDGE_CFM_MEP_CREATE, int32]
	IFLA_BRIDGE_CFM_MEP_DELETE		nlattr[IFLA_BRIDGE_CFM_MEP_DELETE, int8]
	IFLA_BRIDGE_CFM_MEP_CONFIG		nlattr[IFLA_BRIDGE_CFM_MEP_CONFIG, int32]
	IFLA_BRIDGE_CFM_CC_CONFIG		nlattr[IFLA_BRIDGE_CFM_CC_CONFIG, int32]
	IFLA_BRIDGE_CFM_CC_PEER_MEP_ADD		nlattr[IFLA_BRIDGE_CFM_CC_PEER_MEP_ADD, int16]
	IFLA_BRIDGE_CFM_CC_PEER_MEP_REMOVE	nlattr[IFLA_BRIDGE_CFM_CC_PEER_MEP_REMOVE, int16]
	IFLA_BRIDGE_CFM_CC_RDI			nlattr[IFLA_BRIDGE_CFM_CC_RDI, int16]
	IFLA_BRIDGE_CFM_CC_CCM_TX		nlattr[IFLA_BRIDGE_CFM_CC_CCM_TX, int64]
] [varlen]

br_fdb_del_bulk_policy$auto_br_fdb [
	NDA_VLAN		nlattr[NDA_VLAN, int16]
	NDA_IFINDEX		nlattr[NDA_IFINDEX, ifindex]
	NDA_NDM_STATE_MASK	nlattr[NDA_NDM_STATE_MASK, int16]
	NDA_NDM_FLAGS_MASK	nlattr[NDA_NDM_FLAGS_MASK, int8]
] [varlen]

br_mdbe_attrs_del_bulk_pol$auto_br_mdb [
	MDBE_ATTR_RTPROT	nlattr[MDBE_ATTR_RTPROT, int8]
	MDBE_ATTR_STATE_MASK	nlattr[MDBE_ATTR_STATE_MASK, int8]
] [varlen]

br_mdbe_attrs_get_pol$auto_br_mdb [
	MDBE_ATTR_SOURCE	nlattr[MDBE_ATTR_SOURCE, array[int8]]
] [varlen]

br_mdbe_attrs_pol$auto_br_mdb [
	MDBE_ATTR_SOURCE	nlattr[MDBE_ATTR_SOURCE, array[int8]]
	MDBE_ATTR_SRC_LIST	nlattr[MDBE_ATTR_SRC_LIST, int8]
	MDBE_ATTR_GROUP_MODE	nlattr[MDBE_ATTR_GROUP_MODE, int8]
	MDBE_ATTR_RTPROT	nlattr[MDBE_ATTR_RTPROT, int8]
] [varlen]

br_mdbe_src_list_entry_pol$auto_br_mdb [
	MDBE_SRCATTR_ADDRESS	nlattr[MDBE_SRCATTR_ADDRESS, array[int8]]
] [varlen]

br_mdbe_src_list_pol$auto_br_mdb [
	MDBE_SRC_LIST_ENTRY	nlattr[MDBE_SRC_LIST_ENTRY, int8]
] [varlen]

br_mrp_in_role_policy$auto_br_mrp_netlink [
	IFLA_BRIDGE_MRP_IN_ROLE_UNSPEC		nlattr[IFLA_BRIDGE_MRP_IN_ROLE_UNSPEC, array[int8]]
	IFLA_BRIDGE_MRP_IN_ROLE_RING_ID		nlattr[IFLA_BRIDGE_MRP_IN_ROLE_RING_ID, int32]
	IFLA_BRIDGE_MRP_IN_ROLE_IN_ID		nlattr[IFLA_BRIDGE_MRP_IN_ROLE_IN_ID, int16]
	IFLA_BRIDGE_MRP_IN_ROLE_ROLE		nlattr[IFLA_BRIDGE_MRP_IN_ROLE_ROLE, int32]
	IFLA_BRIDGE_MRP_IN_ROLE_I_IFINDEX	nlattr[IFLA_BRIDGE_MRP_IN_ROLE_I_IFINDEX, ifindex]
] [varlen]

br_mrp_in_state_policy$auto_br_mrp_netlink [
	IFLA_BRIDGE_MRP_IN_STATE_UNSPEC	nlattr[IFLA_BRIDGE_MRP_IN_STATE_UNSPEC, array[int8]]
	IFLA_BRIDGE_MRP_IN_STATE_IN_ID	nlattr[IFLA_BRIDGE_MRP_IN_STATE_IN_ID, int32]
	IFLA_BRIDGE_MRP_IN_STATE_STATE	nlattr[IFLA_BRIDGE_MRP_IN_STATE_STATE, int32]
] [varlen]

br_mrp_instance_policy$auto_br_mrp_netlink [
	IFLA_BRIDGE_MRP_INSTANCE_UNSPEC		nlattr[IFLA_BRIDGE_MRP_INSTANCE_UNSPEC, array[int8]]
	IFLA_BRIDGE_MRP_INSTANCE_RING_ID	nlattr[IFLA_BRIDGE_MRP_INSTANCE_RING_ID, int32]
	IFLA_BRIDGE_MRP_INSTANCE_P_IFINDEX	nlattr[IFLA_BRIDGE_MRP_INSTANCE_P_IFINDEX, ifindex]
	IFLA_BRIDGE_MRP_INSTANCE_S_IFINDEX	nlattr[IFLA_BRIDGE_MRP_INSTANCE_S_IFINDEX, ifindex]
	IFLA_BRIDGE_MRP_INSTANCE_PRIO		nlattr[IFLA_BRIDGE_MRP_INSTANCE_PRIO, int16]
] [varlen]

br_mrp_policy$auto_br_mrp_netlink [
	IFLA_BRIDGE_MRP_UNSPEC		nlattr[IFLA_BRIDGE_MRP_UNSPEC, array[int8]]
	IFLA_BRIDGE_MRP_INSTANCE	nlattr[IFLA_BRIDGE_MRP_INSTANCE, array[int8]]
	IFLA_BRIDGE_MRP_PORT_STATE	nlattr[IFLA_BRIDGE_MRP_PORT_STATE, array[int8]]
	IFLA_BRIDGE_MRP_PORT_ROLE	nlattr[IFLA_BRIDGE_MRP_PORT_ROLE, array[int8]]
	IFLA_BRIDGE_MRP_RING_STATE	nlattr[IFLA_BRIDGE_MRP_RING_STATE, array[int8]]
	IFLA_BRIDGE_MRP_RING_ROLE	nlattr[IFLA_BRIDGE_MRP_RING_ROLE, array[int8]]
	IFLA_BRIDGE_MRP_START_TEST	nlattr[IFLA_BRIDGE_MRP_START_TEST, array[int8]]
	IFLA_BRIDGE_MRP_IN_ROLE		nlattr[IFLA_BRIDGE_MRP_IN_ROLE, array[int8]]
	IFLA_BRIDGE_MRP_IN_STATE	nlattr[IFLA_BRIDGE_MRP_IN_STATE, array[int8]]
	IFLA_BRIDGE_MRP_START_IN_TEST	nlattr[IFLA_BRIDGE_MRP_START_IN_TEST, array[int8]]
] [varlen]

br_mrp_port_role_policy$auto_br_mrp_netlink [
	IFLA_BRIDGE_MRP_PORT_ROLE_UNSPEC	nlattr[IFLA_BRIDGE_MRP_PORT_ROLE_UNSPEC, array[int8]]
	IFLA_BRIDGE_MRP_PORT_ROLE_ROLE		nlattr[IFLA_BRIDGE_MRP_PORT_ROLE_ROLE, int32]
] [varlen]

br_mrp_port_state_policy$auto_br_mrp_netlink [
	IFLA_BRIDGE_MRP_PORT_STATE_UNSPEC	nlattr[IFLA_BRIDGE_MRP_PORT_STATE_UNSPEC, array[int8]]
	IFLA_BRIDGE_MRP_PORT_STATE_STATE	nlattr[IFLA_BRIDGE_MRP_PORT_STATE_STATE, int32]
] [varlen]

br_mrp_ring_role_policy$auto_br_mrp_netlink [
	IFLA_BRIDGE_MRP_RING_ROLE_UNSPEC	nlattr[IFLA_BRIDGE_MRP_RING_ROLE_UNSPEC, array[int8]]
	IFLA_BRIDGE_MRP_RING_ROLE_RING_ID	nlattr[IFLA_BRIDGE_MRP_RING_ROLE_RING_ID, int32]
	IFLA_BRIDGE_MRP_RING_ROLE_ROLE		nlattr[IFLA_BRIDGE_MRP_RING_ROLE_ROLE, int32]
] [varlen]

br_mrp_ring_state_policy$auto_br_mrp_netlink [
	IFLA_BRIDGE_MRP_RING_STATE_UNSPEC	nlattr[IFLA_BRIDGE_MRP_RING_STATE_UNSPEC, array[int8]]
	IFLA_BRIDGE_MRP_RING_STATE_RING_ID	nlattr[IFLA_BRIDGE_MRP_RING_STATE_RING_ID, int32]
	IFLA_BRIDGE_MRP_RING_STATE_STATE	nlattr[IFLA_BRIDGE_MRP_RING_STATE_STATE, int32]
] [varlen]

br_mrp_start_in_test_policy$auto_br_mrp_netlink [
	IFLA_BRIDGE_MRP_START_IN_TEST_UNSPEC	nlattr[IFLA_BRIDGE_MRP_START_IN_TEST_UNSPEC, array[int8]]
	IFLA_BRIDGE_MRP_START_IN_TEST_IN_ID	nlattr[IFLA_BRIDGE_MRP_START_IN_TEST_IN_ID, int32]
	IFLA_BRIDGE_MRP_START_IN_TEST_INTERVAL	nlattr[IFLA_BRIDGE_MRP_START_IN_TEST_INTERVAL, int32]
	IFLA_BRIDGE_MRP_START_IN_TEST_MAX_MISS	nlattr[IFLA_BRIDGE_MRP_START_IN_TEST_MAX_MISS, int32]
	IFLA_BRIDGE_MRP_START_IN_TEST_PERIOD	nlattr[IFLA_BRIDGE_MRP_START_IN_TEST_PERIOD, int32]
] [varlen]

br_mrp_start_test_policy$auto_br_mrp_netlink [
	IFLA_BRIDGE_MRP_START_TEST_UNSPEC	nlattr[IFLA_BRIDGE_MRP_START_TEST_UNSPEC, array[int8]]
	IFLA_BRIDGE_MRP_START_TEST_RING_ID	nlattr[IFLA_BRIDGE_MRP_START_TEST_RING_ID, int32]
	IFLA_BRIDGE_MRP_START_TEST_INTERVAL	nlattr[IFLA_BRIDGE_MRP_START_TEST_INTERVAL, int32]
	IFLA_BRIDGE_MRP_START_TEST_MAX_MISS	nlattr[IFLA_BRIDGE_MRP_START_TEST_MAX_MISS, int32]
	IFLA_BRIDGE_MRP_START_TEST_PERIOD	nlattr[IFLA_BRIDGE_MRP_START_TEST_PERIOD, int32]
	IFLA_BRIDGE_MRP_START_TEST_MONITOR	nlattr[IFLA_BRIDGE_MRP_START_TEST_MONITOR, int32]
] [varlen]

br_mst_nl_policy$auto_br_mst [
	IFLA_BRIDGE_MST_ENTRY_MSTI	nlattr[IFLA_BRIDGE_MST_ENTRY_MSTI, int16]
	IFLA_BRIDGE_MST_ENTRY_STATE	nlattr[IFLA_BRIDGE_MST_ENTRY_STATE, int8]
] [varlen]

br_nda_fdb_pol$auto_br_fdb [
	NFEA_ACTIVITY_NOTIFY	nlattr[NFEA_ACTIVITY_NOTIFY, int8]
	NFEA_DONT_REFRESH	nlattr[NFEA_DONT_REFRESH, void]
] [varlen]

br_policy$auto_br_netlink [
	IFLA_BR_UNSPEC				nlattr[IFLA_BR_UNSPEC, array[int8]]
	IFLA_BR_FORWARD_DELAY			nlattr[IFLA_BR_FORWARD_DELAY, int32]
	IFLA_BR_HELLO_TIME			nlattr[IFLA_BR_HELLO_TIME, int32]
	IFLA_BR_MAX_AGE				nlattr[IFLA_BR_MAX_AGE, int32]
	IFLA_BR_AGEING_TIME			nlattr[IFLA_BR_AGEING_TIME, int32]
	IFLA_BR_STP_STATE			nlattr[IFLA_BR_STP_STATE, int32]
	IFLA_BR_PRIORITY			nlattr[IFLA_BR_PRIORITY, int16]
	IFLA_BR_VLAN_FILTERING			nlattr[IFLA_BR_VLAN_FILTERING, int8]
	IFLA_BR_VLAN_PROTOCOL			nlattr[IFLA_BR_VLAN_PROTOCOL, int16]
	IFLA_BR_GROUP_FWD_MASK			nlattr[IFLA_BR_GROUP_FWD_MASK, int16]
	IFLA_BR_GROUP_ADDR			nlattr[IFLA_BR_GROUP_ADDR, array[int8, 0:6]]
	IFLA_BR_MCAST_ROUTER			nlattr[IFLA_BR_MCAST_ROUTER, int8]
	IFLA_BR_MCAST_SNOOPING			nlattr[IFLA_BR_MCAST_SNOOPING, int8]
	IFLA_BR_MCAST_QUERY_USE_IFADDR		nlattr[IFLA_BR_MCAST_QUERY_USE_IFADDR, int8]
	IFLA_BR_MCAST_QUERIER			nlattr[IFLA_BR_MCAST_QUERIER, int8]
	IFLA_BR_MCAST_HASH_ELASTICITY		nlattr[IFLA_BR_MCAST_HASH_ELASTICITY, int32]
	IFLA_BR_MCAST_HASH_MAX			nlattr[IFLA_BR_MCAST_HASH_MAX, int32]
	IFLA_BR_MCAST_LAST_MEMBER_CNT		nlattr[IFLA_BR_MCAST_LAST_MEMBER_CNT, int32]
	IFLA_BR_MCAST_STARTUP_QUERY_CNT		nlattr[IFLA_BR_MCAST_STARTUP_QUERY_CNT, int32]
	IFLA_BR_MCAST_LAST_MEMBER_INTVL		nlattr[IFLA_BR_MCAST_LAST_MEMBER_INTVL, int64]
	IFLA_BR_MCAST_MEMBERSHIP_INTVL		nlattr[IFLA_BR_MCAST_MEMBERSHIP_INTVL, int64]
	IFLA_BR_MCAST_QUERIER_INTVL		nlattr[IFLA_BR_MCAST_QUERIER_INTVL, int64]
	IFLA_BR_MCAST_QUERY_INTVL		nlattr[IFLA_BR_MCAST_QUERY_INTVL, int64]
	IFLA_BR_MCAST_QUERY_RESPONSE_INTVL	nlattr[IFLA_BR_MCAST_QUERY_RESPONSE_INTVL, int64]
	IFLA_BR_MCAST_STARTUP_QUERY_INTVL	nlattr[IFLA_BR_MCAST_STARTUP_QUERY_INTVL, int64]
	IFLA_BR_NF_CALL_IPTABLES		nlattr[IFLA_BR_NF_CALL_IPTABLES, int8]
	IFLA_BR_NF_CALL_IP6TABLES		nlattr[IFLA_BR_NF_CALL_IP6TABLES, int8]
	IFLA_BR_NF_CALL_ARPTABLES		nlattr[IFLA_BR_NF_CALL_ARPTABLES, int8]
	IFLA_BR_VLAN_DEFAULT_PVID		nlattr[IFLA_BR_VLAN_DEFAULT_PVID, int16]
	IFLA_BR_VLAN_STATS_ENABLED		nlattr[IFLA_BR_VLAN_STATS_ENABLED, bool8]
	IFLA_BR_MCAST_STATS_ENABLED		nlattr[IFLA_BR_MCAST_STATS_ENABLED, bool8]
	IFLA_BR_MCAST_IGMP_VERSION		nlattr[IFLA_BR_MCAST_IGMP_VERSION, int8]
	IFLA_BR_MCAST_MLD_VERSION		nlattr[IFLA_BR_MCAST_MLD_VERSION, int8]
	IFLA_BR_VLAN_STATS_PER_PORT		nlattr[IFLA_BR_VLAN_STATS_PER_PORT, int8]
	IFLA_BR_MULTI_BOOLOPT			nlattr[IFLA_BR_MULTI_BOOLOPT, array[int8]]
	IFLA_BR_FDB_N_LEARNED			nlattr[IFLA_BR_FDB_N_LEARNED, array[int8]]
	IFLA_BR_FDB_MAX_LEARNED			nlattr[IFLA_BR_FDB_MAX_LEARNED, int32]
] [varlen]

br_port_policy$auto_br_netlink [
	IFLA_BRPORT_UNSPEC			nlattr[IFLA_BRPORT_UNSPEC, array[int8]]
	IFLA_BRPORT_STATE			nlattr[IFLA_BRPORT_STATE, int8]
	IFLA_BRPORT_PRIORITY			nlattr[IFLA_BRPORT_PRIORITY, sock_port]
	IFLA_BRPORT_COST			nlattr[IFLA_BRPORT_COST, int32]
	IFLA_BRPORT_MODE			nlattr[IFLA_BRPORT_MODE, int8]
	IFLA_BRPORT_GUARD			nlattr[IFLA_BRPORT_GUARD, int8]
	IFLA_BRPORT_PROTECT			nlattr[IFLA_BRPORT_PROTECT, int8]
	IFLA_BRPORT_FAST_LEAVE			nlattr[IFLA_BRPORT_FAST_LEAVE, int8]
	IFLA_BRPORT_LEARNING			nlattr[IFLA_BRPORT_LEARNING, int8]
	IFLA_BRPORT_UNICAST_FLOOD		nlattr[IFLA_BRPORT_UNICAST_FLOOD, int8]
	IFLA_BRPORT_PROXYARP			nlattr[IFLA_BRPORT_PROXYARP, int8]
	IFLA_BRPORT_PROXYARP_WIFI		nlattr[IFLA_BRPORT_PROXYARP_WIFI, int8]
	IFLA_BRPORT_MULTICAST_ROUTER		nlattr[IFLA_BRPORT_MULTICAST_ROUTER, int8]
	IFLA_BRPORT_MCAST_FLOOD			nlattr[IFLA_BRPORT_MCAST_FLOOD, int8]
	IFLA_BRPORT_MCAST_TO_UCAST		nlattr[IFLA_BRPORT_MCAST_TO_UCAST, int8]
	IFLA_BRPORT_VLAN_TUNNEL			nlattr[IFLA_BRPORT_VLAN_TUNNEL, int8]
	IFLA_BRPORT_BCAST_FLOOD			nlattr[IFLA_BRPORT_BCAST_FLOOD, int8]
	IFLA_BRPORT_GROUP_FWD_MASK		nlattr[IFLA_BRPORT_GROUP_FWD_MASK, sock_port]
	IFLA_BRPORT_NEIGH_SUPPRESS		nlattr[IFLA_BRPORT_NEIGH_SUPPRESS, int8]
	IFLA_BRPORT_ISOLATED			nlattr[IFLA_BRPORT_ISOLATED, int8]
	IFLA_BRPORT_BACKUP_PORT			nlattr[IFLA_BRPORT_BACKUP_PORT, int32]
	IFLA_BRPORT_MCAST_EHT_HOSTS_LIMIT	nlattr[IFLA_BRPORT_MCAST_EHT_HOSTS_LIMIT, int32]
	IFLA_BRPORT_LOCKED			nlattr[IFLA_BRPORT_LOCKED, int8]
	IFLA_BRPORT_MAB				nlattr[IFLA_BRPORT_MAB, int8]
	IFLA_BRPORT_MCAST_N_GROUPS		nlattr[IFLA_BRPORT_MCAST_N_GROUPS, array[int8]]
	IFLA_BRPORT_MCAST_MAX_GROUPS		nlattr[IFLA_BRPORT_MCAST_MAX_GROUPS, int32]
	IFLA_BRPORT_NEIGH_VLAN_SUPPRESS		nlattr[IFLA_BRPORT_NEIGH_VLAN_SUPPRESS, int8]
	IFLA_BRPORT_BACKUP_NHID			nlattr[IFLA_BRPORT_BACKUP_NHID, int32]
] [varlen]

br_vlan_db_dump_pol$auto_br_vlan [
	BRIDGE_VLANDB_DUMP_FLAGS	nlattr[BRIDGE_VLANDB_DUMP_FLAGS, int32]
] [varlen]

br_vlan_db_gpol$auto_br_vlan_options [
	BRIDGE_VLANDB_GOPTS_ID				nlattr[BRIDGE_VLANDB_GOPTS_ID, int16]
	BRIDGE_VLANDB_GOPTS_RANGE			nlattr[BRIDGE_VLANDB_GOPTS_RANGE, int16]
	BRIDGE_VLANDB_GOPTS_MCAST_SNOOPING		nlattr[BRIDGE_VLANDB_GOPTS_MCAST_SNOOPING, int8]
	BRIDGE_VLANDB_GOPTS_MCAST_IGMP_VERSION		nlattr[BRIDGE_VLANDB_GOPTS_MCAST_IGMP_VERSION, int8]
	BRIDGE_VLANDB_GOPTS_MCAST_MLD_VERSION		nlattr[BRIDGE_VLANDB_GOPTS_MCAST_MLD_VERSION, int8]
	BRIDGE_VLANDB_GOPTS_MCAST_LAST_MEMBER_CNT	nlattr[BRIDGE_VLANDB_GOPTS_MCAST_LAST_MEMBER_CNT, int32]
	BRIDGE_VLANDB_GOPTS_MCAST_STARTUP_QUERY_CNT	nlattr[BRIDGE_VLANDB_GOPTS_MCAST_STARTUP_QUERY_CNT, int32]
	BRIDGE_VLANDB_GOPTS_MCAST_LAST_MEMBER_INTVL	nlattr[BRIDGE_VLANDB_GOPTS_MCAST_LAST_MEMBER_INTVL, int64]
	BRIDGE_VLANDB_GOPTS_MCAST_MEMBERSHIP_INTVL	nlattr[BRIDGE_VLANDB_GOPTS_MCAST_MEMBERSHIP_INTVL, int64]
	BRIDGE_VLANDB_GOPTS_MCAST_QUERIER_INTVL		nlattr[BRIDGE_VLANDB_GOPTS_MCAST_QUERIER_INTVL, int64]
	BRIDGE_VLANDB_GOPTS_MCAST_QUERY_INTVL		nlattr[BRIDGE_VLANDB_GOPTS_MCAST_QUERY_INTVL, int64]
	BRIDGE_VLANDB_GOPTS_MCAST_QUERY_RESPONSE_INTVL	nlattr[BRIDGE_VLANDB_GOPTS_MCAST_QUERY_RESPONSE_INTVL, int64]
	BRIDGE_VLANDB_GOPTS_MCAST_STARTUP_QUERY_INTVL	nlattr[BRIDGE_VLANDB_GOPTS_MCAST_STARTUP_QUERY_INTVL, int64]
	BRIDGE_VLANDB_GOPTS_MCAST_QUERIER		nlattr[BRIDGE_VLANDB_GOPTS_MCAST_QUERIER, int8]
	BRIDGE_VLANDB_GOPTS_MSTI			nlattr[BRIDGE_VLANDB_GOPTS_MSTI, int16]
] [varlen]

br_vlan_db_policy$auto_br_vlan [
	BRIDGE_VLANDB_ENTRY_INFO		nlattr[BRIDGE_VLANDB_ENTRY_INFO, array[int8]]
	BRIDGE_VLANDB_ENTRY_RANGE		nlattr[BRIDGE_VLANDB_ENTRY_RANGE, int16]
	BRIDGE_VLANDB_ENTRY_STATE		nlattr[BRIDGE_VLANDB_ENTRY_STATE, int8]
	BRIDGE_VLANDB_ENTRY_TUNNEL_INFO		nlattr[BRIDGE_VLANDB_ENTRY_TUNNEL_INFO, array[int8]]
	BRIDGE_VLANDB_ENTRY_MCAST_ROUTER	nlattr[BRIDGE_VLANDB_ENTRY_MCAST_ROUTER, int8]
	BRIDGE_VLANDB_ENTRY_MCAST_N_GROUPS	nlattr[BRIDGE_VLANDB_ENTRY_MCAST_N_GROUPS, array[int8]]
	BRIDGE_VLANDB_ENTRY_MCAST_MAX_GROUPS	nlattr[BRIDGE_VLANDB_ENTRY_MCAST_MAX_GROUPS, int32]
	BRIDGE_VLANDB_ENTRY_NEIGH_SUPPRESS	nlattr[BRIDGE_VLANDB_ENTRY_NEIGH_SUPPRESS, int8]
] [varlen]

br_vlandb_tinfo_pol$auto_br_vlan_options [
	BRIDGE_VLANDB_TINFO_ID	nlattr[BRIDGE_VLANDB_TINFO_ID, int32]
	BRIDGE_VLANDB_TINFO_CMD	nlattr[BRIDGE_VLANDB_TINFO_CMD, int32]
] [varlen]

cable_test_tdr_act_cfg_policy$auto_cabletest [
	ETHTOOL_A_CABLE_TEST_TDR_CFG_FIRST	nlattr[ETHTOOL_A_CABLE_TEST_TDR_CFG_FIRST, int32]
	ETHTOOL_A_CABLE_TEST_TDR_CFG_LAST	nlattr[ETHTOOL_A_CABLE_TEST_TDR_CFG_LAST, int32]
	ETHTOOL_A_CABLE_TEST_TDR_CFG_STEP	nlattr[ETHTOOL_A_CABLE_TEST_TDR_CFG_STEP, int32]
	ETHTOOL_A_CABLE_TEST_TDR_CFG_PAIR	nlattr[ETHTOOL_A_CABLE_TEST_TDR_CFG_PAIR, int8]
] [varlen]

cake_policy$auto_sch_cake [
	TCA_CAKE_BASE_RATE64	nlattr[TCA_CAKE_BASE_RATE64, int64]
	TCA_CAKE_DIFFSERV_MODE	nlattr[TCA_CAKE_DIFFSERV_MODE, int32]
	TCA_CAKE_ATM		nlattr[TCA_CAKE_ATM, int32]
	TCA_CAKE_FLOW_MODE	nlattr[TCA_CAKE_FLOW_MODE, int32]
	TCA_CAKE_OVERHEAD	nlattr[TCA_CAKE_OVERHEAD, int32]
	TCA_CAKE_RTT		nlattr[TCA_CAKE_RTT, int32]
	TCA_CAKE_TARGET		nlattr[TCA_CAKE_TARGET, int32]
	TCA_CAKE_AUTORATE	nlattr[TCA_CAKE_AUTORATE, int32]
	TCA_CAKE_MEMORY		nlattr[TCA_CAKE_MEMORY, int32]
	TCA_CAKE_NAT		nlattr[TCA_CAKE_NAT, int32]
	TCA_CAKE_RAW		nlattr[TCA_CAKE_RAW, int32]
	TCA_CAKE_WASH		nlattr[TCA_CAKE_WASH, int32]
	TCA_CAKE_MPU		nlattr[TCA_CAKE_MPU, int32]
	TCA_CAKE_INGRESS	nlattr[TCA_CAKE_INGRESS, int32]
	TCA_CAKE_ACK_FILTER	nlattr[TCA_CAKE_ACK_FILTER, int32]
	TCA_CAKE_SPLIT_GSO	nlattr[TCA_CAKE_SPLIT_GSO, int32]
	TCA_CAKE_FWMARK		nlattr[TCA_CAKE_FWMARK, int32]
] [varlen]

calipso_genl_policy$auto_netlabel_calipso [
	NLBL_CALIPSO_A_DOI	nlattr[NLBL_CALIPSO_A_DOI, int32]
	NLBL_CALIPSO_A_MTYPE	nlattr[NLBL_CALIPSO_A_MTYPE, int32]
] [varlen]

can_policy$auto_netlink [
	IFLA_CAN_BITTIMING		nlattr[IFLA_CAN_BITTIMING, array[int8, 32]]
	IFLA_CAN_BITTIMING_CONST	nlattr[IFLA_CAN_BITTIMING_CONST, array[int8, 48]]
	IFLA_CAN_CLOCK			nlattr[IFLA_CAN_CLOCK, int32]
	IFLA_CAN_STATE			nlattr[IFLA_CAN_STATE, int32]
	IFLA_CAN_CTRLMODE		nlattr[IFLA_CAN_CTRLMODE, int64]
	IFLA_CAN_RESTART_MS		nlattr[IFLA_CAN_RESTART_MS, int32]
	IFLA_CAN_RESTART		nlattr[IFLA_CAN_RESTART, int32]
	IFLA_CAN_BERR_COUNTER		nlattr[IFLA_CAN_BERR_COUNTER, int32]
	IFLA_CAN_DATA_BITTIMING		nlattr[IFLA_CAN_DATA_BITTIMING, array[int8, 32]]
	IFLA_CAN_DATA_BITTIMING_CONST	nlattr[IFLA_CAN_DATA_BITTIMING_CONST, array[int8, 48]]
	IFLA_CAN_TERMINATION		nlattr[IFLA_CAN_TERMINATION, int16]
	IFLA_CAN_TDC			nlattr[IFLA_CAN_TDC, array[int8]]
	IFLA_CAN_CTRLMODE_EXT		nlattr[IFLA_CAN_CTRLMODE_EXT, array[int8]]
] [varlen]

can_tdc_policy$auto_netlink [
	IFLA_CAN_TDC_TDCV_MIN	nlattr[IFLA_CAN_TDC_TDCV_MIN, int32]
	IFLA_CAN_TDC_TDCV_MAX	nlattr[IFLA_CAN_TDC_TDCV_MAX, int32]
	IFLA_CAN_TDC_TDCO_MIN	nlattr[IFLA_CAN_TDC_TDCO_MIN, int32]
	IFLA_CAN_TDC_TDCO_MAX	nlattr[IFLA_CAN_TDC_TDCO_MAX, int32]
	IFLA_CAN_TDC_TDCF_MIN	nlattr[IFLA_CAN_TDC_TDCF_MIN, int32]
	IFLA_CAN_TDC_TDCF_MAX	nlattr[IFLA_CAN_TDC_TDCF_MAX, int32]
	IFLA_CAN_TDC_TDCV	nlattr[IFLA_CAN_TDC_TDCV, int32]
	IFLA_CAN_TDC_TDCO	nlattr[IFLA_CAN_TDC_TDCO, int32]
	IFLA_CAN_TDC_TDCF	nlattr[IFLA_CAN_TDC_TDCF, int32]
] [varlen]

cbs_policy$auto_sch_cbs [
	TCA_CBS_PARMS	nlattr[TCA_CBS_PARMS, array[int8, 20]]
] [varlen]

cfm_opt_policy$auto_cls_flower [
	TCA_FLOWER_KEY_CFM_MD_LEVEL	nlattr[TCA_FLOWER_KEY_CFM_MD_LEVEL, int8]
	TCA_FLOWER_KEY_CFM_OPCODE	nlattr[TCA_FLOWER_KEY_CFM_OPCODE, int8]
] [varlen]

cgroup_policy$auto_cls_cgroup [
	TCA_CGROUP_EMATCHES	nlattr[TCA_CGROUP_EMATCHES, array[int8]]
] [varlen]

cgroupstats_cmd_get_policy$auto_taskstats [
	CGROUPSTATS_CMD_ATTR_FD	nlattr[CGROUPSTATS_CMD_ATTR_FD, fd]
] [varlen]

cgw_policy$auto_gw [
	CGW_MOD_AND	nlattr[CGW_MOD_AND, array[int8, 17]]
	CGW_MOD_OR	nlattr[CGW_MOD_OR, array[int8, 17]]
	CGW_MOD_XOR	nlattr[CGW_MOD_XOR, array[int8, 17]]
	CGW_MOD_SET	nlattr[CGW_MOD_SET, array[int8, 17]]
	CGW_CS_XOR	nlattr[CGW_CS_XOR, int32]
	CGW_CS_CRC8	nlattr[CGW_CS_CRC8, array[int8, 282]]
	CGW_SRC_IF	nlattr[CGW_SRC_IF, int32]
	CGW_DST_IF	nlattr[CGW_DST_IF, int32]
	CGW_FILTER	nlattr[CGW_FILTER, int64]
	CGW_LIM_HOPS	nlattr[CGW_LIM_HOPS, int8]
	CGW_MOD_UID	nlattr[CGW_MOD_UID, int32]
	CGW_FDMOD_AND	nlattr[CGW_FDMOD_AND, array[int8, 73]]
	CGW_FDMOD_OR	nlattr[CGW_FDMOD_OR, array[int8, 73]]
	CGW_FDMOD_XOR	nlattr[CGW_FDMOD_XOR, array[int8, 73]]
	CGW_FDMOD_SET	nlattr[CGW_FDMOD_SET, array[int8, 73]]
] [varlen]

choke_policy$auto_sch_choke [
	TCA_CHOKE_PARMS	nlattr[TCA_CHOKE_PARMS, array[int8, 16]]
	TCA_CHOKE_STAB	nlattr[TCA_CHOKE_STAB, array[int8, 256]]
	TCA_CHOKE_MAX_P	nlattr[TCA_CHOKE_MAX_P, int32]
] [varlen]

cifs_genl_policy$auto_netlink [
	CIFS_GENL_ATTR_SWN_REGISTRATION_ID	nlattr[CIFS_GENL_ATTR_SWN_REGISTRATION_ID, int32]
	CIFS_GENL_ATTR_SWN_NET_NAME		nlattr[CIFS_GENL_ATTR_SWN_NET_NAME, stringnoz]
	CIFS_GENL_ATTR_SWN_SHARE_NAME		nlattr[CIFS_GENL_ATTR_SWN_SHARE_NAME, stringnoz]
	CIFS_GENL_ATTR_SWN_IP			nlattr[CIFS_GENL_ATTR_SWN_IP, array[int8, 128]]
	CIFS_GENL_ATTR_SWN_NET_NAME_NOTIFY	nlattr[CIFS_GENL_ATTR_SWN_NET_NAME_NOTIFY, void]
	CIFS_GENL_ATTR_SWN_SHARE_NAME_NOTIFY	nlattr[CIFS_GENL_ATTR_SWN_SHARE_NAME_NOTIFY, void]
	CIFS_GENL_ATTR_SWN_IP_NOTIFY		nlattr[CIFS_GENL_ATTR_SWN_IP_NOTIFY, void]
	CIFS_GENL_ATTR_SWN_KRB_AUTH		nlattr[CIFS_GENL_ATTR_SWN_KRB_AUTH, void]
	CIFS_GENL_ATTR_SWN_USER_NAME		nlattr[CIFS_GENL_ATTR_SWN_USER_NAME, stringnoz]
	CIFS_GENL_ATTR_SWN_PASSWORD		nlattr[CIFS_GENL_ATTR_SWN_PASSWORD, stringnoz]
	CIFS_GENL_ATTR_SWN_DOMAIN_NAME		nlattr[CIFS_GENL_ATTR_SWN_DOMAIN_NAME, stringnoz]
	CIFS_GENL_ATTR_SWN_NOTIFICATION_TYPE	nlattr[CIFS_GENL_ATTR_SWN_NOTIFICATION_TYPE, int32]
	CIFS_GENL_ATTR_SWN_RESOURCE_STATE	nlattr[CIFS_GENL_ATTR_SWN_RESOURCE_STATE, int32]
	CIFS_GENL_ATTR_SWN_RESOURCE_NAME	nlattr[CIFS_GENL_ATTR_SWN_RESOURCE_NAME, stringnoz]
] [varlen]

coalesce_irq_moderation_policy$auto_coalesce [
	ETHTOOL_A_IRQ_MODERATION_USEC	nlattr[ETHTOOL_A_IRQ_MODERATION_USEC, int32]
	ETHTOOL_A_IRQ_MODERATION_PKTS	nlattr[ETHTOOL_A_IRQ_MODERATION_PKTS, int32]
	ETHTOOL_A_IRQ_MODERATION_COMPS	nlattr[ETHTOOL_A_IRQ_MODERATION_COMPS, int32]
] [varlen]

coalesce_profile_policy$auto_coalesce [
	ETHTOOL_A_PROFILE_IRQ_MODERATION	nlattr[ETHTOOL_A_PROFILE_IRQ_MODERATION, array[int8, 3]]
] [varlen]

codel_policy$auto_sch_codel [
	TCA_CODEL_TARGET	nlattr[TCA_CODEL_TARGET, int32]
	TCA_CODEL_LIMIT		nlattr[TCA_CODEL_LIMIT, int32]
	TCA_CODEL_INTERVAL	nlattr[TCA_CODEL_INTERVAL, int32]
	TCA_CODEL_ECN		nlattr[TCA_CODEL_ECN, int32]
	TCA_CODEL_CE_THRESHOLD	nlattr[TCA_CODEL_CE_THRESHOLD, int32]
] [varlen]

compat_policy$auto_xfrm_compat [
	XFRMA_UNSPEC			nlattr[XFRMA_UNSPEC, array[int8]]
	XFRMA_ALG_AUTH			nlattr[XFRMA_ALG_AUTH, array[int8, 68]]
	XFRMA_ALG_CRYPT			nlattr[XFRMA_ALG_CRYPT, array[int8, 68]]
	XFRMA_ALG_COMP			nlattr[XFRMA_ALG_COMP, array[int8, 68]]
	XFRMA_ENCAP			nlattr[XFRMA_ENCAP, array[int8, 24]]
	XFRMA_TMPL			nlattr[XFRMA_TMPL, array[int8, 64]]
	XFRMA_SA			nlattr[XFRMA_SA, array[int8, 220]]
	XFRMA_POLICY			nlattr[XFRMA_POLICY, array[int8, 164]]
	XFRMA_SEC_CTX			nlattr[XFRMA_SEC_CTX, int64]
	XFRMA_LTIME_VAL			nlattr[XFRMA_LTIME_VAL, array[int8, 32]]
	XFRMA_REPLAY_VAL		nlattr[XFRMA_REPLAY_VAL, array[int8, 12]]
	XFRMA_REPLAY_THRESH		nlattr[XFRMA_REPLAY_THRESH, int32]
	XFRMA_ETIMER_THRESH		nlattr[XFRMA_ETIMER_THRESH, int32]
	XFRMA_SRCADDR			nlattr[XFRMA_SRCADDR, array[int8, 16]]
	XFRMA_COADDR			nlattr[XFRMA_COADDR, array[int8, 16]]
	XFRMA_LASTUSED			nlattr[XFRMA_LASTUSED, int64]
	XFRMA_POLICY_TYPE		nlattr[XFRMA_POLICY_TYPE, array[int8, 6]]
	XFRMA_MIGRATE			nlattr[XFRMA_MIGRATE, array[int8, 76]]
	XFRMA_ALG_AEAD			nlattr[XFRMA_ALG_AEAD, array[int8, 72]]
	XFRMA_KMADDRESS			nlattr[XFRMA_KMADDRESS, array[int8, 40]]
	XFRMA_ALG_AUTH_TRUNC		nlattr[XFRMA_ALG_AUTH_TRUNC, array[int8, 72]]
	XFRMA_MARK			nlattr[XFRMA_MARK, int64]
	XFRMA_TFCPAD			nlattr[XFRMA_TFCPAD, int32]
	XFRMA_REPLAY_ESN_VAL		nlattr[XFRMA_REPLAY_ESN_VAL, array[int8, 24]]
	XFRMA_SA_EXTRA_FLAGS		nlattr[XFRMA_SA_EXTRA_FLAGS, int32]
	XFRMA_PROTO			nlattr[XFRMA_PROTO, int8]
	XFRMA_ADDRESS_FILTER		nlattr[XFRMA_ADDRESS_FILTER, array[int8, 36]]
	XFRMA_OFFLOAD_DEV		nlattr[XFRMA_OFFLOAD_DEV, int64]
	XFRMA_SET_MARK			nlattr[XFRMA_SET_MARK, int32]
	XFRMA_SET_MARK_MASK		nlattr[XFRMA_SET_MARK_MASK, int32]
	XFRMA_IF_ID			nlattr[XFRMA_IF_ID, int32]
	XFRMA_MTIMER_THRESH		nlattr[XFRMA_MTIMER_THRESH, int32]
	XFRMA_SA_DIR			nlattr[XFRMA_SA_DIR, int8]
	XFRMA_NAT_KEEPALIVE_INTERVAL	nlattr[XFRMA_NAT_KEEPALIVE_INTERVAL, int32]
] [varlen]

connmark_policy$auto_act_connmark [
	TCA_CONNMARK_PARMS	nlattr[TCA_CONNMARK_PARMS, array[int8, 24]]
] [varlen]

cpl_policy$auto_flow_netlink [
	OVS_CHECK_PKT_LEN_ATTR_PKT_LEN			nlattr[OVS_CHECK_PKT_LEN_ATTR_PKT_LEN, int16]
	OVS_CHECK_PKT_LEN_ATTR_ACTIONS_IF_GREATER	nlattr[OVS_CHECK_PKT_LEN_ATTR_ACTIONS_IF_GREATER, array[int8]]
	OVS_CHECK_PKT_LEN_ATTR_ACTIONS_IF_LESS_EQUAL	nlattr[OVS_CHECK_PKT_LEN_ATTR_ACTIONS_IF_LESS_EQUAL, array[int8]]
] [varlen]

crypto_policy$auto_crypto_user [
	CRYPTOCFGA_PRIORITY_VAL	nlattr[CRYPTOCFGA_PRIORITY_VAL, int32]
] [varlen]

csum_policy$auto_act_csum [
	TCA_CSUM_PARMS	nlattr[TCA_CSUM_PARMS, array[int8, 24]]
] [varlen]

ct_limit_policy$auto_conntrack [
	OVS_CT_LIMIT_ATTR_ZONE_LIMIT	nlattr[OVS_CT_LIMIT_ATTR_ZONE_LIMIT, array[int8]]
] [varlen]

ct_nla_policy$auto_nf_conntrack_netlink [
	CTA_TUPLE_ORIG		nlattr[CTA_TUPLE_ORIG, array[int8]]
	CTA_TUPLE_REPLY		nlattr[CTA_TUPLE_REPLY, array[int8]]
	CTA_STATUS		nlattr[CTA_STATUS, int32]
	CTA_PROTOINFO		nlattr[CTA_PROTOINFO, array[int8]]
	CTA_HELP		nlattr[CTA_HELP, array[int8]]
	CTA_NAT_SRC		nlattr[CTA_NAT_SRC, array[int8]]
	CTA_TIMEOUT		nlattr[CTA_TIMEOUT, int32]
	CTA_MARK		nlattr[CTA_MARK, int32]
	CTA_ID			nlattr[CTA_ID, int32]
	CTA_NAT_DST		nlattr[CTA_NAT_DST, array[int8]]
	CTA_TUPLE_MASTER	nlattr[CTA_TUPLE_MASTER, array[int8]]
	CTA_NAT_SEQ_ADJ_ORIG	nlattr[CTA_NAT_SEQ_ADJ_ORIG, array[int8]]
	CTA_NAT_SEQ_ADJ_REPLY	nlattr[CTA_NAT_SEQ_ADJ_REPLY, array[int8]]
	CTA_ZONE		nlattr[CTA_ZONE, int16]
	CTA_MARK_MASK		nlattr[CTA_MARK_MASK, int32]
	CTA_LABELS		nlattr[CTA_LABELS, array[int8, 0:16]]
	CTA_LABELS_MASK		nlattr[CTA_LABELS_MASK, array[int8, 0:16]]
	CTA_FILTER		nlattr[CTA_FILTER, array[int8]]
	CTA_STATUS_MASK		nlattr[CTA_STATUS_MASK, int32]
] [varlen]

ct_policy$auto_act_ct [
	TCA_CT_PARMS		nlattr[TCA_CT_PARMS, array[int8]]
	TCA_CT_ACTION		nlattr[TCA_CT_ACTION, int16]
	TCA_CT_ZONE		nlattr[TCA_CT_ZONE, int16]
	TCA_CT_MARK		nlattr[TCA_CT_MARK, int32]
	TCA_CT_MARK_MASK	nlattr[TCA_CT_MARK_MASK, int32]
	TCA_CT_LABELS		nlattr[TCA_CT_LABELS, array[int8, 0:16]]
	TCA_CT_LABELS_MASK	nlattr[TCA_CT_LABELS_MASK, array[int8, 0:16]]
	TCA_CT_NAT_IPV4_MIN	nlattr[TCA_CT_NAT_IPV4_MIN, ipv4_addr]
	TCA_CT_NAT_IPV4_MAX	nlattr[TCA_CT_NAT_IPV4_MAX, ipv4_addr]
	TCA_CT_NAT_IPV6_MIN	nlattr[TCA_CT_NAT_IPV6_MIN, array[int8]]
	TCA_CT_NAT_IPV6_MAX	nlattr[TCA_CT_NAT_IPV6_MAX, array[int8]]
	TCA_CT_NAT_PORT_MIN	nlattr[TCA_CT_NAT_PORT_MIN, sock_port]
	TCA_CT_NAT_PORT_MAX	nlattr[TCA_CT_NAT_PORT_MAX, sock_port]
	TCA_CT_HELPER_NAME	nlattr[TCA_CT_HELPER_NAME, stringnoz]
	TCA_CT_HELPER_FAMILY	nlattr[TCA_CT_HELPER_FAMILY, int8]
	TCA_CT_HELPER_PROTO	nlattr[TCA_CT_HELPER_PROTO, int8]
] [varlen]

cta_filter_nla_policy$auto_nf_conntrack_netlink [
	CTA_FILTER_ORIG_FLAGS	nlattr[CTA_FILTER_ORIG_FLAGS, int32]
	CTA_FILTER_REPLY_FLAGS	nlattr[CTA_FILTER_REPLY_FLAGS, int32]
] [varlen]

cta_ip_nla_policy$auto_nf_conntrack_netlink [
	CTA_IP_V4_SRC	nlattr[CTA_IP_V4_SRC, int32]
	CTA_IP_V4_DST	nlattr[CTA_IP_V4_DST, int32]
	CTA_IP_V6_SRC	nlattr[CTA_IP_V6_SRC, array[int8, 16]]
	CTA_IP_V6_DST	nlattr[CTA_IP_V6_DST, array[int8, 16]]
] [varlen]

ctinfo_policy$auto_act_ctinfo [
	TCA_CTINFO_ACT			nlattr[TCA_CTINFO_ACT, array[int8]]
	TCA_CTINFO_ZONE			nlattr[TCA_CTINFO_ZONE, int16]
	TCA_CTINFO_PARMS_DSCP_MASK	nlattr[TCA_CTINFO_PARMS_DSCP_MASK, int32]
	TCA_CTINFO_PARMS_DSCP_STATEMASK	nlattr[TCA_CTINFO_PARMS_DSCP_STATEMASK, int32]
	TCA_CTINFO_PARMS_CPMARK_MASK	nlattr[TCA_CTINFO_PARMS_CPMARK_MASK, int32]
] [varlen]

ctrl_policy_family$auto_genetlink [
	CTRL_ATTR_FAMILY_ID	nlattr[CTRL_ATTR_FAMILY_ID, int16]
	CTRL_ATTR_FAMILY_NAME	nlattr[CTRL_ATTR_FAMILY_NAME, string]
] [varlen]

ctrl_policy_policy$auto_genetlink [
	CTRL_ATTR_FAMILY_ID	nlattr[CTRL_ATTR_FAMILY_ID, int16]
	CTRL_ATTR_FAMILY_NAME	nlattr[CTRL_ATTR_FAMILY_NAME, string]
	CTRL_ATTR_OP		nlattr[CTRL_ATTR_OP, int32]
] [varlen]

cttimeout_nla_policy$auto_nfnetlink_cttimeout [
	CTA_TIMEOUT_NAME	nlattr[CTA_TIMEOUT_NAME, string]
	CTA_TIMEOUT_L3PROTO	nlattr[CTA_TIMEOUT_L3PROTO, int16]
	CTA_TIMEOUT_L4PROTO	nlattr[CTA_TIMEOUT_L4PROTO, int8]
	CTA_TIMEOUT_DATA	nlattr[CTA_TIMEOUT_DATA, array[int8]]
] [varlen]

datapath_policy$auto_datapath [
	OVS_DP_ATTR_NAME		nlattr[OVS_DP_ATTR_NAME, string]
	OVS_DP_ATTR_UPCALL_PID		nlattr[OVS_DP_ATTR_UPCALL_PID, int32]
	OVS_DP_ATTR_USER_FEATURES	nlattr[OVS_DP_ATTR_USER_FEATURES, int32]
	OVS_DP_ATTR_MASKS_CACHE_SIZE	nlattr[OVS_DP_ATTR_MASKS_CACHE_SIZE, int32]
	OVS_DP_ATTR_IFINDEX		nlattr[OVS_DP_ATTR_IFINDEX, ifindex]
] [varlen]

dcbnl_app_nest$auto_dcbnl [
	DCB_APP_ATTR_IDTYPE	nlattr[DCB_APP_ATTR_IDTYPE, int8]
	DCB_APP_ATTR_ID		nlattr[DCB_APP_ATTR_ID, int16]
	DCB_APP_ATTR_PRIORITY	nlattr[DCB_APP_ATTR_PRIORITY, int8]
] [varlen]

dcbnl_bcn_nest$auto_dcbnl [
	DCB_BCN_ATTR_RP_0	nlattr[DCB_BCN_ATTR_RP_0, int8]
	DCB_BCN_ATTR_RP_1	nlattr[DCB_BCN_ATTR_RP_1, int8]
	DCB_BCN_ATTR_RP_2	nlattr[DCB_BCN_ATTR_RP_2, int8]
	DCB_BCN_ATTR_RP_3	nlattr[DCB_BCN_ATTR_RP_3, int8]
	DCB_BCN_ATTR_RP_4	nlattr[DCB_BCN_ATTR_RP_4, int8]
	DCB_BCN_ATTR_RP_5	nlattr[DCB_BCN_ATTR_RP_5, int8]
	DCB_BCN_ATTR_RP_6	nlattr[DCB_BCN_ATTR_RP_6, int8]
	DCB_BCN_ATTR_RP_7	nlattr[DCB_BCN_ATTR_RP_7, int8]
	DCB_BCN_ATTR_RP_ALL	nlattr[DCB_BCN_ATTR_RP_ALL, void]
	DCB_BCN_ATTR_BCNA_0	nlattr[DCB_BCN_ATTR_BCNA_0, int32]
	DCB_BCN_ATTR_BCNA_1	nlattr[DCB_BCN_ATTR_BCNA_1, int32]
	DCB_BCN_ATTR_ALPHA	nlattr[DCB_BCN_ATTR_ALPHA, int32]
	DCB_BCN_ATTR_BETA	nlattr[DCB_BCN_ATTR_BETA, int32]
	DCB_BCN_ATTR_GD		nlattr[DCB_BCN_ATTR_GD, int32]
	DCB_BCN_ATTR_GI		nlattr[DCB_BCN_ATTR_GI, int32]
	DCB_BCN_ATTR_TMAX	nlattr[DCB_BCN_ATTR_TMAX, int32]
	DCB_BCN_ATTR_TD		nlattr[DCB_BCN_ATTR_TD, int32]
	DCB_BCN_ATTR_RMIN	nlattr[DCB_BCN_ATTR_RMIN, int32]
	DCB_BCN_ATTR_W		nlattr[DCB_BCN_ATTR_W, int32]
	DCB_BCN_ATTR_RD		nlattr[DCB_BCN_ATTR_RD, int32]
	DCB_BCN_ATTR_RU		nlattr[DCB_BCN_ATTR_RU, int32]
	DCB_BCN_ATTR_WRTT	nlattr[DCB_BCN_ATTR_WRTT, int32]
	DCB_BCN_ATTR_RI		nlattr[DCB_BCN_ATTR_RI, int32]
	DCB_BCN_ATTR_C		nlattr[DCB_BCN_ATTR_C, int32]
	DCB_BCN_ATTR_ALL	nlattr[DCB_BCN_ATTR_ALL, void]
] [varlen]

dcbnl_cap_nest$auto_dcbnl [
	DCB_CAP_ATTR_ALL	nlattr[DCB_CAP_ATTR_ALL, void]
	DCB_CAP_ATTR_PG		nlattr[DCB_CAP_ATTR_PG, int8]
	DCB_CAP_ATTR_PFC	nlattr[DCB_CAP_ATTR_PFC, int8]
	DCB_CAP_ATTR_UP2TC	nlattr[DCB_CAP_ATTR_UP2TC, int8]
	DCB_CAP_ATTR_PG_TCS	nlattr[DCB_CAP_ATTR_PG_TCS, int8]
	DCB_CAP_ATTR_PFC_TCS	nlattr[DCB_CAP_ATTR_PFC_TCS, int8]
	DCB_CAP_ATTR_GSP	nlattr[DCB_CAP_ATTR_GSP, int8]
	DCB_CAP_ATTR_BCN	nlattr[DCB_CAP_ATTR_BCN, int8]
	DCB_CAP_ATTR_DCBX	nlattr[DCB_CAP_ATTR_DCBX, int8]
] [varlen]

dcbnl_featcfg_nest$auto_dcbnl [
	DCB_FEATCFG_ATTR_ALL	nlattr[DCB_FEATCFG_ATTR_ALL, void]
	DCB_FEATCFG_ATTR_PG	nlattr[DCB_FEATCFG_ATTR_PG, int8]
	DCB_FEATCFG_ATTR_PFC	nlattr[DCB_FEATCFG_ATTR_PFC, int8]
	DCB_FEATCFG_ATTR_APP	nlattr[DCB_FEATCFG_ATTR_APP, int8]
] [varlen]

dcbnl_ieee_policy$auto_dcbnl [
	DCB_ATTR_IEEE_ETS		nlattr[DCB_ATTR_IEEE_ETS, array[int8, 59]]
	DCB_ATTR_IEEE_PFC		nlattr[DCB_ATTR_IEEE_PFC, array[int8, 136]]
	DCB_ATTR_IEEE_APP_TABLE		nlattr[DCB_ATTR_IEEE_APP_TABLE, array[int8]]
	DCB_ATTR_IEEE_MAXRATE		nlattr[DCB_ATTR_IEEE_MAXRATE, array[int8, 64]]
	DCB_ATTR_IEEE_QCN		nlattr[DCB_ATTR_IEEE_QCN, array[int8, 360]]
	DCB_ATTR_IEEE_QCN_STATS		nlattr[DCB_ATTR_IEEE_QCN_STATS, array[int8, 96]]
	DCB_ATTR_DCB_BUFFER		nlattr[DCB_ATTR_DCB_BUFFER, array[int8, 44]]
	DCB_ATTR_DCB_APP_TRUST_TABLE	nlattr[DCB_ATTR_DCB_APP_TRUST_TABLE, array[int8]]
] [varlen]

dcbnl_numtcs_nest$auto_dcbnl [
	DCB_NUMTCS_ATTR_ALL	nlattr[DCB_NUMTCS_ATTR_ALL, void]
	DCB_NUMTCS_ATTR_PG	nlattr[DCB_NUMTCS_ATTR_PG, int8]
	DCB_NUMTCS_ATTR_PFC	nlattr[DCB_NUMTCS_ATTR_PFC, int8]
] [varlen]

dcbnl_pfc_up_nest$auto_dcbnl [
	DCB_PFC_UP_ATTR_0	nlattr[DCB_PFC_UP_ATTR_0, int8]
	DCB_PFC_UP_ATTR_1	nlattr[DCB_PFC_UP_ATTR_1, int8]
	DCB_PFC_UP_ATTR_2	nlattr[DCB_PFC_UP_ATTR_2, int8]
	DCB_PFC_UP_ATTR_3	nlattr[DCB_PFC_UP_ATTR_3, int8]
	DCB_PFC_UP_ATTR_4	nlattr[DCB_PFC_UP_ATTR_4, int8]
	DCB_PFC_UP_ATTR_5	nlattr[DCB_PFC_UP_ATTR_5, int8]
	DCB_PFC_UP_ATTR_6	nlattr[DCB_PFC_UP_ATTR_6, int8]
	DCB_PFC_UP_ATTR_7	nlattr[DCB_PFC_UP_ATTR_7, int8]
	DCB_PFC_UP_ATTR_ALL	nlattr[DCB_PFC_UP_ATTR_ALL, void]
] [varlen]

dcbnl_pg_nest$auto_dcbnl [
	DCB_PG_ATTR_TC_0	nlattr[DCB_PG_ATTR_TC_0, array[int8]]
	DCB_PG_ATTR_TC_1	nlattr[DCB_PG_ATTR_TC_1, array[int8]]
	DCB_PG_ATTR_TC_2	nlattr[DCB_PG_ATTR_TC_2, array[int8]]
	DCB_PG_ATTR_TC_3	nlattr[DCB_PG_ATTR_TC_3, array[int8]]
	DCB_PG_ATTR_TC_4	nlattr[DCB_PG_ATTR_TC_4, array[int8]]
	DCB_PG_ATTR_TC_5	nlattr[DCB_PG_ATTR_TC_5, array[int8]]
	DCB_PG_ATTR_TC_6	nlattr[DCB_PG_ATTR_TC_6, array[int8]]
	DCB_PG_ATTR_TC_7	nlattr[DCB_PG_ATTR_TC_7, array[int8]]
	DCB_PG_ATTR_TC_ALL	nlattr[DCB_PG_ATTR_TC_ALL, array[int8]]
	DCB_PG_ATTR_BW_ID_0	nlattr[DCB_PG_ATTR_BW_ID_0, int8]
	DCB_PG_ATTR_BW_ID_1	nlattr[DCB_PG_ATTR_BW_ID_1, int8]
	DCB_PG_ATTR_BW_ID_2	nlattr[DCB_PG_ATTR_BW_ID_2, int8]
	DCB_PG_ATTR_BW_ID_3	nlattr[DCB_PG_ATTR_BW_ID_3, int8]
	DCB_PG_ATTR_BW_ID_4	nlattr[DCB_PG_ATTR_BW_ID_4, int8]
	DCB_PG_ATTR_BW_ID_5	nlattr[DCB_PG_ATTR_BW_ID_5, int8]
	DCB_PG_ATTR_BW_ID_6	nlattr[DCB_PG_ATTR_BW_ID_6, int8]
	DCB_PG_ATTR_BW_ID_7	nlattr[DCB_PG_ATTR_BW_ID_7, int8]
	DCB_PG_ATTR_BW_ID_ALL	nlattr[DCB_PG_ATTR_BW_ID_ALL, void]
] [varlen]

dcbnl_rtnl_policy$auto_dcbnl [
	DCB_ATTR_IFNAME		nlattr[DCB_ATTR_IFNAME, devname]
	DCB_ATTR_STATE		nlattr[DCB_ATTR_STATE, int8]
	DCB_ATTR_PFC_STATE	nlattr[DCB_ATTR_PFC_STATE, int8]
	DCB_ATTR_PFC_CFG	nlattr[DCB_ATTR_PFC_CFG, array[int8]]
	DCB_ATTR_PG_CFG		nlattr[DCB_ATTR_PG_CFG, array[int8]]
	DCB_ATTR_SET_ALL	nlattr[DCB_ATTR_SET_ALL, int8]
	DCB_ATTR_PERM_HWADDR	nlattr[DCB_ATTR_PERM_HWADDR, void]
	DCB_ATTR_CAP		nlattr[DCB_ATTR_CAP, array[int8]]
	DCB_ATTR_BCN		nlattr[DCB_ATTR_BCN, array[int8]]
	DCB_ATTR_APP		nlattr[DCB_ATTR_APP, array[int8]]
	DCB_ATTR_IEEE		nlattr[DCB_ATTR_IEEE, array[int8]]
	DCB_ATTR_DCBX		nlattr[DCB_ATTR_DCBX, int8]
	DCB_ATTR_FEATCFG	nlattr[DCB_ATTR_FEATCFG, array[int8]]
] [varlen]

dcbnl_tc_param_nest$auto_dcbnl [
	DCB_TC_ATTR_PARAM_PGID		nlattr[DCB_TC_ATTR_PARAM_PGID, int8]
	DCB_TC_ATTR_PARAM_UP_MAPPING	nlattr[DCB_TC_ATTR_PARAM_UP_MAPPING, int8]
	DCB_TC_ATTR_PARAM_STRICT_PRIO	nlattr[DCB_TC_ATTR_PARAM_STRICT_PRIO, int8]
	DCB_TC_ATTR_PARAM_BW_PCT	nlattr[DCB_TC_ATTR_PARAM_BW_PCT, int8]
	DCB_TC_ATTR_PARAM_ALL		nlattr[DCB_TC_ATTR_PARAM_ALL, void]
] [varlen]

dccp_nla_policy$auto_nf_conntrack_proto_dccp [
	CTA_PROTOINFO_DCCP_STATE		nlattr[CTA_PROTOINFO_DCCP_STATE, int8]
	CTA_PROTOINFO_DCCP_ROLE			nlattr[CTA_PROTOINFO_DCCP_ROLE, int8]
	CTA_PROTOINFO_DCCP_HANDSHAKE_SEQ	nlattr[CTA_PROTOINFO_DCCP_HANDSHAKE_SEQ, int64]
	CTA_PROTOINFO_DCCP_PAD			nlattr[CTA_PROTOINFO_DCCP_PAD, array[int8]]
] [varlen]

dccp_timeout_nla_policy$auto_nf_conntrack_proto_dccp [
	CTA_TIMEOUT_DCCP_REQUEST	nlattr[CTA_TIMEOUT_DCCP_REQUEST, int32]
	CTA_TIMEOUT_DCCP_RESPOND	nlattr[CTA_TIMEOUT_DCCP_RESPOND, int32]
	CTA_TIMEOUT_DCCP_PARTOPEN	nlattr[CTA_TIMEOUT_DCCP_PARTOPEN, int32]
	CTA_TIMEOUT_DCCP_OPEN		nlattr[CTA_TIMEOUT_DCCP_OPEN, int32]
	CTA_TIMEOUT_DCCP_CLOSEREQ	nlattr[CTA_TIMEOUT_DCCP_CLOSEREQ, int32]
	CTA_TIMEOUT_DCCP_CLOSING	nlattr[CTA_TIMEOUT_DCCP_CLOSING, int32]
	CTA_TIMEOUT_DCCP_TIMEWAIT	nlattr[CTA_TIMEOUT_DCCP_TIMEWAIT, int32]
] [varlen]

devconf_ipv4_policy$auto_devinet [
	NETCONFA_IFINDEX			nlattr[NETCONFA_IFINDEX, ifindex]
	NETCONFA_FORWARDING			nlattr[NETCONFA_FORWARDING, int32]
	NETCONFA_RP_FILTER			nlattr[NETCONFA_RP_FILTER, int32]
	NETCONFA_PROXY_NEIGH			nlattr[NETCONFA_PROXY_NEIGH, int32]
	NETCONFA_IGNORE_ROUTES_WITH_LINKDOWN	nlattr[NETCONFA_IGNORE_ROUTES_WITH_LINKDOWN, int32]
] [varlen]

devconf_ipv6_policy$auto_addrconf [
	NETCONFA_IFINDEX			nlattr[NETCONFA_IFINDEX, ifindex]
	NETCONFA_FORWARDING			nlattr[NETCONFA_FORWARDING, int32]
	NETCONFA_PROXY_NEIGH			nlattr[NETCONFA_PROXY_NEIGH, int32]
	NETCONFA_IGNORE_ROUTES_WITH_LINKDOWN	nlattr[NETCONFA_IGNORE_ROUTES_WITH_LINKDOWN, int32]
] [varlen]

devconf_mpls_policy$auto_af_mpls [
	NETCONFA_IFINDEX	nlattr[NETCONFA_IFINDEX, ifindex]
] [varlen]

device_policy$auto_netlink [
	WGDEVICE_A_IFINDEX	nlattr[WGDEVICE_A_IFINDEX, ifindex]
	WGDEVICE_A_IFNAME	nlattr[WGDEVICE_A_IFNAME, devname]
	WGDEVICE_A_PRIVATE_KEY	nlattr[WGDEVICE_A_PRIVATE_KEY, array[int8]]
	WGDEVICE_A_PUBLIC_KEY	nlattr[WGDEVICE_A_PUBLIC_KEY, array[int8]]
	WGDEVICE_A_FLAGS	nlattr[WGDEVICE_A_FLAGS, int32]
	WGDEVICE_A_LISTEN_PORT	nlattr[WGDEVICE_A_LISTEN_PORT, sock_port]
	WGDEVICE_A_FWMARK	nlattr[WGDEVICE_A_FWMARK, int32]
	WGDEVICE_A_PEERS	nlattr[WGDEVICE_A_PEERS, array[int8]]
] [varlen]

devlink_dl_port_function_nl_policy$auto_netlink_gen [
	DEVLINK_PORT_FUNCTION_ATTR_HW_ADDR	nlattr[DEVLINK_PORT_FUNCTION_ATTR_HW_ADDR, array[int8]]
	DEVLINK_PORT_FN_ATTR_STATE		nlattr[DEVLINK_PORT_FN_ATTR_STATE, int8]
	DEVLINK_PORT_FN_ATTR_OPSTATE		nlattr[DEVLINK_PORT_FN_ATTR_OPSTATE, int8]
	DEVLINK_PORT_FN_ATTR_CAPS		nlattr[DEVLINK_PORT_FN_ATTR_CAPS, int32]
] [varlen]

devlink_dl_selftest_id_nl_policy$auto_netlink_gen [
	DEVLINK_ATTR_SELFTEST_ID_FLASH	nlattr[DEVLINK_ATTR_SELFTEST_ID_FLASH, void]
] [varlen]

devlink_dpipe_entries_get_nl_policy$auto_netlink_gen [
	DEVLINK_ATTR_BUS_NAME		nlattr[DEVLINK_ATTR_BUS_NAME, string]
	DEVLINK_ATTR_DEV_NAME		nlattr[DEVLINK_ATTR_DEV_NAME, devname]
	DEVLINK_ATTR_DPIPE_TABLE_NAME	nlattr[DEVLINK_ATTR_DPIPE_TABLE_NAME, string]
] [varlen]

devlink_dpipe_headers_get_nl_policy$auto_netlink_gen [
	DEVLINK_ATTR_BUS_NAME	nlattr[DEVLINK_ATTR_BUS_NAME, string]
	DEVLINK_ATTR_DEV_NAME	nlattr[DEVLINK_ATTR_DEV_NAME, devname]
] [varlen]

devlink_dpipe_table_counters_set_nl_policy$auto_netlink_gen [
	DEVLINK_ATTR_BUS_NAME				nlattr[DEVLINK_ATTR_BUS_NAME, string]
	DEVLINK_ATTR_DEV_NAME				nlattr[DEVLINK_ATTR_DEV_NAME, devname]
	DEVLINK_ATTR_DPIPE_TABLE_NAME			nlattr[DEVLINK_ATTR_DPIPE_TABLE_NAME, string]
	DEVLINK_ATTR_DPIPE_TABLE_COUNTERS_ENABLED	nlattr[DEVLINK_ATTR_DPIPE_TABLE_COUNTERS_ENABLED, bool8]
] [varlen]

devlink_dpipe_table_get_nl_policy$auto_netlink_gen [
	DEVLINK_ATTR_BUS_NAME		nlattr[DEVLINK_ATTR_BUS_NAME, string]
	DEVLINK_ATTR_DEV_NAME		nlattr[DEVLINK_ATTR_DEV_NAME, devname]
	DEVLINK_ATTR_DPIPE_TABLE_NAME	nlattr[DEVLINK_ATTR_DPIPE_TABLE_NAME, string]
] [varlen]

devlink_eswitch_get_nl_policy$auto_netlink_gen [
	DEVLINK_ATTR_BUS_NAME	nlattr[DEVLINK_ATTR_BUS_NAME, string]
	DEVLINK_ATTR_DEV_NAME	nlattr[DEVLINK_ATTR_DEV_NAME, devname]
] [varlen]

devlink_eswitch_set_nl_policy$auto_netlink_gen [
	DEVLINK_ATTR_BUS_NAME			nlattr[DEVLINK_ATTR_BUS_NAME, string]
	DEVLINK_ATTR_DEV_NAME			nlattr[DEVLINK_ATTR_DEV_NAME, devname]
	DEVLINK_ATTR_ESWITCH_MODE		nlattr[DEVLINK_ATTR_ESWITCH_MODE, int16]
	DEVLINK_ATTR_ESWITCH_INLINE_MODE	nlattr[DEVLINK_ATTR_ESWITCH_INLINE_MODE, int8]
	DEVLINK_ATTR_ESWITCH_ENCAP_MODE		nlattr[DEVLINK_ATTR_ESWITCH_ENCAP_MODE, int8]
] [varlen]

devlink_flash_update_nl_policy$auto_netlink_gen [
	DEVLINK_ATTR_BUS_NAME				nlattr[DEVLINK_ATTR_BUS_NAME, string]
	DEVLINK_ATTR_DEV_NAME				nlattr[DEVLINK_ATTR_DEV_NAME, devname]
	DEVLINK_ATTR_FLASH_UPDATE_FILE_NAME		nlattr[DEVLINK_ATTR_FLASH_UPDATE_FILE_NAME, string]
	DEVLINK_ATTR_FLASH_UPDATE_COMPONENT		nlattr[DEVLINK_ATTR_FLASH_UPDATE_COMPONENT, string]
	DEVLINK_ATTR_FLASH_UPDATE_OVERWRITE_MASK	nlattr[DEVLINK_ATTR_FLASH_UPDATE_OVERWRITE_MASK, int32]
] [varlen]

devlink_function_nl_policy$auto_port [
	DEVLINK_PORT_FUNCTION_ATTR_HW_ADDR	nlattr[DEVLINK_PORT_FUNCTION_ATTR_HW_ADDR, array[int8]]
	DEVLINK_PORT_FN_ATTR_STATE		nlattr[DEVLINK_PORT_FN_ATTR_STATE, int8]
	DEVLINK_PORT_FN_ATTR_CAPS		nlattr[DEVLINK_PORT_FN_ATTR_CAPS, int32]
	DEVLINK_PORT_FN_ATTR_MAX_IO_EQS		nlattr[DEVLINK_PORT_FN_ATTR_MAX_IO_EQS, int32]
] [varlen]

devlink_get_nl_policy$auto_netlink_gen [
	DEVLINK_ATTR_BUS_NAME	nlattr[DEVLINK_ATTR_BUS_NAME, string]
	DEVLINK_ATTR_DEV_NAME	nlattr[DEVLINK_ATTR_DEV_NAME, devname]
] [varlen]

devlink_health_reporter_diagnose_nl_policy$auto_netlink_gen [
	DEVLINK_ATTR_BUS_NAME			nlattr[DEVLINK_ATTR_BUS_NAME, string]
	DEVLINK_ATTR_DEV_NAME			nlattr[DEVLINK_ATTR_DEV_NAME, devname]
	DEVLINK_ATTR_PORT_INDEX			nlattr[DEVLINK_ATTR_PORT_INDEX, int32]
	DEVLINK_ATTR_HEALTH_REPORTER_NAME	nlattr[DEVLINK_ATTR_HEALTH_REPORTER_NAME, string]
] [varlen]

devlink_health_reporter_dump_clear_nl_policy$auto_netlink_gen [
	DEVLINK_ATTR_BUS_NAME			nlattr[DEVLINK_ATTR_BUS_NAME, string]
	DEVLINK_ATTR_DEV_NAME			nlattr[DEVLINK_ATTR_DEV_NAME, devname]
	DEVLINK_ATTR_PORT_INDEX			nlattr[DEVLINK_ATTR_PORT_INDEX, int32]
	DEVLINK_ATTR_HEALTH_REPORTER_NAME	nlattr[DEVLINK_ATTR_HEALTH_REPORTER_NAME, string]
] [varlen]

devlink_health_reporter_dump_get_nl_policy$auto_netlink_gen [
	DEVLINK_ATTR_BUS_NAME			nlattr[DEVLINK_ATTR_BUS_NAME, string]
	DEVLINK_ATTR_DEV_NAME			nlattr[DEVLINK_ATTR_DEV_NAME, devname]
	DEVLINK_ATTR_PORT_INDEX			nlattr[DEVLINK_ATTR_PORT_INDEX, int32]
	DEVLINK_ATTR_HEALTH_REPORTER_NAME	nlattr[DEVLINK_ATTR_HEALTH_REPORTER_NAME, string]
] [varlen]

devlink_health_reporter_get_do_nl_policy$auto_netlink_gen [
	DEVLINK_ATTR_BUS_NAME			nlattr[DEVLINK_ATTR_BUS_NAME, string]
	DEVLINK_ATTR_DEV_NAME			nlattr[DEVLINK_ATTR_DEV_NAME, devname]
	DEVLINK_ATTR_PORT_INDEX			nlattr[DEVLINK_ATTR_PORT_INDEX, int32]
	DEVLINK_ATTR_HEALTH_REPORTER_NAME	nlattr[DEVLINK_ATTR_HEALTH_REPORTER_NAME, string]
] [varlen]

devlink_health_reporter_get_dump_nl_policy$auto_netlink_gen [
	DEVLINK_ATTR_BUS_NAME	nlattr[DEVLINK_ATTR_BUS_NAME, string]
	DEVLINK_ATTR_DEV_NAME	nlattr[DEVLINK_ATTR_DEV_NAME, devname]
	DEVLINK_ATTR_PORT_INDEX	nlattr[DEVLINK_ATTR_PORT_INDEX, int32]
] [varlen]

devlink_health_reporter_recover_nl_policy$auto_netlink_gen [
	DEVLINK_ATTR_BUS_NAME			nlattr[DEVLINK_ATTR_BUS_NAME, string]
	DEVLINK_ATTR_DEV_NAME			nlattr[DEVLINK_ATTR_DEV_NAME, devname]
	DEVLINK_ATTR_PORT_INDEX			nlattr[DEVLINK_ATTR_PORT_INDEX, int32]
	DEVLINK_ATTR_HEALTH_REPORTER_NAME	nlattr[DEVLINK_ATTR_HEALTH_REPORTER_NAME, string]
] [varlen]

devlink_health_reporter_set_nl_policy$auto_netlink_gen [
	DEVLINK_ATTR_BUS_NAME				nlattr[DEVLINK_ATTR_BUS_NAME, string]
	DEVLINK_ATTR_DEV_NAME				nlattr[DEVLINK_ATTR_DEV_NAME, devname]
	DEVLINK_ATTR_PORT_INDEX				nlattr[DEVLINK_ATTR_PORT_INDEX, int32]
	DEVLINK_ATTR_HEALTH_REPORTER_NAME		nlattr[DEVLINK_ATTR_HEALTH_REPORTER_NAME, string]
	DEVLINK_ATTR_HEALTH_REPORTER_GRACEFUL_PERIOD	nlattr[DEVLINK_ATTR_HEALTH_REPORTER_GRACEFUL_PERIOD, int64]
	DEVLINK_ATTR_HEALTH_REPORTER_AUTO_RECOVER	nlattr[DEVLINK_ATTR_HEALTH_REPORTER_AUTO_RECOVER, int8]
	DEVLINK_ATTR_HEALTH_REPORTER_AUTO_DUMP		nlattr[DEVLINK_ATTR_HEALTH_REPORTER_AUTO_DUMP, int8]
] [varlen]

devlink_health_reporter_test_nl_policy$auto_netlink_gen [
	DEVLINK_ATTR_BUS_NAME			nlattr[DEVLINK_ATTR_BUS_NAME, string]
	DEVLINK_ATTR_DEV_NAME			nlattr[DEVLINK_ATTR_DEV_NAME, devname]
	DEVLINK_ATTR_PORT_INDEX			nlattr[DEVLINK_ATTR_PORT_INDEX, int32]
	DEVLINK_ATTR_HEALTH_REPORTER_NAME	nlattr[DEVLINK_ATTR_HEALTH_REPORTER_NAME, string]
] [varlen]

devlink_info_get_nl_policy$auto_netlink_gen [
	DEVLINK_ATTR_BUS_NAME	nlattr[DEVLINK_ATTR_BUS_NAME, string]
	DEVLINK_ATTR_DEV_NAME	nlattr[DEVLINK_ATTR_DEV_NAME, devname]
] [varlen]

devlink_linecard_get_do_nl_policy$auto_netlink_gen [
	DEVLINK_ATTR_BUS_NAME		nlattr[DEVLINK_ATTR_BUS_NAME, string]
	DEVLINK_ATTR_DEV_NAME		nlattr[DEVLINK_ATTR_DEV_NAME, devname]
	DEVLINK_ATTR_LINECARD_INDEX	nlattr[DEVLINK_ATTR_LINECARD_INDEX, int32]
] [varlen]

devlink_linecard_get_dump_nl_policy$auto_netlink_gen [
	DEVLINK_ATTR_BUS_NAME	nlattr[DEVLINK_ATTR_BUS_NAME, string]
	DEVLINK_ATTR_DEV_NAME	nlattr[DEVLINK_ATTR_DEV_NAME, devname]
] [varlen]

devlink_linecard_set_nl_policy$auto_netlink_gen [
	DEVLINK_ATTR_BUS_NAME		nlattr[DEVLINK_ATTR_BUS_NAME, string]
	DEVLINK_ATTR_DEV_NAME		nlattr[DEVLINK_ATTR_DEV_NAME, devname]
	DEVLINK_ATTR_LINECARD_INDEX	nlattr[DEVLINK_ATTR_LINECARD_INDEX, int32]
	DEVLINK_ATTR_LINECARD_TYPE	nlattr[DEVLINK_ATTR_LINECARD_TYPE, string]
] [varlen]

devlink_notify_filter_set_nl_policy$auto_netlink_gen [
	DEVLINK_ATTR_BUS_NAME	nlattr[DEVLINK_ATTR_BUS_NAME, string]
	DEVLINK_ATTR_DEV_NAME	nlattr[DEVLINK_ATTR_DEV_NAME, devname]
	DEVLINK_ATTR_PORT_INDEX	nlattr[DEVLINK_ATTR_PORT_INDEX, int32]
] [varlen]

devlink_param_get_do_nl_policy$auto_netlink_gen [
	DEVLINK_ATTR_BUS_NAME	nlattr[DEVLINK_ATTR_BUS_NAME, string]
	DEVLINK_ATTR_DEV_NAME	nlattr[DEVLINK_ATTR_DEV_NAME, devname]
	DEVLINK_ATTR_PARAM_NAME	nlattr[DEVLINK_ATTR_PARAM_NAME, string]
] [varlen]

devlink_param_get_dump_nl_policy$auto_netlink_gen [
	DEVLINK_ATTR_BUS_NAME	nlattr[DEVLINK_ATTR_BUS_NAME, string]
	DEVLINK_ATTR_DEV_NAME	nlattr[DEVLINK_ATTR_DEV_NAME, devname]
] [varlen]

devlink_param_set_nl_policy$auto_netlink_gen [
	DEVLINK_ATTR_BUS_NAME		nlattr[DEVLINK_ATTR_BUS_NAME, string]
	DEVLINK_ATTR_DEV_NAME		nlattr[DEVLINK_ATTR_DEV_NAME, devname]
	DEVLINK_ATTR_PARAM_NAME		nlattr[DEVLINK_ATTR_PARAM_NAME, string]
	DEVLINK_ATTR_PARAM_TYPE		nlattr[DEVLINK_ATTR_PARAM_TYPE, int8]
	DEVLINK_ATTR_PARAM_VALUE_CMODE	nlattr[DEVLINK_ATTR_PARAM_VALUE_CMODE, int8]
] [varlen]

devlink_port_del_nl_policy$auto_netlink_gen [
	DEVLINK_ATTR_BUS_NAME	nlattr[DEVLINK_ATTR_BUS_NAME, string]
	DEVLINK_ATTR_DEV_NAME	nlattr[DEVLINK_ATTR_DEV_NAME, devname]
	DEVLINK_ATTR_PORT_INDEX	nlattr[DEVLINK_ATTR_PORT_INDEX, int32]
] [varlen]

devlink_port_get_do_nl_policy$auto_netlink_gen [
	DEVLINK_ATTR_BUS_NAME	nlattr[DEVLINK_ATTR_BUS_NAME, string]
	DEVLINK_ATTR_DEV_NAME	nlattr[DEVLINK_ATTR_DEV_NAME, devname]
	DEVLINK_ATTR_PORT_INDEX	nlattr[DEVLINK_ATTR_PORT_INDEX, int32]
] [varlen]

devlink_port_get_dump_nl_policy$auto_netlink_gen [
	DEVLINK_ATTR_BUS_NAME	nlattr[DEVLINK_ATTR_BUS_NAME, string]
	DEVLINK_ATTR_DEV_NAME	nlattr[DEVLINK_ATTR_DEV_NAME, devname]
] [varlen]

devlink_port_new_nl_policy$auto_netlink_gen [
	DEVLINK_ATTR_BUS_NAME			nlattr[DEVLINK_ATTR_BUS_NAME, string]
	DEVLINK_ATTR_DEV_NAME			nlattr[DEVLINK_ATTR_DEV_NAME, devname]
	DEVLINK_ATTR_PORT_INDEX			nlattr[DEVLINK_ATTR_PORT_INDEX, int32]
	DEVLINK_ATTR_PORT_FLAVOUR		nlattr[DEVLINK_ATTR_PORT_FLAVOUR, sock_port]
	DEVLINK_ATTR_PORT_PCI_PF_NUMBER		nlattr[DEVLINK_ATTR_PORT_PCI_PF_NUMBER, sock_port]
	DEVLINK_ATTR_PORT_CONTROLLER_NUMBER	nlattr[DEVLINK_ATTR_PORT_CONTROLLER_NUMBER, int32]
	DEVLINK_ATTR_PORT_PCI_SF_NUMBER		nlattr[DEVLINK_ATTR_PORT_PCI_SF_NUMBER, int32]
] [varlen]

devlink_port_param_get_nl_policy$auto_netlink_gen [
	DEVLINK_ATTR_BUS_NAME	nlattr[DEVLINK_ATTR_BUS_NAME, string]
	DEVLINK_ATTR_DEV_NAME	nlattr[DEVLINK_ATTR_DEV_NAME, devname]
	DEVLINK_ATTR_PORT_INDEX	nlattr[DEVLINK_ATTR_PORT_INDEX, int32]
] [varlen]

devlink_port_param_set_nl_policy$auto_netlink_gen [
	DEVLINK_ATTR_BUS_NAME	nlattr[DEVLINK_ATTR_BUS_NAME, string]
	DEVLINK_ATTR_DEV_NAME	nlattr[DEVLINK_ATTR_DEV_NAME, devname]
	DEVLINK_ATTR_PORT_INDEX	nlattr[DEVLINK_ATTR_PORT_INDEX, int32]
] [varlen]

devlink_port_set_nl_policy$auto_netlink_gen [
	DEVLINK_ATTR_BUS_NAME		nlattr[DEVLINK_ATTR_BUS_NAME, string]
	DEVLINK_ATTR_DEV_NAME		nlattr[DEVLINK_ATTR_DEV_NAME, devname]
	DEVLINK_ATTR_PORT_INDEX		nlattr[DEVLINK_ATTR_PORT_INDEX, int32]
	DEVLINK_ATTR_PORT_TYPE		nlattr[DEVLINK_ATTR_PORT_TYPE, sock_port]
	DEVLINK_ATTR_PORT_FUNCTION	nlattr[DEVLINK_ATTR_PORT_FUNCTION, int32]
] [varlen]

devlink_port_split_nl_policy$auto_netlink_gen [
	DEVLINK_ATTR_BUS_NAME		nlattr[DEVLINK_ATTR_BUS_NAME, string]
	DEVLINK_ATTR_DEV_NAME		nlattr[DEVLINK_ATTR_DEV_NAME, devname]
	DEVLINK_ATTR_PORT_INDEX		nlattr[DEVLINK_ATTR_PORT_INDEX, int32]
	DEVLINK_ATTR_PORT_SPLIT_COUNT	nlattr[DEVLINK_ATTR_PORT_SPLIT_COUNT, int32]
] [varlen]

devlink_port_unsplit_nl_policy$auto_netlink_gen [
	DEVLINK_ATTR_BUS_NAME	nlattr[DEVLINK_ATTR_BUS_NAME, string]
	DEVLINK_ATTR_DEV_NAME	nlattr[DEVLINK_ATTR_DEV_NAME, devname]
	DEVLINK_ATTR_PORT_INDEX	nlattr[DEVLINK_ATTR_PORT_INDEX, int32]
] [varlen]

devlink_rate_del_nl_policy$auto_netlink_gen [
	DEVLINK_ATTR_BUS_NAME		nlattr[DEVLINK_ATTR_BUS_NAME, string]
	DEVLINK_ATTR_DEV_NAME		nlattr[DEVLINK_ATTR_DEV_NAME, devname]
	DEVLINK_ATTR_RATE_NODE_NAME	nlattr[DEVLINK_ATTR_RATE_NODE_NAME, string]
] [varlen]

devlink_rate_get_do_nl_policy$auto_netlink_gen [
	DEVLINK_ATTR_BUS_NAME		nlattr[DEVLINK_ATTR_BUS_NAME, string]
	DEVLINK_ATTR_DEV_NAME		nlattr[DEVLINK_ATTR_DEV_NAME, devname]
	DEVLINK_ATTR_PORT_INDEX		nlattr[DEVLINK_ATTR_PORT_INDEX, int32]
	DEVLINK_ATTR_RATE_NODE_NAME	nlattr[DEVLINK_ATTR_RATE_NODE_NAME, string]
] [varlen]

devlink_rate_get_dump_nl_policy$auto_netlink_gen [
	DEVLINK_ATTR_BUS_NAME	nlattr[DEVLINK_ATTR_BUS_NAME, string]
	DEVLINK_ATTR_DEV_NAME	nlattr[DEVLINK_ATTR_DEV_NAME, devname]
] [varlen]

devlink_rate_new_nl_policy$auto_netlink_gen [
	DEVLINK_ATTR_BUS_NAME			nlattr[DEVLINK_ATTR_BUS_NAME, string]
	DEVLINK_ATTR_DEV_NAME			nlattr[DEVLINK_ATTR_DEV_NAME, devname]
	DEVLINK_ATTR_RATE_TX_SHARE		nlattr[DEVLINK_ATTR_RATE_TX_SHARE, int64]
	DEVLINK_ATTR_RATE_TX_MAX		nlattr[DEVLINK_ATTR_RATE_TX_MAX, int64]
	DEVLINK_ATTR_RATE_NODE_NAME		nlattr[DEVLINK_ATTR_RATE_NODE_NAME, string]
	DEVLINK_ATTR_RATE_PARENT_NODE_NAME	nlattr[DEVLINK_ATTR_RATE_PARENT_NODE_NAME, string]
	DEVLINK_ATTR_RATE_TX_PRIORITY		nlattr[DEVLINK_ATTR_RATE_TX_PRIORITY, int32]
	DEVLINK_ATTR_RATE_TX_WEIGHT		nlattr[DEVLINK_ATTR_RATE_TX_WEIGHT, int32]
] [varlen]

devlink_rate_set_nl_policy$auto_netlink_gen [
	DEVLINK_ATTR_BUS_NAME			nlattr[DEVLINK_ATTR_BUS_NAME, string]
	DEVLINK_ATTR_DEV_NAME			nlattr[DEVLINK_ATTR_DEV_NAME, devname]
	DEVLINK_ATTR_RATE_TX_SHARE		nlattr[DEVLINK_ATTR_RATE_TX_SHARE, int64]
	DEVLINK_ATTR_RATE_TX_MAX		nlattr[DEVLINK_ATTR_RATE_TX_MAX, int64]
	DEVLINK_ATTR_RATE_NODE_NAME		nlattr[DEVLINK_ATTR_RATE_NODE_NAME, string]
	DEVLINK_ATTR_RATE_PARENT_NODE_NAME	nlattr[DEVLINK_ATTR_RATE_PARENT_NODE_NAME, string]
	DEVLINK_ATTR_RATE_TX_PRIORITY		nlattr[DEVLINK_ATTR_RATE_TX_PRIORITY, int32]
	DEVLINK_ATTR_RATE_TX_WEIGHT		nlattr[DEVLINK_ATTR_RATE_TX_WEIGHT, int32]
] [varlen]

devlink_region_del_nl_policy$auto_netlink_gen [
	DEVLINK_ATTR_BUS_NAME		nlattr[DEVLINK_ATTR_BUS_NAME, string]
	DEVLINK_ATTR_DEV_NAME		nlattr[DEVLINK_ATTR_DEV_NAME, devname]
	DEVLINK_ATTR_PORT_INDEX		nlattr[DEVLINK_ATTR_PORT_INDEX, int32]
	DEVLINK_ATTR_REGION_NAME	nlattr[DEVLINK_ATTR_REGION_NAME, string]
	DEVLINK_ATTR_REGION_SNAPSHOT_ID	nlattr[DEVLINK_ATTR_REGION_SNAPSHOT_ID, int32]
] [varlen]

devlink_region_get_do_nl_policy$auto_netlink_gen [
	DEVLINK_ATTR_BUS_NAME		nlattr[DEVLINK_ATTR_BUS_NAME, string]
	DEVLINK_ATTR_DEV_NAME		nlattr[DEVLINK_ATTR_DEV_NAME, devname]
	DEVLINK_ATTR_PORT_INDEX		nlattr[DEVLINK_ATTR_PORT_INDEX, int32]
	DEVLINK_ATTR_REGION_NAME	nlattr[DEVLINK_ATTR_REGION_NAME, string]
] [varlen]

devlink_region_get_dump_nl_policy$auto_netlink_gen [
	DEVLINK_ATTR_BUS_NAME	nlattr[DEVLINK_ATTR_BUS_NAME, string]
	DEVLINK_ATTR_DEV_NAME	nlattr[DEVLINK_ATTR_DEV_NAME, devname]
] [varlen]

devlink_region_new_nl_policy$auto_netlink_gen [
	DEVLINK_ATTR_BUS_NAME		nlattr[DEVLINK_ATTR_BUS_NAME, string]
	DEVLINK_ATTR_DEV_NAME		nlattr[DEVLINK_ATTR_DEV_NAME, devname]
	DEVLINK_ATTR_PORT_INDEX		nlattr[DEVLINK_ATTR_PORT_INDEX, int32]
	DEVLINK_ATTR_REGION_NAME	nlattr[DEVLINK_ATTR_REGION_NAME, string]
	DEVLINK_ATTR_REGION_SNAPSHOT_ID	nlattr[DEVLINK_ATTR_REGION_SNAPSHOT_ID, int32]
] [varlen]

devlink_region_read_nl_policy$auto_netlink_gen [
	DEVLINK_ATTR_BUS_NAME		nlattr[DEVLINK_ATTR_BUS_NAME, string]
	DEVLINK_ATTR_DEV_NAME		nlattr[DEVLINK_ATTR_DEV_NAME, devname]
	DEVLINK_ATTR_PORT_INDEX		nlattr[DEVLINK_ATTR_PORT_INDEX, int32]
	DEVLINK_ATTR_REGION_NAME	nlattr[DEVLINK_ATTR_REGION_NAME, string]
	DEVLINK_ATTR_REGION_SNAPSHOT_ID	nlattr[DEVLINK_ATTR_REGION_SNAPSHOT_ID, int32]
	DEVLINK_ATTR_REGION_CHUNK_ADDR	nlattr[DEVLINK_ATTR_REGION_CHUNK_ADDR, int64]
	DEVLINK_ATTR_REGION_CHUNK_LEN	nlattr[DEVLINK_ATTR_REGION_CHUNK_LEN, int64]
	DEVLINK_ATTR_REGION_DIRECT	nlattr[DEVLINK_ATTR_REGION_DIRECT, void]
] [varlen]

devlink_reload_nl_policy$auto_netlink_gen [
	DEVLINK_ATTR_BUS_NAME		nlattr[DEVLINK_ATTR_BUS_NAME, string]
	DEVLINK_ATTR_DEV_NAME		nlattr[DEVLINK_ATTR_DEV_NAME, devname]
	DEVLINK_ATTR_NETNS_FD		nlattr[DEVLINK_ATTR_NETNS_FD, fd_namespace]
	DEVLINK_ATTR_NETNS_PID		nlattr[DEVLINK_ATTR_NETNS_PID, int32]
	DEVLINK_ATTR_NETNS_ID		nlattr[DEVLINK_ATTR_NETNS_ID, int32]
	DEVLINK_ATTR_RELOAD_ACTION	nlattr[DEVLINK_ATTR_RELOAD_ACTION, int8]
	DEVLINK_ATTR_RELOAD_LIMITS	nlattr[DEVLINK_ATTR_RELOAD_LIMITS, int32]
] [varlen]

devlink_resource_dump_nl_policy$auto_netlink_gen [
	DEVLINK_ATTR_BUS_NAME	nlattr[DEVLINK_ATTR_BUS_NAME, string]
	DEVLINK_ATTR_DEV_NAME	nlattr[DEVLINK_ATTR_DEV_NAME, devname]
] [varlen]

devlink_resource_set_nl_policy$auto_netlink_gen [
	DEVLINK_ATTR_BUS_NAME		nlattr[DEVLINK_ATTR_BUS_NAME, string]
	DEVLINK_ATTR_DEV_NAME		nlattr[DEVLINK_ATTR_DEV_NAME, devname]
	DEVLINK_ATTR_RESOURCE_ID	nlattr[DEVLINK_ATTR_RESOURCE_ID, int64]
	DEVLINK_ATTR_RESOURCE_SIZE	nlattr[DEVLINK_ATTR_RESOURCE_SIZE, int64]
] [varlen]

devlink_sb_get_do_nl_policy$auto_netlink_gen [
	DEVLINK_ATTR_BUS_NAME	nlattr[DEVLINK_ATTR_BUS_NAME, string]
	DEVLINK_ATTR_DEV_NAME	nlattr[DEVLINK_ATTR_DEV_NAME, devname]
	DEVLINK_ATTR_SB_INDEX	nlattr[DEVLINK_ATTR_SB_INDEX, int32]
] [varlen]

devlink_sb_get_dump_nl_policy$auto_netlink_gen [
	DEVLINK_ATTR_BUS_NAME	nlattr[DEVLINK_ATTR_BUS_NAME, string]
	DEVLINK_ATTR_DEV_NAME	nlattr[DEVLINK_ATTR_DEV_NAME, devname]
] [varlen]

devlink_sb_occ_max_clear_nl_policy$auto_netlink_gen [
	DEVLINK_ATTR_BUS_NAME	nlattr[DEVLINK_ATTR_BUS_NAME, string]
	DEVLINK_ATTR_DEV_NAME	nlattr[DEVLINK_ATTR_DEV_NAME, devname]
	DEVLINK_ATTR_SB_INDEX	nlattr[DEVLINK_ATTR_SB_INDEX, int32]
] [varlen]

devlink_sb_occ_snapshot_nl_policy$auto_netlink_gen [
	DEVLINK_ATTR_BUS_NAME	nlattr[DEVLINK_ATTR_BUS_NAME, string]
	DEVLINK_ATTR_DEV_NAME	nlattr[DEVLINK_ATTR_DEV_NAME, devname]
	DEVLINK_ATTR_SB_INDEX	nlattr[DEVLINK_ATTR_SB_INDEX, int32]
] [varlen]

devlink_sb_pool_get_do_nl_policy$auto_netlink_gen [
	DEVLINK_ATTR_BUS_NAME		nlattr[DEVLINK_ATTR_BUS_NAME, string]
	DEVLINK_ATTR_DEV_NAME		nlattr[DEVLINK_ATTR_DEV_NAME, devname]
	DEVLINK_ATTR_SB_INDEX		nlattr[DEVLINK_ATTR_SB_INDEX, int32]
	DEVLINK_ATTR_SB_POOL_INDEX	nlattr[DEVLINK_ATTR_SB_POOL_INDEX, int16]
] [varlen]

devlink_sb_pool_get_dump_nl_policy$auto_netlink_gen [
	DEVLINK_ATTR_BUS_NAME	nlattr[DEVLINK_ATTR_BUS_NAME, string]
	DEVLINK_ATTR_DEV_NAME	nlattr[DEVLINK_ATTR_DEV_NAME, devname]
] [varlen]

devlink_sb_pool_set_nl_policy$auto_netlink_gen [
	DEVLINK_ATTR_BUS_NAME			nlattr[DEVLINK_ATTR_BUS_NAME, string]
	DEVLINK_ATTR_DEV_NAME			nlattr[DEVLINK_ATTR_DEV_NAME, devname]
	DEVLINK_ATTR_SB_INDEX			nlattr[DEVLINK_ATTR_SB_INDEX, int32]
	DEVLINK_ATTR_SB_POOL_INDEX		nlattr[DEVLINK_ATTR_SB_POOL_INDEX, int16]
	DEVLINK_ATTR_SB_POOL_SIZE		nlattr[DEVLINK_ATTR_SB_POOL_SIZE, int32]
	DEVLINK_ATTR_SB_POOL_THRESHOLD_TYPE	nlattr[DEVLINK_ATTR_SB_POOL_THRESHOLD_TYPE, int8]
] [varlen]

devlink_sb_port_pool_get_do_nl_policy$auto_netlink_gen [
	DEVLINK_ATTR_BUS_NAME		nlattr[DEVLINK_ATTR_BUS_NAME, string]
	DEVLINK_ATTR_DEV_NAME		nlattr[DEVLINK_ATTR_DEV_NAME, devname]
	DEVLINK_ATTR_PORT_INDEX		nlattr[DEVLINK_ATTR_PORT_INDEX, int32]
	DEVLINK_ATTR_SB_INDEX		nlattr[DEVLINK_ATTR_SB_INDEX, int32]
	DEVLINK_ATTR_SB_POOL_INDEX	nlattr[DEVLINK_ATTR_SB_POOL_INDEX, int16]
] [varlen]

devlink_sb_port_pool_get_dump_nl_policy$auto_netlink_gen [
	DEVLINK_ATTR_BUS_NAME	nlattr[DEVLINK_ATTR_BUS_NAME, string]
	DEVLINK_ATTR_DEV_NAME	nlattr[DEVLINK_ATTR_DEV_NAME, devname]
] [varlen]

devlink_sb_port_pool_set_nl_policy$auto_netlink_gen [
	DEVLINK_ATTR_BUS_NAME		nlattr[DEVLINK_ATTR_BUS_NAME, string]
	DEVLINK_ATTR_DEV_NAME		nlattr[DEVLINK_ATTR_DEV_NAME, devname]
	DEVLINK_ATTR_PORT_INDEX		nlattr[DEVLINK_ATTR_PORT_INDEX, int32]
	DEVLINK_ATTR_SB_INDEX		nlattr[DEVLINK_ATTR_SB_INDEX, int32]
	DEVLINK_ATTR_SB_POOL_INDEX	nlattr[DEVLINK_ATTR_SB_POOL_INDEX, int16]
	DEVLINK_ATTR_SB_THRESHOLD	nlattr[DEVLINK_ATTR_SB_THRESHOLD, int32]
] [varlen]

devlink_sb_tc_pool_bind_get_do_nl_policy$auto_netlink_gen [
	DEVLINK_ATTR_BUS_NAME		nlattr[DEVLINK_ATTR_BUS_NAME, string]
	DEVLINK_ATTR_DEV_NAME		nlattr[DEVLINK_ATTR_DEV_NAME, devname]
	DEVLINK_ATTR_PORT_INDEX		nlattr[DEVLINK_ATTR_PORT_INDEX, int32]
	DEVLINK_ATTR_SB_INDEX		nlattr[DEVLINK_ATTR_SB_INDEX, int32]
	DEVLINK_ATTR_SB_POOL_TYPE	nlattr[DEVLINK_ATTR_SB_POOL_TYPE, int8]
	DEVLINK_ATTR_SB_TC_INDEX	nlattr[DEVLINK_ATTR_SB_TC_INDEX, int16]
] [varlen]

devlink_sb_tc_pool_bind_get_dump_nl_policy$auto_netlink_gen [
	DEVLINK_ATTR_BUS_NAME	nlattr[DEVLINK_ATTR_BUS_NAME, string]
	DEVLINK_ATTR_DEV_NAME	nlattr[DEVLINK_ATTR_DEV_NAME, devname]
] [varlen]

devlink_sb_tc_pool_bind_set_nl_policy$auto_netlink_gen [
	DEVLINK_ATTR_BUS_NAME		nlattr[DEVLINK_ATTR_BUS_NAME, string]
	DEVLINK_ATTR_DEV_NAME		nlattr[DEVLINK_ATTR_DEV_NAME, devname]
	DEVLINK_ATTR_PORT_INDEX		nlattr[DEVLINK_ATTR_PORT_INDEX, int32]
	DEVLINK_ATTR_SB_INDEX		nlattr[DEVLINK_ATTR_SB_INDEX, int32]
	DEVLINK_ATTR_SB_POOL_INDEX	nlattr[DEVLINK_ATTR_SB_POOL_INDEX, int16]
	DEVLINK_ATTR_SB_POOL_TYPE	nlattr[DEVLINK_ATTR_SB_POOL_TYPE, int8]
	DEVLINK_ATTR_SB_THRESHOLD	nlattr[DEVLINK_ATTR_SB_THRESHOLD, int32]
	DEVLINK_ATTR_SB_TC_INDEX	nlattr[DEVLINK_ATTR_SB_TC_INDEX, int16]
] [varlen]

devlink_selftest_nl_policy$auto_dev [
	DEVLINK_ATTR_SELFTEST_ID_FLASH	nlattr[DEVLINK_ATTR_SELFTEST_ID_FLASH, void]
] [varlen]

devlink_selftests_get_nl_policy$auto_netlink_gen [
	DEVLINK_ATTR_BUS_NAME	nlattr[DEVLINK_ATTR_BUS_NAME, string]
	DEVLINK_ATTR_DEV_NAME	nlattr[DEVLINK_ATTR_DEV_NAME, devname]
] [varlen]

devlink_selftests_run_nl_policy$auto_netlink_gen [
	DEVLINK_ATTR_BUS_NAME	nlattr[DEVLINK_ATTR_BUS_NAME, string]
	DEVLINK_ATTR_DEV_NAME	nlattr[DEVLINK_ATTR_DEV_NAME, devname]
	DEVLINK_ATTR_SELFTESTS	nlattr[DEVLINK_ATTR_SELFTESTS, int8]
] [varlen]

devlink_trap_get_do_nl_policy$auto_netlink_gen [
	DEVLINK_ATTR_BUS_NAME	nlattr[DEVLINK_ATTR_BUS_NAME, string]
	DEVLINK_ATTR_DEV_NAME	nlattr[DEVLINK_ATTR_DEV_NAME, devname]
	DEVLINK_ATTR_TRAP_NAME	nlattr[DEVLINK_ATTR_TRAP_NAME, string]
] [varlen]

devlink_trap_get_dump_nl_policy$auto_netlink_gen [
	DEVLINK_ATTR_BUS_NAME	nlattr[DEVLINK_ATTR_BUS_NAME, string]
	DEVLINK_ATTR_DEV_NAME	nlattr[DEVLINK_ATTR_DEV_NAME, devname]
] [varlen]

devlink_trap_group_get_do_nl_policy$auto_netlink_gen [
	DEVLINK_ATTR_BUS_NAME		nlattr[DEVLINK_ATTR_BUS_NAME, string]
	DEVLINK_ATTR_DEV_NAME		nlattr[DEVLINK_ATTR_DEV_NAME, devname]
	DEVLINK_ATTR_TRAP_GROUP_NAME	nlattr[DEVLINK_ATTR_TRAP_GROUP_NAME, string]
] [varlen]

devlink_trap_group_get_dump_nl_policy$auto_netlink_gen [
	DEVLINK_ATTR_BUS_NAME	nlattr[DEVLINK_ATTR_BUS_NAME, string]
	DEVLINK_ATTR_DEV_NAME	nlattr[DEVLINK_ATTR_DEV_NAME, devname]
] [varlen]

devlink_trap_group_set_nl_policy$auto_netlink_gen [
	DEVLINK_ATTR_BUS_NAME		nlattr[DEVLINK_ATTR_BUS_NAME, string]
	DEVLINK_ATTR_DEV_NAME		nlattr[DEVLINK_ATTR_DEV_NAME, devname]
	DEVLINK_ATTR_TRAP_ACTION	nlattr[DEVLINK_ATTR_TRAP_ACTION, int8]
	DEVLINK_ATTR_TRAP_GROUP_NAME	nlattr[DEVLINK_ATTR_TRAP_GROUP_NAME, string]
	DEVLINK_ATTR_TRAP_POLICER_ID	nlattr[DEVLINK_ATTR_TRAP_POLICER_ID, int32]
] [varlen]

devlink_trap_policer_get_do_nl_policy$auto_netlink_gen [
	DEVLINK_ATTR_BUS_NAME		nlattr[DEVLINK_ATTR_BUS_NAME, string]
	DEVLINK_ATTR_DEV_NAME		nlattr[DEVLINK_ATTR_DEV_NAME, devname]
	DEVLINK_ATTR_TRAP_POLICER_ID	nlattr[DEVLINK_ATTR_TRAP_POLICER_ID, int32]
] [varlen]

devlink_trap_policer_get_dump_nl_policy$auto_netlink_gen [
	DEVLINK_ATTR_BUS_NAME	nlattr[DEVLINK_ATTR_BUS_NAME, string]
	DEVLINK_ATTR_DEV_NAME	nlattr[DEVLINK_ATTR_DEV_NAME, devname]
] [varlen]

devlink_trap_policer_set_nl_policy$auto_netlink_gen [
	DEVLINK_ATTR_BUS_NAME		nlattr[DEVLINK_ATTR_BUS_NAME, string]
	DEVLINK_ATTR_DEV_NAME		nlattr[DEVLINK_ATTR_DEV_NAME, devname]
	DEVLINK_ATTR_TRAP_POLICER_ID	nlattr[DEVLINK_ATTR_TRAP_POLICER_ID, int32]
	DEVLINK_ATTR_TRAP_POLICER_RATE	nlattr[DEVLINK_ATTR_TRAP_POLICER_RATE, int64]
	DEVLINK_ATTR_TRAP_POLICER_BURST	nlattr[DEVLINK_ATTR_TRAP_POLICER_BURST, int64]
] [varlen]

devlink_trap_set_nl_policy$auto_netlink_gen [
	DEVLINK_ATTR_BUS_NAME		nlattr[DEVLINK_ATTR_BUS_NAME, string]
	DEVLINK_ATTR_DEV_NAME		nlattr[DEVLINK_ATTR_DEV_NAME, devname]
	DEVLINK_ATTR_TRAP_NAME		nlattr[DEVLINK_ATTR_TRAP_NAME, string]
	DEVLINK_ATTR_TRAP_ACTION	nlattr[DEVLINK_ATTR_TRAP_ACTION, int8]
] [varlen]

drr_policy$auto_sch_drr [
	TCA_DRR_QUANTUM	nlattr[TCA_DRR_QUANTUM, int32]
] [varlen]

dsa_policy$auto_netlink [
	IFLA_DSA_CONDUIT	nlattr[IFLA_DSA_CONDUIT, int32]
] [varlen]

em_ipt_policy$auto_em_ipt [
	TCA_EM_IPT_HOOK			nlattr[TCA_EM_IPT_HOOK, int32]
	TCA_EM_IPT_MATCH_NAME		nlattr[TCA_EM_IPT_MATCH_NAME, stringnoz]
	TCA_EM_IPT_MATCH_REVISION	nlattr[TCA_EM_IPT_MATCH_REVISION, int8]
	TCA_EM_IPT_NFPROTO		nlattr[TCA_EM_IPT_NFPROTO, int8]
	TCA_EM_IPT_MATCH_DATA		nlattr[TCA_EM_IPT_MATCH_DATA, array[int8]]
] [varlen]

em_policy$auto_ematch [
	TCA_EMATCH_TREE_HDR	nlattr[TCA_EMATCH_TREE_HDR, int32]
	TCA_EMATCH_TREE_LIST	nlattr[TCA_EMATCH_TREE_LIST, array[int8]]
] [varlen]

enc_opts_policy$auto_act_tunnel_key [
	TCA_TUNNEL_KEY_ENC_OPTS_UNSPEC	nlattr[TCA_TUNNEL_KEY_ENC_OPTS_UNSPEC, array[int8]]
	TCA_TUNNEL_KEY_ENC_OPTS_GENEVE	nlattr[TCA_TUNNEL_KEY_ENC_OPTS_GENEVE, array[int8]]
	TCA_TUNNEL_KEY_ENC_OPTS_VXLAN	nlattr[TCA_TUNNEL_KEY_ENC_OPTS_VXLAN, array[int8]]
	TCA_TUNNEL_KEY_ENC_OPTS_ERSPAN	nlattr[TCA_TUNNEL_KEY_ENC_OPTS_ERSPAN, array[int8]]
] [varlen]

enc_opts_policy$auto_cls_flower [
	TCA_FLOWER_KEY_ENC_OPTS_UNSPEC	nlattr[TCA_FLOWER_KEY_ENC_OPTS_UNSPEC, array[int8]]
	TCA_FLOWER_KEY_ENC_OPTS_GENEVE	nlattr[TCA_FLOWER_KEY_ENC_OPTS_GENEVE, array[int8]]
	TCA_FLOWER_KEY_ENC_OPTS_VXLAN	nlattr[TCA_FLOWER_KEY_ENC_OPTS_VXLAN, array[int8]]
	TCA_FLOWER_KEY_ENC_OPTS_ERSPAN	nlattr[TCA_FLOWER_KEY_ENC_OPTS_ERSPAN, array[int8]]
	TCA_FLOWER_KEY_ENC_OPTS_GTP	nlattr[TCA_FLOWER_KEY_ENC_OPTS_GTP, array[int8]]
	TCA_FLOWER_KEY_ENC_OPTS_PFCP	nlattr[TCA_FLOWER_KEY_ENC_OPTS_PFCP, array[int8]]
] [varlen]

entry_policy$auto_act_gate [
	TCA_GATE_ENTRY_INDEX		nlattr[TCA_GATE_ENTRY_INDEX, int32]
	TCA_GATE_ENTRY_GATE		nlattr[TCA_GATE_ENTRY_GATE, void]
	TCA_GATE_ENTRY_INTERVAL		nlattr[TCA_GATE_ENTRY_INTERVAL, int32]
	TCA_GATE_ENTRY_IPV		nlattr[TCA_GATE_ENTRY_IPV, int32]
	TCA_GATE_ENTRY_MAX_OCTETS	nlattr[TCA_GATE_ENTRY_MAX_OCTETS, int32]
] [varlen]

entry_policy$auto_sch_taprio [
	TCA_TAPRIO_SCHED_ENTRY_INDEX		nlattr[TCA_TAPRIO_SCHED_ENTRY_INDEX, int32]
	TCA_TAPRIO_SCHED_ENTRY_CMD		nlattr[TCA_TAPRIO_SCHED_ENTRY_CMD, int8]
	TCA_TAPRIO_SCHED_ENTRY_GATE_MASK	nlattr[TCA_TAPRIO_SCHED_ENTRY_GATE_MASK, int32]
	TCA_TAPRIO_SCHED_ENTRY_INTERVAL		nlattr[TCA_TAPRIO_SCHED_ENTRY_INTERVAL, int32]
] [varlen]

erspan_opt_policy$auto_act_tunnel_key [
	TCA_TUNNEL_KEY_ENC_OPT_ERSPAN_VER	nlattr[TCA_TUNNEL_KEY_ENC_OPT_ERSPAN_VER, int8]
	TCA_TUNNEL_KEY_ENC_OPT_ERSPAN_INDEX	nlattr[TCA_TUNNEL_KEY_ENC_OPT_ERSPAN_INDEX, int32]
	TCA_TUNNEL_KEY_ENC_OPT_ERSPAN_DIR	nlattr[TCA_TUNNEL_KEY_ENC_OPT_ERSPAN_DIR, int8]
	TCA_TUNNEL_KEY_ENC_OPT_ERSPAN_HWID	nlattr[TCA_TUNNEL_KEY_ENC_OPT_ERSPAN_HWID, int8]
] [varlen]

erspan_opt_policy$auto_cls_flower [
	TCA_FLOWER_KEY_ENC_OPT_ERSPAN_VER	nlattr[TCA_FLOWER_KEY_ENC_OPT_ERSPAN_VER, int8]
	TCA_FLOWER_KEY_ENC_OPT_ERSPAN_INDEX	nlattr[TCA_FLOWER_KEY_ENC_OPT_ERSPAN_INDEX, int32]
	TCA_FLOWER_KEY_ENC_OPT_ERSPAN_DIR	nlattr[TCA_FLOWER_KEY_ENC_OPT_ERSPAN_DIR, int8]
	TCA_FLOWER_KEY_ENC_OPT_ERSPAN_HWID	nlattr[TCA_FLOWER_KEY_ENC_OPT_ERSPAN_HWID, int8]
] [varlen]

erspan_opt_policy$auto_ip_tunnel_core [
	LWTUNNEL_IP_OPT_ERSPAN_VER	nlattr[LWTUNNEL_IP_OPT_ERSPAN_VER, int8]
	LWTUNNEL_IP_OPT_ERSPAN_INDEX	nlattr[LWTUNNEL_IP_OPT_ERSPAN_INDEX, int32]
	LWTUNNEL_IP_OPT_ERSPAN_DIR	nlattr[LWTUNNEL_IP_OPT_ERSPAN_DIR, int8]
	LWTUNNEL_IP_OPT_ERSPAN_HWID	nlattr[LWTUNNEL_IP_OPT_ERSPAN_HWID, int8]
] [varlen]

etf_policy$auto_sch_etf [
	TCA_ETF_PARMS	nlattr[TCA_ETF_PARMS, array[int8, 12]]
] [varlen]

ethnl_cable_test_act_policy$auto_netlink [
	ETHTOOL_A_CABLE_TEST_HEADER	nlattr[ETHTOOL_A_CABLE_TEST_HEADER, array[int8, 3]]
] [varlen]

ethnl_cable_test_tdr_act_policy$auto_netlink [
	ETHTOOL_A_CABLE_TEST_TDR_HEADER	nlattr[ETHTOOL_A_CABLE_TEST_TDR_HEADER, array[int8, 3]]
	ETHTOOL_A_CABLE_TEST_TDR_CFG	nlattr[ETHTOOL_A_CABLE_TEST_TDR_CFG, array[int8]]
] [varlen]

ethnl_channels_get_policy$auto_netlink [
	ETHTOOL_A_CHANNELS_HEADER	nlattr[ETHTOOL_A_CHANNELS_HEADER, array[int8, 3]]
] [varlen]

ethnl_channels_set_policy$auto_netlink [
	ETHTOOL_A_CHANNELS_HEADER		nlattr[ETHTOOL_A_CHANNELS_HEADER, array[int8, 3]]
	ETHTOOL_A_CHANNELS_RX_COUNT		nlattr[ETHTOOL_A_CHANNELS_RX_COUNT, int32]
	ETHTOOL_A_CHANNELS_TX_COUNT		nlattr[ETHTOOL_A_CHANNELS_TX_COUNT, int32]
	ETHTOOL_A_CHANNELS_OTHER_COUNT		nlattr[ETHTOOL_A_CHANNELS_OTHER_COUNT, int32]
	ETHTOOL_A_CHANNELS_COMBINED_COUNT	nlattr[ETHTOOL_A_CHANNELS_COMBINED_COUNT, int32]
] [varlen]

ethnl_coalesce_get_policy$auto_netlink [
	ETHTOOL_A_COALESCE_HEADER	nlattr[ETHTOOL_A_COALESCE_HEADER, array[int8, 3]]
] [varlen]

ethnl_coalesce_set_policy$auto_netlink [
	ETHTOOL_A_COALESCE_HEADER		nlattr[ETHTOOL_A_COALESCE_HEADER, array[int8, 3]]
	ETHTOOL_A_COALESCE_RX_USECS		nlattr[ETHTOOL_A_COALESCE_RX_USECS, int32]
	ETHTOOL_A_COALESCE_RX_MAX_FRAMES	nlattr[ETHTOOL_A_COALESCE_RX_MAX_FRAMES, int32]
	ETHTOOL_A_COALESCE_RX_USECS_IRQ		nlattr[ETHTOOL_A_COALESCE_RX_USECS_IRQ, int32]
	ETHTOOL_A_COALESCE_RX_MAX_FRAMES_IRQ	nlattr[ETHTOOL_A_COALESCE_RX_MAX_FRAMES_IRQ, int32]
	ETHTOOL_A_COALESCE_TX_USECS		nlattr[ETHTOOL_A_COALESCE_TX_USECS, int32]
	ETHTOOL_A_COALESCE_TX_MAX_FRAMES	nlattr[ETHTOOL_A_COALESCE_TX_MAX_FRAMES, int32]
	ETHTOOL_A_COALESCE_TX_USECS_IRQ		nlattr[ETHTOOL_A_COALESCE_TX_USECS_IRQ, int32]
	ETHTOOL_A_COALESCE_TX_MAX_FRAMES_IRQ	nlattr[ETHTOOL_A_COALESCE_TX_MAX_FRAMES_IRQ, int32]
	ETHTOOL_A_COALESCE_STATS_BLOCK_USECS	nlattr[ETHTOOL_A_COALESCE_STATS_BLOCK_USECS, int32]
	ETHTOOL_A_COALESCE_USE_ADAPTIVE_RX	nlattr[ETHTOOL_A_COALESCE_USE_ADAPTIVE_RX, int8]
	ETHTOOL_A_COALESCE_USE_ADAPTIVE_TX	nlattr[ETHTOOL_A_COALESCE_USE_ADAPTIVE_TX, int8]
	ETHTOOL_A_COALESCE_PKT_RATE_LOW		nlattr[ETHTOOL_A_COALESCE_PKT_RATE_LOW, int32]
	ETHTOOL_A_COALESCE_RX_USECS_LOW		nlattr[ETHTOOL_A_COALESCE_RX_USECS_LOW, int32]
	ETHTOOL_A_COALESCE_RX_MAX_FRAMES_LOW	nlattr[ETHTOOL_A_COALESCE_RX_MAX_FRAMES_LOW, int32]
	ETHTOOL_A_COALESCE_TX_USECS_LOW		nlattr[ETHTOOL_A_COALESCE_TX_USECS_LOW, int32]
	ETHTOOL_A_COALESCE_TX_MAX_FRAMES_LOW	nlattr[ETHTOOL_A_COALESCE_TX_MAX_FRAMES_LOW, int32]
	ETHTOOL_A_COALESCE_PKT_RATE_HIGH	nlattr[ETHTOOL_A_COALESCE_PKT_RATE_HIGH, int32]
	ETHTOOL_A_COALESCE_RX_USECS_HIGH	nlattr[ETHTOOL_A_COALESCE_RX_USECS_HIGH, int32]
	ETHTOOL_A_COALESCE_RX_MAX_FRAMES_HIGH	nlattr[ETHTOOL_A_COALESCE_RX_MAX_FRAMES_HIGH, int32]
	ETHTOOL_A_COALESCE_TX_USECS_HIGH	nlattr[ETHTOOL_A_COALESCE_TX_USECS_HIGH, int32]
	ETHTOOL_A_COALESCE_TX_MAX_FRAMES_HIGH	nlattr[ETHTOOL_A_COALESCE_TX_MAX_FRAMES_HIGH, int32]
	ETHTOOL_A_COALESCE_RATE_SAMPLE_INTERVAL	nlattr[ETHTOOL_A_COALESCE_RATE_SAMPLE_INTERVAL, int32]
	ETHTOOL_A_COALESCE_USE_CQE_MODE_TX	nlattr[ETHTOOL_A_COALESCE_USE_CQE_MODE_TX, int8]
	ETHTOOL_A_COALESCE_USE_CQE_MODE_RX	nlattr[ETHTOOL_A_COALESCE_USE_CQE_MODE_RX, int8]
	ETHTOOL_A_COALESCE_TX_AGGR_MAX_BYTES	nlattr[ETHTOOL_A_COALESCE_TX_AGGR_MAX_BYTES, int32]
	ETHTOOL_A_COALESCE_TX_AGGR_MAX_FRAMES	nlattr[ETHTOOL_A_COALESCE_TX_AGGR_MAX_FRAMES, int32]
	ETHTOOL_A_COALESCE_TX_AGGR_TIME_USECS	nlattr[ETHTOOL_A_COALESCE_TX_AGGR_TIME_USECS, int32]
	ETHTOOL_A_COALESCE_RX_PROFILE		nlattr[ETHTOOL_A_COALESCE_RX_PROFILE, int8]
	ETHTOOL_A_COALESCE_TX_PROFILE		nlattr[ETHTOOL_A_COALESCE_TX_PROFILE, int8]
] [varlen]

ethnl_debug_get_policy$auto_netlink [
	ETHTOOL_A_DEBUG_HEADER	nlattr[ETHTOOL_A_DEBUG_HEADER, array[int8, 3]]
] [varlen]

ethnl_debug_set_policy$auto_netlink [
	ETHTOOL_A_DEBUG_HEADER	nlattr[ETHTOOL_A_DEBUG_HEADER, array[int8, 3]]
	ETHTOOL_A_DEBUG_MSGMASK	nlattr[ETHTOOL_A_DEBUG_MSGMASK, array[int8]]
] [varlen]

ethnl_eee_get_policy$auto_netlink [
	ETHTOOL_A_EEE_HEADER	nlattr[ETHTOOL_A_EEE_HEADER, array[int8, 3]]
] [varlen]

ethnl_eee_set_policy$auto_netlink [
	ETHTOOL_A_EEE_HEADER		nlattr[ETHTOOL_A_EEE_HEADER, array[int8, 3]]
	ETHTOOL_A_EEE_MODES_OURS	nlattr[ETHTOOL_A_EEE_MODES_OURS, array[int8]]
	ETHTOOL_A_EEE_ENABLED		nlattr[ETHTOOL_A_EEE_ENABLED, bool8]
	ETHTOOL_A_EEE_TX_LPI_ENABLED	nlattr[ETHTOOL_A_EEE_TX_LPI_ENABLED, bool8]
	ETHTOOL_A_EEE_TX_LPI_TIMER	nlattr[ETHTOOL_A_EEE_TX_LPI_TIMER, int32]
] [varlen]

ethnl_features_get_policy$auto_netlink [
	ETHTOOL_A_FEATURES_HEADER	nlattr[ETHTOOL_A_FEATURES_HEADER, array[int8, 3]]
] [varlen]

ethnl_features_set_policy$auto_netlink [
	ETHTOOL_A_FEATURES_HEADER	nlattr[ETHTOOL_A_FEATURES_HEADER, array[int8, 3]]
	ETHTOOL_A_FEATURES_WANTED	nlattr[ETHTOOL_A_FEATURES_WANTED, array[int8]]
] [varlen]

ethnl_fec_get_policy$auto_netlink [
	ETHTOOL_A_FEC_HEADER	nlattr[ETHTOOL_A_FEC_HEADER, array[int8, 3]]
] [varlen]

ethnl_fec_set_policy$auto_netlink [
	ETHTOOL_A_FEC_HEADER	nlattr[ETHTOOL_A_FEC_HEADER, array[int8, 3]]
	ETHTOOL_A_FEC_MODES	nlattr[ETHTOOL_A_FEC_MODES, array[int8]]
	ETHTOOL_A_FEC_AUTO	nlattr[ETHTOOL_A_FEC_AUTO, int8]
] [varlen]

ethnl_header_policy$auto_netlink [
	ETHTOOL_A_HEADER_DEV_INDEX	nlattr[ETHTOOL_A_HEADER_DEV_INDEX, int32]
	ETHTOOL_A_HEADER_DEV_NAME	nlattr[ETHTOOL_A_HEADER_DEV_NAME, devname]
	ETHTOOL_A_HEADER_FLAGS		nlattr[ETHTOOL_A_HEADER_FLAGS, int32]
] [varlen]

ethnl_header_policy_stats$auto_netlink [
	ETHTOOL_A_HEADER_DEV_INDEX	nlattr[ETHTOOL_A_HEADER_DEV_INDEX, int32]
	ETHTOOL_A_HEADER_DEV_NAME	nlattr[ETHTOOL_A_HEADER_DEV_NAME, devname]
	ETHTOOL_A_HEADER_FLAGS		nlattr[ETHTOOL_A_HEADER_FLAGS, int32]
] [varlen]

ethnl_linkinfo_get_policy$auto_netlink [
	ETHTOOL_A_LINKINFO_HEADER	nlattr[ETHTOOL_A_LINKINFO_HEADER, array[int8, 3]]
] [varlen]

ethnl_linkinfo_set_policy$auto_netlink [
	ETHTOOL_A_LINKINFO_HEADER	nlattr[ETHTOOL_A_LINKINFO_HEADER, array[int8, 3]]
	ETHTOOL_A_LINKINFO_PORT		nlattr[ETHTOOL_A_LINKINFO_PORT, int8]
	ETHTOOL_A_LINKINFO_PHYADDR	nlattr[ETHTOOL_A_LINKINFO_PHYADDR, int8]
	ETHTOOL_A_LINKINFO_TP_MDIX_CTRL	nlattr[ETHTOOL_A_LINKINFO_TP_MDIX_CTRL, int8]
] [varlen]

ethnl_linkmodes_get_policy$auto_netlink [
	ETHTOOL_A_LINKMODES_HEADER	nlattr[ETHTOOL_A_LINKMODES_HEADER, array[int8, 3]]
] [varlen]

ethnl_linkmodes_set_policy$auto_netlink [
	ETHTOOL_A_LINKMODES_HEADER		nlattr[ETHTOOL_A_LINKMODES_HEADER, array[int8, 3]]
	ETHTOOL_A_LINKMODES_AUTONEG		nlattr[ETHTOOL_A_LINKMODES_AUTONEG, int8]
	ETHTOOL_A_LINKMODES_OURS		nlattr[ETHTOOL_A_LINKMODES_OURS, array[int8]]
	ETHTOOL_A_LINKMODES_SPEED		nlattr[ETHTOOL_A_LINKMODES_SPEED, int32]
	ETHTOOL_A_LINKMODES_DUPLEX		nlattr[ETHTOOL_A_LINKMODES_DUPLEX, int8]
	ETHTOOL_A_LINKMODES_MASTER_SLAVE_CFG	nlattr[ETHTOOL_A_LINKMODES_MASTER_SLAVE_CFG, int8]
	ETHTOOL_A_LINKMODES_LANES		nlattr[ETHTOOL_A_LINKMODES_LANES, int32]
] [varlen]

ethnl_linkstate_get_policy$auto_netlink [
	ETHTOOL_A_LINKSTATE_HEADER	nlattr[ETHTOOL_A_LINKSTATE_HEADER, array[int8, 3]]
] [varlen]

ethnl_mm_get_policy$auto_netlink [
	ETHTOOL_A_MM_HEADER	nlattr[ETHTOOL_A_MM_HEADER, array[int8, 3]]
] [varlen]

ethnl_mm_set_policy$auto_netlink [
	ETHTOOL_A_MM_HEADER		nlattr[ETHTOOL_A_MM_HEADER, array[int8, 3]]
	ETHTOOL_A_MM_PMAC_ENABLED	nlattr[ETHTOOL_A_MM_PMAC_ENABLED, bool8]
	ETHTOOL_A_MM_TX_ENABLED		nlattr[ETHTOOL_A_MM_TX_ENABLED, bool8]
	ETHTOOL_A_MM_TX_MIN_FRAG_SIZE	nlattr[ETHTOOL_A_MM_TX_MIN_FRAG_SIZE, int32]
	ETHTOOL_A_MM_VERIFY_ENABLED	nlattr[ETHTOOL_A_MM_VERIFY_ENABLED, bool8]
	ETHTOOL_A_MM_VERIFY_TIME	nlattr[ETHTOOL_A_MM_VERIFY_TIME, int32]
] [varlen]

ethnl_module_eeprom_get_policy$auto_netlink [
	ETHTOOL_A_MODULE_EEPROM_HEADER		nlattr[ETHTOOL_A_MODULE_EEPROM_HEADER, array[int8, 3]]
	ETHTOOL_A_MODULE_EEPROM_OFFSET		nlattr[ETHTOOL_A_MODULE_EEPROM_OFFSET, int32]
	ETHTOOL_A_MODULE_EEPROM_LENGTH		nlattr[ETHTOOL_A_MODULE_EEPROM_LENGTH, int32]
	ETHTOOL_A_MODULE_EEPROM_PAGE		nlattr[ETHTOOL_A_MODULE_EEPROM_PAGE, int8]
	ETHTOOL_A_MODULE_EEPROM_BANK		nlattr[ETHTOOL_A_MODULE_EEPROM_BANK, int8]
	ETHTOOL_A_MODULE_EEPROM_I2C_ADDRESS	nlattr[ETHTOOL_A_MODULE_EEPROM_I2C_ADDRESS, int8]
] [varlen]

ethnl_module_fw_flash_act_policy$auto_netlink [
	ETHTOOL_A_MODULE_FW_FLASH_HEADER	nlattr[ETHTOOL_A_MODULE_FW_FLASH_HEADER, array[int8, 3]]
	ETHTOOL_A_MODULE_FW_FLASH_FILE_NAME	nlattr[ETHTOOL_A_MODULE_FW_FLASH_FILE_NAME, string]
	ETHTOOL_A_MODULE_FW_FLASH_PASSWORD	nlattr[ETHTOOL_A_MODULE_FW_FLASH_PASSWORD, int32]
] [varlen]

ethnl_module_get_policy$auto_netlink [
	ETHTOOL_A_MODULE_HEADER	nlattr[ETHTOOL_A_MODULE_HEADER, array[int8, 3]]
] [varlen]

ethnl_module_set_policy$auto_netlink [
	ETHTOOL_A_MODULE_HEADER			nlattr[ETHTOOL_A_MODULE_HEADER, array[int8, 3]]
	ETHTOOL_A_MODULE_POWER_MODE_POLICY	nlattr[ETHTOOL_A_MODULE_POWER_MODE_POLICY, int8]
] [varlen]

ethnl_pause_get_policy$auto_netlink [
	ETHTOOL_A_PAUSE_HEADER		nlattr[ETHTOOL_A_PAUSE_HEADER, array[int8, 3]]
	ETHTOOL_A_PAUSE_STATS_SRC	nlattr[ETHTOOL_A_PAUSE_STATS_SRC, int32]
] [varlen]

ethnl_pause_set_policy$auto_netlink [
	ETHTOOL_A_PAUSE_HEADER	nlattr[ETHTOOL_A_PAUSE_HEADER, array[int8, 3]]
	ETHTOOL_A_PAUSE_AUTONEG	nlattr[ETHTOOL_A_PAUSE_AUTONEG, int8]
	ETHTOOL_A_PAUSE_RX	nlattr[ETHTOOL_A_PAUSE_RX, int8]
	ETHTOOL_A_PAUSE_TX	nlattr[ETHTOOL_A_PAUSE_TX, int8]
] [varlen]

ethnl_phc_vclocks_get_policy$auto_netlink [
	ETHTOOL_A_PHC_VCLOCKS_HEADER	nlattr[ETHTOOL_A_PHC_VCLOCKS_HEADER, array[int8, 3]]
] [varlen]

ethnl_plca_get_cfg_policy$auto_netlink [
	ETHTOOL_A_PLCA_HEADER	nlattr[ETHTOOL_A_PLCA_HEADER, array[int8, 3]]
] [varlen]

ethnl_plca_get_status_policy$auto_netlink [
	ETHTOOL_A_PLCA_HEADER	nlattr[ETHTOOL_A_PLCA_HEADER, array[int8, 3]]
] [varlen]

ethnl_plca_set_cfg_policy$auto_netlink [
	ETHTOOL_A_PLCA_HEADER		nlattr[ETHTOOL_A_PLCA_HEADER, array[int8, 3]]
	ETHTOOL_A_PLCA_ENABLED		nlattr[ETHTOOL_A_PLCA_ENABLED, bool8]
	ETHTOOL_A_PLCA_NODE_CNT		nlattr[ETHTOOL_A_PLCA_NODE_CNT, int32]
	ETHTOOL_A_PLCA_NODE_ID		nlattr[ETHTOOL_A_PLCA_NODE_ID, int32]
	ETHTOOL_A_PLCA_TO_TMR		nlattr[ETHTOOL_A_PLCA_TO_TMR, int32]
	ETHTOOL_A_PLCA_BURST_CNT	nlattr[ETHTOOL_A_PLCA_BURST_CNT, int32]
	ETHTOOL_A_PLCA_BURST_TMR	nlattr[ETHTOOL_A_PLCA_BURST_TMR, int32]
] [varlen]

ethnl_privflags_get_policy$auto_netlink [
	ETHTOOL_A_PRIVFLAGS_HEADER	nlattr[ETHTOOL_A_PRIVFLAGS_HEADER, array[int8, 3]]
] [varlen]

ethnl_privflags_set_policy$auto_netlink [
	ETHTOOL_A_PRIVFLAGS_HEADER	nlattr[ETHTOOL_A_PRIVFLAGS_HEADER, array[int8, 3]]
	ETHTOOL_A_PRIVFLAGS_FLAGS	nlattr[ETHTOOL_A_PRIVFLAGS_FLAGS, array[int8]]
] [varlen]

ethnl_pse_get_policy$auto_netlink [
	ETHTOOL_A_PSE_HEADER	nlattr[ETHTOOL_A_PSE_HEADER, array[int8, 3]]
] [varlen]

ethnl_pse_set_policy$auto_netlink [
	ETHTOOL_A_PSE_HEADER			nlattr[ETHTOOL_A_PSE_HEADER, array[int8, 3]]
	ETHTOOL_A_PODL_PSE_ADMIN_CONTROL	nlattr[ETHTOOL_A_PODL_PSE_ADMIN_CONTROL, int32]
	ETHTOOL_A_C33_PSE_ADMIN_CONTROL		nlattr[ETHTOOL_A_C33_PSE_ADMIN_CONTROL, int32]
	ETHTOOL_A_C33_PSE_AVAIL_PW_LIMIT	nlattr[ETHTOOL_A_C33_PSE_AVAIL_PW_LIMIT, int32]
] [varlen]

ethnl_rings_get_policy$auto_netlink [
	ETHTOOL_A_RINGS_HEADER	nlattr[ETHTOOL_A_RINGS_HEADER, array[int8, 3]]
] [varlen]

ethnl_rings_set_policy$auto_netlink [
	ETHTOOL_A_RINGS_HEADER		nlattr[ETHTOOL_A_RINGS_HEADER, array[int8, 3]]
	ETHTOOL_A_RINGS_RX		nlattr[ETHTOOL_A_RINGS_RX, int32]
	ETHTOOL_A_RINGS_RX_MINI		nlattr[ETHTOOL_A_RINGS_RX_MINI, int32]
	ETHTOOL_A_RINGS_RX_JUMBO	nlattr[ETHTOOL_A_RINGS_RX_JUMBO, int32]
	ETHTOOL_A_RINGS_TX		nlattr[ETHTOOL_A_RINGS_TX, int32]
	ETHTOOL_A_RINGS_RX_BUF_LEN	nlattr[ETHTOOL_A_RINGS_RX_BUF_LEN, int32]
	ETHTOOL_A_RINGS_TCP_DATA_SPLIT	nlattr[ETHTOOL_A_RINGS_TCP_DATA_SPLIT, int8]
	ETHTOOL_A_RINGS_CQE_SIZE	nlattr[ETHTOOL_A_RINGS_CQE_SIZE, int32]
	ETHTOOL_A_RINGS_TX_PUSH		nlattr[ETHTOOL_A_RINGS_TX_PUSH, int8]
	ETHTOOL_A_RINGS_RX_PUSH		nlattr[ETHTOOL_A_RINGS_RX_PUSH, int8]
	ETHTOOL_A_RINGS_TX_PUSH_BUF_LEN	nlattr[ETHTOOL_A_RINGS_TX_PUSH_BUF_LEN, int32]
] [varlen]

ethnl_rss_get_policy$auto_netlink [
	ETHTOOL_A_RSS_HEADER	nlattr[ETHTOOL_A_RSS_HEADER, array[int8, 3]]
	ETHTOOL_A_RSS_CONTEXT	nlattr[ETHTOOL_A_RSS_CONTEXT, int32]
] [varlen]

ethnl_stats_get_policy$auto_netlink [
	ETHTOOL_A_STATS_HEADER	nlattr[ETHTOOL_A_STATS_HEADER, array[int8, 3]]
	ETHTOOL_A_STATS_GROUPS	nlattr[ETHTOOL_A_STATS_GROUPS, array[int8]]
	ETHTOOL_A_STATS_SRC	nlattr[ETHTOOL_A_STATS_SRC, int32]
] [varlen]

ethnl_strset_get_policy$auto_netlink [
	ETHTOOL_A_STRSET_HEADER		nlattr[ETHTOOL_A_STRSET_HEADER, array[int8, 3]]
	ETHTOOL_A_STRSET_STRINGSETS	nlattr[ETHTOOL_A_STRSET_STRINGSETS, array[int8]]
	ETHTOOL_A_STRSET_COUNTS_ONLY	nlattr[ETHTOOL_A_STRSET_COUNTS_ONLY, void]
] [varlen]

ethnl_tsinfo_get_policy$auto_netlink [
	ETHTOOL_A_TSINFO_HEADER	nlattr[ETHTOOL_A_TSINFO_HEADER, array[int8, 3]]
] [varlen]

ethnl_tunnel_info_get_policy$auto_netlink [
	ETHTOOL_A_TUNNEL_INFO_HEADER	nlattr[ETHTOOL_A_TUNNEL_INFO_HEADER, array[int8, 3]]
] [varlen]

ethnl_wol_get_policy$auto_netlink [
	ETHTOOL_A_WOL_HEADER	nlattr[ETHTOOL_A_WOL_HEADER, array[int8, 3]]
] [varlen]

ethnl_wol_set_policy$auto_netlink [
	ETHTOOL_A_WOL_HEADER	nlattr[ETHTOOL_A_WOL_HEADER, array[int8, 3]]
	ETHTOOL_A_WOL_MODES	nlattr[ETHTOOL_A_WOL_MODES, array[int8]]
	ETHTOOL_A_WOL_SOPASS	nlattr[ETHTOOL_A_WOL_SOPASS, array[int8, 0:6]]
] [varlen]

ets_class_policy$auto_sch_ets [
	TCA_ETS_QUANTA_BAND	nlattr[TCA_ETS_QUANTA_BAND, int32]
] [varlen]

ets_policy$auto_sch_ets [
	TCA_ETS_NBANDS	nlattr[TCA_ETS_NBANDS, int8]
	TCA_ETS_NSTRICT	nlattr[TCA_ETS_NSTRICT, int8]
	TCA_ETS_QUANTA	nlattr[TCA_ETS_QUANTA, array[int8]]
	TCA_ETS_PRIOMAP	nlattr[TCA_ETS_PRIOMAP, array[int8]]
] [varlen]

ets_priomap_policy$auto_sch_ets [
	TCA_ETS_PRIOMAP_BAND	nlattr[TCA_ETS_PRIOMAP_BAND, int8]
] [varlen]

ets_quanta_policy$auto_sch_ets [
	TCA_ETS_QUANTA_BAND	nlattr[TCA_ETS_QUANTA_BAND, int32]
] [varlen]

exp_nat_nla_policy$auto_nf_conntrack_netlink [
	CTA_EXPECT_NAT_DIR	nlattr[CTA_EXPECT_NAT_DIR, int32]
	CTA_EXPECT_NAT_TUPLE	nlattr[CTA_EXPECT_NAT_TUPLE, array[int8]]
] [varlen]

exp_nla_policy$auto_nf_conntrack_netlink [
	CTA_EXPECT_MASTER	nlattr[CTA_EXPECT_MASTER, array[int8]]
	CTA_EXPECT_TUPLE	nlattr[CTA_EXPECT_TUPLE, array[int8]]
	CTA_EXPECT_MASK		nlattr[CTA_EXPECT_MASK, array[int8]]
	CTA_EXPECT_TIMEOUT	nlattr[CTA_EXPECT_TIMEOUT, int32]
	CTA_EXPECT_ID		nlattr[CTA_EXPECT_ID, int32]
	CTA_EXPECT_HELP_NAME	nlattr[CTA_EXPECT_HELP_NAME, string]
	CTA_EXPECT_ZONE		nlattr[CTA_EXPECT_ZONE, int16]
	CTA_EXPECT_FLAGS	nlattr[CTA_EXPECT_FLAGS, int32]
	CTA_EXPECT_CLASS	nlattr[CTA_EXPECT_CLASS, int32]
	CTA_EXPECT_NAT		nlattr[CTA_EXPECT_NAT, array[int8]]
	CTA_EXPECT_FN		nlattr[CTA_EXPECT_FN, string]
] [varlen]

exts_policy$auto_vport_vxlan [
	OVS_VXLAN_EXT_GBP	nlattr[OVS_VXLAN_EXT_GBP, void]
] [varlen]

fib_rule_policy$auto_fib_rules [
	FRA_UNSPEC		nlattr[FRA_UNSPEC, array[int8]]
	FRA_IIFNAME		nlattr[FRA_IIFNAME, stringnoz]
	FRA_GOTO		nlattr[FRA_GOTO, int32]
	FRA_PRIORITY		nlattr[FRA_PRIORITY, int32]
	FRA_FWMARK		nlattr[FRA_FWMARK, int32]
	FRA_FLOW		nlattr[FRA_FLOW, int32]
	FRA_TUN_ID		nlattr[FRA_TUN_ID, int64]
	FRA_SUPPRESS_IFGROUP	nlattr[FRA_SUPPRESS_IFGROUP, int32]
	FRA_SUPPRESS_PREFIXLEN	nlattr[FRA_SUPPRESS_PREFIXLEN, int32]
	FRA_TABLE		nlattr[FRA_TABLE, int32]
	FRA_FWMASK		nlattr[FRA_FWMASK, int32]
	FRA_OIFNAME		nlattr[FRA_OIFNAME, stringnoz]
	FRA_L3MDEV		nlattr[FRA_L3MDEV, int8]
	FRA_UID_RANGE		nlattr[FRA_UID_RANGE, int64]
	FRA_PROTOCOL		nlattr[FRA_PROTOCOL, int8]
	FRA_IP_PROTO		nlattr[FRA_IP_PROTO, int8]
	FRA_SPORT_RANGE		nlattr[FRA_SPORT_RANGE, int32]
	FRA_DPORT_RANGE		nlattr[FRA_DPORT_RANGE, int32]
] [varlen]

filter_policy$auto_nfnetlink_acct [
	NFACCT_FILTER_MASK	nlattr[NFACCT_FILTER_MASK, int32]
	NFACCT_FILTER_VALUE	nlattr[NFACCT_FILTER_VALUE, int32]
] [varlen]

fl_policy$auto_cls_flower [
	TCA_FLOWER_UNSPEC			nlattr[TCA_FLOWER_UNSPEC, array[int8]]
	TCA_FLOWER_CLASSID			nlattr[TCA_FLOWER_CLASSID, int32]
	TCA_FLOWER_INDEV			nlattr[TCA_FLOWER_INDEV, stringnoz]
	TCA_FLOWER_KEY_ETH_DST			nlattr[TCA_FLOWER_KEY_ETH_DST, array[int8, 6]]
	TCA_FLOWER_KEY_ETH_DST_MASK		nlattr[TCA_FLOWER_KEY_ETH_DST_MASK, array[int8, 6]]
	TCA_FLOWER_KEY_ETH_SRC			nlattr[TCA_FLOWER_KEY_ETH_SRC, array[int8, 6]]
	TCA_FLOWER_KEY_ETH_SRC_MASK		nlattr[TCA_FLOWER_KEY_ETH_SRC_MASK, array[int8, 6]]
	TCA_FLOWER_KEY_ETH_TYPE			nlattr[TCA_FLOWER_KEY_ETH_TYPE, int16]
	TCA_FLOWER_KEY_IP_PROTO			nlattr[TCA_FLOWER_KEY_IP_PROTO, int8]
	TCA_FLOWER_KEY_IPV4_SRC			nlattr[TCA_FLOWER_KEY_IPV4_SRC, ipv4_addr]
	TCA_FLOWER_KEY_IPV4_SRC_MASK		nlattr[TCA_FLOWER_KEY_IPV4_SRC_MASK, ipv4_addr]
	TCA_FLOWER_KEY_IPV4_DST			nlattr[TCA_FLOWER_KEY_IPV4_DST, ipv4_addr]
	TCA_FLOWER_KEY_IPV4_DST_MASK		nlattr[TCA_FLOWER_KEY_IPV4_DST_MASK, ipv4_addr]
	TCA_FLOWER_KEY_IPV6_SRC			nlattr[TCA_FLOWER_KEY_IPV6_SRC, ipv6_addr]
	TCA_FLOWER_KEY_IPV6_SRC_MASK		nlattr[TCA_FLOWER_KEY_IPV6_SRC_MASK, ipv6_addr]
	TCA_FLOWER_KEY_IPV6_DST			nlattr[TCA_FLOWER_KEY_IPV6_DST, ipv6_addr]
	TCA_FLOWER_KEY_IPV6_DST_MASK		nlattr[TCA_FLOWER_KEY_IPV6_DST_MASK, ipv6_addr]
	TCA_FLOWER_KEY_TCP_SRC			nlattr[TCA_FLOWER_KEY_TCP_SRC, int16]
	TCA_FLOWER_KEY_TCP_DST			nlattr[TCA_FLOWER_KEY_TCP_DST, int16]
	TCA_FLOWER_KEY_UDP_SRC			nlattr[TCA_FLOWER_KEY_UDP_SRC, int16]
	TCA_FLOWER_KEY_UDP_DST			nlattr[TCA_FLOWER_KEY_UDP_DST, int16]
	TCA_FLOWER_FLAGS			nlattr[TCA_FLOWER_FLAGS, int32]
	TCA_FLOWER_KEY_VLAN_ID			nlattr[TCA_FLOWER_KEY_VLAN_ID, int16]
	TCA_FLOWER_KEY_VLAN_PRIO		nlattr[TCA_FLOWER_KEY_VLAN_PRIO, int8]
	TCA_FLOWER_KEY_VLAN_ETH_TYPE		nlattr[TCA_FLOWER_KEY_VLAN_ETH_TYPE, int16]
	TCA_FLOWER_KEY_ENC_KEY_ID		nlattr[TCA_FLOWER_KEY_ENC_KEY_ID, int32]
	TCA_FLOWER_KEY_ENC_IPV4_SRC		nlattr[TCA_FLOWER_KEY_ENC_IPV4_SRC, ipv4_addr]
	TCA_FLOWER_KEY_ENC_IPV4_SRC_MASK	nlattr[TCA_FLOWER_KEY_ENC_IPV4_SRC_MASK, ipv4_addr]
	TCA_FLOWER_KEY_ENC_IPV4_DST		nlattr[TCA_FLOWER_KEY_ENC_IPV4_DST, ipv4_addr]
	TCA_FLOWER_KEY_ENC_IPV4_DST_MASK	nlattr[TCA_FLOWER_KEY_ENC_IPV4_DST_MASK, ipv4_addr]
	TCA_FLOWER_KEY_ENC_IPV6_SRC		nlattr[TCA_FLOWER_KEY_ENC_IPV6_SRC, ipv6_addr]
	TCA_FLOWER_KEY_ENC_IPV6_SRC_MASK	nlattr[TCA_FLOWER_KEY_ENC_IPV6_SRC_MASK, ipv6_addr]
	TCA_FLOWER_KEY_ENC_IPV6_DST		nlattr[TCA_FLOWER_KEY_ENC_IPV6_DST, ipv6_addr]
	TCA_FLOWER_KEY_ENC_IPV6_DST_MASK	nlattr[TCA_FLOWER_KEY_ENC_IPV6_DST_MASK, ipv6_addr]
	TCA_FLOWER_KEY_TCP_SRC_MASK		nlattr[TCA_FLOWER_KEY_TCP_SRC_MASK, int16]
	TCA_FLOWER_KEY_TCP_DST_MASK		nlattr[TCA_FLOWER_KEY_TCP_DST_MASK, int16]
	TCA_FLOWER_KEY_UDP_SRC_MASK		nlattr[TCA_FLOWER_KEY_UDP_SRC_MASK, int16]
	TCA_FLOWER_KEY_UDP_DST_MASK		nlattr[TCA_FLOWER_KEY_UDP_DST_MASK, int16]
	TCA_FLOWER_KEY_SCTP_SRC_MASK		nlattr[TCA_FLOWER_KEY_SCTP_SRC_MASK, int16]
	TCA_FLOWER_KEY_SCTP_DST_MASK		nlattr[TCA_FLOWER_KEY_SCTP_DST_MASK, int16]
	TCA_FLOWER_KEY_SCTP_SRC			nlattr[TCA_FLOWER_KEY_SCTP_SRC, int16]
	TCA_FLOWER_KEY_SCTP_DST			nlattr[TCA_FLOWER_KEY_SCTP_DST, int16]
	TCA_FLOWER_KEY_ENC_UDP_SRC_PORT		nlattr[TCA_FLOWER_KEY_ENC_UDP_SRC_PORT, sock_port]
	TCA_FLOWER_KEY_ENC_UDP_SRC_PORT_MASK	nlattr[TCA_FLOWER_KEY_ENC_UDP_SRC_PORT_MASK, sock_port]
	TCA_FLOWER_KEY_ENC_UDP_DST_PORT		nlattr[TCA_FLOWER_KEY_ENC_UDP_DST_PORT, sock_port]
	TCA_FLOWER_KEY_ENC_UDP_DST_PORT_MASK	nlattr[TCA_FLOWER_KEY_ENC_UDP_DST_PORT_MASK, sock_port]
	TCA_FLOWER_KEY_FLAGS			nlattr[TCA_FLOWER_KEY_FLAGS, int32be]
	TCA_FLOWER_KEY_FLAGS_MASK		nlattr[TCA_FLOWER_KEY_FLAGS_MASK, int32be]
	TCA_FLOWER_KEY_ICMPV4_CODE		nlattr[TCA_FLOWER_KEY_ICMPV4_CODE, int8]
	TCA_FLOWER_KEY_ICMPV4_CODE_MASK		nlattr[TCA_FLOWER_KEY_ICMPV4_CODE_MASK, int8]
	TCA_FLOWER_KEY_ICMPV4_TYPE		nlattr[TCA_FLOWER_KEY_ICMPV4_TYPE, int8]
	TCA_FLOWER_KEY_ICMPV4_TYPE_MASK		nlattr[TCA_FLOWER_KEY_ICMPV4_TYPE_MASK, int8]
	TCA_FLOWER_KEY_ICMPV6_CODE		nlattr[TCA_FLOWER_KEY_ICMPV6_CODE, int8]
	TCA_FLOWER_KEY_ICMPV6_CODE_MASK		nlattr[TCA_FLOWER_KEY_ICMPV6_CODE_MASK, int8]
	TCA_FLOWER_KEY_ICMPV6_TYPE		nlattr[TCA_FLOWER_KEY_ICMPV6_TYPE, int8]
	TCA_FLOWER_KEY_ICMPV6_TYPE_MASK		nlattr[TCA_FLOWER_KEY_ICMPV6_TYPE_MASK, int8]
	TCA_FLOWER_KEY_ARP_SIP			nlattr[TCA_FLOWER_KEY_ARP_SIP, int32]
	TCA_FLOWER_KEY_ARP_SIP_MASK		nlattr[TCA_FLOWER_KEY_ARP_SIP_MASK, int32]
	TCA_FLOWER_KEY_ARP_TIP			nlattr[TCA_FLOWER_KEY_ARP_TIP, int32]
	TCA_FLOWER_KEY_ARP_TIP_MASK		nlattr[TCA_FLOWER_KEY_ARP_TIP_MASK, int32]
	TCA_FLOWER_KEY_ARP_OP			nlattr[TCA_FLOWER_KEY_ARP_OP, int8]
	TCA_FLOWER_KEY_ARP_OP_MASK		nlattr[TCA_FLOWER_KEY_ARP_OP_MASK, int8]
	TCA_FLOWER_KEY_ARP_SHA			nlattr[TCA_FLOWER_KEY_ARP_SHA, array[int8, 6]]
	TCA_FLOWER_KEY_ARP_SHA_MASK		nlattr[TCA_FLOWER_KEY_ARP_SHA_MASK, array[int8, 6]]
	TCA_FLOWER_KEY_ARP_THA			nlattr[TCA_FLOWER_KEY_ARP_THA, array[int8, 6]]
	TCA_FLOWER_KEY_ARP_THA_MASK		nlattr[TCA_FLOWER_KEY_ARP_THA_MASK, array[int8, 6]]
	TCA_FLOWER_KEY_MPLS_TTL			nlattr[TCA_FLOWER_KEY_MPLS_TTL, int8]
	TCA_FLOWER_KEY_MPLS_BOS			nlattr[TCA_FLOWER_KEY_MPLS_BOS, int8]
	TCA_FLOWER_KEY_MPLS_TC			nlattr[TCA_FLOWER_KEY_MPLS_TC, int8]
	TCA_FLOWER_KEY_MPLS_LABEL		nlattr[TCA_FLOWER_KEY_MPLS_LABEL, int32]
	TCA_FLOWER_KEY_TCP_FLAGS		nlattr[TCA_FLOWER_KEY_TCP_FLAGS, int16]
	TCA_FLOWER_KEY_TCP_FLAGS_MASK		nlattr[TCA_FLOWER_KEY_TCP_FLAGS_MASK, int16]
	TCA_FLOWER_KEY_IP_TOS			nlattr[TCA_FLOWER_KEY_IP_TOS, int8]
	TCA_FLOWER_KEY_IP_TOS_MASK		nlattr[TCA_FLOWER_KEY_IP_TOS_MASK, int8]
	TCA_FLOWER_KEY_IP_TTL			nlattr[TCA_FLOWER_KEY_IP_TTL, int8]
	TCA_FLOWER_KEY_IP_TTL_MASK		nlattr[TCA_FLOWER_KEY_IP_TTL_MASK, int8]
	TCA_FLOWER_KEY_CVLAN_ID			nlattr[TCA_FLOWER_KEY_CVLAN_ID, int16]
	TCA_FLOWER_KEY_CVLAN_PRIO		nlattr[TCA_FLOWER_KEY_CVLAN_PRIO, int8]
	TCA_FLOWER_KEY_CVLAN_ETH_TYPE		nlattr[TCA_FLOWER_KEY_CVLAN_ETH_TYPE, int16]
	TCA_FLOWER_KEY_ENC_IP_TOS		nlattr[TCA_FLOWER_KEY_ENC_IP_TOS, int8]
	TCA_FLOWER_KEY_ENC_IP_TOS_MASK		nlattr[TCA_FLOWER_KEY_ENC_IP_TOS_MASK, int8]
	TCA_FLOWER_KEY_ENC_IP_TTL		nlattr[TCA_FLOWER_KEY_ENC_IP_TTL, int8]
	TCA_FLOWER_KEY_ENC_IP_TTL_MASK		nlattr[TCA_FLOWER_KEY_ENC_IP_TTL_MASK, int8]
	TCA_FLOWER_KEY_ENC_OPTS			nlattr[TCA_FLOWER_KEY_ENC_OPTS, array[int8]]
	TCA_FLOWER_KEY_ENC_OPTS_MASK		nlattr[TCA_FLOWER_KEY_ENC_OPTS_MASK, array[int8]]
	TCA_FLOWER_KEY_CT_STATE			nlattr[TCA_FLOWER_KEY_CT_STATE, int16]
	TCA_FLOWER_KEY_CT_STATE_MASK		nlattr[TCA_FLOWER_KEY_CT_STATE_MASK, int16]
	TCA_FLOWER_KEY_CT_ZONE			nlattr[TCA_FLOWER_KEY_CT_ZONE, int16]
	TCA_FLOWER_KEY_CT_ZONE_MASK		nlattr[TCA_FLOWER_KEY_CT_ZONE_MASK, int16]
	TCA_FLOWER_KEY_CT_MARK			nlattr[TCA_FLOWER_KEY_CT_MARK, int32]
	TCA_FLOWER_KEY_CT_MARK_MASK		nlattr[TCA_FLOWER_KEY_CT_MARK_MASK, int32]
	TCA_FLOWER_KEY_CT_LABELS		nlattr[TCA_FLOWER_KEY_CT_LABELS, array[int8, 0:16]]
	TCA_FLOWER_KEY_CT_LABELS_MASK		nlattr[TCA_FLOWER_KEY_CT_LABELS_MASK, array[int8, 0:16]]
	TCA_FLOWER_KEY_MPLS_OPTS		nlattr[TCA_FLOWER_KEY_MPLS_OPTS, array[int8]]
	TCA_FLOWER_KEY_HASH			nlattr[TCA_FLOWER_KEY_HASH, int32]
	TCA_FLOWER_KEY_HASH_MASK		nlattr[TCA_FLOWER_KEY_HASH_MASK, int32]
	TCA_FLOWER_KEY_NUM_OF_VLANS		nlattr[TCA_FLOWER_KEY_NUM_OF_VLANS, int8]
	TCA_FLOWER_KEY_PPPOE_SID		nlattr[TCA_FLOWER_KEY_PPPOE_SID, int16]
	TCA_FLOWER_KEY_PPP_PROTO		nlattr[TCA_FLOWER_KEY_PPP_PROTO, int16]
	TCA_FLOWER_KEY_L2TPV3_SID		nlattr[TCA_FLOWER_KEY_L2TPV3_SID, int32]
	TCA_FLOWER_L2_MISS			nlattr[TCA_FLOWER_L2_MISS, int8]
	TCA_FLOWER_KEY_CFM			nlattr[TCA_FLOWER_KEY_CFM, array[int8]]
	TCA_FLOWER_KEY_SPI			nlattr[TCA_FLOWER_KEY_SPI, int32]
	TCA_FLOWER_KEY_SPI_MASK			nlattr[TCA_FLOWER_KEY_SPI_MASK, int32]
	TCA_FLOWER_KEY_ENC_FLAGS		nlattr[TCA_FLOWER_KEY_ENC_FLAGS, int32be]
	TCA_FLOWER_KEY_ENC_FLAGS_MASK		nlattr[TCA_FLOWER_KEY_ENC_FLAGS_MASK, int32be]
] [varlen]

flow_policy$auto_cls_flow [
	TCA_FLOW_KEYS		nlattr[TCA_FLOW_KEYS, int32]
	TCA_FLOW_MODE		nlattr[TCA_FLOW_MODE, int32]
	TCA_FLOW_BASECLASS	nlattr[TCA_FLOW_BASECLASS, int32]
	TCA_FLOW_RSHIFT		nlattr[TCA_FLOW_RSHIFT, int32]
	TCA_FLOW_ADDEND		nlattr[TCA_FLOW_ADDEND, int32]
	TCA_FLOW_MASK		nlattr[TCA_FLOW_MASK, int32]
	TCA_FLOW_XOR		nlattr[TCA_FLOW_XOR, int32]
	TCA_FLOW_DIVISOR	nlattr[TCA_FLOW_DIVISOR, int32]
	TCA_FLOW_ACT		nlattr[TCA_FLOW_ACT, array[int8]]
	TCA_FLOW_POLICE		nlattr[TCA_FLOW_POLICE, array[int8]]
	TCA_FLOW_EMATCHES	nlattr[TCA_FLOW_EMATCHES, array[int8]]
	TCA_FLOW_PERTURB	nlattr[TCA_FLOW_PERTURB, int32]
] [varlen]

flow_policy$auto_datapath [
	OVS_FLOW_ATTR_KEY		nlattr[OVS_FLOW_ATTR_KEY, array[int8]]
	OVS_FLOW_ATTR_ACTIONS		nlattr[OVS_FLOW_ATTR_ACTIONS, array[int8]]
	OVS_FLOW_ATTR_CLEAR		nlattr[OVS_FLOW_ATTR_CLEAR, void]
	OVS_FLOW_ATTR_MASK		nlattr[OVS_FLOW_ATTR_MASK, array[int8]]
	OVS_FLOW_ATTR_PROBE		nlattr[OVS_FLOW_ATTR_PROBE, void]
	OVS_FLOW_ATTR_UFID		nlattr[OVS_FLOW_ATTR_UFID, int8]
	OVS_FLOW_ATTR_UFID_FLAGS	nlattr[OVS_FLOW_ATTR_UFID_FLAGS, int32]
] [varlen]

fou_nl_policy$auto_fou_nl [
	FOU_ATTR_PORT			nlattr[FOU_ATTR_PORT, sock_port]
	FOU_ATTR_AF			nlattr[FOU_ATTR_AF, int8]
	FOU_ATTR_IPPROTO		nlattr[FOU_ATTR_IPPROTO, int8]
	FOU_ATTR_TYPE			nlattr[FOU_ATTR_TYPE, int8]
	FOU_ATTR_REMCSUM_NOPARTIAL	nlattr[FOU_ATTR_REMCSUM_NOPARTIAL, void]
	FOU_ATTR_LOCAL_V4		nlattr[FOU_ATTR_LOCAL_V4, int32]
	FOU_ATTR_LOCAL_V6		nlattr[FOU_ATTR_LOCAL_V6, array[int8, 16]]
	FOU_ATTR_PEER_V4		nlattr[FOU_ATTR_PEER_V4, int32]
	FOU_ATTR_PEER_V6		nlattr[FOU_ATTR_PEER_V6, array[int8, 16]]
	FOU_ATTR_PEER_PORT		nlattr[FOU_ATTR_PEER_PORT, sock_port]
	FOU_ATTR_IFINDEX		nlattr[FOU_ATTR_IFINDEX, ifindex]
] [varlen]

fq_codel_policy$auto_sch_fq_codel [
	TCA_FQ_CODEL_TARGET			nlattr[TCA_FQ_CODEL_TARGET, int32]
	TCA_FQ_CODEL_LIMIT			nlattr[TCA_FQ_CODEL_LIMIT, int32]
	TCA_FQ_CODEL_INTERVAL			nlattr[TCA_FQ_CODEL_INTERVAL, int32]
	TCA_FQ_CODEL_ECN			nlattr[TCA_FQ_CODEL_ECN, int32]
	TCA_FQ_CODEL_FLOWS			nlattr[TCA_FQ_CODEL_FLOWS, int32]
	TCA_FQ_CODEL_QUANTUM			nlattr[TCA_FQ_CODEL_QUANTUM, int32]
	TCA_FQ_CODEL_CE_THRESHOLD		nlattr[TCA_FQ_CODEL_CE_THRESHOLD, int32]
	TCA_FQ_CODEL_DROP_BATCH_SIZE		nlattr[TCA_FQ_CODEL_DROP_BATCH_SIZE, int32]
	TCA_FQ_CODEL_MEMORY_LIMIT		nlattr[TCA_FQ_CODEL_MEMORY_LIMIT, int32]
	TCA_FQ_CODEL_CE_THRESHOLD_SELECTOR	nlattr[TCA_FQ_CODEL_CE_THRESHOLD_SELECTOR, int8]
	TCA_FQ_CODEL_CE_THRESHOLD_MASK		nlattr[TCA_FQ_CODEL_CE_THRESHOLD_MASK, int8]
] [varlen]

fq_pie_policy$auto_sch_fq_pie [
	TCA_FQ_PIE_LIMIT		nlattr[TCA_FQ_PIE_LIMIT, int32]
	TCA_FQ_PIE_FLOWS		nlattr[TCA_FQ_PIE_FLOWS, int32]
	TCA_FQ_PIE_TARGET		nlattr[TCA_FQ_PIE_TARGET, int32]
	TCA_FQ_PIE_TUPDATE		nlattr[TCA_FQ_PIE_TUPDATE, int32]
	TCA_FQ_PIE_ALPHA		nlattr[TCA_FQ_PIE_ALPHA, int32]
	TCA_FQ_PIE_BETA			nlattr[TCA_FQ_PIE_BETA, int32]
	TCA_FQ_PIE_QUANTUM		nlattr[TCA_FQ_PIE_QUANTUM, int32]
	TCA_FQ_PIE_MEMORY_LIMIT		nlattr[TCA_FQ_PIE_MEMORY_LIMIT, int32]
	TCA_FQ_PIE_ECN_PROB		nlattr[TCA_FQ_PIE_ECN_PROB, int32]
	TCA_FQ_PIE_ECN			nlattr[TCA_FQ_PIE_ECN, int32]
	TCA_FQ_PIE_BYTEMODE		nlattr[TCA_FQ_PIE_BYTEMODE, int32]
	TCA_FQ_PIE_DQ_RATE_ESTIMATOR	nlattr[TCA_FQ_PIE_DQ_RATE_ESTIMATOR, int32]
] [varlen]

fq_policy$auto_sch_fq [
	TCA_FQ_UNSPEC			nlattr[TCA_FQ_UNSPEC, array[int8]]
	TCA_FQ_PLIMIT			nlattr[TCA_FQ_PLIMIT, int32]
	TCA_FQ_FLOW_PLIMIT		nlattr[TCA_FQ_FLOW_PLIMIT, int32]
	TCA_FQ_QUANTUM			nlattr[TCA_FQ_QUANTUM, int32]
	TCA_FQ_INITIAL_QUANTUM		nlattr[TCA_FQ_INITIAL_QUANTUM, int32]
	TCA_FQ_RATE_ENABLE		nlattr[TCA_FQ_RATE_ENABLE, bool32]
	TCA_FQ_FLOW_DEFAULT_RATE	nlattr[TCA_FQ_FLOW_DEFAULT_RATE, int32]
	TCA_FQ_FLOW_MAX_RATE		nlattr[TCA_FQ_FLOW_MAX_RATE, int32]
	TCA_FQ_BUCKETS_LOG		nlattr[TCA_FQ_BUCKETS_LOG, int32]
	TCA_FQ_FLOW_REFILL_DELAY	nlattr[TCA_FQ_FLOW_REFILL_DELAY, int32]
	TCA_FQ_ORPHAN_MASK		nlattr[TCA_FQ_ORPHAN_MASK, int32]
	TCA_FQ_LOW_RATE_THRESHOLD	nlattr[TCA_FQ_LOW_RATE_THRESHOLD, int32]
	TCA_FQ_CE_THRESHOLD		nlattr[TCA_FQ_CE_THRESHOLD, int32]
	TCA_FQ_TIMER_SLACK		nlattr[TCA_FQ_TIMER_SLACK, int32]
	TCA_FQ_HORIZON			nlattr[TCA_FQ_HORIZON, int32]
	TCA_FQ_HORIZON_DROP		nlattr[TCA_FQ_HORIZON_DROP, int8]
	TCA_FQ_PRIOMAP			nlattr[TCA_FQ_PRIOMAP, array[int8]]
	TCA_FQ_WEIGHTS			nlattr[TCA_FQ_WEIGHTS, array[int8]]
] [varlen]

fw_policy$auto_cls_fw [
	TCA_FW_CLASSID	nlattr[TCA_FW_CLASSID, int32]
	TCA_FW_INDEV	nlattr[TCA_FW_INDEV, stringnoz]
	TCA_FW_MASK	nlattr[TCA_FW_MASK, int32]
] [varlen]

gact_policy$auto_act_gact [
	TCA_GACT_PARMS	nlattr[TCA_GACT_PARMS, array[int8, 20]]
	TCA_GACT_PROB	nlattr[TCA_GACT_PROB, int64]
] [varlen]

gate_policy$auto_act_gate [
	TCA_GATE_PARMS		nlattr[TCA_GATE_PARMS, array[int8]]
	TCA_GATE_PRIORITY	nlattr[TCA_GATE_PRIORITY, int32]
	TCA_GATE_ENTRY_LIST	nlattr[TCA_GATE_ENTRY_LIST, array[int8]]
	TCA_GATE_BASE_TIME	nlattr[TCA_GATE_BASE_TIME, int64]
	TCA_GATE_CYCLE_TIME	nlattr[TCA_GATE_CYCLE_TIME, int64]
	TCA_GATE_CYCLE_TIME_EXT	nlattr[TCA_GATE_CYCLE_TIME_EXT, int64]
	TCA_GATE_FLAGS		nlattr[TCA_GATE_FLAGS, int32]
	TCA_GATE_CLOCKID	nlattr[TCA_GATE_CLOCKID, int32]
] [varlen]

generic_timeout_nla_policy$auto_nf_conntrack_proto_generic [
	CTA_TIMEOUT_GENERIC_TIMEOUT	nlattr[CTA_TIMEOUT_GENERIC_TIMEOUT, int32]
] [varlen]

geneve_opt_policy$auto_act_tunnel_key [
	TCA_TUNNEL_KEY_ENC_OPT_GENEVE_CLASS	nlattr[TCA_TUNNEL_KEY_ENC_OPT_GENEVE_CLASS, int16]
	TCA_TUNNEL_KEY_ENC_OPT_GENEVE_TYPE	nlattr[TCA_TUNNEL_KEY_ENC_OPT_GENEVE_TYPE, int8]
	TCA_TUNNEL_KEY_ENC_OPT_GENEVE_DATA	nlattr[TCA_TUNNEL_KEY_ENC_OPT_GENEVE_DATA, array[int8, 0:128]]
] [varlen]

geneve_opt_policy$auto_cls_flower [
	TCA_FLOWER_KEY_ENC_OPT_GENEVE_CLASS	nlattr[TCA_FLOWER_KEY_ENC_OPT_GENEVE_CLASS, int16]
	TCA_FLOWER_KEY_ENC_OPT_GENEVE_TYPE	nlattr[TCA_FLOWER_KEY_ENC_OPT_GENEVE_TYPE, int8]
	TCA_FLOWER_KEY_ENC_OPT_GENEVE_DATA	nlattr[TCA_FLOWER_KEY_ENC_OPT_GENEVE_DATA, array[int8, 0:128]]
] [varlen]

geneve_opt_policy$auto_ip_tunnel_core [
	LWTUNNEL_IP_OPT_GENEVE_CLASS	nlattr[LWTUNNEL_IP_OPT_GENEVE_CLASS, int16]
	LWTUNNEL_IP_OPT_GENEVE_TYPE	nlattr[LWTUNNEL_IP_OPT_GENEVE_TYPE, int8]
	LWTUNNEL_IP_OPT_GENEVE_DATA	nlattr[LWTUNNEL_IP_OPT_GENEVE_DATA, array[int8, 0:128]]
] [varlen]

geneve_policy$auto_geneve [
	IFLA_GENEVE_UNSPEC		nlattr[IFLA_GENEVE_UNSPEC, array[int8]]
	IFLA_GENEVE_ID			nlattr[IFLA_GENEVE_ID, int32]
	IFLA_GENEVE_REMOTE		nlattr[IFLA_GENEVE_REMOTE, int32]
	IFLA_GENEVE_TTL			nlattr[IFLA_GENEVE_TTL, int8]
	IFLA_GENEVE_TOS			nlattr[IFLA_GENEVE_TOS, int8]
	IFLA_GENEVE_PORT		nlattr[IFLA_GENEVE_PORT, sock_port]
	IFLA_GENEVE_COLLECT_METADATA	nlattr[IFLA_GENEVE_COLLECT_METADATA, void]
	IFLA_GENEVE_REMOTE6		nlattr[IFLA_GENEVE_REMOTE6, array[int8, 16]]
	IFLA_GENEVE_UDP_CSUM		nlattr[IFLA_GENEVE_UDP_CSUM, int8]
	IFLA_GENEVE_UDP_ZERO_CSUM6_TX	nlattr[IFLA_GENEVE_UDP_ZERO_CSUM6_TX, int8]
	IFLA_GENEVE_UDP_ZERO_CSUM6_RX	nlattr[IFLA_GENEVE_UDP_ZERO_CSUM6_RX, int8]
	IFLA_GENEVE_LABEL		nlattr[IFLA_GENEVE_LABEL, int32]
	IFLA_GENEVE_TTL_INHERIT		nlattr[IFLA_GENEVE_TTL_INHERIT, int8]
	IFLA_GENEVE_DF			nlattr[IFLA_GENEVE_DF, int8]
	IFLA_GENEVE_INNER_PROTO_INHERIT	nlattr[IFLA_GENEVE_INNER_PROTO_INHERIT, void]
] [varlen]

get_stringset_policy$auto_strset [
	ETHTOOL_A_STRINGSET_ID	nlattr[ETHTOOL_A_STRINGSET_ID, int32]
] [varlen]

gre_timeout_nla_policy$auto_nf_conntrack_proto_gre [
	CTA_TIMEOUT_GRE_UNREPLIED	nlattr[CTA_TIMEOUT_GRE_UNREPLIED, int32]
	CTA_TIMEOUT_GRE_REPLIED		nlattr[CTA_TIMEOUT_GRE_REPLIED, int32]
] [varlen]

gred_policy$auto_sch_gred [
	TCA_GRED_PARMS		nlattr[TCA_GRED_PARMS, array[int8, 52]]
	TCA_GRED_STAB		nlattr[TCA_GRED_STAB, array[int8, 256]]
	TCA_GRED_DPS		nlattr[TCA_GRED_DPS, array[int8, 12]]
	TCA_GRED_MAX_P		nlattr[TCA_GRED_MAX_P, int32]
	TCA_GRED_LIMIT		nlattr[TCA_GRED_LIMIT, int32]
	TCA_GRED_VQ_LIST	nlattr[TCA_GRED_VQ_LIST, array[int8]]
] [varlen]

gred_vq_policy$auto_sch_gred [
	TCA_GRED_VQ_DP		nlattr[TCA_GRED_VQ_DP, int32]
	TCA_GRED_VQ_FLAGS	nlattr[TCA_GRED_VQ_FLAGS, int32]
] [varlen]

gred_vqe_policy$auto_sch_gred [
	TCA_GRED_VQ_ENTRY	nlattr[TCA_GRED_VQ_ENTRY, array[int8]]
] [varlen]

gtp_genl_policy$auto_gtp [
	GTPA_LINK		nlattr[GTPA_LINK, int32]
	GTPA_VERSION		nlattr[GTPA_VERSION, int32]
	GTPA_TID		nlattr[GTPA_TID, int64]
	GTPA_PEER_ADDRESS	nlattr[GTPA_PEER_ADDRESS, int32]
	GTPA_MS_ADDRESS		nlattr[GTPA_MS_ADDRESS, int32]
	GTPA_FLOW		nlattr[GTPA_FLOW, int16]
	GTPA_NET_NS_FD		nlattr[GTPA_NET_NS_FD, fd_namespace]
	GTPA_I_TEI		nlattr[GTPA_I_TEI, int32]
	GTPA_O_TEI		nlattr[GTPA_O_TEI, int32]
	GTPA_PEER_ADDR6		nlattr[GTPA_PEER_ADDR6, array[int8, 16]]
	GTPA_MS_ADDR6		nlattr[GTPA_MS_ADDR6, array[int8, 16]]
	GTPA_FAMILY		nlattr[GTPA_FAMILY, int8]
] [varlen]

gtp_opt_policy$auto_cls_flower [
	TCA_FLOWER_KEY_ENC_OPT_GTP_PDU_TYPE	nlattr[TCA_FLOWER_KEY_ENC_OPT_GTP_PDU_TYPE, int8]
	TCA_FLOWER_KEY_ENC_OPT_GTP_QFI		nlattr[TCA_FLOWER_KEY_ENC_OPT_GTP_QFI, int8]
] [varlen]

gtp_policy$auto_gtp [
	IFLA_GTP_FD0		nlattr[IFLA_GTP_FD0, int32]
	IFLA_GTP_FD1		nlattr[IFLA_GTP_FD1, int32]
	IFLA_GTP_PDP_HASHSIZE	nlattr[IFLA_GTP_PDP_HASHSIZE, int32]
	IFLA_GTP_ROLE		nlattr[IFLA_GTP_ROLE, int32]
	IFLA_GTP_CREATE_SOCKETS	nlattr[IFLA_GTP_CREATE_SOCKETS, int8]
	IFLA_GTP_RESTART_COUNT	nlattr[IFLA_GTP_RESTART_COUNT, int8]
	IFLA_GTP_LOCAL		nlattr[IFLA_GTP_LOCAL, int32]
	IFLA_GTP_LOCAL6		nlattr[IFLA_GTP_LOCAL6, array[int8, 16]]
] [varlen]

handshake_accept_nl_policy$auto_genl [
	HANDSHAKE_A_ACCEPT_HANDLER_CLASS	nlattr[HANDSHAKE_A_ACCEPT_HANDLER_CLASS, int32]
] [varlen]

handshake_done_nl_policy$auto_genl [
	HANDSHAKE_A_DONE_STATUS		nlattr[HANDSHAKE_A_DONE_STATUS, int32]
	HANDSHAKE_A_DONE_SOCKFD		nlattr[HANDSHAKE_A_DONE_SOCKFD, fd]
	HANDSHAKE_A_DONE_REMOTE_AUTH	nlattr[HANDSHAKE_A_DONE_REMOTE_AUTH, int32]
] [varlen]

he_bss_color_policy$auto_nl80211 [
	NL80211_HE_BSS_COLOR_ATTR_COLOR		nlattr[NL80211_HE_BSS_COLOR_ATTR_COLOR, int8]
	NL80211_HE_BSS_COLOR_ATTR_DISABLED	nlattr[NL80211_HE_BSS_COLOR_ATTR_DISABLED, void]
	NL80211_HE_BSS_COLOR_ATTR_PARTIAL	nlattr[NL80211_HE_BSS_COLOR_ATTR_PARTIAL, void]
] [varlen]

he_obss_pd_policy$auto_nl80211 [
	NL80211_HE_OBSS_PD_ATTR_MIN_OFFSET		nlattr[NL80211_HE_OBSS_PD_ATTR_MIN_OFFSET, int8]
	NL80211_HE_OBSS_PD_ATTR_MAX_OFFSET		nlattr[NL80211_HE_OBSS_PD_ATTR_MAX_OFFSET, int8]
	NL80211_HE_OBSS_PD_ATTR_NON_SRG_MAX_OFFSET	nlattr[NL80211_HE_OBSS_PD_ATTR_NON_SRG_MAX_OFFSET, int8]
	NL80211_HE_OBSS_PD_ATTR_BSS_COLOR_BITMAP	nlattr[NL80211_HE_OBSS_PD_ATTR_BSS_COLOR_BITMAP, array[int8]]
	NL80211_HE_OBSS_PD_ATTR_PARTIAL_BSSID_BITMAP	nlattr[NL80211_HE_OBSS_PD_ATTR_PARTIAL_BSSID_BITMAP, array[int8]]
	NL80211_HE_OBSS_PD_ATTR_SR_CTRL			nlattr[NL80211_HE_OBSS_PD_ATTR_SR_CTRL, int8]
] [varlen]

hello_policy$auto_iwpm_msg [
	IWPM_NLA_HELLO_ABI_VERSION	nlattr[IWPM_NLA_HELLO_ABI_VERSION, int16]
] [varlen]

help_nla_policy$auto_nf_conntrack_netlink [
	CTA_HELP_NAME	nlattr[CTA_HELP_NAME, string]
] [varlen]

hfsc_policy$auto_sch_hfsc [
	TCA_HFSC_RSC	nlattr[TCA_HFSC_RSC, array[int8, 12]]
	TCA_HFSC_FSC	nlattr[TCA_HFSC_FSC, array[int8, 12]]
	TCA_HFSC_USC	nlattr[TCA_HFSC_USC, array[int8, 12]]
] [varlen]

hhf_policy$auto_sch_hhf [
	TCA_HHF_BACKLOG_LIMIT	nlattr[TCA_HHF_BACKLOG_LIMIT, int32]
	TCA_HHF_QUANTUM		nlattr[TCA_HHF_QUANTUM, int32]
	TCA_HHF_HH_FLOWS_LIMIT	nlattr[TCA_HHF_HH_FLOWS_LIMIT, int32]
	TCA_HHF_RESET_TIMEOUT	nlattr[TCA_HHF_RESET_TIMEOUT, int32]
	TCA_HHF_ADMIT_BYTES	nlattr[TCA_HHF_ADMIT_BYTES, int32]
	TCA_HHF_EVICT_TIMEOUT	nlattr[TCA_HHF_EVICT_TIMEOUT, int32]
	TCA_HHF_NON_HH_WEIGHT	nlattr[TCA_HHF_NON_HH_WEIGHT, int32]
] [varlen]

hsr_genl_policy$auto_hsr_netlink [
	HSR_A_NODE_ADDR		nlattr[HSR_A_NODE_ADDR, array[int8, 6]]
	HSR_A_IFINDEX		nlattr[HSR_A_IFINDEX, ifindex]
	HSR_A_IF1_AGE		nlattr[HSR_A_IF1_AGE, int32]
	HSR_A_IF2_AGE		nlattr[HSR_A_IF2_AGE, int32]
	HSR_A_NODE_ADDR_B	nlattr[HSR_A_NODE_ADDR_B, array[int8, 6]]
	HSR_A_IF1_SEQ		nlattr[HSR_A_IF1_SEQ, int16]
	HSR_A_IF2_SEQ		nlattr[HSR_A_IF2_SEQ, int16]
] [varlen]

hsr_policy$auto_hsr_netlink [
	IFLA_HSR_SLAVE1			nlattr[IFLA_HSR_SLAVE1, int32]
	IFLA_HSR_SLAVE2			nlattr[IFLA_HSR_SLAVE2, int32]
	IFLA_HSR_MULTICAST_SPEC		nlattr[IFLA_HSR_MULTICAST_SPEC, int8]
	IFLA_HSR_SUPERVISION_ADDR	nlattr[IFLA_HSR_SUPERVISION_ADDR, array[int8, 6]]
	IFLA_HSR_SEQ_NR			nlattr[IFLA_HSR_SEQ_NR, int16]
	IFLA_HSR_VERSION		nlattr[IFLA_HSR_VERSION, int8]
	IFLA_HSR_PROTOCOL		nlattr[IFLA_HSR_PROTOCOL, int8]
	IFLA_HSR_INTERLINK		nlattr[IFLA_HSR_INTERLINK, int32]
] [varlen]

htb_policy$auto_sch_htb [
	TCA_HTB_PARMS		nlattr[TCA_HTB_PARMS, array[int8, 44]]
	TCA_HTB_INIT		nlattr[TCA_HTB_INIT, array[int8, 20]]
	TCA_HTB_CTAB		nlattr[TCA_HTB_CTAB, array[int8, 0:1024]]
	TCA_HTB_RTAB		nlattr[TCA_HTB_RTAB, array[int8, 0:1024]]
	TCA_HTB_DIRECT_QLEN	nlattr[TCA_HTB_DIRECT_QLEN, int32]
	TCA_HTB_RATE64		nlattr[TCA_HTB_RATE64, int64]
	TCA_HTB_CEIL64		nlattr[TCA_HTB_CEIL64, int64]
	TCA_HTB_OFFLOAD		nlattr[TCA_HTB_OFFLOAD, void]
] [varlen]

hwsim_edge_policy$auto_mac802154_hwsim [
	MAC802154_HWSIM_EDGE_ATTR_ENDPOINT_ID	nlattr[MAC802154_HWSIM_EDGE_ATTR_ENDPOINT_ID, int32]
	MAC802154_HWSIM_EDGE_ATTR_LQI		nlattr[MAC802154_HWSIM_EDGE_ATTR_LQI, int8]
] [varlen]

hwsim_ftm_capa_policy$auto_mac80211_hwsim [
	NL80211_PMSR_FTM_CAPA_ATTR_ASAP			nlattr[NL80211_PMSR_FTM_CAPA_ATTR_ASAP, void]
	NL80211_PMSR_FTM_CAPA_ATTR_NON_ASAP		nlattr[NL80211_PMSR_FTM_CAPA_ATTR_NON_ASAP, void]
	NL80211_PMSR_FTM_CAPA_ATTR_REQ_LCI		nlattr[NL80211_PMSR_FTM_CAPA_ATTR_REQ_LCI, void]
	NL80211_PMSR_FTM_CAPA_ATTR_REQ_CIVICLOC		nlattr[NL80211_PMSR_FTM_CAPA_ATTR_REQ_CIVICLOC, void]
	NL80211_PMSR_FTM_CAPA_ATTR_PREAMBLES		nlattr[NL80211_PMSR_FTM_CAPA_ATTR_PREAMBLES, int32]
	NL80211_PMSR_FTM_CAPA_ATTR_BANDWIDTHS		nlattr[NL80211_PMSR_FTM_CAPA_ATTR_BANDWIDTHS, int32]
	NL80211_PMSR_FTM_CAPA_ATTR_MAX_BURSTS_EXPONENT	nlattr[NL80211_PMSR_FTM_CAPA_ATTR_MAX_BURSTS_EXPONENT, int8]
	NL80211_PMSR_FTM_CAPA_ATTR_MAX_FTMS_PER_BURST	nlattr[NL80211_PMSR_FTM_CAPA_ATTR_MAX_FTMS_PER_BURST, int8]
	NL80211_PMSR_FTM_CAPA_ATTR_TRIGGER_BASED	nlattr[NL80211_PMSR_FTM_CAPA_ATTR_TRIGGER_BASED, void]
	NL80211_PMSR_FTM_CAPA_ATTR_NON_TRIGGER_BASED	nlattr[NL80211_PMSR_FTM_CAPA_ATTR_NON_TRIGGER_BASED, void]
] [varlen]

hwsim_ftm_result_policy$auto_mac80211_hwsim [
	NL80211_PMSR_FTM_RESP_ATTR_FAIL_REASON		nlattr[NL80211_PMSR_FTM_RESP_ATTR_FAIL_REASON, int32]
	NL80211_PMSR_FTM_RESP_ATTR_BURST_INDEX		nlattr[NL80211_PMSR_FTM_RESP_ATTR_BURST_INDEX, int16]
	NL80211_PMSR_FTM_RESP_ATTR_NUM_FTMR_ATTEMPTS	nlattr[NL80211_PMSR_FTM_RESP_ATTR_NUM_FTMR_ATTEMPTS, int32]
	NL80211_PMSR_FTM_RESP_ATTR_NUM_FTMR_SUCCESSES	nlattr[NL80211_PMSR_FTM_RESP_ATTR_NUM_FTMR_SUCCESSES, int32]
	NL80211_PMSR_FTM_RESP_ATTR_BUSY_RETRY_TIME	nlattr[NL80211_PMSR_FTM_RESP_ATTR_BUSY_RETRY_TIME, int8]
	NL80211_PMSR_FTM_RESP_ATTR_NUM_BURSTS_EXP	nlattr[NL80211_PMSR_FTM_RESP_ATTR_NUM_BURSTS_EXP, int8]
	NL80211_PMSR_FTM_RESP_ATTR_BURST_DURATION	nlattr[NL80211_PMSR_FTM_RESP_ATTR_BURST_DURATION, int8]
	NL80211_PMSR_FTM_RESP_ATTR_FTMS_PER_BURST	nlattr[NL80211_PMSR_FTM_RESP_ATTR_FTMS_PER_BURST, int8]
	NL80211_PMSR_FTM_RESP_ATTR_RSSI_AVG		nlattr[NL80211_PMSR_FTM_RESP_ATTR_RSSI_AVG, int32]
	NL80211_PMSR_FTM_RESP_ATTR_RSSI_SPREAD		nlattr[NL80211_PMSR_FTM_RESP_ATTR_RSSI_SPREAD, int32]
	NL80211_PMSR_FTM_RESP_ATTR_TX_RATE		nlattr[NL80211_PMSR_FTM_RESP_ATTR_TX_RATE, array[int8, 11]]
	NL80211_PMSR_FTM_RESP_ATTR_RX_RATE		nlattr[NL80211_PMSR_FTM_RESP_ATTR_RX_RATE, array[int8, 11]]
	NL80211_PMSR_FTM_RESP_ATTR_RTT_AVG		nlattr[NL80211_PMSR_FTM_RESP_ATTR_RTT_AVG, int64]
	NL80211_PMSR_FTM_RESP_ATTR_RTT_VARIANCE		nlattr[NL80211_PMSR_FTM_RESP_ATTR_RTT_VARIANCE, int64]
	NL80211_PMSR_FTM_RESP_ATTR_RTT_SPREAD		nlattr[NL80211_PMSR_FTM_RESP_ATTR_RTT_SPREAD, int64]
	NL80211_PMSR_FTM_RESP_ATTR_DIST_AVG		nlattr[NL80211_PMSR_FTM_RESP_ATTR_DIST_AVG, int64]
	NL80211_PMSR_FTM_RESP_ATTR_DIST_VARIANCE	nlattr[NL80211_PMSR_FTM_RESP_ATTR_DIST_VARIANCE, int64]
	NL80211_PMSR_FTM_RESP_ATTR_DIST_SPREAD		nlattr[NL80211_PMSR_FTM_RESP_ATTR_DIST_SPREAD, int64]
	NL80211_PMSR_FTM_RESP_ATTR_LCI			nlattr[NL80211_PMSR_FTM_RESP_ATTR_LCI, stringnoz]
	NL80211_PMSR_FTM_RESP_ATTR_CIVICLOC		nlattr[NL80211_PMSR_FTM_RESP_ATTR_CIVICLOC, stringnoz]
] [varlen]

hwsim_genl_policy$auto_mac80211_hwsim [
	HWSIM_ATTR_ADDR_RECEIVER		nlattr[HWSIM_ATTR_ADDR_RECEIVER, array[int8]]
	HWSIM_ATTR_ADDR_TRANSMITTER		nlattr[HWSIM_ATTR_ADDR_TRANSMITTER, array[int8]]
	HWSIM_ATTR_FRAME			nlattr[HWSIM_ATTR_FRAME, array[int8, 0:2304]]
	HWSIM_ATTR_FLAGS			nlattr[HWSIM_ATTR_FLAGS, int32]
	HWSIM_ATTR_RX_RATE			nlattr[HWSIM_ATTR_RX_RATE, int32]
	HWSIM_ATTR_SIGNAL			nlattr[HWSIM_ATTR_SIGNAL, int32]
	HWSIM_ATTR_TX_INFO			nlattr[HWSIM_ATTR_TX_INFO, int64]
	HWSIM_ATTR_COOKIE			nlattr[HWSIM_ATTR_COOKIE, int64]
	HWSIM_ATTR_CHANNELS			nlattr[HWSIM_ATTR_CHANNELS, int32]
	HWSIM_ATTR_RADIO_ID			nlattr[HWSIM_ATTR_RADIO_ID, int32]
	HWSIM_ATTR_REG_HINT_ALPHA2		nlattr[HWSIM_ATTR_REG_HINT_ALPHA2, stringnoz]
	HWSIM_ATTR_REG_CUSTOM_REG		nlattr[HWSIM_ATTR_REG_CUSTOM_REG, int32]
	HWSIM_ATTR_REG_STRICT_REG		nlattr[HWSIM_ATTR_REG_STRICT_REG, void]
	HWSIM_ATTR_SUPPORT_P2P_DEVICE		nlattr[HWSIM_ATTR_SUPPORT_P2P_DEVICE, void]
	HWSIM_ATTR_USE_CHANCTX			nlattr[HWSIM_ATTR_USE_CHANCTX, void]
	HWSIM_ATTR_DESTROY_RADIO_ON_CLOSE	nlattr[HWSIM_ATTR_DESTROY_RADIO_ON_CLOSE, void]
	HWSIM_ATTR_RADIO_NAME			nlattr[HWSIM_ATTR_RADIO_NAME, stringnoz]
	HWSIM_ATTR_NO_VIF			nlattr[HWSIM_ATTR_NO_VIF, void]
	HWSIM_ATTR_FREQ				nlattr[HWSIM_ATTR_FREQ, int32]
	HWSIM_ATTR_TX_INFO_FLAGS		nlattr[HWSIM_ATTR_TX_INFO_FLAGS, array[int8]]
	HWSIM_ATTR_PERM_ADDR			nlattr[HWSIM_ATTR_PERM_ADDR, array[int8]]
	HWSIM_ATTR_IFTYPE_SUPPORT		nlattr[HWSIM_ATTR_IFTYPE_SUPPORT, int32]
	HWSIM_ATTR_CIPHER_SUPPORT		nlattr[HWSIM_ATTR_CIPHER_SUPPORT, array[int8]]
	HWSIM_ATTR_MLO_SUPPORT			nlattr[HWSIM_ATTR_MLO_SUPPORT, void]
	HWSIM_ATTR_PMSR_SUPPORT			nlattr[HWSIM_ATTR_PMSR_SUPPORT, array[int8, 5]]
	HWSIM_ATTR_PMSR_RESULT			nlattr[HWSIM_ATTR_PMSR_RESULT, array[int8, 5]]
	HWSIM_ATTR_MULTI_RADIO			nlattr[HWSIM_ATTR_MULTI_RADIO, void]
] [varlen]

hwsim_genl_policy$auto_mac802154_hwsim [
	MAC802154_HWSIM_ATTR_RADIO_ID		nlattr[MAC802154_HWSIM_ATTR_RADIO_ID, int32]
	MAC802154_HWSIM_ATTR_RADIO_EDGE		nlattr[MAC802154_HWSIM_ATTR_RADIO_EDGE, array[int8]]
	MAC802154_HWSIM_ATTR_RADIO_EDGES	nlattr[MAC802154_HWSIM_ATTR_RADIO_EDGES, array[int8]]
] [varlen]

hwsim_pmsr_capa_policy$auto_mac80211_hwsim [
	NL80211_PMSR_ATTR_MAX_PEERS		nlattr[NL80211_PMSR_ATTR_MAX_PEERS, int32]
	NL80211_PMSR_ATTR_REPORT_AP_TSF		nlattr[NL80211_PMSR_ATTR_REPORT_AP_TSF, void]
	NL80211_PMSR_ATTR_RANDOMIZE_MAC_ADDR	nlattr[NL80211_PMSR_ATTR_RANDOMIZE_MAC_ADDR, void]
	NL80211_PMSR_ATTR_TYPE_CAPA		nlattr[NL80211_PMSR_ATTR_TYPE_CAPA, int8]
	NL80211_PMSR_ATTR_PEERS			nlattr[NL80211_PMSR_ATTR_PEERS, array[int8]]
] [varlen]

hwsim_pmsr_capa_type_policy$auto_mac80211_hwsim [
	NL80211_PMSR_TYPE_FTM	nlattr[NL80211_PMSR_TYPE_FTM, array[int8, 10]]
] [varlen]

hwsim_pmsr_peer_result_policy$auto_mac80211_hwsim [
	NL80211_PMSR_PEER_ATTR_ADDR	nlattr[NL80211_PMSR_PEER_ATTR_ADDR, array[int8]]
	NL80211_PMSR_PEER_ATTR_CHAN	nlattr[NL80211_PMSR_PEER_ATTR_CHAN, array[int8]]
	NL80211_PMSR_PEER_ATTR_REQ	nlattr[NL80211_PMSR_PEER_ATTR_REQ, array[int8]]
	NL80211_PMSR_PEER_ATTR_RESP	nlattr[NL80211_PMSR_PEER_ATTR_RESP, array[int8, 6]]
] [varlen]

hwsim_pmsr_peers_result_policy$auto_mac80211_hwsim [
	NL80211_PMSR_ATTR_MAX_PEERS		nlattr[NL80211_PMSR_ATTR_MAX_PEERS, array[int8]]
	NL80211_PMSR_ATTR_REPORT_AP_TSF		nlattr[NL80211_PMSR_ATTR_REPORT_AP_TSF, array[int8]]
	NL80211_PMSR_ATTR_RANDOMIZE_MAC_ADDR	nlattr[NL80211_PMSR_ATTR_RANDOMIZE_MAC_ADDR, array[int8]]
	NL80211_PMSR_ATTR_TYPE_CAPA		nlattr[NL80211_PMSR_ATTR_TYPE_CAPA, array[int8]]
	NL80211_PMSR_ATTR_PEERS			nlattr[NL80211_PMSR_ATTR_PEERS, int32]
] [varlen]

hwsim_pmsr_resp_policy$auto_mac80211_hwsim [
	NL80211_PMSR_RESP_ATTR_DATA		nlattr[NL80211_PMSR_RESP_ATTR_DATA, int8]
	NL80211_PMSR_RESP_ATTR_STATUS		nlattr[NL80211_PMSR_RESP_ATTR_STATUS, int32]
	NL80211_PMSR_RESP_ATTR_HOST_TIME	nlattr[NL80211_PMSR_RESP_ATTR_HOST_TIME, int64]
	NL80211_PMSR_RESP_ATTR_AP_TSF		nlattr[NL80211_PMSR_RESP_ATTR_AP_TSF, int64]
	NL80211_PMSR_RESP_ATTR_FINAL		nlattr[NL80211_PMSR_RESP_ATTR_FINAL, void]
] [varlen]

hwsim_pmsr_resp_type_policy$auto_mac80211_hwsim [
	NL80211_PMSR_TYPE_FTM	nlattr[NL80211_PMSR_TYPE_FTM, array[int8, 21]]
] [varlen]

hwsim_rate_info_policy$auto_mac80211_hwsim [
	HWSIM_RATE_INFO_ATTR_FLAGS		nlattr[HWSIM_RATE_INFO_ATTR_FLAGS, int8]
	HWSIM_RATE_INFO_ATTR_MCS		nlattr[HWSIM_RATE_INFO_ATTR_MCS, int8]
	HWSIM_RATE_INFO_ATTR_LEGACY		nlattr[HWSIM_RATE_INFO_ATTR_LEGACY, int16]
	HWSIM_RATE_INFO_ATTR_NSS		nlattr[HWSIM_RATE_INFO_ATTR_NSS, int8]
	HWSIM_RATE_INFO_ATTR_BW			nlattr[HWSIM_RATE_INFO_ATTR_BW, int8]
	HWSIM_RATE_INFO_ATTR_HE_GI		nlattr[HWSIM_RATE_INFO_ATTR_HE_GI, int8]
	HWSIM_RATE_INFO_ATTR_HE_DCM		nlattr[HWSIM_RATE_INFO_ATTR_HE_DCM, int8]
	HWSIM_RATE_INFO_ATTR_HE_RU_ALLOC	nlattr[HWSIM_RATE_INFO_ATTR_HE_RU_ALLOC, int8]
	HWSIM_RATE_INFO_ATTR_N_BOUNDED_CH	nlattr[HWSIM_RATE_INFO_ATTR_N_BOUNDED_CH, int8]
	HWSIM_RATE_INFO_ATTR_EHT_GI		nlattr[HWSIM_RATE_INFO_ATTR_EHT_GI, int8]
	HWSIM_RATE_INFO_ATTR_EHT_RU_ALLOC	nlattr[HWSIM_RATE_INFO_ATTR_EHT_RU_ALLOC, int8]
] [varlen]

ib_nl_addr_policy$auto_addr [
	LS_NLA_TYPE_DGID	nlattr[LS_NLA_TYPE_DGID, array[int8, 0:16]]
] [varlen]

ib_nl_policy$auto_sa_query [
	LS_NLA_TYPE_PATH_RECORD	nlattr[LS_NLA_TYPE_PATH_RECORD, array[int8, 0:72]]
	LS_NLA_TYPE_TIMEOUT	nlattr[LS_NLA_TYPE_TIMEOUT, int32]
	LS_NLA_TYPE_SERVICE_ID	nlattr[LS_NLA_TYPE_SERVICE_ID, int64]
	LS_NLA_TYPE_DGID	nlattr[LS_NLA_TYPE_DGID, array[int8, 0:16]]
	LS_NLA_TYPE_SGID	nlattr[LS_NLA_TYPE_SGID, array[int8, 0:16]]
	LS_NLA_TYPE_TCLASS	nlattr[LS_NLA_TYPE_TCLASS, int8]
	LS_NLA_TYPE_PKEY	nlattr[LS_NLA_TYPE_PKEY, int16]
	LS_NLA_TYPE_QOS_CLASS	nlattr[LS_NLA_TYPE_QOS_CLASS, int16]
] [varlen]

icmp_nla_policy$auto_nf_conntrack_proto_icmp [
	CTA_PROTO_ICMP_ID	nlattr[CTA_PROTO_ICMP_ID, int16]
	CTA_PROTO_ICMP_TYPE	nlattr[CTA_PROTO_ICMP_TYPE, int8]
	CTA_PROTO_ICMP_CODE	nlattr[CTA_PROTO_ICMP_CODE, int8]
] [varlen]

icmp_timeout_nla_policy$auto_nf_conntrack_proto_icmp [
	CTA_TIMEOUT_ICMP_TIMEOUT	nlattr[CTA_TIMEOUT_ICMP_TIMEOUT, int32]
] [varlen]

icmpv6_nla_policy$auto_nf_conntrack_proto_icmpv6 [
	CTA_PROTO_ICMPV6_ID	nlattr[CTA_PROTO_ICMPV6_ID, int16]
	CTA_PROTO_ICMPV6_TYPE	nlattr[CTA_PROTO_ICMPV6_TYPE, int8]
	CTA_PROTO_ICMPV6_CODE	nlattr[CTA_PROTO_ICMPV6_CODE, int8]
] [varlen]

icmpv6_timeout_nla_policy$auto_nf_conntrack_proto_icmpv6 [
	CTA_TIMEOUT_ICMPV6_TIMEOUT	nlattr[CTA_TIMEOUT_ICMPV6_TIMEOUT, int32]
] [varlen]

ieee802154_policy$auto_nl802154 [
	IEEE802154_ATTR_DEV_NAME			nlattr[IEEE802154_ATTR_DEV_NAME, stringnoz]
	IEEE802154_ATTR_DEV_INDEX			nlattr[IEEE802154_ATTR_DEV_INDEX, int32]
	IEEE802154_ATTR_STATUS				nlattr[IEEE802154_ATTR_STATUS, int8]
	IEEE802154_ATTR_SHORT_ADDR			nlattr[IEEE802154_ATTR_SHORT_ADDR, int16]
	IEEE802154_ATTR_HW_ADDR				nlattr[IEEE802154_ATTR_HW_ADDR, int64]
	IEEE802154_ATTR_PAN_ID				nlattr[IEEE802154_ATTR_PAN_ID, int16]
	IEEE802154_ATTR_CHANNEL				nlattr[IEEE802154_ATTR_CHANNEL, int8]
	IEEE802154_ATTR_COORD_SHORT_ADDR		nlattr[IEEE802154_ATTR_COORD_SHORT_ADDR, int16]
	IEEE802154_ATTR_COORD_HW_ADDR			nlattr[IEEE802154_ATTR_COORD_HW_ADDR, int64]
	IEEE802154_ATTR_COORD_PAN_ID			nlattr[IEEE802154_ATTR_COORD_PAN_ID, int16]
	IEEE802154_ATTR_SRC_SHORT_ADDR			nlattr[IEEE802154_ATTR_SRC_SHORT_ADDR, int16]
	IEEE802154_ATTR_SRC_HW_ADDR			nlattr[IEEE802154_ATTR_SRC_HW_ADDR, int64]
	IEEE802154_ATTR_SRC_PAN_ID			nlattr[IEEE802154_ATTR_SRC_PAN_ID, int16]
	IEEE802154_ATTR_DEST_SHORT_ADDR			nlattr[IEEE802154_ATTR_DEST_SHORT_ADDR, int16]
	IEEE802154_ATTR_DEST_HW_ADDR			nlattr[IEEE802154_ATTR_DEST_HW_ADDR, int64]
	IEEE802154_ATTR_DEST_PAN_ID			nlattr[IEEE802154_ATTR_DEST_PAN_ID, int16]
	IEEE802154_ATTR_CAPABILITY			nlattr[IEEE802154_ATTR_CAPABILITY, int8]
	IEEE802154_ATTR_REASON				nlattr[IEEE802154_ATTR_REASON, int8]
	IEEE802154_ATTR_SCAN_TYPE			nlattr[IEEE802154_ATTR_SCAN_TYPE, int8]
	IEEE802154_ATTR_CHANNELS			nlattr[IEEE802154_ATTR_CHANNELS, int32]
	IEEE802154_ATTR_DURATION			nlattr[IEEE802154_ATTR_DURATION, int8]
	IEEE802154_ATTR_ED_LIST				nlattr[IEEE802154_ATTR_ED_LIST, array[int8, 27]]
	IEEE802154_ATTR_BCN_ORD				nlattr[IEEE802154_ATTR_BCN_ORD, int8]
	IEEE802154_ATTR_SF_ORD				nlattr[IEEE802154_ATTR_SF_ORD, int8]
	IEEE802154_ATTR_PAN_COORD			nlattr[IEEE802154_ATTR_PAN_COORD, int8]
	IEEE802154_ATTR_BAT_EXT				nlattr[IEEE802154_ATTR_BAT_EXT, int8]
	IEEE802154_ATTR_COORD_REALIGN			nlattr[IEEE802154_ATTR_COORD_REALIGN, int8]
	IEEE802154_ATTR_PAGE				nlattr[IEEE802154_ATTR_PAGE, int8]
	IEEE802154_ATTR_CHANNEL_PAGE_LIST		nlattr[IEEE802154_ATTR_CHANNEL_PAGE_LIST, array[int8, 128]]
	IEEE802154_ATTR_PHY_NAME			nlattr[IEEE802154_ATTR_PHY_NAME, stringnoz]
	IEEE802154_ATTR_DEV_TYPE			nlattr[IEEE802154_ATTR_DEV_TYPE, int8]
	IEEE802154_ATTR_TXPOWER				nlattr[IEEE802154_ATTR_TXPOWER, int8]
	IEEE802154_ATTR_LBT_ENABLED			nlattr[IEEE802154_ATTR_LBT_ENABLED, bool8]
	IEEE802154_ATTR_CCA_MODE			nlattr[IEEE802154_ATTR_CCA_MODE, int8]
	IEEE802154_ATTR_CCA_ED_LEVEL			nlattr[IEEE802154_ATTR_CCA_ED_LEVEL, int32]
	IEEE802154_ATTR_CSMA_RETRIES			nlattr[IEEE802154_ATTR_CSMA_RETRIES, int8]
	IEEE802154_ATTR_CSMA_MIN_BE			nlattr[IEEE802154_ATTR_CSMA_MIN_BE, int8]
	IEEE802154_ATTR_CSMA_MAX_BE			nlattr[IEEE802154_ATTR_CSMA_MAX_BE, int8]
	IEEE802154_ATTR_FRAME_RETRIES			nlattr[IEEE802154_ATTR_FRAME_RETRIES, int8]
	IEEE802154_ATTR_LLSEC_ENABLED			nlattr[IEEE802154_ATTR_LLSEC_ENABLED, bool8]
	IEEE802154_ATTR_LLSEC_SECLEVEL			nlattr[IEEE802154_ATTR_LLSEC_SECLEVEL, int8]
	IEEE802154_ATTR_LLSEC_KEY_MODE			nlattr[IEEE802154_ATTR_LLSEC_KEY_MODE, int8]
	IEEE802154_ATTR_LLSEC_KEY_SOURCE_SHORT		nlattr[IEEE802154_ATTR_LLSEC_KEY_SOURCE_SHORT, int32]
	IEEE802154_ATTR_LLSEC_KEY_SOURCE_EXTENDED	nlattr[IEEE802154_ATTR_LLSEC_KEY_SOURCE_EXTENDED, int64]
	IEEE802154_ATTR_LLSEC_KEY_ID			nlattr[IEEE802154_ATTR_LLSEC_KEY_ID, int8]
	IEEE802154_ATTR_LLSEC_FRAME_COUNTER		nlattr[IEEE802154_ATTR_LLSEC_FRAME_COUNTER, int32]
	IEEE802154_ATTR_LLSEC_KEY_BYTES			nlattr[IEEE802154_ATTR_LLSEC_KEY_BYTES, array[int8, 16]]
	IEEE802154_ATTR_LLSEC_KEY_USAGE_FRAME_TYPES	nlattr[IEEE802154_ATTR_LLSEC_KEY_USAGE_FRAME_TYPES, int8]
	IEEE802154_ATTR_LLSEC_KEY_USAGE_COMMANDS	nlattr[IEEE802154_ATTR_LLSEC_KEY_USAGE_COMMANDS, array[int8, 32]]
	IEEE802154_ATTR_LLSEC_FRAME_TYPE		nlattr[IEEE802154_ATTR_LLSEC_FRAME_TYPE, int8]
	IEEE802154_ATTR_LLSEC_CMD_FRAME_ID		nlattr[IEEE802154_ATTR_LLSEC_CMD_FRAME_ID, int8]
	IEEE802154_ATTR_LLSEC_SECLEVELS			nlattr[IEEE802154_ATTR_LLSEC_SECLEVELS, int8]
	IEEE802154_ATTR_LLSEC_DEV_OVERRIDE		nlattr[IEEE802154_ATTR_LLSEC_DEV_OVERRIDE, int8]
	IEEE802154_ATTR_LLSEC_DEV_KEY_MODE		nlattr[IEEE802154_ATTR_LLSEC_DEV_KEY_MODE, int8]
] [varlen]

ifa_ipv4_policy$auto_devinet [
	IFA_ADDRESS		nlattr[IFA_ADDRESS, int32]
	IFA_LOCAL		nlattr[IFA_LOCAL, int32]
	IFA_LABEL		nlattr[IFA_LABEL, stringnoz]
	IFA_BROADCAST		nlattr[IFA_BROADCAST, int32]
	IFA_CACHEINFO		nlattr[IFA_CACHEINFO, array[int8, 16]]
	IFA_FLAGS		nlattr[IFA_FLAGS, int32]
	IFA_RT_PRIORITY		nlattr[IFA_RT_PRIORITY, int32]
	IFA_TARGET_NETNSID	nlattr[IFA_TARGET_NETNSID, int32]
	IFA_PROTO		nlattr[IFA_PROTO, int8]
] [varlen]

ifa_ipv6_policy$auto_addrconf [
	IFA_ADDRESS		nlattr[IFA_ADDRESS, array[int8, 16]]
	IFA_LOCAL		nlattr[IFA_LOCAL, array[int8, 16]]
	IFA_CACHEINFO		nlattr[IFA_CACHEINFO, array[int8, 16]]
	IFA_FLAGS		nlattr[IFA_FLAGS, int32]
	IFA_RT_PRIORITY		nlattr[IFA_RT_PRIORITY, int32]
	IFA_TARGET_NETNSID	nlattr[IFA_TARGET_NETNSID, int32]
	IFA_PROTO		nlattr[IFA_PROTO, int8]
] [varlen]

ifa_phonet_policy$auto_pn_netlink [
	IFA_LOCAL	nlattr[IFA_LOCAL, int8]
] [varlen]

ifal_policy$auto_addrlabel [
	IFAL_ADDRESS	nlattr[IFAL_ADDRESS, array[int8, 16]]
	IFAL_LABEL	nlattr[IFAL_LABEL, int32]
] [varlen]

ife_policy$auto_act_ife [
	TCA_IFE_PARMS	nlattr[TCA_IFE_PARMS, array[int8, 24]]
	TCA_IFE_DMAC	nlattr[TCA_IFE_DMAC, array[int8, 6]]
	TCA_IFE_SMAC	nlattr[TCA_IFE_SMAC, array[int8, 6]]
	TCA_IFE_TYPE	nlattr[TCA_IFE_TYPE, int16]
] [varlen]

ifla_info_policy$auto_rtnetlink [
	IFLA_INFO_KIND		nlattr[IFLA_INFO_KIND, stringnoz]
	IFLA_INFO_DATA		nlattr[IFLA_INFO_DATA, array[int8]]
	IFLA_INFO_SLAVE_KIND	nlattr[IFLA_INFO_SLAVE_KIND, stringnoz]
	IFLA_INFO_SLAVE_DATA	nlattr[IFLA_INFO_SLAVE_DATA, array[int8]]
] [varlen]

ifla_policy$auto_rtnetlink [
	IFLA_ADDRESS		nlattr[IFLA_ADDRESS, array[int8, 0:32]]
	IFLA_BROADCAST		nlattr[IFLA_BROADCAST, array[int8, 0:32]]
	IFLA_IFNAME		nlattr[IFLA_IFNAME, stringnoz]
	IFLA_MTU		nlattr[IFLA_MTU, int32]
	IFLA_LINK		nlattr[IFLA_LINK, int32]
	IFLA_MASTER		nlattr[IFLA_MASTER, int32]
	IFLA_TXQLEN		nlattr[IFLA_TXQLEN, int32]
	IFLA_MAP		nlattr[IFLA_MAP, array[int8, 32]]
	IFLA_WEIGHT		nlattr[IFLA_WEIGHT, int32]
	IFLA_OPERSTATE		nlattr[IFLA_OPERSTATE, int8]
	IFLA_LINKMODE		nlattr[IFLA_LINKMODE, int8]
	IFLA_LINKINFO		nlattr[IFLA_LINKINFO, array[int8]]
	IFLA_NET_NS_PID		nlattr[IFLA_NET_NS_PID, int32]
	IFLA_IFALIAS		nlattr[IFLA_IFALIAS, array[int8, 0:255]]
	IFLA_VFINFO_LIST	nlattr[IFLA_VFINFO_LIST, array[int8]]
	IFLA_VF_PORTS		nlattr[IFLA_VF_PORTS, array[int8]]
	IFLA_PORT_SELF		nlattr[IFLA_PORT_SELF, array[int8]]
	IFLA_AF_SPEC		nlattr[IFLA_AF_SPEC, array[int8]]
	IFLA_GROUP		nlattr[IFLA_GROUP, int32]
	IFLA_NET_NS_FD		nlattr[IFLA_NET_NS_FD, fd_namespace]
	IFLA_EXT_MASK		nlattr[IFLA_EXT_MASK, int32]
	IFLA_PROMISCUITY	nlattr[IFLA_PROMISCUITY, int32]
	IFLA_NUM_TX_QUEUES	nlattr[IFLA_NUM_TX_QUEUES, int32]
	IFLA_NUM_RX_QUEUES	nlattr[IFLA_NUM_RX_QUEUES, int32]
	IFLA_CARRIER		nlattr[IFLA_CARRIER, int8]
	IFLA_PHYS_PORT_ID	nlattr[IFLA_PHYS_PORT_ID, array[int8, 0:32]]
	IFLA_CARRIER_CHANGES	nlattr[IFLA_CARRIER_CHANGES, int32]
	IFLA_PHYS_SWITCH_ID	nlattr[IFLA_PHYS_SWITCH_ID, array[int8, 0:32]]
	IFLA_LINK_NETNSID	nlattr[IFLA_LINK_NETNSID, int32]
	IFLA_PROTO_DOWN		nlattr[IFLA_PROTO_DOWN, int8]
	IFLA_GSO_MAX_SEGS	nlattr[IFLA_GSO_MAX_SEGS, int32]
	IFLA_GSO_MAX_SIZE	nlattr[IFLA_GSO_MAX_SIZE, int32]
	IFLA_XDP		nlattr[IFLA_XDP, array[int8]]
	IFLA_EVENT		nlattr[IFLA_EVENT, int32]
	IFLA_TARGET_NETNSID	nlattr[IFLA_TARGET_NETNSID, int32]
	IFLA_CARRIER_UP_COUNT	nlattr[IFLA_CARRIER_UP_COUNT, int32]
	IFLA_CARRIER_DOWN_COUNT	nlattr[IFLA_CARRIER_DOWN_COUNT, int32]
	IFLA_NEW_IFINDEX	nlattr[IFLA_NEW_IFINDEX, ifindex]
	IFLA_MIN_MTU		nlattr[IFLA_MIN_MTU, int32]
	IFLA_MAX_MTU		nlattr[IFLA_MAX_MTU, int32]
	IFLA_PROP_LIST		nlattr[IFLA_PROP_LIST, array[int8]]
	IFLA_ALT_IFNAME		nlattr[IFLA_ALT_IFNAME, stringnoz]
	IFLA_PERM_ADDRESS	nlattr[IFLA_PERM_ADDRESS, array[int8]]
	IFLA_PROTO_DOWN_REASON	nlattr[IFLA_PROTO_DOWN_REASON, array[int8]]
	IFLA_PARENT_DEV_NAME	nlattr[IFLA_PARENT_DEV_NAME, devname]
	IFLA_GRO_MAX_SIZE	nlattr[IFLA_GRO_MAX_SIZE, int32]
	IFLA_TSO_MAX_SIZE	nlattr[IFLA_TSO_MAX_SIZE, array[int8]]
	IFLA_TSO_MAX_SEGS	nlattr[IFLA_TSO_MAX_SEGS, array[int8]]
	IFLA_ALLMULTI		nlattr[IFLA_ALLMULTI, array[int8]]
	IFLA_GSO_IPV4_MAX_SIZE	nlattr[IFLA_GSO_IPV4_MAX_SIZE, ipv4_addr]
	IFLA_GRO_IPV4_MAX_SIZE	nlattr[IFLA_GRO_IPV4_MAX_SIZE, ipv4_addr]
] [varlen]

ifla_port_policy$auto_rtnetlink [
	IFLA_PORT_VF		nlattr[IFLA_PORT_VF, int32]
	IFLA_PORT_PROFILE	nlattr[IFLA_PORT_PROFILE, stringnoz]
	IFLA_PORT_VSI_TYPE	nlattr[IFLA_PORT_VSI_TYPE, int64]
	IFLA_PORT_INSTANCE_UUID	nlattr[IFLA_PORT_INSTANCE_UUID, array[int8, 0:16]]
	IFLA_PORT_HOST_UUID	nlattr[IFLA_PORT_HOST_UUID, stringnoz]
	IFLA_PORT_REQUEST	nlattr[IFLA_PORT_REQUEST, int8]
	IFLA_PORT_RESPONSE	nlattr[IFLA_PORT_RESPONSE, sock_port]
] [varlen]

ifla_proto_down_reason_policy$auto_rtnetlink [
	IFLA_PROTO_DOWN_REASON_MASK	nlattr[IFLA_PROTO_DOWN_REASON_MASK, int32]
	IFLA_PROTO_DOWN_REASON_VALUE	nlattr[IFLA_PROTO_DOWN_REASON_VALUE, int32]
] [varlen]

ifla_stats_set_policy$auto_rtnetlink [
	IFLA_STATS_SET_OFFLOAD_XSTATS_L3_STATS	nlattr[IFLA_STATS_SET_OFFLOAD_XSTATS_L3_STATS, int8]
] [varlen]

ifla_vf_policy$auto_rtnetlink [
	IFLA_VF_MAC		nlattr[IFLA_VF_MAC, array[int8, 36]]
	IFLA_VF_VLAN		nlattr[IFLA_VF_VLAN, array[int8, 12]]
	IFLA_VF_TX_RATE		nlattr[IFLA_VF_TX_RATE, int64]
	IFLA_VF_SPOOFCHK	nlattr[IFLA_VF_SPOOFCHK, int64]
	IFLA_VF_LINK_STATE	nlattr[IFLA_VF_LINK_STATE, int64]
	IFLA_VF_RATE		nlattr[IFLA_VF_RATE, array[int8, 12]]
	IFLA_VF_RSS_QUERY_EN	nlattr[IFLA_VF_RSS_QUERY_EN, int64]
	IFLA_VF_STATS		nlattr[IFLA_VF_STATS, array[int8]]
	IFLA_VF_TRUST		nlattr[IFLA_VF_TRUST, int64]
	IFLA_VF_IB_NODE_GUID	nlattr[IFLA_VF_IB_NODE_GUID, array[int8, 16]]
	IFLA_VF_IB_PORT_GUID	nlattr[IFLA_VF_IB_PORT_GUID, array[int8, 16]]
	IFLA_VF_VLAN_LIST	nlattr[IFLA_VF_VLAN_LIST, array[int8]]
	IFLA_VF_BROADCAST	nlattr[IFLA_VF_BROADCAST, array[int8]]
] [varlen]

ifla_xdp_policy$auto_rtnetlink [
	IFLA_XDP_UNSPEC		nlattr[IFLA_XDP_UNSPEC, array[int8]]
	IFLA_XDP_FD		nlattr[IFLA_XDP_FD, fd]
	IFLA_XDP_ATTACHED	nlattr[IFLA_XDP_ATTACHED, int8]
	IFLA_XDP_FLAGS		nlattr[IFLA_XDP_FLAGS, int32]
	IFLA_XDP_PROG_ID	nlattr[IFLA_XDP_PROG_ID, int32]
	IFLA_XDP_EXPECTED_FD	nlattr[IFLA_XDP_EXPECTED_FD, fd]
] [varlen]

ila_nl_policy$auto_ila_lwt [
	ILA_ATTR_LOCATOR	nlattr[ILA_ATTR_LOCATOR, int64]
	ILA_ATTR_CSUM_MODE	nlattr[ILA_ATTR_CSUM_MODE, int8]
	ILA_ATTR_IDENT_TYPE	nlattr[ILA_ATTR_IDENT_TYPE, int8]
	ILA_ATTR_HOOK_TYPE	nlattr[ILA_ATTR_HOOK_TYPE, int8]
] [varlen]

ila_nl_policy$auto_ila_main [
	ILA_ATTR_LOCATOR	nlattr[ILA_ATTR_LOCATOR, int64]
	ILA_ATTR_LOCATOR_MATCH	nlattr[ILA_ATTR_LOCATOR_MATCH, int64]
	ILA_ATTR_IFINDEX	nlattr[ILA_ATTR_IFINDEX, ifindex]
	ILA_ATTR_CSUM_MODE	nlattr[ILA_ATTR_CSUM_MODE, int8]
	ILA_ATTR_IDENT_TYPE	nlattr[ILA_ATTR_IDENT_TYPE, int8]
] [varlen]

inet6_af_policy$auto_addrconf [
	IFLA_INET6_TOKEN		nlattr[IFLA_INET6_TOKEN, array[int8, 16]]
	IFLA_INET6_ADDR_GEN_MODE	nlattr[IFLA_INET6_ADDR_GEN_MODE, int8]
	IFLA_INET6_RA_MTU		nlattr[IFLA_INET6_RA_MTU, array[int8]]
] [varlen]

inet_af_policy$auto_devinet [
	IFLA_INET_CONF	nlattr[IFLA_INET_CONF, array[int8]]
] [varlen]

ioam6_genl_policy_addns$auto_ioam6 [
	IOAM6_ATTR_NS_ID	nlattr[IOAM6_ATTR_NS_ID, int16]
	IOAM6_ATTR_NS_DATA	nlattr[IOAM6_ATTR_NS_DATA, int32]
	IOAM6_ATTR_NS_DATA_WIDE	nlattr[IOAM6_ATTR_NS_DATA_WIDE, int64]
] [varlen]

ioam6_genl_policy_addsc$auto_ioam6 [
	IOAM6_ATTR_SC_ID	nlattr[IOAM6_ATTR_SC_ID, int32]
	IOAM6_ATTR_SC_DATA	nlattr[IOAM6_ATTR_SC_DATA, array[int8, 0:1020]]
] [varlen]

ioam6_genl_policy_delns$auto_ioam6 [
	IOAM6_ATTR_NS_ID	nlattr[IOAM6_ATTR_NS_ID, int16]
] [varlen]

ioam6_genl_policy_delsc$auto_ioam6 [
	IOAM6_ATTR_SC_ID	nlattr[IOAM6_ATTR_SC_ID, int32]
] [varlen]

ioam6_genl_policy_ns_sc$auto_ioam6 [
	IOAM6_ATTR_NS_ID	nlattr[IOAM6_ATTR_NS_ID, int16]
	IOAM6_ATTR_SC_ID	nlattr[IOAM6_ATTR_SC_ID, int32]
	IOAM6_ATTR_SC_NONE	nlattr[IOAM6_ATTR_SC_NONE, void]
] [varlen]

ip6_tnl_policy$auto_ip6_tunnel [
	IFLA_IPTUN_LINK			nlattr[IFLA_IPTUN_LINK, int32]
	IFLA_IPTUN_LOCAL		nlattr[IFLA_IPTUN_LOCAL, array[int8, 16]]
	IFLA_IPTUN_REMOTE		nlattr[IFLA_IPTUN_REMOTE, array[int8, 16]]
	IFLA_IPTUN_TTL			nlattr[IFLA_IPTUN_TTL, int8]
	IFLA_IPTUN_ENCAP_LIMIT		nlattr[IFLA_IPTUN_ENCAP_LIMIT, int8]
	IFLA_IPTUN_FLOWINFO		nlattr[IFLA_IPTUN_FLOWINFO, int32]
	IFLA_IPTUN_FLAGS		nlattr[IFLA_IPTUN_FLAGS, int32]
	IFLA_IPTUN_PROTO		nlattr[IFLA_IPTUN_PROTO, int8]
	IFLA_IPTUN_ENCAP_TYPE		nlattr[IFLA_IPTUN_ENCAP_TYPE, int16]
	IFLA_IPTUN_ENCAP_FLAGS		nlattr[IFLA_IPTUN_ENCAP_FLAGS, int16]
	IFLA_IPTUN_ENCAP_SPORT		nlattr[IFLA_IPTUN_ENCAP_SPORT, sock_port]
	IFLA_IPTUN_ENCAP_DPORT		nlattr[IFLA_IPTUN_ENCAP_DPORT, sock_port]
	IFLA_IPTUN_COLLECT_METADATA	nlattr[IFLA_IPTUN_COLLECT_METADATA, void]
	IFLA_IPTUN_FWMARK		nlattr[IFLA_IPTUN_FWMARK, int32]
] [varlen]

ip6_tun_policy$auto_ip_tunnel_core [
	LWTUNNEL_IP6_UNSPEC	nlattr[LWTUNNEL_IP6_UNSPEC, array[int8]]
	LWTUNNEL_IP6_ID		nlattr[LWTUNNEL_IP6_ID, int64]
	LWTUNNEL_IP6_DST	nlattr[LWTUNNEL_IP6_DST, array[int8, 16]]
	LWTUNNEL_IP6_SRC	nlattr[LWTUNNEL_IP6_SRC, array[int8, 16]]
	LWTUNNEL_IP6_HOPLIMIT	nlattr[LWTUNNEL_IP6_HOPLIMIT, int8]
	LWTUNNEL_IP6_TC		nlattr[LWTUNNEL_IP6_TC, int8]
	LWTUNNEL_IP6_FLAGS	nlattr[LWTUNNEL_IP6_FLAGS, int16]
	LWTUNNEL_IP6_OPTS	nlattr[LWTUNNEL_IP6_OPTS, array[int8]]
] [varlen]

ip6gre_policy$auto_ip6_gre [
	IFLA_GRE_LINK			nlattr[IFLA_GRE_LINK, int32]
	IFLA_GRE_IFLAGS			nlattr[IFLA_GRE_IFLAGS, int16]
	IFLA_GRE_OFLAGS			nlattr[IFLA_GRE_OFLAGS, int16]
	IFLA_GRE_IKEY			nlattr[IFLA_GRE_IKEY, int32]
	IFLA_GRE_OKEY			nlattr[IFLA_GRE_OKEY, int32]
	IFLA_GRE_LOCAL			nlattr[IFLA_GRE_LOCAL, array[int8, 16]]
	IFLA_GRE_REMOTE			nlattr[IFLA_GRE_REMOTE, array[int8, 16]]
	IFLA_GRE_TTL			nlattr[IFLA_GRE_TTL, int8]
	IFLA_GRE_ENCAP_LIMIT		nlattr[IFLA_GRE_ENCAP_LIMIT, int8]
	IFLA_GRE_FLOWINFO		nlattr[IFLA_GRE_FLOWINFO, int32]
	IFLA_GRE_FLAGS			nlattr[IFLA_GRE_FLAGS, int32]
	IFLA_GRE_ENCAP_TYPE		nlattr[IFLA_GRE_ENCAP_TYPE, int16]
	IFLA_GRE_ENCAP_FLAGS		nlattr[IFLA_GRE_ENCAP_FLAGS, int16]
	IFLA_GRE_ENCAP_SPORT		nlattr[IFLA_GRE_ENCAP_SPORT, sock_port]
	IFLA_GRE_ENCAP_DPORT		nlattr[IFLA_GRE_ENCAP_DPORT, sock_port]
	IFLA_GRE_COLLECT_METADATA	nlattr[IFLA_GRE_COLLECT_METADATA, void]
	IFLA_GRE_FWMARK			nlattr[IFLA_GRE_FWMARK, int32]
	IFLA_GRE_ERSPAN_INDEX		nlattr[IFLA_GRE_ERSPAN_INDEX, int32]
	IFLA_GRE_ERSPAN_VER		nlattr[IFLA_GRE_ERSPAN_VER, int8]
	IFLA_GRE_ERSPAN_DIR		nlattr[IFLA_GRE_ERSPAN_DIR, int8]
	IFLA_GRE_ERSPAN_HWID		nlattr[IFLA_GRE_ERSPAN_HWID, int16]
] [varlen]

ip6mr_getroute_policy$auto_ip6mr [
	RTA_DST		nlattr[RTA_DST, array[int8]]
	RTA_SRC		nlattr[RTA_SRC, array[int8]]
	RTA_TABLE	nlattr[RTA_TABLE, int32]
] [varlen]

ip_opts_policy$auto_ip_tunnel_core [
	LWTUNNEL_IP_OPTS_GENEVE	nlattr[LWTUNNEL_IP_OPTS_GENEVE, array[int8]]
	LWTUNNEL_IP_OPTS_VXLAN	nlattr[LWTUNNEL_IP_OPTS_VXLAN, array[int8]]
	LWTUNNEL_IP_OPTS_ERSPAN	nlattr[LWTUNNEL_IP_OPTS_ERSPAN, array[int8]]
] [varlen]

ip_set_adt_policy$auto_ip_set_core [
	IPSET_ATTR_PROTOCOL	nlattr[IPSET_ATTR_PROTOCOL, int8]
	IPSET_ATTR_SETNAME	nlattr[IPSET_ATTR_SETNAME, string]
	IPSET_ATTR_DATA		nlattr[IPSET_ATTR_DATA, array[int8]]
	IPSET_ATTR_ADT		nlattr[IPSET_ATTR_ADT, array[int8]]
	IPSET_ATTR_LINENO	nlattr[IPSET_ATTR_LINENO, int32]
] [varlen]

ip_set_create_policy$auto_ip_set_core [
	IPSET_ATTR_PROTOCOL	nlattr[IPSET_ATTR_PROTOCOL, int8]
	IPSET_ATTR_SETNAME	nlattr[IPSET_ATTR_SETNAME, string]
	IPSET_ATTR_TYPENAME	nlattr[IPSET_ATTR_TYPENAME, string]
	IPSET_ATTR_REVISION	nlattr[IPSET_ATTR_REVISION, int8]
	IPSET_ATTR_FAMILY	nlattr[IPSET_ATTR_FAMILY, int8]
	IPSET_ATTR_DATA		nlattr[IPSET_ATTR_DATA, array[int8]]
] [varlen]

ip_set_dump_policy$auto_ip_set_core [
	IPSET_ATTR_PROTOCOL	nlattr[IPSET_ATTR_PROTOCOL, int8]
	IPSET_ATTR_SETNAME	nlattr[IPSET_ATTR_SETNAME, string]
	IPSET_ATTR_FLAGS	nlattr[IPSET_ATTR_FLAGS, int32]
] [varlen]

ip_set_index_policy$auto_ip_set_core [
	IPSET_ATTR_PROTOCOL	nlattr[IPSET_ATTR_PROTOCOL, int8]
	IPSET_ATTR_INDEX	nlattr[IPSET_ATTR_INDEX, int16]
] [varlen]

ip_set_protocol_policy$auto_ip_set_core [
	IPSET_ATTR_PROTOCOL	nlattr[IPSET_ATTR_PROTOCOL, int8]
] [varlen]

ip_set_setname2_policy$auto_ip_set_core [
	IPSET_ATTR_PROTOCOL	nlattr[IPSET_ATTR_PROTOCOL, int8]
	IPSET_ATTR_SETNAME	nlattr[IPSET_ATTR_SETNAME, string]
	IPSET_ATTR_SETNAME2	nlattr[IPSET_ATTR_SETNAME2, string]
] [varlen]

ip_set_setname_policy$auto_ip_set_core [
	IPSET_ATTR_PROTOCOL	nlattr[IPSET_ATTR_PROTOCOL, int8]
	IPSET_ATTR_SETNAME	nlattr[IPSET_ATTR_SETNAME, string]
] [varlen]

ip_set_type_policy$auto_ip_set_core [
	IPSET_ATTR_PROTOCOL	nlattr[IPSET_ATTR_PROTOCOL, int8]
	IPSET_ATTR_TYPENAME	nlattr[IPSET_ATTR_TYPENAME, string]
	IPSET_ATTR_FAMILY	nlattr[IPSET_ATTR_FAMILY, int8]
] [varlen]

ip_tun_policy$auto_ip_tunnel_core [
	LWTUNNEL_IP_UNSPEC	nlattr[LWTUNNEL_IP_UNSPEC, array[int8]]
	LWTUNNEL_IP_ID		nlattr[LWTUNNEL_IP_ID, int64]
	LWTUNNEL_IP_DST		nlattr[LWTUNNEL_IP_DST, int32]
	LWTUNNEL_IP_SRC		nlattr[LWTUNNEL_IP_SRC, int32]
	LWTUNNEL_IP_TTL		nlattr[LWTUNNEL_IP_TTL, int8]
	LWTUNNEL_IP_TOS		nlattr[LWTUNNEL_IP_TOS, int8]
	LWTUNNEL_IP_FLAGS	nlattr[LWTUNNEL_IP_FLAGS, int16]
	LWTUNNEL_IP_OPTS	nlattr[LWTUNNEL_IP_OPTS, array[int8]]
] [varlen]

ip_vs_cmd_policy$auto_ip_vs_ctl [
	IPVS_CMD_ATTR_SERVICE		nlattr[IPVS_CMD_ATTR_SERVICE, array[int8]]
	IPVS_CMD_ATTR_DEST		nlattr[IPVS_CMD_ATTR_DEST, array[int8]]
	IPVS_CMD_ATTR_DAEMON		nlattr[IPVS_CMD_ATTR_DAEMON, array[int8]]
	IPVS_CMD_ATTR_TIMEOUT_TCP	nlattr[IPVS_CMD_ATTR_TIMEOUT_TCP, int32]
	IPVS_CMD_ATTR_TIMEOUT_TCP_FIN	nlattr[IPVS_CMD_ATTR_TIMEOUT_TCP_FIN, int32]
	IPVS_CMD_ATTR_TIMEOUT_UDP	nlattr[IPVS_CMD_ATTR_TIMEOUT_UDP, int32]
] [varlen]

ip_vs_daemon_policy$auto_ip_vs_ctl [
	IPVS_DAEMON_ATTR_STATE		nlattr[IPVS_DAEMON_ATTR_STATE, int32]
	IPVS_DAEMON_ATTR_MCAST_IFN	nlattr[IPVS_DAEMON_ATTR_MCAST_IFN, string]
	IPVS_DAEMON_ATTR_SYNC_ID	nlattr[IPVS_DAEMON_ATTR_SYNC_ID, int32]
	IPVS_DAEMON_ATTR_SYNC_MAXLEN	nlattr[IPVS_DAEMON_ATTR_SYNC_MAXLEN, int16]
	IPVS_DAEMON_ATTR_MCAST_GROUP	nlattr[IPVS_DAEMON_ATTR_MCAST_GROUP, int32]
	IPVS_DAEMON_ATTR_MCAST_GROUP6	nlattr[IPVS_DAEMON_ATTR_MCAST_GROUP6, array[int8, 16]]
	IPVS_DAEMON_ATTR_MCAST_PORT	nlattr[IPVS_DAEMON_ATTR_MCAST_PORT, sock_port]
	IPVS_DAEMON_ATTR_MCAST_TTL	nlattr[IPVS_DAEMON_ATTR_MCAST_TTL, int8]
] [varlen]

ip_vs_dest_policy$auto_ip_vs_ctl [
	IPVS_DEST_ATTR_ADDR		nlattr[IPVS_DEST_ATTR_ADDR, array[int8, 0:16]]
	IPVS_DEST_ATTR_PORT		nlattr[IPVS_DEST_ATTR_PORT, sock_port]
	IPVS_DEST_ATTR_FWD_METHOD	nlattr[IPVS_DEST_ATTR_FWD_METHOD, int32]
	IPVS_DEST_ATTR_WEIGHT		nlattr[IPVS_DEST_ATTR_WEIGHT, int32]
	IPVS_DEST_ATTR_U_THRESH		nlattr[IPVS_DEST_ATTR_U_THRESH, int32]
	IPVS_DEST_ATTR_L_THRESH		nlattr[IPVS_DEST_ATTR_L_THRESH, int32]
	IPVS_DEST_ATTR_ACTIVE_CONNS	nlattr[IPVS_DEST_ATTR_ACTIVE_CONNS, int32]
	IPVS_DEST_ATTR_INACT_CONNS	nlattr[IPVS_DEST_ATTR_INACT_CONNS, int32]
	IPVS_DEST_ATTR_PERSIST_CONNS	nlattr[IPVS_DEST_ATTR_PERSIST_CONNS, int32]
	IPVS_DEST_ATTR_STATS		nlattr[IPVS_DEST_ATTR_STATS, array[int8]]
	IPVS_DEST_ATTR_ADDR_FAMILY	nlattr[IPVS_DEST_ATTR_ADDR_FAMILY, int16]
	IPVS_DEST_ATTR_TUN_TYPE		nlattr[IPVS_DEST_ATTR_TUN_TYPE, int8]
	IPVS_DEST_ATTR_TUN_PORT		nlattr[IPVS_DEST_ATTR_TUN_PORT, sock_port]
	IPVS_DEST_ATTR_TUN_FLAGS	nlattr[IPVS_DEST_ATTR_TUN_FLAGS, int16]
] [varlen]

ip_vs_svc_policy$auto_ip_vs_ctl [
	IPVS_SVC_ATTR_AF		nlattr[IPVS_SVC_ATTR_AF, int16]
	IPVS_SVC_ATTR_PROTOCOL		nlattr[IPVS_SVC_ATTR_PROTOCOL, int16]
	IPVS_SVC_ATTR_ADDR		nlattr[IPVS_SVC_ATTR_ADDR, array[int8, 0:16]]
	IPVS_SVC_ATTR_PORT		nlattr[IPVS_SVC_ATTR_PORT, sock_port]
	IPVS_SVC_ATTR_FWMARK		nlattr[IPVS_SVC_ATTR_FWMARK, int32]
	IPVS_SVC_ATTR_SCHED_NAME	nlattr[IPVS_SVC_ATTR_SCHED_NAME, string]
	IPVS_SVC_ATTR_FLAGS		nlattr[IPVS_SVC_ATTR_FLAGS, int64]
	IPVS_SVC_ATTR_TIMEOUT		nlattr[IPVS_SVC_ATTR_TIMEOUT, int32]
	IPVS_SVC_ATTR_NETMASK		nlattr[IPVS_SVC_ATTR_NETMASK, int32]
	IPVS_SVC_ATTR_STATS		nlattr[IPVS_SVC_ATTR_STATS, array[int8]]
	IPVS_SVC_ATTR_PE_NAME		nlattr[IPVS_SVC_ATTR_PE_NAME, string]
] [varlen]

ipaddr_policy$auto_ip_set_core [
	IPSET_ATTR_IPADDR_IPV4	nlattr[IPSET_ATTR_IPADDR_IPV4, ipv4_addr]
	IPSET_ATTR_IPADDR_IPV6	nlattr[IPSET_ATTR_IPADDR_IPV6, array[int8]]
] [varlen]

ipcaif_policy$auto_chnl_net [
	IFLA_CAIF_IPV4_CONNID	nlattr[IFLA_CAIF_IPV4_CONNID, ipv4_addr]
	IFLA_CAIF_IPV6_CONNID	nlattr[IFLA_CAIF_IPV6_CONNID, int32]
	IFLA_CAIF_LOOPBACK	nlattr[IFLA_CAIF_LOOPBACK, int8]
] [varlen]

ipgre_policy$auto_ip_gre [
	IFLA_GRE_LINK			nlattr[IFLA_GRE_LINK, int32]
	IFLA_GRE_IFLAGS			nlattr[IFLA_GRE_IFLAGS, int16]
	IFLA_GRE_OFLAGS			nlattr[IFLA_GRE_OFLAGS, int16]
	IFLA_GRE_IKEY			nlattr[IFLA_GRE_IKEY, int32]
	IFLA_GRE_OKEY			nlattr[IFLA_GRE_OKEY, int32]
	IFLA_GRE_LOCAL			nlattr[IFLA_GRE_LOCAL, int32]
	IFLA_GRE_REMOTE			nlattr[IFLA_GRE_REMOTE, int32]
	IFLA_GRE_TTL			nlattr[IFLA_GRE_TTL, int8]
	IFLA_GRE_TOS			nlattr[IFLA_GRE_TOS, int8]
	IFLA_GRE_PMTUDISC		nlattr[IFLA_GRE_PMTUDISC, int8]
	IFLA_GRE_ENCAP_TYPE		nlattr[IFLA_GRE_ENCAP_TYPE, int16]
	IFLA_GRE_ENCAP_FLAGS		nlattr[IFLA_GRE_ENCAP_FLAGS, int16]
	IFLA_GRE_ENCAP_SPORT		nlattr[IFLA_GRE_ENCAP_SPORT, sock_port]
	IFLA_GRE_ENCAP_DPORT		nlattr[IFLA_GRE_ENCAP_DPORT, sock_port]
	IFLA_GRE_COLLECT_METADATA	nlattr[IFLA_GRE_COLLECT_METADATA, void]
	IFLA_GRE_IGNORE_DF		nlattr[IFLA_GRE_IGNORE_DF, int8]
	IFLA_GRE_FWMARK			nlattr[IFLA_GRE_FWMARK, int32]
	IFLA_GRE_ERSPAN_INDEX		nlattr[IFLA_GRE_ERSPAN_INDEX, int32]
	IFLA_GRE_ERSPAN_VER		nlattr[IFLA_GRE_ERSPAN_VER, int8]
	IFLA_GRE_ERSPAN_DIR		nlattr[IFLA_GRE_ERSPAN_DIR, int8]
	IFLA_GRE_ERSPAN_HWID		nlattr[IFLA_GRE_ERSPAN_HWID, int16]
] [varlen]

ipip6_policy$auto_sit [
	IFLA_IPTUN_LINK			nlattr[IFLA_IPTUN_LINK, int32]
	IFLA_IPTUN_LOCAL		nlattr[IFLA_IPTUN_LOCAL, int32]
	IFLA_IPTUN_REMOTE		nlattr[IFLA_IPTUN_REMOTE, int32]
	IFLA_IPTUN_TTL			nlattr[IFLA_IPTUN_TTL, int8]
	IFLA_IPTUN_TOS			nlattr[IFLA_IPTUN_TOS, int8]
	IFLA_IPTUN_FLAGS		nlattr[IFLA_IPTUN_FLAGS, int16]
	IFLA_IPTUN_PROTO		nlattr[IFLA_IPTUN_PROTO, int8]
	IFLA_IPTUN_PMTUDISC		nlattr[IFLA_IPTUN_PMTUDISC, int8]
	IFLA_IPTUN_6RD_PREFIX		nlattr[IFLA_IPTUN_6RD_PREFIX, array[int8, 16]]
	IFLA_IPTUN_6RD_RELAY_PREFIX	nlattr[IFLA_IPTUN_6RD_RELAY_PREFIX, int32]
	IFLA_IPTUN_6RD_PREFIXLEN	nlattr[IFLA_IPTUN_6RD_PREFIXLEN, int16]
	IFLA_IPTUN_6RD_RELAY_PREFIXLEN	nlattr[IFLA_IPTUN_6RD_RELAY_PREFIXLEN, int16]
	IFLA_IPTUN_ENCAP_TYPE		nlattr[IFLA_IPTUN_ENCAP_TYPE, int16]
	IFLA_IPTUN_ENCAP_FLAGS		nlattr[IFLA_IPTUN_ENCAP_FLAGS, int16]
	IFLA_IPTUN_ENCAP_SPORT		nlattr[IFLA_IPTUN_ENCAP_SPORT, sock_port]
	IFLA_IPTUN_ENCAP_DPORT		nlattr[IFLA_IPTUN_ENCAP_DPORT, sock_port]
	IFLA_IPTUN_FWMARK		nlattr[IFLA_IPTUN_FWMARK, int32]
] [varlen]

ipip_policy$auto_ipip [
	IFLA_IPTUN_LINK			nlattr[IFLA_IPTUN_LINK, int32]
	IFLA_IPTUN_LOCAL		nlattr[IFLA_IPTUN_LOCAL, int32]
	IFLA_IPTUN_REMOTE		nlattr[IFLA_IPTUN_REMOTE, int32]
	IFLA_IPTUN_TTL			nlattr[IFLA_IPTUN_TTL, int8]
	IFLA_IPTUN_TOS			nlattr[IFLA_IPTUN_TOS, int8]
	IFLA_IPTUN_PROTO		nlattr[IFLA_IPTUN_PROTO, int8]
	IFLA_IPTUN_PMTUDISC		nlattr[IFLA_IPTUN_PMTUDISC, int8]
	IFLA_IPTUN_ENCAP_TYPE		nlattr[IFLA_IPTUN_ENCAP_TYPE, int16]
	IFLA_IPTUN_ENCAP_FLAGS		nlattr[IFLA_IPTUN_ENCAP_FLAGS, int16]
	IFLA_IPTUN_ENCAP_SPORT		nlattr[IFLA_IPTUN_ENCAP_SPORT, sock_port]
	IFLA_IPTUN_ENCAP_DPORT		nlattr[IFLA_IPTUN_ENCAP_DPORT, sock_port]
	IFLA_IPTUN_COLLECT_METADATA	nlattr[IFLA_IPTUN_COLLECT_METADATA, void]
	IFLA_IPTUN_FWMARK		nlattr[IFLA_IPTUN_FWMARK, int32]
] [varlen]

ipoib_policy$auto_ipoib_netlink [
	IFLA_IPOIB_PKEY		nlattr[IFLA_IPOIB_PKEY, int16]
	IFLA_IPOIB_MODE		nlattr[IFLA_IPOIB_MODE, int16]
	IFLA_IPOIB_UMCAST	nlattr[IFLA_IPOIB_UMCAST, int16]
] [varlen]

ipvlan_nl_policy$auto_ipvlan_main [
	IFLA_IPVLAN_MODE	nlattr[IFLA_IPVLAN_MODE, int16]
	IFLA_IPVLAN_FLAGS	nlattr[IFLA_IPVLAN_FLAGS, int16]
] [varlen]

l2tp_nl_policy$auto_l2tp_netlink [
	L2TP_ATTR_NONE			nlattr[L2TP_ATTR_NONE, array[int8]]
	L2TP_ATTR_PW_TYPE		nlattr[L2TP_ATTR_PW_TYPE, int16]
	L2TP_ATTR_ENCAP_TYPE		nlattr[L2TP_ATTR_ENCAP_TYPE, int16]
	L2TP_ATTR_OFFSET		nlattr[L2TP_ATTR_OFFSET, int16]
	L2TP_ATTR_DATA_SEQ		nlattr[L2TP_ATTR_DATA_SEQ, int8]
	L2TP_ATTR_L2SPEC_TYPE		nlattr[L2TP_ATTR_L2SPEC_TYPE, int8]
	L2TP_ATTR_L2SPEC_LEN		nlattr[L2TP_ATTR_L2SPEC_LEN, int8]
	L2TP_ATTR_PROTO_VERSION		nlattr[L2TP_ATTR_PROTO_VERSION, int8]
	L2TP_ATTR_IFNAME		nlattr[L2TP_ATTR_IFNAME, devname]
	L2TP_ATTR_CONN_ID		nlattr[L2TP_ATTR_CONN_ID, int32]
	L2TP_ATTR_PEER_CONN_ID		nlattr[L2TP_ATTR_PEER_CONN_ID, int32]
	L2TP_ATTR_SESSION_ID		nlattr[L2TP_ATTR_SESSION_ID, int32]
	L2TP_ATTR_PEER_SESSION_ID	nlattr[L2TP_ATTR_PEER_SESSION_ID, int32]
	L2TP_ATTR_UDP_CSUM		nlattr[L2TP_ATTR_UDP_CSUM, int8]
	L2TP_ATTR_VLAN_ID		nlattr[L2TP_ATTR_VLAN_ID, int16]
	L2TP_ATTR_COOKIE		nlattr[L2TP_ATTR_COOKIE, int64]
	L2TP_ATTR_PEER_COOKIE		nlattr[L2TP_ATTR_PEER_COOKIE, int64]
	L2TP_ATTR_DEBUG			nlattr[L2TP_ATTR_DEBUG, int32]
	L2TP_ATTR_RECV_SEQ		nlattr[L2TP_ATTR_RECV_SEQ, int8]
	L2TP_ATTR_SEND_SEQ		nlattr[L2TP_ATTR_SEND_SEQ, int8]
	L2TP_ATTR_LNS_MODE		nlattr[L2TP_ATTR_LNS_MODE, int8]
	L2TP_ATTR_USING_IPSEC		nlattr[L2TP_ATTR_USING_IPSEC, int8]
	L2TP_ATTR_RECV_TIMEOUT		nlattr[L2TP_ATTR_RECV_TIMEOUT, int64]
	L2TP_ATTR_FD			nlattr[L2TP_ATTR_FD, fd]
	L2TP_ATTR_IP_SADDR		nlattr[L2TP_ATTR_IP_SADDR, int32]
	L2TP_ATTR_IP_DADDR		nlattr[L2TP_ATTR_IP_DADDR, int32]
	L2TP_ATTR_UDP_SPORT		nlattr[L2TP_ATTR_UDP_SPORT, sock_port]
	L2TP_ATTR_UDP_DPORT		nlattr[L2TP_ATTR_UDP_DPORT, sock_port]
	L2TP_ATTR_MTU			nlattr[L2TP_ATTR_MTU, int16]
	L2TP_ATTR_MRU			nlattr[L2TP_ATTR_MRU, int16]
	L2TP_ATTR_STATS			nlattr[L2TP_ATTR_STATS, array[int8]]
	L2TP_ATTR_IP6_SADDR		nlattr[L2TP_ATTR_IP6_SADDR, array[int8, 0:16]]
	L2TP_ATTR_IP6_DADDR		nlattr[L2TP_ATTR_IP6_DADDR, array[int8, 0:16]]
] [varlen]

macsec_genl_offload_policy$auto_macsec [
	MACSEC_OFFLOAD_ATTR_TYPE	nlattr[MACSEC_OFFLOAD_ATTR_TYPE, int8]
] [varlen]

macsec_genl_policy$auto_macsec [
	MACSEC_ATTR_IFINDEX	nlattr[MACSEC_ATTR_IFINDEX, ifindex]
	MACSEC_ATTR_RXSC_CONFIG	nlattr[MACSEC_ATTR_RXSC_CONFIG, array[int8]]
	MACSEC_ATTR_SA_CONFIG	nlattr[MACSEC_ATTR_SA_CONFIG, array[int8]]
	MACSEC_ATTR_OFFLOAD	nlattr[MACSEC_ATTR_OFFLOAD, array[int8]]
] [varlen]

macsec_genl_rxsc_policy$auto_macsec [
	MACSEC_RXSC_ATTR_SCI	nlattr[MACSEC_RXSC_ATTR_SCI, int64]
	MACSEC_RXSC_ATTR_ACTIVE	nlattr[MACSEC_RXSC_ATTR_ACTIVE, int8]
] [varlen]

macsec_genl_sa_policy$auto_macsec [
	MACSEC_SA_ATTR_AN	nlattr[MACSEC_SA_ATTR_AN, int8]
	MACSEC_SA_ATTR_ACTIVE	nlattr[MACSEC_SA_ATTR_ACTIVE, int8]
	MACSEC_SA_ATTR_PN	nlattr[MACSEC_SA_ATTR_PN, array[int8]]
	MACSEC_SA_ATTR_KEY	nlattr[MACSEC_SA_ATTR_KEY, array[int8, 0:128]]
	MACSEC_SA_ATTR_KEYID	nlattr[MACSEC_SA_ATTR_KEYID, array[int8, 0:16]]
	MACSEC_SA_ATTR_SSCI	nlattr[MACSEC_SA_ATTR_SSCI, int32]
	MACSEC_SA_ATTR_SALT	nlattr[MACSEC_SA_ATTR_SALT, array[int8, 0:12]]
] [varlen]

macsec_rtnl_policy$auto_macsec [
	IFLA_MACSEC_SCI			nlattr[IFLA_MACSEC_SCI, int64]
	IFLA_MACSEC_PORT		nlattr[IFLA_MACSEC_PORT, sock_port]
	IFLA_MACSEC_ICV_LEN		nlattr[IFLA_MACSEC_ICV_LEN, int8]
	IFLA_MACSEC_CIPHER_SUITE	nlattr[IFLA_MACSEC_CIPHER_SUITE, int64]
	IFLA_MACSEC_WINDOW		nlattr[IFLA_MACSEC_WINDOW, int32]
	IFLA_MACSEC_ENCODING_SA		nlattr[IFLA_MACSEC_ENCODING_SA, int8]
	IFLA_MACSEC_ENCRYPT		nlattr[IFLA_MACSEC_ENCRYPT, int8]
	IFLA_MACSEC_PROTECT		nlattr[IFLA_MACSEC_PROTECT, int8]
	IFLA_MACSEC_INC_SCI		nlattr[IFLA_MACSEC_INC_SCI, int8]
	IFLA_MACSEC_ES			nlattr[IFLA_MACSEC_ES, int8]
	IFLA_MACSEC_SCB			nlattr[IFLA_MACSEC_SCB, int8]
	IFLA_MACSEC_REPLAY_PROTECT	nlattr[IFLA_MACSEC_REPLAY_PROTECT, int8]
	IFLA_MACSEC_VALIDATION		nlattr[IFLA_MACSEC_VALIDATION, int8]
	IFLA_MACSEC_OFFLOAD		nlattr[IFLA_MACSEC_OFFLOAD, int8]
] [varlen]

macvlan_policy$auto_macvlan [
	IFLA_MACVLAN_MODE		nlattr[IFLA_MACVLAN_MODE, int32]
	IFLA_MACVLAN_FLAGS		nlattr[IFLA_MACVLAN_FLAGS, int16]
	IFLA_MACVLAN_MACADDR_MODE	nlattr[IFLA_MACVLAN_MACADDR_MODE, int32]
	IFLA_MACVLAN_MACADDR		nlattr[IFLA_MACVLAN_MACADDR, array[int8, 0:32]]
	IFLA_MACVLAN_MACADDR_DATA	nlattr[IFLA_MACVLAN_MACADDR_DATA, array[int8]]
	IFLA_MACVLAN_MACADDR_COUNT	nlattr[IFLA_MACVLAN_MACADDR_COUNT, int32]
	IFLA_MACVLAN_BC_QUEUE_LEN	nlattr[IFLA_MACVLAN_BC_QUEUE_LEN, int32]
	IFLA_MACVLAN_BC_QUEUE_LEN_USED	nlattr[IFLA_MACVLAN_BC_QUEUE_LEN_USED, array[int8]]
	IFLA_MACVLAN_BC_CUTOFF		nlattr[IFLA_MACVLAN_BC_CUTOFF, int32]
] [varlen]

mall_policy$auto_cls_matchall [
	TCA_MATCHALL_UNSPEC	nlattr[TCA_MATCHALL_UNSPEC, array[int8]]
	TCA_MATCHALL_CLASSID	nlattr[TCA_MATCHALL_CLASSID, int32]
	TCA_MATCHALL_FLAGS	nlattr[TCA_MATCHALL_FLAGS, int32]
] [varlen]

map_error_policy$auto_iwpm_msg [
	IWPM_NLA_ERR_SEQ	nlattr[IWPM_NLA_ERR_SEQ, int32]
	IWPM_NLA_ERR_CODE	nlattr[IWPM_NLA_ERR_CODE, int16]
] [varlen]

mdba_del_bulk_policy$auto_rtnetlink [
	MDBA_SET_ENTRY		nlattr[MDBA_SET_ENTRY, array[int8, 0:28]]
	MDBA_SET_ENTRY_ATTRS	nlattr[MDBA_SET_ENTRY_ATTRS, array[int8]]
] [varlen]

mdba_get_policy$auto_rtnetlink [
	MDBA_GET_ENTRY		nlattr[MDBA_GET_ENTRY, array[int8, 0:28]]
	MDBA_GET_ENTRY_ATTRS	nlattr[MDBA_GET_ENTRY_ATTRS, array[int8]]
] [varlen]

mdba_policy$auto_rtnetlink [
	MDBA_SET_ENTRY_UNSPEC	nlattr[MDBA_SET_ENTRY_UNSPEC, array[int8]]
	MDBA_SET_ENTRY		nlattr[MDBA_SET_ENTRY, array[int8, 0:28]]
	MDBA_SET_ENTRY_ATTRS	nlattr[MDBA_SET_ENTRY_ATTRS, array[int8]]
] [varlen]

meta_policy$auto_em_meta [
	TCA_EM_META_HDR	nlattr[TCA_EM_META_HDR, int64]
] [varlen]

meter_policy$auto_meter [
	OVS_METER_ATTR_ID		nlattr[OVS_METER_ATTR_ID, int32]
	OVS_METER_ATTR_KBPS		nlattr[OVS_METER_ATTR_KBPS, void]
	OVS_METER_ATTR_STATS		nlattr[OVS_METER_ATTR_STATS, array[int8, 16]]
	OVS_METER_ATTR_BANDS		nlattr[OVS_METER_ATTR_BANDS, array[int8]]
	OVS_METER_ATTR_USED		nlattr[OVS_METER_ATTR_USED, int64]
	OVS_METER_ATTR_CLEAR		nlattr[OVS_METER_ATTR_CLEAR, void]
	OVS_METER_ATTR_MAX_METERS	nlattr[OVS_METER_ATTR_MAX_METERS, int32]
	OVS_METER_ATTR_MAX_BANDS	nlattr[OVS_METER_ATTR_MAX_BANDS, int32]
] [varlen]

mirred_policy$auto_act_mirred [
	TCA_MIRRED_PARMS	nlattr[TCA_MIRRED_PARMS, array[int8, 28]]
	TCA_MIRRED_BLOCKID	nlattr[TCA_MIRRED_BLOCKID, int32]
] [varlen]

mntr_flags_policy$auto_nl80211 [
	NL80211_MNTR_FLAG_FCSFAIL	nlattr[NL80211_MNTR_FLAG_FCSFAIL, void]
	NL80211_MNTR_FLAG_PLCPFAIL	nlattr[NL80211_MNTR_FLAG_PLCPFAIL, void]
	NL80211_MNTR_FLAG_CONTROL	nlattr[NL80211_MNTR_FLAG_CONTROL, void]
	NL80211_MNTR_FLAG_OTHER_BSS	nlattr[NL80211_MNTR_FLAG_OTHER_BSS, void]
	NL80211_MNTR_FLAG_COOK_FRAMES	nlattr[NL80211_MNTR_FLAG_COOK_FRAMES, void]
	NL80211_MNTR_FLAG_ACTIVE	nlattr[NL80211_MNTR_FLAG_ACTIVE, void]
] [varlen]

mpls_iptunnel_policy$auto_mpls_iptunnel [
	MPLS_IPTUNNEL_DST	nlattr[MPLS_IPTUNNEL_DST, int32]
	MPLS_IPTUNNEL_TTL	nlattr[MPLS_IPTUNNEL_TTL, int8]
] [varlen]

mpls_policy$auto_act_mpls [
	TCA_MPLS_PARMS	nlattr[TCA_MPLS_PARMS, array[int8]]
	TCA_MPLS_PROTO	nlattr[TCA_MPLS_PROTO, int16]
	TCA_MPLS_LABEL	nlattr[TCA_MPLS_LABEL, array[int8]]
	TCA_MPLS_TC	nlattr[TCA_MPLS_TC, int8]
	TCA_MPLS_TTL	nlattr[TCA_MPLS_TTL, int8]
	TCA_MPLS_BOS	nlattr[TCA_MPLS_BOS, int8]
] [varlen]

mpls_stack_entry_policy$auto_cls_flower [
	TCA_FLOWER_KEY_MPLS_OPT_LSE_DEPTH	nlattr[TCA_FLOWER_KEY_MPLS_OPT_LSE_DEPTH, int8]
	TCA_FLOWER_KEY_MPLS_OPT_LSE_TTL		nlattr[TCA_FLOWER_KEY_MPLS_OPT_LSE_TTL, int8]
	TCA_FLOWER_KEY_MPLS_OPT_LSE_BOS		nlattr[TCA_FLOWER_KEY_MPLS_OPT_LSE_BOS, int8]
	TCA_FLOWER_KEY_MPLS_OPT_LSE_TC		nlattr[TCA_FLOWER_KEY_MPLS_OPT_LSE_TC, int8]
	TCA_FLOWER_KEY_MPLS_OPT_LSE_LABEL	nlattr[TCA_FLOWER_KEY_MPLS_OPT_LSE_LABEL, int32]
] [varlen]

mptcp_pm_add_addr_nl_policy$auto_mptcp_pm_gen [
	MPTCP_PM_ENDPOINT_ADDR	nlattr[MPTCP_PM_ENDPOINT_ADDR, array[int8, 7]]
] [varlen]

mptcp_pm_address_nl_policy$auto_mptcp_pm_gen [
	MPTCP_PM_ADDR_ATTR_FAMILY	nlattr[MPTCP_PM_ADDR_ATTR_FAMILY, int16]
	MPTCP_PM_ADDR_ATTR_ID		nlattr[MPTCP_PM_ADDR_ATTR_ID, int8]
	MPTCP_PM_ADDR_ATTR_ADDR4	nlattr[MPTCP_PM_ADDR_ATTR_ADDR4, int32]
	MPTCP_PM_ADDR_ATTR_ADDR6	nlattr[MPTCP_PM_ADDR_ATTR_ADDR6, array[int8]]
	MPTCP_PM_ADDR_ATTR_PORT		nlattr[MPTCP_PM_ADDR_ATTR_PORT, sock_port]
	MPTCP_PM_ADDR_ATTR_FLAGS	nlattr[MPTCP_PM_ADDR_ATTR_FLAGS, int32]
	MPTCP_PM_ADDR_ATTR_IF_IDX	nlattr[MPTCP_PM_ADDR_ATTR_IF_IDX, int32]
] [varlen]

mptcp_pm_announce_nl_policy$auto_mptcp_pm_gen [
	MPTCP_PM_ATTR_ADDR	nlattr[MPTCP_PM_ATTR_ADDR, array[int8, 7]]
	MPTCP_PM_ATTR_TOKEN	nlattr[MPTCP_PM_ATTR_TOKEN, int32]
] [varlen]

mptcp_pm_del_addr_nl_policy$auto_mptcp_pm_gen [
	MPTCP_PM_ENDPOINT_ADDR	nlattr[MPTCP_PM_ENDPOINT_ADDR, array[int8, 7]]
] [varlen]

mptcp_pm_flush_addrs_nl_policy$auto_mptcp_pm_gen [
	MPTCP_PM_ENDPOINT_ADDR	nlattr[MPTCP_PM_ENDPOINT_ADDR, array[int8, 7]]
] [varlen]

mptcp_pm_get_addr_nl_policy$auto_mptcp_pm_gen [
	MPTCP_PM_ATTR_ADDR	nlattr[MPTCP_PM_ATTR_ADDR, array[int8, 7]]
	MPTCP_PM_ATTR_TOKEN	nlattr[MPTCP_PM_ATTR_TOKEN, int32]
] [varlen]

mptcp_pm_get_limits_nl_policy$auto_mptcp_pm_gen [
	MPTCP_PM_ATTR_RCV_ADD_ADDRS	nlattr[MPTCP_PM_ATTR_RCV_ADD_ADDRS, int32]
	MPTCP_PM_ATTR_SUBFLOWS		nlattr[MPTCP_PM_ATTR_SUBFLOWS, int32]
] [varlen]

mptcp_pm_remove_nl_policy$auto_mptcp_pm_gen [
	MPTCP_PM_ATTR_TOKEN	nlattr[MPTCP_PM_ATTR_TOKEN, int32]
	MPTCP_PM_ATTR_LOC_ID	nlattr[MPTCP_PM_ATTR_LOC_ID, int8]
] [varlen]

mptcp_pm_set_flags_nl_policy$auto_mptcp_pm_gen [
	MPTCP_PM_ATTR_ADDR		nlattr[MPTCP_PM_ATTR_ADDR, array[int8, 7]]
	MPTCP_PM_ATTR_TOKEN		nlattr[MPTCP_PM_ATTR_TOKEN, int32]
	MPTCP_PM_ATTR_ADDR_REMOTE	nlattr[MPTCP_PM_ATTR_ADDR_REMOTE, array[int8, 7]]
] [varlen]

mptcp_pm_set_limits_nl_policy$auto_mptcp_pm_gen [
	MPTCP_PM_ATTR_RCV_ADD_ADDRS	nlattr[MPTCP_PM_ATTR_RCV_ADD_ADDRS, int32]
	MPTCP_PM_ATTR_SUBFLOWS		nlattr[MPTCP_PM_ATTR_SUBFLOWS, int32]
] [varlen]

mptcp_pm_subflow_create_nl_policy$auto_mptcp_pm_gen [
	MPTCP_PM_ATTR_ADDR		nlattr[MPTCP_PM_ATTR_ADDR, array[int8, 7]]
	MPTCP_PM_ATTR_TOKEN		nlattr[MPTCP_PM_ATTR_TOKEN, int32]
	MPTCP_PM_ATTR_ADDR_REMOTE	nlattr[MPTCP_PM_ATTR_ADDR_REMOTE, array[int8, 7]]
] [varlen]

mptcp_pm_subflow_destroy_nl_policy$auto_mptcp_pm_gen [
	MPTCP_PM_ATTR_ADDR		nlattr[MPTCP_PM_ATTR_ADDR, array[int8, 7]]
	MPTCP_PM_ATTR_TOKEN		nlattr[MPTCP_PM_ATTR_TOKEN, int32]
	MPTCP_PM_ATTR_ADDR_REMOTE	nlattr[MPTCP_PM_ATTR_ADDR_REMOTE, array[int8, 7]]
] [varlen]

mqprio_policy$auto_sch_mqprio [
	TCA_MQPRIO_MODE		nlattr[TCA_MQPRIO_MODE, int16]
	TCA_MQPRIO_SHAPER	nlattr[TCA_MQPRIO_SHAPER, int16]
	TCA_MQPRIO_MIN_RATE64	nlattr[TCA_MQPRIO_MIN_RATE64, array[int8]]
	TCA_MQPRIO_MAX_RATE64	nlattr[TCA_MQPRIO_MAX_RATE64, array[int8]]
	TCA_MQPRIO_TC_ENTRY	nlattr[TCA_MQPRIO_TC_ENTRY, array[int8]]
] [varlen]

mqprio_tc_entry_policy$auto_sch_mqprio [
	TCA_MQPRIO_TC_ENTRY_INDEX	nlattr[TCA_MQPRIO_TC_ENTRY_INDEX, int32]
	TCA_MQPRIO_TC_ENTRY_FP		nlattr[TCA_MQPRIO_TC_ENTRY_FP, int32]
] [varlen]

nat_nla_policy$auto_nf_nat_core [
	CTA_NAT_V4_MINIP	nlattr[CTA_NAT_V4_MINIP, int32]
	CTA_NAT_V4_MAXIP	nlattr[CTA_NAT_V4_MAXIP, int32]
	CTA_NAT_PROTO		nlattr[CTA_NAT_PROTO, array[int8]]
	CTA_NAT_V6_MINIP	nlattr[CTA_NAT_V6_MINIP, array[int8, 16]]
	CTA_NAT_V6_MAXIP	nlattr[CTA_NAT_V6_MAXIP, array[int8, 16]]
] [varlen]

nat_policy$auto_act_nat [
	TCA_NAT_PARMS	nlattr[TCA_NAT_PARMS, array[int8, 36]]
] [varlen]

nbd_attr_policy$auto_nbd [
	NBD_ATTR_INDEX			nlattr[NBD_ATTR_INDEX, int32]
	NBD_ATTR_SIZE_BYTES		nlattr[NBD_ATTR_SIZE_BYTES, int64]
	NBD_ATTR_BLOCK_SIZE_BYTES	nlattr[NBD_ATTR_BLOCK_SIZE_BYTES, int64]
	NBD_ATTR_TIMEOUT		nlattr[NBD_ATTR_TIMEOUT, int64]
	NBD_ATTR_SERVER_FLAGS		nlattr[NBD_ATTR_SERVER_FLAGS, int64]
	NBD_ATTR_CLIENT_FLAGS		nlattr[NBD_ATTR_CLIENT_FLAGS, int64]
	NBD_ATTR_SOCKETS		nlattr[NBD_ATTR_SOCKETS, array[int8]]
	NBD_ATTR_DEAD_CONN_TIMEOUT	nlattr[NBD_ATTR_DEAD_CONN_TIMEOUT, int64]
	NBD_ATTR_DEVICE_LIST		nlattr[NBD_ATTR_DEVICE_LIST, array[int8]]
	NBD_ATTR_BACKEND_IDENTIFIER	nlattr[NBD_ATTR_BACKEND_IDENTIFIER, stringnoz]
] [varlen]

nbd_device_policy$auto_nbd [
	NBD_DEVICE_INDEX	nlattr[NBD_DEVICE_INDEX, int32]
	NBD_DEVICE_CONNECTED	nlattr[NBD_DEVICE_CONNECTED, int8]
] [varlen]

nbd_sock_policy$auto_nbd [
	NBD_SOCK_FD	nlattr[NBD_SOCK_FD, fd]
] [varlen]

ncsi_genl_policy$auto_ncsi_netlink [
	NCSI_ATTR_IFINDEX	nlattr[NCSI_ATTR_IFINDEX, ifindex]
	NCSI_ATTR_PACKAGE_LIST	nlattr[NCSI_ATTR_PACKAGE_LIST, array[int8]]
	NCSI_ATTR_PACKAGE_ID	nlattr[NCSI_ATTR_PACKAGE_ID, int32]
	NCSI_ATTR_CHANNEL_ID	nlattr[NCSI_ATTR_CHANNEL_ID, int32]
	NCSI_ATTR_DATA		nlattr[NCSI_ATTR_DATA, array[int8, 0:2048]]
	NCSI_ATTR_MULTI_FLAG	nlattr[NCSI_ATTR_MULTI_FLAG, void]
	NCSI_ATTR_PACKAGE_MASK	nlattr[NCSI_ATTR_PACKAGE_MASK, int32]
	NCSI_ATTR_CHANNEL_MASK	nlattr[NCSI_ATTR_CHANNEL_MASK, int32]
] [varlen]

nda_policy$auto_neighbour [
	NDA_UNSPEC		nlattr[NDA_UNSPEC, array[int8]]
	NDA_DST			nlattr[NDA_DST, array[int8, 0:32]]
	NDA_LLADDR		nlattr[NDA_LLADDR, array[int8, 0:32]]
	NDA_CACHEINFO		nlattr[NDA_CACHEINFO, array[int8, 16]]
	NDA_PROBES		nlattr[NDA_PROBES, int32]
	NDA_VLAN		nlattr[NDA_VLAN, int16]
	NDA_PORT		nlattr[NDA_PORT, sock_port]
	NDA_VNI			nlattr[NDA_VNI, int32]
	NDA_IFINDEX		nlattr[NDA_IFINDEX, ifindex]
	NDA_MASTER		nlattr[NDA_MASTER, int32]
	NDA_PROTOCOL		nlattr[NDA_PROTOCOL, int8]
	NDA_NH_ID		nlattr[NDA_NH_ID, int32]
	NDA_FDB_EXT_ATTRS	nlattr[NDA_FDB_EXT_ATTRS, array[int8]]
	NDA_FLAGS_EXT		nlattr[NDA_FLAGS_EXT, int32]
] [varlen]

net_dm_nl_policy$auto_drop_monitor [
	NET_DM_ATTR_UNSPEC	nlattr[NET_DM_ATTR_UNSPEC, array[int8]]
	NET_DM_ATTR_ALERT_MODE	nlattr[NET_DM_ATTR_ALERT_MODE, int8]
	NET_DM_ATTR_TRUNC_LEN	nlattr[NET_DM_ATTR_TRUNC_LEN, int32]
	NET_DM_ATTR_QUEUE_LEN	nlattr[NET_DM_ATTR_QUEUE_LEN, int32]
	NET_DM_ATTR_SW_DROPS	nlattr[NET_DM_ATTR_SW_DROPS, void]
	NET_DM_ATTR_HW_DROPS	nlattr[NET_DM_ATTR_HW_DROPS, void]
] [varlen]

netdev_dev_get_nl_policy$auto_netdev_genl_gen [
	NETDEV_A_DEV_IFINDEX	nlattr[NETDEV_A_DEV_IFINDEX, ifindex]
] [varlen]

netdev_napi_get_do_nl_policy$auto_netdev_genl_gen [
	NETDEV_A_NAPI_ID	nlattr[NETDEV_A_NAPI_ID, int32]
] [varlen]

netdev_napi_get_dump_nl_policy$auto_netdev_genl_gen [
	NETDEV_A_NAPI_IFINDEX	nlattr[NETDEV_A_NAPI_IFINDEX, ifindex]
] [varlen]

netdev_page_pool_get_nl_policy$auto_netdev_genl_gen [
	NETDEV_A_PAGE_POOL_ID	nlattr[NETDEV_A_PAGE_POOL_ID, int64]
] [varlen]

netdev_page_pool_info_nl_policy$auto_netdev_genl_gen [
	NETDEV_A_PAGE_POOL_ID		nlattr[NETDEV_A_PAGE_POOL_ID, int64]
	NETDEV_A_PAGE_POOL_IFINDEX	nlattr[NETDEV_A_PAGE_POOL_IFINDEX, ifindex]
] [varlen]

netdev_qstats_get_nl_policy$auto_netdev_genl_gen [
	NETDEV_A_QSTATS_IFINDEX	nlattr[NETDEV_A_QSTATS_IFINDEX, ifindex]
	NETDEV_A_QSTATS_SCOPE	nlattr[NETDEV_A_QSTATS_SCOPE, int64]
] [varlen]

netdev_queue_get_do_nl_policy$auto_netdev_genl_gen [
	NETDEV_A_QUEUE_ID	nlattr[NETDEV_A_QUEUE_ID, int32]
	NETDEV_A_QUEUE_IFINDEX	nlattr[NETDEV_A_QUEUE_IFINDEX, ifindex]
	NETDEV_A_QUEUE_TYPE	nlattr[NETDEV_A_QUEUE_TYPE, int32]
] [varlen]

netdev_queue_get_dump_nl_policy$auto_netdev_genl_gen [
	NETDEV_A_QUEUE_IFINDEX	nlattr[NETDEV_A_QUEUE_IFINDEX, ifindex]
] [varlen]

netem_policy$auto_sch_netem [
	TCA_NETEM_CORR		nlattr[TCA_NETEM_CORR, array[int8, 12]]
	TCA_NETEM_REORDER	nlattr[TCA_NETEM_REORDER, int64]
	TCA_NETEM_CORRUPT	nlattr[TCA_NETEM_CORRUPT, int64]
	TCA_NETEM_LOSS		nlattr[TCA_NETEM_LOSS, array[int8]]
	TCA_NETEM_RATE		nlattr[TCA_NETEM_RATE, array[int8, 16]]
	TCA_NETEM_ECN		nlattr[TCA_NETEM_ECN, int32]
	TCA_NETEM_RATE64	nlattr[TCA_NETEM_RATE64, int64]
	TCA_NETEM_LATENCY64	nlattr[TCA_NETEM_LATENCY64, int64]
	TCA_NETEM_JITTER64	nlattr[TCA_NETEM_JITTER64, int64]
	TCA_NETEM_SLOT		nlattr[TCA_NETEM_SLOT, array[int8, 40]]
	TCA_NETEM_PRNG_SEED	nlattr[TCA_NETEM_PRNG_SEED, int64]
] [varlen]

netlbl_cipsov4_genl_policy$auto_netlabel_cipso_v4 [
	NLBL_CIPSOV4_A_DOI		nlattr[NLBL_CIPSOV4_A_DOI, int32]
	NLBL_CIPSOV4_A_MTYPE		nlattr[NLBL_CIPSOV4_A_MTYPE, int32]
	NLBL_CIPSOV4_A_TAG		nlattr[NLBL_CIPSOV4_A_TAG, int8]
	NLBL_CIPSOV4_A_TAGLST		nlattr[NLBL_CIPSOV4_A_TAGLST, array[int8]]
	NLBL_CIPSOV4_A_MLSLVLLOC	nlattr[NLBL_CIPSOV4_A_MLSLVLLOC, int32]
	NLBL_CIPSOV4_A_MLSLVLREM	nlattr[NLBL_CIPSOV4_A_MLSLVLREM, int32]
	NLBL_CIPSOV4_A_MLSLVL		nlattr[NLBL_CIPSOV4_A_MLSLVL, array[int8]]
	NLBL_CIPSOV4_A_MLSLVLLST	nlattr[NLBL_CIPSOV4_A_MLSLVLLST, array[int8]]
	NLBL_CIPSOV4_A_MLSCATLOC	nlattr[NLBL_CIPSOV4_A_MLSCATLOC, int32]
	NLBL_CIPSOV4_A_MLSCATREM	nlattr[NLBL_CIPSOV4_A_MLSCATREM, int32]
	NLBL_CIPSOV4_A_MLSCAT		nlattr[NLBL_CIPSOV4_A_MLSCAT, array[int8]]
	NLBL_CIPSOV4_A_MLSCATLST	nlattr[NLBL_CIPSOV4_A_MLSCATLST, array[int8]]
] [varlen]

netlbl_mgmt_genl_policy$auto_netlabel_mgmt [
	NLBL_MGMT_A_DOMAIN	nlattr[NLBL_MGMT_A_DOMAIN, string]
	NLBL_MGMT_A_PROTOCOL	nlattr[NLBL_MGMT_A_PROTOCOL, int32]
	NLBL_MGMT_A_VERSION	nlattr[NLBL_MGMT_A_VERSION, int32]
	NLBL_MGMT_A_CV4DOI	nlattr[NLBL_MGMT_A_CV4DOI, int32]
	NLBL_MGMT_A_FAMILY	nlattr[NLBL_MGMT_A_FAMILY, int16]
	NLBL_MGMT_A_CLPDOI	nlattr[NLBL_MGMT_A_CLPDOI, int32]
] [varlen]

netlbl_unlabel_genl_policy$auto_netlabel_unlabeled [
	NLBL_UNLABEL_A_ACPTFLG	nlattr[NLBL_UNLABEL_A_ACPTFLG, int8]
	NLBL_UNLABEL_A_IPV6ADDR	nlattr[NLBL_UNLABEL_A_IPV6ADDR, ipv6_addr]
	NLBL_UNLABEL_A_IPV6MASK	nlattr[NLBL_UNLABEL_A_IPV6MASK, ipv6_addr]
	NLBL_UNLABEL_A_IPV4ADDR	nlattr[NLBL_UNLABEL_A_IPV4ADDR, ipv4_addr]
	NLBL_UNLABEL_A_IPV4MASK	nlattr[NLBL_UNLABEL_A_IPV4MASK, ipv4_addr]
	NLBL_UNLABEL_A_IFACE	nlattr[NLBL_UNLABEL_A_IFACE, string]
	NLBL_UNLABEL_A_SECCTX	nlattr[NLBL_UNLABEL_A_SECCTX, array[int8]]
] [varlen]

nf_ct_port_nla_policy$auto_nf_conntrack_l4proto [
	CTA_PROTO_SRC_PORT	nlattr[CTA_PROTO_SRC_PORT, sock_port]
	CTA_PROTO_DST_PORT	nlattr[CTA_PROTO_DST_PORT, sock_port]
] [varlen]

nfc_genl_policy$auto_netlink [
	NFC_ATTR_DEVICE_INDEX	nlattr[NFC_ATTR_DEVICE_INDEX, int32]
	NFC_ATTR_DEVICE_NAME	nlattr[NFC_ATTR_DEVICE_NAME, stringnoz]
	NFC_ATTR_PROTOCOLS	nlattr[NFC_ATTR_PROTOCOLS, int32]
	NFC_ATTR_TARGET_INDEX	nlattr[NFC_ATTR_TARGET_INDEX, int32]
	NFC_ATTR_COMM_MODE	nlattr[NFC_ATTR_COMM_MODE, int8]
	NFC_ATTR_RF_MODE	nlattr[NFC_ATTR_RF_MODE, int8]
	NFC_ATTR_DEVICE_POWERED	nlattr[NFC_ATTR_DEVICE_POWERED, int8]
	NFC_ATTR_IM_PROTOCOLS	nlattr[NFC_ATTR_IM_PROTOCOLS, int32]
	NFC_ATTR_TM_PROTOCOLS	nlattr[NFC_ATTR_TM_PROTOCOLS, int32]
	NFC_ATTR_LLC_PARAM_LTO	nlattr[NFC_ATTR_LLC_PARAM_LTO, int8]
	NFC_ATTR_LLC_PARAM_RW	nlattr[NFC_ATTR_LLC_PARAM_RW, int8]
	NFC_ATTR_LLC_PARAM_MIUX	nlattr[NFC_ATTR_LLC_PARAM_MIUX, int16]
	NFC_ATTR_LLC_SDP	nlattr[NFC_ATTR_LLC_SDP, array[int8]]
	NFC_ATTR_FIRMWARE_NAME	nlattr[NFC_ATTR_FIRMWARE_NAME, stringnoz]
	NFC_ATTR_SE_INDEX	nlattr[NFC_ATTR_SE_INDEX, int32]
	NFC_ATTR_SE_APDU	nlattr[NFC_ATTR_SE_APDU, array[int8]]
	NFC_ATTR_VENDOR_ID	nlattr[NFC_ATTR_VENDOR_ID, int32]
	NFC_ATTR_VENDOR_SUBCMD	nlattr[NFC_ATTR_VENDOR_SUBCMD, int32]
	NFC_ATTR_VENDOR_DATA	nlattr[NFC_ATTR_VENDOR_DATA, array[int8]]
] [varlen]

nfc_sdp_genl_policy$auto_netlink [
	NFC_SDP_ATTR_URI	nlattr[NFC_SDP_ATTR_URI, stringnoz]
	NFC_SDP_ATTR_SAP	nlattr[NFC_SDP_ATTR_SAP, int8]
] [varlen]

nfnl_acct_policy$auto_nfnetlink_acct [
	NFACCT_NAME	nlattr[NFACCT_NAME, string]
	NFACCT_PKTS	nlattr[NFACCT_PKTS, int64]
	NFACCT_BYTES	nlattr[NFACCT_BYTES, int64]
	NFACCT_FLAGS	nlattr[NFACCT_FLAGS, int32]
	NFACCT_QUOTA	nlattr[NFACCT_QUOTA, int64]
	NFACCT_FILTER	nlattr[NFACCT_FILTER, array[int8]]
] [varlen]

nfnl_batch_policy$auto_nfnetlink [
	NFNL_BATCH_GENID	nlattr[NFNL_BATCH_GENID, int32]
] [varlen]

nfnl_compat_policy_get$auto_nft_compat [
	NFTA_COMPAT_NAME	nlattr[NFTA_COMPAT_NAME, string]
	NFTA_COMPAT_REV		nlattr[NFTA_COMPAT_REV, int32be]
	NFTA_COMPAT_TYPE	nlattr[NFTA_COMPAT_TYPE, int32]
] [varlen]

nfnl_cthelper_expect_pol$auto_nfnetlink_cthelper [
	NFCTH_POLICY_NAME		nlattr[NFCTH_POLICY_NAME, string]
	NFCTH_POLICY_EXPECT_MAX		nlattr[NFCTH_POLICY_EXPECT_MAX, int32]
	NFCTH_POLICY_EXPECT_TIMEOUT	nlattr[NFCTH_POLICY_EXPECT_TIMEOUT, int32]
] [varlen]

nfnl_cthelper_expect_policy_set$auto_nfnetlink_cthelper [
	NFCTH_POLICY_SET_NUM	nlattr[NFCTH_POLICY_SET_NUM, int32]
] [varlen]

nfnl_cthelper_policy$auto_nfnetlink_cthelper [
	NFCTH_NAME		nlattr[NFCTH_NAME, string]
	NFCTH_QUEUE_NUM		nlattr[NFCTH_QUEUE_NUM, int32]
	NFCTH_PRIV_DATA_LEN	nlattr[NFCTH_PRIV_DATA_LEN, int32]
	NFCTH_STATUS		nlattr[NFCTH_STATUS, int32]
] [varlen]

nfnl_cthelper_tuple_pol$auto_nfnetlink_cthelper [
	NFCTH_TUPLE_L3PROTONUM	nlattr[NFCTH_TUPLE_L3PROTONUM, int16]
	NFCTH_TUPLE_L4PROTONUM	nlattr[NFCTH_TUPLE_L4PROTONUM, int8]
] [varlen]

nfnl_osf_policy$auto_nfnetlink_osf [
	OSF_ATTR_FINGER	nlattr[OSF_ATTR_FINGER, array[int8, 592]]
] [varlen]

nfqa_cfg_policy$auto_nfnetlink_queue [
	NFQA_CFG_CMD		nlattr[NFQA_CFG_CMD, int32]
	NFQA_CFG_PARAMS		nlattr[NFQA_CFG_PARAMS, array[int8, 5]]
	NFQA_CFG_QUEUE_MAXLEN	nlattr[NFQA_CFG_QUEUE_MAXLEN, int32]
	NFQA_CFG_MASK		nlattr[NFQA_CFG_MASK, int32]
	NFQA_CFG_FLAGS		nlattr[NFQA_CFG_FLAGS, int32]
] [varlen]

nfqa_verdict_batch_policy$auto_nfnetlink_queue [
	NFQA_VERDICT_HDR	nlattr[NFQA_VERDICT_HDR, int64]
	NFQA_MARK		nlattr[NFQA_MARK, int32]
	NFQA_PRIORITY		nlattr[NFQA_PRIORITY, int32]
] [varlen]

nfqa_verdict_policy$auto_nfnetlink_queue [
	NFQA_VERDICT_HDR	nlattr[NFQA_VERDICT_HDR, int64]
	NFQA_MARK		nlattr[NFQA_MARK, int32]
	NFQA_PAYLOAD		nlattr[NFQA_PAYLOAD, array[int8]]
	NFQA_CT			nlattr[NFQA_CT, array[int8]]
	NFQA_EXP		nlattr[NFQA_EXP, array[int8]]
	NFQA_VLAN		nlattr[NFQA_VLAN, array[int8]]
	NFQA_PRIORITY		nlattr[NFQA_PRIORITY, int32]
] [varlen]

nfqa_vlan_policy$auto_nfnetlink_queue [
	NFQA_VLAN_PROTO	nlattr[NFQA_VLAN_PROTO, int16]
	NFQA_VLAN_TCI	nlattr[NFQA_VLAN_TCI, int16]
] [varlen]

nfsd_listener_set_nl_policy$auto_netlink [
	NFSD_A_SERVER_SOCK_ADDR	nlattr[NFSD_A_SERVER_SOCK_ADDR, int16]
] [varlen]

nfsd_pool_mode_set_nl_policy$auto_netlink [
	NFSD_A_POOL_MODE_MODE	nlattr[NFSD_A_POOL_MODE_MODE, string]
] [varlen]

nfsd_sock_nl_policy$auto_netlink [
	NFSD_A_SOCK_ADDR		nlattr[NFSD_A_SOCK_ADDR, array[int8]]
	NFSD_A_SOCK_TRANSPORT_NAME	nlattr[NFSD_A_SOCK_TRANSPORT_NAME, string]
] [varlen]

nfsd_threads_set_nl_policy$auto_netlink [
	NFSD_A_SERVER_THREADS	nlattr[NFSD_A_SERVER_THREADS, int32]
	NFSD_A_SERVER_GRACETIME	nlattr[NFSD_A_SERVER_GRACETIME, int32]
	NFSD_A_SERVER_LEASETIME	nlattr[NFSD_A_SERVER_LEASETIME, int32]
	NFSD_A_SERVER_SCOPE	nlattr[NFSD_A_SERVER_SCOPE, string]
] [varlen]

nfsd_version_nl_policy$auto_netlink [
	NFSD_A_VERSION_MAJOR	nlattr[NFSD_A_VERSION_MAJOR, int32]
	NFSD_A_VERSION_MINOR	nlattr[NFSD_A_VERSION_MINOR, int32]
	NFSD_A_VERSION_ENABLED	nlattr[NFSD_A_VERSION_ENABLED, void]
] [varlen]

nfsd_version_set_nl_policy$auto_netlink [
	NFSD_A_SERVER_PROTO_VERSION	nlattr[NFSD_A_SERVER_PROTO_VERSION, array[int8, 3]]
] [varlen]

nft_bitwise_policy$auto_nft_bitwise [
	NFTA_BITWISE_SREG	nlattr[NFTA_BITWISE_SREG, int32]
	NFTA_BITWISE_DREG	nlattr[NFTA_BITWISE_DREG, int32]
	NFTA_BITWISE_LEN	nlattr[NFTA_BITWISE_LEN, int32]
	NFTA_BITWISE_MASK	nlattr[NFTA_BITWISE_MASK, array[int8]]
	NFTA_BITWISE_XOR	nlattr[NFTA_BITWISE_XOR, array[int8]]
	NFTA_BITWISE_OP		nlattr[NFTA_BITWISE_OP, int32be]
	NFTA_BITWISE_DATA	nlattr[NFTA_BITWISE_DATA, array[int8]]
] [varlen]

nft_byteorder_policy$auto_nft_byteorder [
	NFTA_BYTEORDER_SREG	nlattr[NFTA_BYTEORDER_SREG, int32]
	NFTA_BYTEORDER_DREG	nlattr[NFTA_BYTEORDER_DREG, int32]
	NFTA_BYTEORDER_OP	nlattr[NFTA_BYTEORDER_OP, int32be]
	NFTA_BYTEORDER_LEN	nlattr[NFTA_BYTEORDER_LEN, int32be]
	NFTA_BYTEORDER_SIZE	nlattr[NFTA_BYTEORDER_SIZE, int32be]
] [varlen]

nft_chain_policy$auto_nf_tables_api [
	NFTA_CHAIN_TABLE	nlattr[NFTA_CHAIN_TABLE, stringnoz]
	NFTA_CHAIN_HANDLE	nlattr[NFTA_CHAIN_HANDLE, int64]
	NFTA_CHAIN_NAME		nlattr[NFTA_CHAIN_NAME, stringnoz]
	NFTA_CHAIN_HOOK		nlattr[NFTA_CHAIN_HOOK, array[int8]]
	NFTA_CHAIN_POLICY	nlattr[NFTA_CHAIN_POLICY, int32]
	NFTA_CHAIN_TYPE		nlattr[NFTA_CHAIN_TYPE, stringnoz]
	NFTA_CHAIN_COUNTERS	nlattr[NFTA_CHAIN_COUNTERS, array[int8]]
	NFTA_CHAIN_FLAGS	nlattr[NFTA_CHAIN_FLAGS, int32]
	NFTA_CHAIN_ID		nlattr[NFTA_CHAIN_ID, int32]
	NFTA_CHAIN_USERDATA	nlattr[NFTA_CHAIN_USERDATA, array[int8, 0:256]]
] [varlen]

nft_cmp_policy$auto_nft_cmp [
	NFTA_CMP_SREG	nlattr[NFTA_CMP_SREG, int32]
	NFTA_CMP_OP	nlattr[NFTA_CMP_OP, int32]
	NFTA_CMP_DATA	nlattr[NFTA_CMP_DATA, array[int8]]
] [varlen]

nft_concat_policy$auto_nf_tables_api [
	NFTA_SET_FIELD_LEN	nlattr[NFTA_SET_FIELD_LEN, int32]
] [varlen]

nft_connlimit_policy$auto_nft_connlimit [
	NFTA_CONNLIMIT_COUNT	nlattr[NFTA_CONNLIMIT_COUNT, int32]
	NFTA_CONNLIMIT_FLAGS	nlattr[NFTA_CONNLIMIT_FLAGS, int32]
] [varlen]

nft_counter_policy$auto_nf_tables_api [
	NFTA_COUNTER_BYTES	nlattr[NFTA_COUNTER_BYTES, int64]
	NFTA_COUNTER_PACKETS	nlattr[NFTA_COUNTER_PACKETS, int64]
] [varlen]

nft_counter_policy$auto_nft_counter [
	NFTA_COUNTER_BYTES	nlattr[NFTA_COUNTER_BYTES, int64]
	NFTA_COUNTER_PACKETS	nlattr[NFTA_COUNTER_PACKETS, int64]
] [varlen]

nft_ct_expect_policy$auto_nft_ct [
	NFTA_CT_EXPECT_L3PROTO	nlattr[NFTA_CT_EXPECT_L3PROTO, int16]
	NFTA_CT_EXPECT_L4PROTO	nlattr[NFTA_CT_EXPECT_L4PROTO, int8]
	NFTA_CT_EXPECT_DPORT	nlattr[NFTA_CT_EXPECT_DPORT, sock_port]
	NFTA_CT_EXPECT_TIMEOUT	nlattr[NFTA_CT_EXPECT_TIMEOUT, int32]
	NFTA_CT_EXPECT_SIZE	nlattr[NFTA_CT_EXPECT_SIZE, int8]
] [varlen]

nft_ct_helper_policy$auto_nft_ct [
	NFTA_CT_HELPER_NAME	nlattr[NFTA_CT_HELPER_NAME, stringnoz]
	NFTA_CT_HELPER_L3PROTO	nlattr[NFTA_CT_HELPER_L3PROTO, int16]
	NFTA_CT_HELPER_L4PROTO	nlattr[NFTA_CT_HELPER_L4PROTO, int8]
] [varlen]

nft_ct_policy$auto_nft_ct [
	NFTA_CT_DREG		nlattr[NFTA_CT_DREG, int32]
	NFTA_CT_KEY		nlattr[NFTA_CT_KEY, int32be]
	NFTA_CT_DIRECTION	nlattr[NFTA_CT_DIRECTION, int8]
	NFTA_CT_SREG		nlattr[NFTA_CT_SREG, int32]
] [varlen]

nft_ct_timeout_policy$auto_nft_ct [
	NFTA_CT_TIMEOUT_L3PROTO	nlattr[NFTA_CT_TIMEOUT_L3PROTO, int16]
	NFTA_CT_TIMEOUT_L4PROTO	nlattr[NFTA_CT_TIMEOUT_L4PROTO, int8]
	NFTA_CT_TIMEOUT_DATA	nlattr[NFTA_CT_TIMEOUT_DATA, array[int8]]
] [varlen]

nft_data_policy$auto_nf_tables_api [
	NFTA_DATA_VALUE		nlattr[NFTA_DATA_VALUE, array[int8]]
	NFTA_DATA_VERDICT	nlattr[NFTA_DATA_VERDICT, array[int8]]
] [varlen]

nft_dup_ipv4_policy$auto_nft_dup_ipv4 [
	NFTA_DUP_SREG_ADDR	nlattr[NFTA_DUP_SREG_ADDR, int32]
	NFTA_DUP_SREG_DEV	nlattr[NFTA_DUP_SREG_DEV, int32]
] [varlen]

nft_dup_ipv6_policy$auto_nft_dup_ipv6 [
	NFTA_DUP_SREG_ADDR	nlattr[NFTA_DUP_SREG_ADDR, int32]
	NFTA_DUP_SREG_DEV	nlattr[NFTA_DUP_SREG_DEV, int32]
] [varlen]

nft_dup_netdev_policy$auto_nft_dup_netdev [
	NFTA_DUP_SREG_DEV	nlattr[NFTA_DUP_SREG_DEV, int32]
] [varlen]

nft_dynset_policy$auto_nft_dynset [
	NFTA_DYNSET_SET_NAME	nlattr[NFTA_DYNSET_SET_NAME, stringnoz]
	NFTA_DYNSET_SET_ID	nlattr[NFTA_DYNSET_SET_ID, int32]
	NFTA_DYNSET_OP		nlattr[NFTA_DYNSET_OP, int32be]
	NFTA_DYNSET_SREG_KEY	nlattr[NFTA_DYNSET_SREG_KEY, int32]
	NFTA_DYNSET_SREG_DATA	nlattr[NFTA_DYNSET_SREG_DATA, int32]
	NFTA_DYNSET_TIMEOUT	nlattr[NFTA_DYNSET_TIMEOUT, int64]
	NFTA_DYNSET_EXPR	nlattr[NFTA_DYNSET_EXPR, array[int8]]
	NFTA_DYNSET_FLAGS	nlattr[NFTA_DYNSET_FLAGS, int32]
	NFTA_DYNSET_EXPRESSIONS	nlattr[NFTA_DYNSET_EXPRESSIONS, array[int8]]
] [varlen]

nft_expr_policy$auto_nf_tables_api [
	NFTA_EXPR_NAME	nlattr[NFTA_EXPR_NAME, stringnoz]
	NFTA_EXPR_DATA	nlattr[NFTA_EXPR_DATA, array[int8]]
] [varlen]

nft_exthdr_policy$auto_nft_exthdr [
	NFTA_EXTHDR_DREG	nlattr[NFTA_EXTHDR_DREG, int32]
	NFTA_EXTHDR_TYPE	nlattr[NFTA_EXTHDR_TYPE, int8]
	NFTA_EXTHDR_OFFSET	nlattr[NFTA_EXTHDR_OFFSET, int32]
	NFTA_EXTHDR_LEN		nlattr[NFTA_EXTHDR_LEN, int32be]
	NFTA_EXTHDR_FLAGS	nlattr[NFTA_EXTHDR_FLAGS, int32]
	NFTA_EXTHDR_OP		nlattr[NFTA_EXTHDR_OP, int32be]
	NFTA_EXTHDR_SREG	nlattr[NFTA_EXTHDR_SREG, int32]
] [varlen]

nft_fib_policy$auto_nft_fib [
	NFTA_FIB_DREG	nlattr[NFTA_FIB_DREG, int32]
	NFTA_FIB_RESULT	nlattr[NFTA_FIB_RESULT, int32]
	NFTA_FIB_FLAGS	nlattr[NFTA_FIB_FLAGS, int32be]
] [varlen]

nft_flow_offload_policy$auto_nft_flow_offload [
	NFTA_FLOW_TABLE_NAME	nlattr[NFTA_FLOW_TABLE_NAME, stringnoz]
] [varlen]

nft_flowtable_hook_policy$auto_nf_tables_api [
	NFTA_FLOWTABLE_HOOK_NUM		nlattr[NFTA_FLOWTABLE_HOOK_NUM, int32]
	NFTA_FLOWTABLE_HOOK_PRIORITY	nlattr[NFTA_FLOWTABLE_HOOK_PRIORITY, int32]
	NFTA_FLOWTABLE_HOOK_DEVS	nlattr[NFTA_FLOWTABLE_HOOK_DEVS, array[int8]]
] [varlen]

nft_flowtable_policy$auto_nf_tables_api [
	NFTA_FLOWTABLE_TABLE	nlattr[NFTA_FLOWTABLE_TABLE, stringnoz]
	NFTA_FLOWTABLE_NAME	nlattr[NFTA_FLOWTABLE_NAME, stringnoz]
	NFTA_FLOWTABLE_HOOK	nlattr[NFTA_FLOWTABLE_HOOK, array[int8]]
	NFTA_FLOWTABLE_HANDLE	nlattr[NFTA_FLOWTABLE_HANDLE, int64]
	NFTA_FLOWTABLE_FLAGS	nlattr[NFTA_FLOWTABLE_FLAGS, int32]
] [varlen]

nft_fwd_netdev_policy$auto_nft_fwd_netdev [
	NFTA_FWD_SREG_DEV	nlattr[NFTA_FWD_SREG_DEV, int32]
	NFTA_FWD_SREG_ADDR	nlattr[NFTA_FWD_SREG_ADDR, int32]
	NFTA_FWD_NFPROTO	nlattr[NFTA_FWD_NFPROTO, int32be]
] [varlen]

nft_hash_policy$auto_nft_hash [
	NFTA_HASH_SREG		nlattr[NFTA_HASH_SREG, int32]
	NFTA_HASH_DREG		nlattr[NFTA_HASH_DREG, int32]
	NFTA_HASH_LEN		nlattr[NFTA_HASH_LEN, int32be]
	NFTA_HASH_MODULUS	nlattr[NFTA_HASH_MODULUS, int32]
	NFTA_HASH_SEED		nlattr[NFTA_HASH_SEED, int32]
	NFTA_HASH_OFFSET	nlattr[NFTA_HASH_OFFSET, int32]
	NFTA_HASH_TYPE		nlattr[NFTA_HASH_TYPE, int32]
] [varlen]

nft_hook_policy$auto_nf_tables_api [
	NFTA_HOOK_HOOKNUM	nlattr[NFTA_HOOK_HOOKNUM, int32]
	NFTA_HOOK_PRIORITY	nlattr[NFTA_HOOK_PRIORITY, int32]
	NFTA_HOOK_DEV		nlattr[NFTA_HOOK_DEV, stringnoz]
] [varlen]

nft_immediate_policy$auto_nft_immediate [
	NFTA_IMMEDIATE_DREG	nlattr[NFTA_IMMEDIATE_DREG, int32]
	NFTA_IMMEDIATE_DATA	nlattr[NFTA_IMMEDIATE_DATA, array[int8]]
] [varlen]

nft_inner_policy$auto_nft_inner [
	NFTA_INNER_NUM		nlattr[NFTA_INNER_NUM, int32]
	NFTA_INNER_TYPE		nlattr[NFTA_INNER_TYPE, int32]
	NFTA_INNER_FLAGS	nlattr[NFTA_INNER_FLAGS, int32]
	NFTA_INNER_HDRSIZE	nlattr[NFTA_INNER_HDRSIZE, int32]
	NFTA_INNER_EXPR		nlattr[NFTA_INNER_EXPR, array[int8]]
] [varlen]

nft_last_policy$auto_nft_last [
	NFTA_LAST_SET	nlattr[NFTA_LAST_SET, int32]
	NFTA_LAST_MSECS	nlattr[NFTA_LAST_MSECS, int64]
] [varlen]

nft_limit_policy$auto_nft_limit [
	NFTA_LIMIT_RATE		nlattr[NFTA_LIMIT_RATE, int64]
	NFTA_LIMIT_UNIT		nlattr[NFTA_LIMIT_UNIT, int64]
	NFTA_LIMIT_BURST	nlattr[NFTA_LIMIT_BURST, int32]
	NFTA_LIMIT_TYPE		nlattr[NFTA_LIMIT_TYPE, int32]
	NFTA_LIMIT_FLAGS	nlattr[NFTA_LIMIT_FLAGS, int32]
] [varlen]

nft_log_policy$auto_nft_log [
	NFTA_LOG_GROUP		nlattr[NFTA_LOG_GROUP, int16]
	NFTA_LOG_PREFIX		nlattr[NFTA_LOG_PREFIX, stringnoz]
	NFTA_LOG_SNAPLEN	nlattr[NFTA_LOG_SNAPLEN, int32]
	NFTA_LOG_QTHRESHOLD	nlattr[NFTA_LOG_QTHRESHOLD, int16]
	NFTA_LOG_LEVEL		nlattr[NFTA_LOG_LEVEL, int32]
	NFTA_LOG_FLAGS		nlattr[NFTA_LOG_FLAGS, int32]
] [varlen]

nft_lookup_policy$auto_nft_lookup [
	NFTA_LOOKUP_SET		nlattr[NFTA_LOOKUP_SET, stringnoz]
	NFTA_LOOKUP_SREG	nlattr[NFTA_LOOKUP_SREG, int32]
	NFTA_LOOKUP_DREG	nlattr[NFTA_LOOKUP_DREG, int32]
	NFTA_LOOKUP_SET_ID	nlattr[NFTA_LOOKUP_SET_ID, int32]
	NFTA_LOOKUP_FLAGS	nlattr[NFTA_LOOKUP_FLAGS, int32be]
] [varlen]

nft_masq_policy$auto_nft_masq [
	NFTA_MASQ_FLAGS		nlattr[NFTA_MASQ_FLAGS, int32be]
	NFTA_MASQ_REG_PROTO_MIN	nlattr[NFTA_MASQ_REG_PROTO_MIN, int32]
	NFTA_MASQ_REG_PROTO_MAX	nlattr[NFTA_MASQ_REG_PROTO_MAX, int32]
] [varlen]

nft_match_policy$auto_nft_compat [
	NFTA_MATCH_NAME	nlattr[NFTA_MATCH_NAME, string]
	NFTA_MATCH_REV	nlattr[NFTA_MATCH_REV, int32be]
	NFTA_MATCH_INFO	nlattr[NFTA_MATCH_INFO, array[int8]]
] [varlen]

nft_meta_policy$auto_nft_meta [
	NFTA_META_DREG	nlattr[NFTA_META_DREG, int32]
	NFTA_META_KEY	nlattr[NFTA_META_KEY, int32be]
	NFTA_META_SREG	nlattr[NFTA_META_SREG, int32]
] [varlen]

nft_nat_policy$auto_nft_nat [
	NFTA_NAT_TYPE		nlattr[NFTA_NAT_TYPE, int32]
	NFTA_NAT_FAMILY		nlattr[NFTA_NAT_FAMILY, int32]
	NFTA_NAT_REG_ADDR_MIN	nlattr[NFTA_NAT_REG_ADDR_MIN, int32]
	NFTA_NAT_REG_ADDR_MAX	nlattr[NFTA_NAT_REG_ADDR_MAX, int32]
	NFTA_NAT_REG_PROTO_MIN	nlattr[NFTA_NAT_REG_PROTO_MIN, int32]
	NFTA_NAT_REG_PROTO_MAX	nlattr[NFTA_NAT_REG_PROTO_MAX, int32]
	NFTA_NAT_FLAGS		nlattr[NFTA_NAT_FLAGS, int32be]
] [varlen]

nft_ng_policy$auto_nft_numgen [
	NFTA_NG_DREG	nlattr[NFTA_NG_DREG, int32]
	NFTA_NG_MODULUS	nlattr[NFTA_NG_MODULUS, int32]
	NFTA_NG_TYPE	nlattr[NFTA_NG_TYPE, int32]
	NFTA_NG_OFFSET	nlattr[NFTA_NG_OFFSET, int32]
] [varlen]

nft_obj_policy$auto_nf_tables_api [
	NFTA_OBJ_TABLE		nlattr[NFTA_OBJ_TABLE, stringnoz]
	NFTA_OBJ_NAME		nlattr[NFTA_OBJ_NAME, stringnoz]
	NFTA_OBJ_TYPE		nlattr[NFTA_OBJ_TYPE, int32]
	NFTA_OBJ_DATA		nlattr[NFTA_OBJ_DATA, array[int8]]
	NFTA_OBJ_HANDLE		nlattr[NFTA_OBJ_HANDLE, int64]
	NFTA_OBJ_USERDATA	nlattr[NFTA_OBJ_USERDATA, array[int8, 0:256]]
] [varlen]

nft_objref_policy$auto_nft_objref [
	NFTA_OBJREF_IMM_TYPE	nlattr[NFTA_OBJREF_IMM_TYPE, int32]
	NFTA_OBJREF_IMM_NAME	nlattr[NFTA_OBJREF_IMM_NAME, stringnoz]
	NFTA_OBJREF_SET_SREG	nlattr[NFTA_OBJREF_SET_SREG, int32]
	NFTA_OBJREF_SET_NAME	nlattr[NFTA_OBJREF_SET_NAME, stringnoz]
	NFTA_OBJREF_SET_ID	nlattr[NFTA_OBJREF_SET_ID, int32]
] [varlen]

nft_osf_policy$auto_nft_osf [
	NFTA_OSF_DREG	nlattr[NFTA_OSF_DREG, int32]
	NFTA_OSF_TTL	nlattr[NFTA_OSF_TTL, int8]
	NFTA_OSF_FLAGS	nlattr[NFTA_OSF_FLAGS, int32]
] [varlen]

nft_payload_policy$auto_nft_payload [
	NFTA_PAYLOAD_DREG		nlattr[NFTA_PAYLOAD_DREG, int32]
	NFTA_PAYLOAD_BASE		nlattr[NFTA_PAYLOAD_BASE, int32]
	NFTA_PAYLOAD_OFFSET		nlattr[NFTA_PAYLOAD_OFFSET, int32be]
	NFTA_PAYLOAD_LEN		nlattr[NFTA_PAYLOAD_LEN, int32be]
	NFTA_PAYLOAD_SREG		nlattr[NFTA_PAYLOAD_SREG, int32]
	NFTA_PAYLOAD_CSUM_TYPE		nlattr[NFTA_PAYLOAD_CSUM_TYPE, int32]
	NFTA_PAYLOAD_CSUM_OFFSET	nlattr[NFTA_PAYLOAD_CSUM_OFFSET, int32be]
	NFTA_PAYLOAD_CSUM_FLAGS		nlattr[NFTA_PAYLOAD_CSUM_FLAGS, int32]
] [varlen]

nft_queue_policy$auto_nft_queue [
	NFTA_QUEUE_NUM		nlattr[NFTA_QUEUE_NUM, int16]
	NFTA_QUEUE_TOTAL	nlattr[NFTA_QUEUE_TOTAL, int16]
	NFTA_QUEUE_FLAGS	nlattr[NFTA_QUEUE_FLAGS, int16]
	NFTA_QUEUE_SREG_QNUM	nlattr[NFTA_QUEUE_SREG_QNUM, int32]
] [varlen]

nft_quota_policy$auto_nft_quota [
	NFTA_QUOTA_BYTES	nlattr[NFTA_QUOTA_BYTES, int64]
	NFTA_QUOTA_FLAGS	nlattr[NFTA_QUOTA_FLAGS, int32]
	NFTA_QUOTA_CONSUMED	nlattr[NFTA_QUOTA_CONSUMED, int64]
] [varlen]

nft_range_policy$auto_nft_range [
	NFTA_RANGE_SREG		nlattr[NFTA_RANGE_SREG, int32]
	NFTA_RANGE_OP		nlattr[NFTA_RANGE_OP, int32be]
	NFTA_RANGE_FROM_DATA	nlattr[NFTA_RANGE_FROM_DATA, array[int8]]
	NFTA_RANGE_TO_DATA	nlattr[NFTA_RANGE_TO_DATA, array[int8]]
] [varlen]

nft_redir_policy$auto_nft_redir [
	NFTA_REDIR_REG_PROTO_MIN	nlattr[NFTA_REDIR_REG_PROTO_MIN, int32]
	NFTA_REDIR_REG_PROTO_MAX	nlattr[NFTA_REDIR_REG_PROTO_MAX, int32]
	NFTA_REDIR_FLAGS		nlattr[NFTA_REDIR_FLAGS, int32be]
] [varlen]

nft_reject_policy$auto_nft_reject [
	NFTA_REJECT_TYPE	nlattr[NFTA_REJECT_TYPE, int32be]
	NFTA_REJECT_ICMP_CODE	nlattr[NFTA_REJECT_ICMP_CODE, int8]
] [varlen]

nft_rt_policy$auto_nft_rt [
	NFTA_RT_DREG	nlattr[NFTA_RT_DREG, int32]
	NFTA_RT_KEY	nlattr[NFTA_RT_KEY, int32be]
] [varlen]

nft_rule_compat_policy$auto_nft_compat [
	NFTA_RULE_COMPAT_PROTO	nlattr[NFTA_RULE_COMPAT_PROTO, int32]
	NFTA_RULE_COMPAT_FLAGS	nlattr[NFTA_RULE_COMPAT_FLAGS, int32]
] [varlen]

nft_rule_policy$auto_nf_tables_api [
	NFTA_RULE_TABLE		nlattr[NFTA_RULE_TABLE, stringnoz]
	NFTA_RULE_CHAIN		nlattr[NFTA_RULE_CHAIN, stringnoz]
	NFTA_RULE_HANDLE	nlattr[NFTA_RULE_HANDLE, int64]
	NFTA_RULE_EXPRESSIONS	nlattr[NFTA_RULE_EXPRESSIONS, int16]
	NFTA_RULE_COMPAT	nlattr[NFTA_RULE_COMPAT, array[int8]]
	NFTA_RULE_POSITION	nlattr[NFTA_RULE_POSITION, int64]
	NFTA_RULE_USERDATA	nlattr[NFTA_RULE_USERDATA, array[int8, 0:256]]
	NFTA_RULE_ID		nlattr[NFTA_RULE_ID, int32]
	NFTA_RULE_POSITION_ID	nlattr[NFTA_RULE_POSITION_ID, int32]
	NFTA_RULE_CHAIN_ID	nlattr[NFTA_RULE_CHAIN_ID, int32]
] [varlen]

nft_secmark_policy$auto_nft_meta [
	NFTA_SECMARK_CTX	nlattr[NFTA_SECMARK_CTX, stringnoz]
] [varlen]

nft_set_desc_policy$auto_nf_tables_api [
	NFTA_SET_DESC_SIZE	nlattr[NFTA_SET_DESC_SIZE, int32]
	NFTA_SET_DESC_CONCAT	nlattr[NFTA_SET_DESC_CONCAT, int8]
] [varlen]

nft_set_elem_list_policy$auto_nf_tables_api [
	NFTA_SET_ELEM_LIST_TABLE	nlattr[NFTA_SET_ELEM_LIST_TABLE, stringnoz]
	NFTA_SET_ELEM_LIST_SET		nlattr[NFTA_SET_ELEM_LIST_SET, stringnoz]
	NFTA_SET_ELEM_LIST_ELEMENTS	nlattr[NFTA_SET_ELEM_LIST_ELEMENTS, array[int8, 11]]
	NFTA_SET_ELEM_LIST_SET_ID	nlattr[NFTA_SET_ELEM_LIST_SET_ID, int32]
] [varlen]

nft_set_elem_policy$auto_nf_tables_api [
	NFTA_SET_ELEM_KEY		nlattr[NFTA_SET_ELEM_KEY, array[int8]]
	NFTA_SET_ELEM_DATA		nlattr[NFTA_SET_ELEM_DATA, array[int8]]
	NFTA_SET_ELEM_FLAGS		nlattr[NFTA_SET_ELEM_FLAGS, int32]
	NFTA_SET_ELEM_TIMEOUT		nlattr[NFTA_SET_ELEM_TIMEOUT, int64]
	NFTA_SET_ELEM_EXPIRATION	nlattr[NFTA_SET_ELEM_EXPIRATION, int64]
	NFTA_SET_ELEM_USERDATA		nlattr[NFTA_SET_ELEM_USERDATA, array[int8, 0:256]]
	NFTA_SET_ELEM_EXPR		nlattr[NFTA_SET_ELEM_EXPR, array[int8]]
	NFTA_SET_ELEM_OBJREF		nlattr[NFTA_SET_ELEM_OBJREF, stringnoz]
	NFTA_SET_ELEM_KEY_END		nlattr[NFTA_SET_ELEM_KEY_END, array[int8]]
	NFTA_SET_ELEM_EXPRESSIONS	nlattr[NFTA_SET_ELEM_EXPRESSIONS, int16]
] [varlen]

nft_set_policy$auto_nf_tables_api [
	NFTA_SET_TABLE		nlattr[NFTA_SET_TABLE, stringnoz]
	NFTA_SET_NAME		nlattr[NFTA_SET_NAME, stringnoz]
	NFTA_SET_FLAGS		nlattr[NFTA_SET_FLAGS, int32]
	NFTA_SET_KEY_TYPE	nlattr[NFTA_SET_KEY_TYPE, int32]
	NFTA_SET_KEY_LEN	nlattr[NFTA_SET_KEY_LEN, int32]
	NFTA_SET_DATA_TYPE	nlattr[NFTA_SET_DATA_TYPE, int32]
	NFTA_SET_DATA_LEN	nlattr[NFTA_SET_DATA_LEN, int32]
	NFTA_SET_POLICY		nlattr[NFTA_SET_POLICY, int32]
	NFTA_SET_DESC		nlattr[NFTA_SET_DESC, array[int8]]
	NFTA_SET_ID		nlattr[NFTA_SET_ID, int32]
	NFTA_SET_TIMEOUT	nlattr[NFTA_SET_TIMEOUT, int64]
	NFTA_SET_GC_INTERVAL	nlattr[NFTA_SET_GC_INTERVAL, int32]
	NFTA_SET_USERDATA	nlattr[NFTA_SET_USERDATA, array[int8, 0:256]]
	NFTA_SET_OBJ_TYPE	nlattr[NFTA_SET_OBJ_TYPE, int32]
	NFTA_SET_HANDLE		nlattr[NFTA_SET_HANDLE, int64]
	NFTA_SET_EXPR		nlattr[NFTA_SET_EXPR, array[int8]]
	NFTA_SET_EXPRESSIONS	nlattr[NFTA_SET_EXPRESSIONS, int16]
] [varlen]

nft_socket_policy$auto_nft_socket [
	NFTA_SOCKET_KEY		nlattr[NFTA_SOCKET_KEY, int32be]
	NFTA_SOCKET_DREG	nlattr[NFTA_SOCKET_DREG, int32]
	NFTA_SOCKET_LEVEL	nlattr[NFTA_SOCKET_LEVEL, int32be]
] [varlen]

nft_synproxy_policy$auto_nft_synproxy [
	NFTA_SYNPROXY_MSS	nlattr[NFTA_SYNPROXY_MSS, int16]
	NFTA_SYNPROXY_WSCALE	nlattr[NFTA_SYNPROXY_WSCALE, int8]
	NFTA_SYNPROXY_FLAGS	nlattr[NFTA_SYNPROXY_FLAGS, int32]
] [varlen]

nft_table_policy$auto_nf_tables_api [
	NFTA_TABLE_NAME		nlattr[NFTA_TABLE_NAME, stringnoz]
	NFTA_TABLE_FLAGS	nlattr[NFTA_TABLE_FLAGS, int32]
	NFTA_TABLE_HANDLE	nlattr[NFTA_TABLE_HANDLE, int64]
	NFTA_TABLE_USERDATA	nlattr[NFTA_TABLE_USERDATA, array[int8, 0:256]]
] [varlen]

nft_target_policy$auto_nft_compat [
	NFTA_TARGET_NAME	nlattr[NFTA_TARGET_NAME, string]
	NFTA_TARGET_REV		nlattr[NFTA_TARGET_REV, int32be]
	NFTA_TARGET_INFO	nlattr[NFTA_TARGET_INFO, array[int8]]
] [varlen]

nft_tproxy_policy$auto_nft_tproxy [
	NFTA_TPROXY_FAMILY	nlattr[NFTA_TPROXY_FAMILY, int32be]
	NFTA_TPROXY_REG_ADDR	nlattr[NFTA_TPROXY_REG_ADDR, int32]
	NFTA_TPROXY_REG_PORT	nlattr[NFTA_TPROXY_REG_PORT, int32]
] [varlen]

nft_tunnel_ip6_policy$auto_nft_tunnel [
	NFTA_TUNNEL_KEY_IP6_SRC		nlattr[NFTA_TUNNEL_KEY_IP6_SRC, array[int8, 16]]
	NFTA_TUNNEL_KEY_IP6_DST		nlattr[NFTA_TUNNEL_KEY_IP6_DST, array[int8, 16]]
	NFTA_TUNNEL_KEY_IP6_FLOWLABEL	nlattr[NFTA_TUNNEL_KEY_IP6_FLOWLABEL, int32]
] [varlen]

nft_tunnel_ip_policy$auto_nft_tunnel [
	NFTA_TUNNEL_KEY_IP_SRC	nlattr[NFTA_TUNNEL_KEY_IP_SRC, int32]
	NFTA_TUNNEL_KEY_IP_DST	nlattr[NFTA_TUNNEL_KEY_IP_DST, int32]
] [varlen]

nft_tunnel_key_policy$auto_nft_tunnel [
	NFTA_TUNNEL_KEY_ID	nlattr[NFTA_TUNNEL_KEY_ID, int32]
	NFTA_TUNNEL_KEY_IP	nlattr[NFTA_TUNNEL_KEY_IP, array[int8]]
	NFTA_TUNNEL_KEY_IP6	nlattr[NFTA_TUNNEL_KEY_IP6, array[int8]]
	NFTA_TUNNEL_KEY_FLAGS	nlattr[NFTA_TUNNEL_KEY_FLAGS, int32]
	NFTA_TUNNEL_KEY_TOS	nlattr[NFTA_TUNNEL_KEY_TOS, int8]
	NFTA_TUNNEL_KEY_TTL	nlattr[NFTA_TUNNEL_KEY_TTL, int8]
	NFTA_TUNNEL_KEY_SPORT	nlattr[NFTA_TUNNEL_KEY_SPORT, sock_port]
	NFTA_TUNNEL_KEY_DPORT	nlattr[NFTA_TUNNEL_KEY_DPORT, sock_port]
	NFTA_TUNNEL_KEY_OPTS	nlattr[NFTA_TUNNEL_KEY_OPTS, array[int8]]
] [varlen]

nft_tunnel_opts_erspan_policy$auto_nft_tunnel [
	NFTA_TUNNEL_KEY_ERSPAN_VERSION	nlattr[NFTA_TUNNEL_KEY_ERSPAN_VERSION, int32]
	NFTA_TUNNEL_KEY_ERSPAN_V1_INDEX	nlattr[NFTA_TUNNEL_KEY_ERSPAN_V1_INDEX, int32]
	NFTA_TUNNEL_KEY_ERSPAN_V2_HWID	nlattr[NFTA_TUNNEL_KEY_ERSPAN_V2_HWID, int8]
	NFTA_TUNNEL_KEY_ERSPAN_V2_DIR	nlattr[NFTA_TUNNEL_KEY_ERSPAN_V2_DIR, int8]
] [varlen]

nft_tunnel_opts_geneve_policy$auto_nft_tunnel [
	NFTA_TUNNEL_KEY_GENEVE_CLASS	nlattr[NFTA_TUNNEL_KEY_GENEVE_CLASS, int16]
	NFTA_TUNNEL_KEY_GENEVE_TYPE	nlattr[NFTA_TUNNEL_KEY_GENEVE_TYPE, int8]
	NFTA_TUNNEL_KEY_GENEVE_DATA	nlattr[NFTA_TUNNEL_KEY_GENEVE_DATA, array[int8, 0:128]]
] [varlen]

nft_tunnel_opts_policy$auto_nft_tunnel [
	NFTA_TUNNEL_KEY_OPTS_UNSPEC	nlattr[NFTA_TUNNEL_KEY_OPTS_UNSPEC, array[int8]]
	NFTA_TUNNEL_KEY_OPTS_VXLAN	nlattr[NFTA_TUNNEL_KEY_OPTS_VXLAN, array[int8]]
	NFTA_TUNNEL_KEY_OPTS_ERSPAN	nlattr[NFTA_TUNNEL_KEY_OPTS_ERSPAN, array[int8]]
	NFTA_TUNNEL_KEY_OPTS_GENEVE	nlattr[NFTA_TUNNEL_KEY_OPTS_GENEVE, array[int8]]
] [varlen]

nft_tunnel_opts_vxlan_policy$auto_nft_tunnel [
	NFTA_TUNNEL_KEY_VXLAN_GBP	nlattr[NFTA_TUNNEL_KEY_VXLAN_GBP, int32]
] [varlen]

nft_tunnel_policy$auto_nft_tunnel [
	NFTA_TUNNEL_KEY		nlattr[NFTA_TUNNEL_KEY, int32be]
	NFTA_TUNNEL_DREG	nlattr[NFTA_TUNNEL_DREG, int32]
	NFTA_TUNNEL_MODE	nlattr[NFTA_TUNNEL_MODE, int32be]
] [varlen]

nft_verdict_policy$auto_nf_tables_api [
	NFTA_VERDICT_CODE	nlattr[NFTA_VERDICT_CODE, int32]
	NFTA_VERDICT_CHAIN	nlattr[NFTA_VERDICT_CHAIN, stringnoz]
	NFTA_VERDICT_CHAIN_ID	nlattr[NFTA_VERDICT_CHAIN_ID, int32]
] [varlen]

nft_xfrm_policy$auto_nft_xfrm [
	NFTA_XFRM_DREG	nlattr[NFTA_XFRM_DREG, int32]
	NFTA_XFRM_KEY	nlattr[NFTA_XFRM_KEY, int32be]
	NFTA_XFRM_DIR	nlattr[NFTA_XFRM_DIR, int8]
	NFTA_XFRM_SPNUM	nlattr[NFTA_XFRM_SPNUM, int32be]
] [varlen]

nfula_cfg_policy$auto_nfnetlink_log [
	NFULA_CFG_CMD		nlattr[NFULA_CFG_CMD, int8]
	NFULA_CFG_MODE		nlattr[NFULA_CFG_MODE, array[int8, 6]]
	NFULA_CFG_NLBUFSIZ	nlattr[NFULA_CFG_NLBUFSIZ, int32]
	NFULA_CFG_TIMEOUT	nlattr[NFULA_CFG_TIMEOUT, int32]
	NFULA_CFG_QTHRESH	nlattr[NFULA_CFG_QTHRESH, int32]
	NFULA_CFG_FLAGS		nlattr[NFULA_CFG_FLAGS, int16]
] [varlen]

nl80211_attr_cqm_policy$auto_nl80211 [
	NL80211_ATTR_CQM_RSSI_THOLD		nlattr[NL80211_ATTR_CQM_RSSI_THOLD, array[int8]]
	NL80211_ATTR_CQM_RSSI_HYST		nlattr[NL80211_ATTR_CQM_RSSI_HYST, int32]
	NL80211_ATTR_CQM_RSSI_THRESHOLD_EVENT	nlattr[NL80211_ATTR_CQM_RSSI_THRESHOLD_EVENT, int32]
	NL80211_ATTR_CQM_TXE_RATE		nlattr[NL80211_ATTR_CQM_TXE_RATE, int32]
	NL80211_ATTR_CQM_TXE_PKTS		nlattr[NL80211_ATTR_CQM_TXE_PKTS, int32]
	NL80211_ATTR_CQM_TXE_INTVL		nlattr[NL80211_ATTR_CQM_TXE_INTVL, int32]
	NL80211_ATTR_CQM_RSSI_LEVEL		nlattr[NL80211_ATTR_CQM_RSSI_LEVEL, int32]
] [varlen]

nl80211_bss_select_policy$auto_nl80211 [
	NL80211_BSS_SELECT_ATTR_RSSI		nlattr[NL80211_BSS_SELECT_ATTR_RSSI, void]
	NL80211_BSS_SELECT_ATTR_BAND_PREF	nlattr[NL80211_BSS_SELECT_ATTR_BAND_PREF, int32]
	NL80211_BSS_SELECT_ATTR_RSSI_ADJUST	nlattr[NL80211_BSS_SELECT_ATTR_RSSI_ADJUST, int16]
] [varlen]

nl80211_coalesce_policy$auto_nl80211 [
	NL80211_ATTR_COALESCE_RULE_DELAY	nlattr[NL80211_ATTR_COALESCE_RULE_DELAY, int32]
	NL80211_ATTR_COALESCE_RULE_CONDITION	nlattr[NL80211_ATTR_COALESCE_RULE_CONDITION, int32]
	NL80211_ATTR_COALESCE_RULE_PKT_PATTERN	nlattr[NL80211_ATTR_COALESCE_RULE_PKT_PATTERN, array[int8]]
] [varlen]

nl80211_fils_discovery_policy$auto_nl80211 [
	NL80211_FILS_DISCOVERY_ATTR_INT_MIN	nlattr[NL80211_FILS_DISCOVERY_ATTR_INT_MIN, int32]
	NL80211_FILS_DISCOVERY_ATTR_INT_MAX	nlattr[NL80211_FILS_DISCOVERY_ATTR_INT_MAX, int32]
	NL80211_FILS_DISCOVERY_ATTR_TMPL	nlattr[NL80211_FILS_DISCOVERY_ATTR_TMPL, array[int8]]
] [varlen]

nl80211_ftm_responder_policy$auto_nl80211 [
	NL80211_FTM_RESP_ATTR_ENABLED	nlattr[NL80211_FTM_RESP_ATTR_ENABLED, void]
	NL80211_FTM_RESP_ATTR_LCI	nlattr[NL80211_FTM_RESP_ATTR_LCI, array[int8, 0:255]]
	NL80211_FTM_RESP_ATTR_CIVICLOC	nlattr[NL80211_FTM_RESP_ATTR_CIVICLOC, array[int8, 0:255]]
] [varlen]

nl80211_key_default_policy$auto_nl80211 [
	NL80211_KEY_DEFAULT_TYPE_UNICAST	nlattr[NL80211_KEY_DEFAULT_TYPE_UNICAST, void]
	NL80211_KEY_DEFAULT_TYPE_MULTICAST	nlattr[NL80211_KEY_DEFAULT_TYPE_MULTICAST, void]
] [varlen]

nl80211_key_policy$auto_nl80211 [
	NL80211_KEY_DATA		nlattr[NL80211_KEY_DATA, array[int8, 0:32]]
	NL80211_KEY_IDX			nlattr[NL80211_KEY_IDX, int8]
	NL80211_KEY_CIPHER		nlattr[NL80211_KEY_CIPHER, int32]
	NL80211_KEY_SEQ			nlattr[NL80211_KEY_SEQ, array[int8, 0:16]]
	NL80211_KEY_DEFAULT		nlattr[NL80211_KEY_DEFAULT, void]
	NL80211_KEY_DEFAULT_MGMT	nlattr[NL80211_KEY_DEFAULT_MGMT, void]
	NL80211_KEY_TYPE		nlattr[NL80211_KEY_TYPE, int32]
	NL80211_KEY_DEFAULT_TYPES	nlattr[NL80211_KEY_DEFAULT_TYPES, array[int8]]
	NL80211_KEY_MODE		nlattr[NL80211_KEY_MODE, int8]
] [varlen]

nl80211_match_policy$auto_nl80211 [
	NL80211_SCHED_SCAN_MATCH_ATTR_SSID	nlattr[NL80211_SCHED_SCAN_MATCH_ATTR_SSID, array[int8, 0:32]]
	NL80211_SCHED_SCAN_MATCH_ATTR_RSSI	nlattr[NL80211_SCHED_SCAN_MATCH_ATTR_RSSI, int32]
	NL80211_SCHED_SCAN_MATCH_ATTR_BSSID	nlattr[NL80211_SCHED_SCAN_MATCH_ATTR_BSSID, array[int8]]
] [varlen]

nl80211_mbssid_config_policy$auto_nl80211 [
	NL80211_MBSSID_CONFIG_ATTR_MAX_INTERFACES		nlattr[NL80211_MBSSID_CONFIG_ATTR_MAX_INTERFACES, int8]
	NL80211_MBSSID_CONFIG_ATTR_MAX_EMA_PROFILE_PERIODICITY	nlattr[NL80211_MBSSID_CONFIG_ATTR_MAX_EMA_PROFILE_PERIODICITY, int8]
	NL80211_MBSSID_CONFIG_ATTR_INDEX			nlattr[NL80211_MBSSID_CONFIG_ATTR_INDEX, int8]
	NL80211_MBSSID_CONFIG_ATTR_TX_IFINDEX			nlattr[NL80211_MBSSID_CONFIG_ATTR_TX_IFINDEX, ifindex]
	NL80211_MBSSID_CONFIG_ATTR_EMA				nlattr[NL80211_MBSSID_CONFIG_ATTR_EMA, void]
] [varlen]

nl80211_mesh_setup_params_policy$auto_nl80211 [
	NL80211_MESH_SETUP_ENABLE_VENDOR_PATH_SEL	nlattr[NL80211_MESH_SETUP_ENABLE_VENDOR_PATH_SEL, int8]
	NL80211_MESH_SETUP_ENABLE_VENDOR_METRIC		nlattr[NL80211_MESH_SETUP_ENABLE_VENDOR_METRIC, int8]
	NL80211_MESH_SETUP_IE				nlattr[NL80211_MESH_SETUP_IE, array[int8, 0:2304]]
	NL80211_MESH_SETUP_USERSPACE_AUTH		nlattr[NL80211_MESH_SETUP_USERSPACE_AUTH, void]
	NL80211_MESH_SETUP_USERSPACE_AMPE		nlattr[NL80211_MESH_SETUP_USERSPACE_AMPE, void]
	NL80211_MESH_SETUP_ENABLE_VENDOR_SYNC		nlattr[NL80211_MESH_SETUP_ENABLE_VENDOR_SYNC, int8]
	NL80211_MESH_SETUP_USERSPACE_MPM		nlattr[NL80211_MESH_SETUP_USERSPACE_MPM, void]
	NL80211_MESH_SETUP_AUTH_PROTOCOL		nlattr[NL80211_MESH_SETUP_AUTH_PROTOCOL, int8]
] [varlen]

nl80211_meshconf_params_policy$auto_nl80211 [
	NL80211_MESHCONF_RETRY_TIMEOUT			nlattr[NL80211_MESHCONF_RETRY_TIMEOUT, int16]
	NL80211_MESHCONF_CONFIRM_TIMEOUT		nlattr[NL80211_MESHCONF_CONFIRM_TIMEOUT, int16]
	NL80211_MESHCONF_HOLDING_TIMEOUT		nlattr[NL80211_MESHCONF_HOLDING_TIMEOUT, int16]
	NL80211_MESHCONF_MAX_PEER_LINKS			nlattr[NL80211_MESHCONF_MAX_PEER_LINKS, int16]
	NL80211_MESHCONF_MAX_RETRIES			nlattr[NL80211_MESHCONF_MAX_RETRIES, int8]
	NL80211_MESHCONF_TTL				nlattr[NL80211_MESHCONF_TTL, int8]
	NL80211_MESHCONF_AUTO_OPEN_PLINKS		nlattr[NL80211_MESHCONF_AUTO_OPEN_PLINKS, int8]
	NL80211_MESHCONF_HWMP_MAX_PREQ_RETRIES		nlattr[NL80211_MESHCONF_HWMP_MAX_PREQ_RETRIES, int8]
	NL80211_MESHCONF_PATH_REFRESH_TIME		nlattr[NL80211_MESHCONF_PATH_REFRESH_TIME, int32]
	NL80211_MESHCONF_MIN_DISCOVERY_TIMEOUT		nlattr[NL80211_MESHCONF_MIN_DISCOVERY_TIMEOUT, int16]
	NL80211_MESHCONF_HWMP_ACTIVE_PATH_TIMEOUT	nlattr[NL80211_MESHCONF_HWMP_ACTIVE_PATH_TIMEOUT, int32]
	NL80211_MESHCONF_HWMP_PREQ_MIN_INTERVAL		nlattr[NL80211_MESHCONF_HWMP_PREQ_MIN_INTERVAL, int16]
	NL80211_MESHCONF_HWMP_NET_DIAM_TRVS_TIME	nlattr[NL80211_MESHCONF_HWMP_NET_DIAM_TRVS_TIME, int16]
	NL80211_MESHCONF_HWMP_ROOTMODE			nlattr[NL80211_MESHCONF_HWMP_ROOTMODE, int8]
	NL80211_MESHCONF_ELEMENT_TTL			nlattr[NL80211_MESHCONF_ELEMENT_TTL, int8]
	NL80211_MESHCONF_HWMP_RANN_INTERVAL		nlattr[NL80211_MESHCONF_HWMP_RANN_INTERVAL, int16]
	NL80211_MESHCONF_GATE_ANNOUNCEMENTS		nlattr[NL80211_MESHCONF_GATE_ANNOUNCEMENTS, int8]
	NL80211_MESHCONF_HWMP_PERR_MIN_INTERVAL		nlattr[NL80211_MESHCONF_HWMP_PERR_MIN_INTERVAL, int16]
	NL80211_MESHCONF_FORWARDING			nlattr[NL80211_MESHCONF_FORWARDING, int8]
	NL80211_MESHCONF_RSSI_THRESHOLD			nlattr[NL80211_MESHCONF_RSSI_THRESHOLD, int32]
	NL80211_MESHCONF_SYNC_OFFSET_MAX_NEIGHBOR	nlattr[NL80211_MESHCONF_SYNC_OFFSET_MAX_NEIGHBOR, int32]
	NL80211_MESHCONF_HT_OPMODE			nlattr[NL80211_MESHCONF_HT_OPMODE, int16]
	NL80211_MESHCONF_HWMP_PATH_TO_ROOT_TIMEOUT	nlattr[NL80211_MESHCONF_HWMP_PATH_TO_ROOT_TIMEOUT, int32]
	NL80211_MESHCONF_HWMP_ROOT_INTERVAL		nlattr[NL80211_MESHCONF_HWMP_ROOT_INTERVAL, int16]
	NL80211_MESHCONF_HWMP_CONFIRMATION_INTERVAL	nlattr[NL80211_MESHCONF_HWMP_CONFIRMATION_INTERVAL, int16]
	NL80211_MESHCONF_POWER_MODE			nlattr[NL80211_MESHCONF_POWER_MODE, int32]
	NL80211_MESHCONF_AWAKE_WINDOW			nlattr[NL80211_MESHCONF_AWAKE_WINDOW, int16]
	NL80211_MESHCONF_PLINK_TIMEOUT			nlattr[NL80211_MESHCONF_PLINK_TIMEOUT, int32]
	NL80211_MESHCONF_CONNECTED_TO_GATE		nlattr[NL80211_MESHCONF_CONNECTED_TO_GATE, int8]
	NL80211_MESHCONF_NOLEARN			nlattr[NL80211_MESHCONF_NOLEARN, int8]
	NL80211_MESHCONF_CONNECTED_TO_AS		nlattr[NL80211_MESHCONF_CONNECTED_TO_AS, int8]
] [varlen]

nl80211_nan_func_policy$auto_nl80211 [
	NL80211_NAN_FUNC_TYPE			nlattr[NL80211_NAN_FUNC_TYPE, int8]
	NL80211_NAN_FUNC_SERVICE_ID		nlattr[NL80211_NAN_FUNC_SERVICE_ID, array[int8, 6]]
	NL80211_NAN_FUNC_PUBLISH_TYPE		nlattr[NL80211_NAN_FUNC_PUBLISH_TYPE, int8]
	NL80211_NAN_FUNC_PUBLISH_BCAST		nlattr[NL80211_NAN_FUNC_PUBLISH_BCAST, void]
	NL80211_NAN_FUNC_SUBSCRIBE_ACTIVE	nlattr[NL80211_NAN_FUNC_SUBSCRIBE_ACTIVE, void]
	NL80211_NAN_FUNC_FOLLOW_UP_ID		nlattr[NL80211_NAN_FUNC_FOLLOW_UP_ID, int8]
	NL80211_NAN_FUNC_FOLLOW_UP_REQ_ID	nlattr[NL80211_NAN_FUNC_FOLLOW_UP_REQ_ID, int8]
	NL80211_NAN_FUNC_FOLLOW_UP_DEST		nlattr[NL80211_NAN_FUNC_FOLLOW_UP_DEST, array[int8]]
	NL80211_NAN_FUNC_CLOSE_RANGE		nlattr[NL80211_NAN_FUNC_CLOSE_RANGE, void]
	NL80211_NAN_FUNC_TTL			nlattr[NL80211_NAN_FUNC_TTL, int32]
	NL80211_NAN_FUNC_SERVICE_INFO		nlattr[NL80211_NAN_FUNC_SERVICE_INFO, array[int8, 0:255]]
	NL80211_NAN_FUNC_SRF			nlattr[NL80211_NAN_FUNC_SRF, array[int8]]
	NL80211_NAN_FUNC_RX_MATCH_FILTER	nlattr[NL80211_NAN_FUNC_RX_MATCH_FILTER, array[int8]]
	NL80211_NAN_FUNC_TX_MATCH_FILTER	nlattr[NL80211_NAN_FUNC_TX_MATCH_FILTER, array[int8]]
	NL80211_NAN_FUNC_INSTANCE_ID		nlattr[NL80211_NAN_FUNC_INSTANCE_ID, int8]
	NL80211_NAN_FUNC_TERM_REASON		nlattr[NL80211_NAN_FUNC_TERM_REASON, int8]
] [varlen]

nl80211_nan_srf_policy$auto_nl80211 [
	NL80211_NAN_SRF_INCLUDE		nlattr[NL80211_NAN_SRF_INCLUDE, void]
	NL80211_NAN_SRF_BF		nlattr[NL80211_NAN_SRF_BF, array[int8, 0:255]]
	NL80211_NAN_SRF_BF_IDX		nlattr[NL80211_NAN_SRF_BF_IDX, int8]
	NL80211_NAN_SRF_MAC_ADDRS	nlattr[NL80211_NAN_SRF_MAC_ADDRS, array[int8]]
] [varlen]

nl80211_packet_pattern_policy$auto_nl80211 [
	NL80211_PKTPAT_MASK	nlattr[NL80211_PKTPAT_MASK, array[int8]]
	NL80211_PKTPAT_PATTERN	nlattr[NL80211_PKTPAT_PATTERN, array[int8]]
	NL80211_PKTPAT_OFFSET	nlattr[NL80211_PKTPAT_OFFSET, int32]
] [varlen]

nl80211_plan_policy$auto_nl80211 [
	NL80211_SCHED_SCAN_PLAN_INTERVAL	nlattr[NL80211_SCHED_SCAN_PLAN_INTERVAL, int32]
	NL80211_SCHED_SCAN_PLAN_ITERATIONS	nlattr[NL80211_SCHED_SCAN_PLAN_ITERATIONS, int32]
] [varlen]

nl80211_pmsr_attr_policy$auto_nl80211 [
	NL80211_PMSR_ATTR_MAX_PEERS		nlattr[NL80211_PMSR_ATTR_MAX_PEERS, array[int8]]
	NL80211_PMSR_ATTR_REPORT_AP_TSF		nlattr[NL80211_PMSR_ATTR_REPORT_AP_TSF, array[int8]]
	NL80211_PMSR_ATTR_RANDOMIZE_MAC_ADDR	nlattr[NL80211_PMSR_ATTR_RANDOMIZE_MAC_ADDR, array[int8]]
	NL80211_PMSR_ATTR_TYPE_CAPA		nlattr[NL80211_PMSR_ATTR_TYPE_CAPA, array[int8]]
	NL80211_PMSR_ATTR_PEERS			nlattr[NL80211_PMSR_ATTR_PEERS, int32]
] [varlen]

nl80211_pmsr_ftm_req_attr_policy$auto_nl80211 [
	NL80211_PMSR_FTM_REQ_ATTR_ASAP			nlattr[NL80211_PMSR_FTM_REQ_ATTR_ASAP, void]
	NL80211_PMSR_FTM_REQ_ATTR_PREAMBLE		nlattr[NL80211_PMSR_FTM_REQ_ATTR_PREAMBLE, int32]
	NL80211_PMSR_FTM_REQ_ATTR_NUM_BURSTS_EXP	nlattr[NL80211_PMSR_FTM_REQ_ATTR_NUM_BURSTS_EXP, int8]
	NL80211_PMSR_FTM_REQ_ATTR_BURST_PERIOD		nlattr[NL80211_PMSR_FTM_REQ_ATTR_BURST_PERIOD, int16]
	NL80211_PMSR_FTM_REQ_ATTR_BURST_DURATION	nlattr[NL80211_PMSR_FTM_REQ_ATTR_BURST_DURATION, int8]
	NL80211_PMSR_FTM_REQ_ATTR_FTMS_PER_BURST	nlattr[NL80211_PMSR_FTM_REQ_ATTR_FTMS_PER_BURST, int8]
	NL80211_PMSR_FTM_REQ_ATTR_NUM_FTMR_RETRIES	nlattr[NL80211_PMSR_FTM_REQ_ATTR_NUM_FTMR_RETRIES, int8]
	NL80211_PMSR_FTM_REQ_ATTR_REQUEST_LCI		nlattr[NL80211_PMSR_FTM_REQ_ATTR_REQUEST_LCI, void]
	NL80211_PMSR_FTM_REQ_ATTR_REQUEST_CIVICLOC	nlattr[NL80211_PMSR_FTM_REQ_ATTR_REQUEST_CIVICLOC, void]
	NL80211_PMSR_FTM_REQ_ATTR_TRIGGER_BASED		nlattr[NL80211_PMSR_FTM_REQ_ATTR_TRIGGER_BASED, void]
	NL80211_PMSR_FTM_REQ_ATTR_NON_TRIGGER_BASED	nlattr[NL80211_PMSR_FTM_REQ_ATTR_NON_TRIGGER_BASED, void]
	NL80211_PMSR_FTM_REQ_ATTR_LMR_FEEDBACK		nlattr[NL80211_PMSR_FTM_REQ_ATTR_LMR_FEEDBACK, void]
	NL80211_PMSR_FTM_REQ_ATTR_BSS_COLOR		nlattr[NL80211_PMSR_FTM_REQ_ATTR_BSS_COLOR, int8]
] [varlen]

nl80211_pmsr_peer_attr_policy$auto_nl80211 [
	NL80211_PMSR_PEER_ATTR_ADDR	nlattr[NL80211_PMSR_PEER_ATTR_ADDR, array[int8]]
	NL80211_PMSR_PEER_ATTR_CHAN	nlattr[NL80211_PMSR_PEER_ATTR_CHAN, array[int8, 332]]
	NL80211_PMSR_PEER_ATTR_REQ	nlattr[NL80211_PMSR_PEER_ATTR_REQ, int16]
	NL80211_PMSR_PEER_ATTR_RESP	nlattr[NL80211_PMSR_PEER_ATTR_RESP, array[int8]]
] [varlen]

nl80211_pmsr_req_attr_policy$auto_nl80211 [
	NL80211_PMSR_REQ_ATTR_DATA		nlattr[NL80211_PMSR_REQ_ATTR_DATA, int8]
	NL80211_PMSR_REQ_ATTR_GET_AP_TSF	nlattr[NL80211_PMSR_REQ_ATTR_GET_AP_TSF, void]
] [varlen]

nl80211_pmsr_req_data_policy$auto_nl80211 [
	NL80211_PMSR_TYPE_FTM	nlattr[NL80211_PMSR_TYPE_FTM, array[int8, 13]]
] [varlen]

nl80211_policy$auto_nl80211 [
	NL80211_ATTR_WIPHY				nlattr[NL80211_ATTR_WIPHY, int32]
	NL80211_ATTR_WIPHY_NAME				nlattr[NL80211_ATTR_WIPHY_NAME, string]
	NL80211_ATTR_IFINDEX				nlattr[NL80211_ATTR_IFINDEX, ifindex]
	NL80211_ATTR_IFNAME				nlattr[NL80211_ATTR_IFNAME, devname]
	NL80211_ATTR_IFTYPE				nlattr[NL80211_ATTR_IFTYPE, int32]
	NL80211_ATTR_MAC				nlattr[NL80211_ATTR_MAC, array[int8]]
	NL80211_ATTR_KEY_DATA				nlattr[NL80211_ATTR_KEY_DATA, array[int8, 0:32]]
	NL80211_ATTR_KEY_IDX				nlattr[NL80211_ATTR_KEY_IDX, int8]
	NL80211_ATTR_KEY_CIPHER				nlattr[NL80211_ATTR_KEY_CIPHER, int32]
	NL80211_ATTR_KEY_SEQ				nlattr[NL80211_ATTR_KEY_SEQ, array[int8, 0:16]]
	NL80211_ATTR_KEY_DEFAULT			nlattr[NL80211_ATTR_KEY_DEFAULT, void]
	NL80211_ATTR_BEACON_INTERVAL			nlattr[NL80211_ATTR_BEACON_INTERVAL, int32]
	NL80211_ATTR_DTIM_PERIOD			nlattr[NL80211_ATTR_DTIM_PERIOD, int32]
	NL80211_ATTR_BEACON_HEAD			nlattr[NL80211_ATTR_BEACON_HEAD, array[int8, 0:2304]]
	NL80211_ATTR_BEACON_TAIL			nlattr[NL80211_ATTR_BEACON_TAIL, array[int8, 0:2304]]
	NL80211_ATTR_STA_AID				nlattr[NL80211_ATTR_STA_AID, int16]
	NL80211_ATTR_STA_FLAGS				nlattr[NL80211_ATTR_STA_FLAGS, array[int8]]
	NL80211_ATTR_STA_LISTEN_INTERVAL		nlattr[NL80211_ATTR_STA_LISTEN_INTERVAL, int16]
	NL80211_ATTR_STA_SUPPORTED_RATES		nlattr[NL80211_ATTR_STA_SUPPORTED_RATES, array[int8, 0:32]]
	NL80211_ATTR_STA_VLAN				nlattr[NL80211_ATTR_STA_VLAN, int32]
	NL80211_ATTR_MNTR_FLAGS				nlattr[NL80211_ATTR_MNTR_FLAGS, array[int8]]
	NL80211_ATTR_MESH_ID				nlattr[NL80211_ATTR_MESH_ID, array[int8, 0:32]]
	NL80211_ATTR_STA_PLINK_ACTION			nlattr[NL80211_ATTR_STA_PLINK_ACTION, int8]
	NL80211_ATTR_MPATH_NEXT_HOP			nlattr[NL80211_ATTR_MPATH_NEXT_HOP, array[int8]]
	NL80211_ATTR_BSS_CTS_PROT			nlattr[NL80211_ATTR_BSS_CTS_PROT, int8]
	NL80211_ATTR_BSS_SHORT_PREAMBLE			nlattr[NL80211_ATTR_BSS_SHORT_PREAMBLE, int8]
	NL80211_ATTR_BSS_SHORT_SLOT_TIME		nlattr[NL80211_ATTR_BSS_SHORT_SLOT_TIME, int8]
	NL80211_ATTR_HT_CAPABILITY			nlattr[NL80211_ATTR_HT_CAPABILITY, array[int8]]
	NL80211_ATTR_REG_ALPHA2				nlattr[NL80211_ATTR_REG_ALPHA2, array[int8]]
	NL80211_ATTR_REG_RULES				nlattr[NL80211_ATTR_REG_RULES, array[int8]]
	NL80211_ATTR_MESH_CONFIG			nlattr[NL80211_ATTR_MESH_CONFIG, array[int8]]
	NL80211_ATTR_BSS_BASIC_RATES			nlattr[NL80211_ATTR_BSS_BASIC_RATES, array[int8, 0:32]]
	NL80211_ATTR_WIPHY_TXQ_PARAMS			nlattr[NL80211_ATTR_WIPHY_TXQ_PARAMS, array[int8]]
	NL80211_ATTR_WIPHY_FREQ				nlattr[NL80211_ATTR_WIPHY_FREQ, int32]
	NL80211_ATTR_WIPHY_CHANNEL_TYPE			nlattr[NL80211_ATTR_WIPHY_CHANNEL_TYPE, int32]
	NL80211_ATTR_MGMT_SUBTYPE			nlattr[NL80211_ATTR_MGMT_SUBTYPE, int8]
	NL80211_ATTR_IE					nlattr[NL80211_ATTR_IE, array[int8, 0:2304]]
	NL80211_ATTR_SCAN_FREQUENCIES			nlattr[NL80211_ATTR_SCAN_FREQUENCIES, array[int8]]
	NL80211_ATTR_SCAN_SSIDS				nlattr[NL80211_ATTR_SCAN_SSIDS, array[int8]]
	NL80211_ATTR_FRAME				nlattr[NL80211_ATTR_FRAME, array[int8, 0:2304]]
	NL80211_ATTR_SSID				nlattr[NL80211_ATTR_SSID, array[int8, 0:32]]
	NL80211_ATTR_AUTH_TYPE				nlattr[NL80211_ATTR_AUTH_TYPE, int32]
	NL80211_ATTR_REASON_CODE			nlattr[NL80211_ATTR_REASON_CODE, int16]
	NL80211_ATTR_KEY_TYPE				nlattr[NL80211_ATTR_KEY_TYPE, int32]
	NL80211_ATTR_FREQ_FIXED				nlattr[NL80211_ATTR_FREQ_FIXED, void]
	NL80211_ATTR_WIPHY_RETRY_SHORT			nlattr[NL80211_ATTR_WIPHY_RETRY_SHORT, int8]
	NL80211_ATTR_WIPHY_RETRY_LONG			nlattr[NL80211_ATTR_WIPHY_RETRY_LONG, int8]
	NL80211_ATTR_WIPHY_FRAG_THRESHOLD		nlattr[NL80211_ATTR_WIPHY_FRAG_THRESHOLD, int32]
	NL80211_ATTR_WIPHY_RTS_THRESHOLD		nlattr[NL80211_ATTR_WIPHY_RTS_THRESHOLD, int32]
	NL80211_ATTR_TIMED_OUT				nlattr[NL80211_ATTR_TIMED_OUT, void]
	NL80211_ATTR_USE_MFP				nlattr[NL80211_ATTR_USE_MFP, int32]
	NL80211_ATTR_STA_FLAGS2				nlattr[NL80211_ATTR_STA_FLAGS2, array[int8]]
	NL80211_ATTR_CONTROL_PORT			nlattr[NL80211_ATTR_CONTROL_PORT, void]
	NL80211_ATTR_PRIVACY				nlattr[NL80211_ATTR_PRIVACY, void]
	NL80211_ATTR_STATUS_CODE			nlattr[NL80211_ATTR_STATUS_CODE, int16]
	NL80211_ATTR_CIPHER_SUITE_GROUP			nlattr[NL80211_ATTR_CIPHER_SUITE_GROUP, int32]
	NL80211_ATTR_WPA_VERSIONS			nlattr[NL80211_ATTR_WPA_VERSIONS, int32]
	NL80211_ATTR_PREV_BSSID				nlattr[NL80211_ATTR_PREV_BSSID, array[int8]]
	NL80211_ATTR_KEY				nlattr[NL80211_ATTR_KEY, array[int8]]
	NL80211_ATTR_PID				nlattr[NL80211_ATTR_PID, int32]
	NL80211_ATTR_4ADDR				nlattr[NL80211_ATTR_4ADDR, int8]
	NL80211_ATTR_PMKID				nlattr[NL80211_ATTR_PMKID, array[int8]]
	NL80211_ATTR_DURATION				nlattr[NL80211_ATTR_DURATION, int32]
	NL80211_ATTR_COOKIE				nlattr[NL80211_ATTR_COOKIE, int64]
	NL80211_ATTR_WIPHY_COVERAGE_CLASS		nlattr[NL80211_ATTR_WIPHY_COVERAGE_CLASS, int8]
	NL80211_ATTR_TX_RATES				nlattr[NL80211_ATTR_TX_RATES, array[int8]]
	NL80211_ATTR_FRAME_MATCH			nlattr[NL80211_ATTR_FRAME_MATCH, array[int8]]
	NL80211_ATTR_PS_STATE				nlattr[NL80211_ATTR_PS_STATE, int32]
	NL80211_ATTR_CQM				nlattr[NL80211_ATTR_CQM, array[int8]]
	NL80211_ATTR_LOCAL_STATE_CHANGE			nlattr[NL80211_ATTR_LOCAL_STATE_CHANGE, void]
	NL80211_ATTR_AP_ISOLATE				nlattr[NL80211_ATTR_AP_ISOLATE, int8]
	NL80211_ATTR_WIPHY_TX_POWER_SETTING		nlattr[NL80211_ATTR_WIPHY_TX_POWER_SETTING, int32]
	NL80211_ATTR_WIPHY_TX_POWER_LEVEL		nlattr[NL80211_ATTR_WIPHY_TX_POWER_LEVEL, int32]
	NL80211_ATTR_FRAME_TYPE				nlattr[NL80211_ATTR_FRAME_TYPE, int16]
	NL80211_ATTR_CONTROL_PORT_ETHERTYPE		nlattr[NL80211_ATTR_CONTROL_PORT_ETHERTYPE, sock_port]
	NL80211_ATTR_CONTROL_PORT_NO_ENCRYPT		nlattr[NL80211_ATTR_CONTROL_PORT_NO_ENCRYPT, void]
	NL80211_ATTR_WIPHY_ANTENNA_TX			nlattr[NL80211_ATTR_WIPHY_ANTENNA_TX, int32]
	NL80211_ATTR_WIPHY_ANTENNA_RX			nlattr[NL80211_ATTR_WIPHY_ANTENNA_RX, int32]
	NL80211_ATTR_MCAST_RATE				nlattr[NL80211_ATTR_MCAST_RATE, int32]
	NL80211_ATTR_OFFCHANNEL_TX_OK			nlattr[NL80211_ATTR_OFFCHANNEL_TX_OK, void]
	NL80211_ATTR_BSS_HT_OPMODE			nlattr[NL80211_ATTR_BSS_HT_OPMODE, int16]
	NL80211_ATTR_KEY_DEFAULT_TYPES			nlattr[NL80211_ATTR_KEY_DEFAULT_TYPES, array[int8]]
	NL80211_ATTR_SUPPORT_MESH_AUTH			nlattr[NL80211_ATTR_SUPPORT_MESH_AUTH, void]
	NL80211_ATTR_STA_PLINK_STATE			nlattr[NL80211_ATTR_STA_PLINK_STATE, int8]
	NL80211_ATTR_WOWLAN_TRIGGERS			nlattr[NL80211_ATTR_WOWLAN_TRIGGERS, array[int8]]
	NL80211_ATTR_SCHED_SCAN_INTERVAL		nlattr[NL80211_ATTR_SCHED_SCAN_INTERVAL, int32]
	NL80211_ATTR_REKEY_DATA				nlattr[NL80211_ATTR_REKEY_DATA, array[int8]]
	NL80211_ATTR_SCAN_SUPP_RATES			nlattr[NL80211_ATTR_SCAN_SUPP_RATES, array[int8]]
	NL80211_ATTR_HIDDEN_SSID			nlattr[NL80211_ATTR_HIDDEN_SSID, int32]
	NL80211_ATTR_IE_PROBE_RESP			nlattr[NL80211_ATTR_IE_PROBE_RESP, array[int8, 0:2304]]
	NL80211_ATTR_IE_ASSOC_RESP			nlattr[NL80211_ATTR_IE_ASSOC_RESP, array[int8, 0:2304]]
	NL80211_ATTR_STA_WME				nlattr[NL80211_ATTR_STA_WME, int16]
	NL80211_ATTR_ROAM_SUPPORT			nlattr[NL80211_ATTR_ROAM_SUPPORT, void]
	NL80211_ATTR_SCHED_SCAN_MATCH			nlattr[NL80211_ATTR_SCHED_SCAN_MATCH, array[int8]]
	NL80211_ATTR_TX_NO_CCK_RATE			nlattr[NL80211_ATTR_TX_NO_CCK_RATE, void]
	NL80211_ATTR_TDLS_ACTION			nlattr[NL80211_ATTR_TDLS_ACTION, int8]
	NL80211_ATTR_TDLS_DIALOG_TOKEN			nlattr[NL80211_ATTR_TDLS_DIALOG_TOKEN, int8]
	NL80211_ATTR_TDLS_OPERATION			nlattr[NL80211_ATTR_TDLS_OPERATION, int8]
	NL80211_ATTR_TDLS_SUPPORT			nlattr[NL80211_ATTR_TDLS_SUPPORT, void]
	NL80211_ATTR_TDLS_EXTERNAL_SETUP		nlattr[NL80211_ATTR_TDLS_EXTERNAL_SETUP, void]
	NL80211_ATTR_DONT_WAIT_FOR_ACK			nlattr[NL80211_ATTR_DONT_WAIT_FOR_ACK, void]
	NL80211_ATTR_PROBE_RESP				nlattr[NL80211_ATTR_PROBE_RESP, array[int8, 0:2304]]
	NL80211_ATTR_DFS_REGION				nlattr[NL80211_ATTR_DFS_REGION, int8]
	NL80211_ATTR_DISABLE_HT				nlattr[NL80211_ATTR_DISABLE_HT, void]
	NL80211_ATTR_HT_CAPABILITY_MASK			nlattr[NL80211_ATTR_HT_CAPABILITY_MASK, array[int8, 26]]
	NL80211_ATTR_NOACK_MAP				nlattr[NL80211_ATTR_NOACK_MAP, int16]
	NL80211_ATTR_INACTIVITY_TIMEOUT			nlattr[NL80211_ATTR_INACTIVITY_TIMEOUT, int16]
	NL80211_ATTR_BG_SCAN_PERIOD			nlattr[NL80211_ATTR_BG_SCAN_PERIOD, int16]
	NL80211_ATTR_WDEV				nlattr[NL80211_ATTR_WDEV, int64]
	NL80211_ATTR_USER_REG_HINT_TYPE			nlattr[NL80211_ATTR_USER_REG_HINT_TYPE, int32]
	NL80211_ATTR_AUTH_DATA				nlattr[NL80211_ATTR_AUTH_DATA, array[int8]]
	NL80211_ATTR_VHT_CAPABILITY			nlattr[NL80211_ATTR_VHT_CAPABILITY, array[int8]]
	NL80211_ATTR_SCAN_FLAGS				nlattr[NL80211_ATTR_SCAN_FLAGS, int32]
	NL80211_ATTR_CHANNEL_WIDTH			nlattr[NL80211_ATTR_CHANNEL_WIDTH, int32]
	NL80211_ATTR_CENTER_FREQ1			nlattr[NL80211_ATTR_CENTER_FREQ1, int32]
	NL80211_ATTR_CENTER_FREQ2			nlattr[NL80211_ATTR_CENTER_FREQ2, int32]
	NL80211_ATTR_P2P_CTWINDOW			nlattr[NL80211_ATTR_P2P_CTWINDOW, int8]
	NL80211_ATTR_P2P_OPPPS				nlattr[NL80211_ATTR_P2P_OPPPS, int8]
	NL80211_ATTR_LOCAL_MESH_POWER_MODE		nlattr[NL80211_ATTR_LOCAL_MESH_POWER_MODE, int32]
	NL80211_ATTR_ACL_POLICY				nlattr[NL80211_ATTR_ACL_POLICY, int32]
	NL80211_ATTR_MAC_ADDRS				nlattr[NL80211_ATTR_MAC_ADDRS, array[int8]]
	NL80211_ATTR_STA_CAPABILITY			nlattr[NL80211_ATTR_STA_CAPABILITY, int16]
	NL80211_ATTR_STA_EXT_CAPABILITY			nlattr[NL80211_ATTR_STA_EXT_CAPABILITY, array[int8]]
	NL80211_ATTR_SPLIT_WIPHY_DUMP			nlattr[NL80211_ATTR_SPLIT_WIPHY_DUMP, void]
	NL80211_ATTR_DISABLE_VHT			nlattr[NL80211_ATTR_DISABLE_VHT, void]
	NL80211_ATTR_VHT_CAPABILITY_MASK		nlattr[NL80211_ATTR_VHT_CAPABILITY_MASK, array[int8, 12]]
	NL80211_ATTR_MDID				nlattr[NL80211_ATTR_MDID, int16]
	NL80211_ATTR_IE_RIC				nlattr[NL80211_ATTR_IE_RIC, array[int8, 0:2304]]
	NL80211_ATTR_CRIT_PROT_ID			nlattr[NL80211_ATTR_CRIT_PROT_ID, int16]
	NL80211_ATTR_MAX_CRIT_PROT_DURATION		nlattr[NL80211_ATTR_MAX_CRIT_PROT_DURATION, int16]
	NL80211_ATTR_PEER_AID				nlattr[NL80211_ATTR_PEER_AID, int16]
	NL80211_ATTR_CH_SWITCH_COUNT			nlattr[NL80211_ATTR_CH_SWITCH_COUNT, int32]
	NL80211_ATTR_CH_SWITCH_BLOCK_TX			nlattr[NL80211_ATTR_CH_SWITCH_BLOCK_TX, void]
	NL80211_ATTR_CSA_IES				nlattr[NL80211_ATTR_CSA_IES, array[int8]]
	NL80211_ATTR_CNTDWN_OFFS_BEACON			nlattr[NL80211_ATTR_CNTDWN_OFFS_BEACON, array[int8]]
	NL80211_ATTR_CNTDWN_OFFS_PRESP			nlattr[NL80211_ATTR_CNTDWN_OFFS_PRESP, array[int8]]
	NL80211_ATTR_STA_SUPPORTED_CHANNELS		nlattr[NL80211_ATTR_STA_SUPPORTED_CHANNELS, array[int8]]
	NL80211_ATTR_STA_SUPPORTED_OPER_CLASSES		nlattr[NL80211_ATTR_STA_SUPPORTED_OPER_CLASSES, array[int8]]
	NL80211_ATTR_HANDLE_DFS				nlattr[NL80211_ATTR_HANDLE_DFS, void]
	NL80211_ATTR_OPMODE_NOTIF			nlattr[NL80211_ATTR_OPMODE_NOTIF, int8]
	NL80211_ATTR_VENDOR_ID				nlattr[NL80211_ATTR_VENDOR_ID, int32]
	NL80211_ATTR_VENDOR_SUBCMD			nlattr[NL80211_ATTR_VENDOR_SUBCMD, int32]
	NL80211_ATTR_VENDOR_DATA			nlattr[NL80211_ATTR_VENDOR_DATA, array[int8]]
	NL80211_ATTR_QOS_MAP				nlattr[NL80211_ATTR_QOS_MAP, array[int8]]
	NL80211_ATTR_MAC_HINT				nlattr[NL80211_ATTR_MAC_HINT, array[int8]]
	NL80211_ATTR_WIPHY_FREQ_HINT			nlattr[NL80211_ATTR_WIPHY_FREQ_HINT, int32]
	NL80211_ATTR_TDLS_PEER_CAPABILITY		nlattr[NL80211_ATTR_TDLS_PEER_CAPABILITY, int32]
	NL80211_ATTR_SOCKET_OWNER			nlattr[NL80211_ATTR_SOCKET_OWNER, void]
	NL80211_ATTR_CSA_C_OFFSETS_TX			nlattr[NL80211_ATTR_CSA_C_OFFSETS_TX, array[int8]]
	NL80211_ATTR_TDLS_INITIATOR			nlattr[NL80211_ATTR_TDLS_INITIATOR, void]
	NL80211_ATTR_USE_RRM				nlattr[NL80211_ATTR_USE_RRM, void]
	NL80211_ATTR_WIPHY_DYN_ACK			nlattr[NL80211_ATTR_WIPHY_DYN_ACK, void]
	NL80211_ATTR_TSID				nlattr[NL80211_ATTR_TSID, int8]
	NL80211_ATTR_USER_PRIO				nlattr[NL80211_ATTR_USER_PRIO, int8]
	NL80211_ATTR_ADMITTED_TIME			nlattr[NL80211_ATTR_ADMITTED_TIME, int16]
	NL80211_ATTR_SMPS_MODE				nlattr[NL80211_ATTR_SMPS_MODE, int8]
	NL80211_ATTR_OPER_CLASS				nlattr[NL80211_ATTR_OPER_CLASS, int8]
	NL80211_ATTR_MAC_MASK				nlattr[NL80211_ATTR_MAC_MASK, array[int8]]
	NL80211_ATTR_WIPHY_SELF_MANAGED_REG		nlattr[NL80211_ATTR_WIPHY_SELF_MANAGED_REG, void]
	NL80211_ATTR_NETNS_FD				nlattr[NL80211_ATTR_NETNS_FD, fd_namespace]
	NL80211_ATTR_SCHED_SCAN_DELAY			nlattr[NL80211_ATTR_SCHED_SCAN_DELAY, int32]
	NL80211_ATTR_REG_INDOOR				nlattr[NL80211_ATTR_REG_INDOOR, void]
	NL80211_ATTR_PBSS				nlattr[NL80211_ATTR_PBSS, void]
	NL80211_ATTR_BSS_SELECT				nlattr[NL80211_ATTR_BSS_SELECT, array[int8]]
	NL80211_ATTR_STA_SUPPORT_P2P_PS			nlattr[NL80211_ATTR_STA_SUPPORT_P2P_PS, int8]
	NL80211_ATTR_MU_MIMO_GROUP_DATA			nlattr[NL80211_ATTR_MU_MIMO_GROUP_DATA, array[int8, 24]]
	NL80211_ATTR_MU_MIMO_FOLLOW_MAC_ADDR		nlattr[NL80211_ATTR_MU_MIMO_FOLLOW_MAC_ADDR, array[int8]]
	NL80211_ATTR_MEASUREMENT_DURATION		nlattr[NL80211_ATTR_MEASUREMENT_DURATION, int16]
	NL80211_ATTR_MEASUREMENT_DURATION_MANDATORY	nlattr[NL80211_ATTR_MEASUREMENT_DURATION_MANDATORY, void]
	NL80211_ATTR_MESH_PEER_AID			nlattr[NL80211_ATTR_MESH_PEER_AID, int16]
	NL80211_ATTR_NAN_MASTER_PREF			nlattr[NL80211_ATTR_NAN_MASTER_PREF, int8]
	NL80211_ATTR_BANDS				nlattr[NL80211_ATTR_BANDS, int32]
	NL80211_ATTR_NAN_FUNC				nlattr[NL80211_ATTR_NAN_FUNC, array[int8]]
	NL80211_ATTR_FILS_KEK				nlattr[NL80211_ATTR_FILS_KEK, array[int8, 0:64]]
	NL80211_ATTR_FILS_NONCES			nlattr[NL80211_ATTR_FILS_NONCES, array[int8]]
	NL80211_ATTR_MULTICAST_TO_UNICAST_ENABLED	nlattr[NL80211_ATTR_MULTICAST_TO_UNICAST_ENABLED, void]
	NL80211_ATTR_BSSID				nlattr[NL80211_ATTR_BSSID, array[int8]]
	NL80211_ATTR_SCHED_SCAN_RELATIVE_RSSI		nlattr[NL80211_ATTR_SCHED_SCAN_RELATIVE_RSSI, int8]
	NL80211_ATTR_SCHED_SCAN_RSSI_ADJUST		nlattr[NL80211_ATTR_SCHED_SCAN_RSSI_ADJUST, int16]
	NL80211_ATTR_TIMEOUT_REASON			nlattr[NL80211_ATTR_TIMEOUT_REASON, int32]
	NL80211_ATTR_FILS_ERP_USERNAME			nlattr[NL80211_ATTR_FILS_ERP_USERNAME, array[int8, 0:16]]
	NL80211_ATTR_FILS_ERP_REALM			nlattr[NL80211_ATTR_FILS_ERP_REALM, array[int8, 0:253]]
	NL80211_ATTR_FILS_ERP_NEXT_SEQ_NUM		nlattr[NL80211_ATTR_FILS_ERP_NEXT_SEQ_NUM, int16]
	NL80211_ATTR_FILS_ERP_RRK			nlattr[NL80211_ATTR_FILS_ERP_RRK, array[int8, 0:64]]
	NL80211_ATTR_FILS_CACHE_ID			nlattr[NL80211_ATTR_FILS_CACHE_ID, array[int8]]
	NL80211_ATTR_PMK				nlattr[NL80211_ATTR_PMK, array[int8, 0:64]]
	NL80211_ATTR_SCHED_SCAN_MULTI			nlattr[NL80211_ATTR_SCHED_SCAN_MULTI, void]
	NL80211_ATTR_PMKR0_NAME				nlattr[NL80211_ATTR_PMKR0_NAME, array[int8]]
	NL80211_ATTR_EXTERNAL_AUTH_SUPPORT		nlattr[NL80211_ATTR_EXTERNAL_AUTH_SUPPORT, void]
	NL80211_ATTR_CONTROL_PORT_OVER_NL80211		nlattr[NL80211_ATTR_CONTROL_PORT_OVER_NL80211, void]
	NL80211_ATTR_TXQ_LIMIT				nlattr[NL80211_ATTR_TXQ_LIMIT, int32]
	NL80211_ATTR_TXQ_MEMORY_LIMIT			nlattr[NL80211_ATTR_TXQ_MEMORY_LIMIT, int32]
	NL80211_ATTR_TXQ_QUANTUM			nlattr[NL80211_ATTR_TXQ_QUANTUM, int32]
	NL80211_ATTR_HE_CAPABILITY			nlattr[NL80211_ATTR_HE_CAPABILITY, array[int8, 0:54]]
	NL80211_ATTR_FTM_RESPONDER			nlattr[NL80211_ATTR_FTM_RESPONDER, array[int8, 3]]
	NL80211_ATTR_TIMEOUT				nlattr[NL80211_ATTR_TIMEOUT, int32]
	NL80211_ATTR_PEER_MEASUREMENTS			nlattr[NL80211_ATTR_PEER_MEASUREMENTS, array[int8, 5]]
	NL80211_ATTR_AIRTIME_WEIGHT			nlattr[NL80211_ATTR_AIRTIME_WEIGHT, int16]
	NL80211_ATTR_STA_TX_POWER_SETTING		nlattr[NL80211_ATTR_STA_TX_POWER_SETTING, int8]
	NL80211_ATTR_STA_TX_POWER			nlattr[NL80211_ATTR_STA_TX_POWER, int16]
	NL80211_ATTR_SAE_PASSWORD			nlattr[NL80211_ATTR_SAE_PASSWORD, array[int8, 0:128]]
	NL80211_ATTR_TWT_RESPONDER			nlattr[NL80211_ATTR_TWT_RESPONDER, void]
	NL80211_ATTR_HE_OBSS_PD				nlattr[NL80211_ATTR_HE_OBSS_PD, array[int8, 6]]
	NL80211_ATTR_WIPHY_EDMG_CHANNELS		nlattr[NL80211_ATTR_WIPHY_EDMG_CHANNELS, int8]
	NL80211_ATTR_WIPHY_EDMG_BW_CONFIG		nlattr[NL80211_ATTR_WIPHY_EDMG_BW_CONFIG, int8]
	NL80211_ATTR_VLAN_ID				nlattr[NL80211_ATTR_VLAN_ID, int16]
	NL80211_ATTR_HE_BSS_COLOR			nlattr[NL80211_ATTR_HE_BSS_COLOR, array[int8, 3]]
	NL80211_ATTR_TID_CONFIG				nlattr[NL80211_ATTR_TID_CONFIG, array[int8, 13]]
	NL80211_ATTR_CONTROL_PORT_NO_PREAUTH		nlattr[NL80211_ATTR_CONTROL_PORT_NO_PREAUTH, void]
	NL80211_ATTR_PMK_LIFETIME			nlattr[NL80211_ATTR_PMK_LIFETIME, int32]
	NL80211_ATTR_PMK_REAUTH_THRESHOLD		nlattr[NL80211_ATTR_PMK_REAUTH_THRESHOLD, int8]
	NL80211_ATTR_RECEIVE_MULTICAST			nlattr[NL80211_ATTR_RECEIVE_MULTICAST, void]
	NL80211_ATTR_WIPHY_FREQ_OFFSET			nlattr[NL80211_ATTR_WIPHY_FREQ_OFFSET, int32]
	NL80211_ATTR_CENTER_FREQ1_OFFSET		nlattr[NL80211_ATTR_CENTER_FREQ1_OFFSET, int32]
	NL80211_ATTR_SCAN_FREQ_KHZ			nlattr[NL80211_ATTR_SCAN_FREQ_KHZ, array[int8]]
	NL80211_ATTR_HE_6GHZ_CAPABILITY			nlattr[NL80211_ATTR_HE_6GHZ_CAPABILITY, array[int8]]
	NL80211_ATTR_FILS_DISCOVERY			nlattr[NL80211_ATTR_FILS_DISCOVERY, array[int8, 3]]
	NL80211_ATTR_UNSOL_BCAST_PROBE_RESP		nlattr[NL80211_ATTR_UNSOL_BCAST_PROBE_RESP, int16]
	NL80211_ATTR_S1G_CAPABILITY			nlattr[NL80211_ATTR_S1G_CAPABILITY, array[int8]]
	NL80211_ATTR_S1G_CAPABILITY_MASK		nlattr[NL80211_ATTR_S1G_CAPABILITY_MASK, array[int8]]
	NL80211_ATTR_SAE_PWE				nlattr[NL80211_ATTR_SAE_PWE, int8]
	NL80211_ATTR_RECONNECT_REQUESTED		nlattr[NL80211_ATTR_RECONNECT_REQUESTED, array[int8]]
	NL80211_ATTR_SAR_SPEC				nlattr[NL80211_ATTR_SAR_SPEC, int16]
	NL80211_ATTR_DISABLE_HE				nlattr[NL80211_ATTR_DISABLE_HE, void]
	NL80211_ATTR_OBSS_COLOR_BITMAP			nlattr[NL80211_ATTR_OBSS_COLOR_BITMAP, int64]
	NL80211_ATTR_COLOR_CHANGE_COUNT			nlattr[NL80211_ATTR_COLOR_CHANGE_COUNT, int8]
	NL80211_ATTR_COLOR_CHANGE_COLOR			nlattr[NL80211_ATTR_COLOR_CHANGE_COLOR, int8]
	NL80211_ATTR_COLOR_CHANGE_ELEMS			nlattr[NL80211_ATTR_COLOR_CHANGE_ELEMS, array[int8, 332]]
	NL80211_ATTR_MBSSID_CONFIG			nlattr[NL80211_ATTR_MBSSID_CONFIG, array[int8, 5]]
	NL80211_ATTR_MBSSID_ELEMS			nlattr[NL80211_ATTR_MBSSID_ELEMS, array[int8]]
	NL80211_ATTR_RADAR_BACKGROUND			nlattr[NL80211_ATTR_RADAR_BACKGROUND, void]
	NL80211_ATTR_AP_SETTINGS_FLAGS			nlattr[NL80211_ATTR_AP_SETTINGS_FLAGS, int32]
	NL80211_ATTR_EHT_CAPABILITY			nlattr[NL80211_ATTR_EHT_CAPABILITY, array[int8]]
	NL80211_ATTR_DISABLE_EHT			nlattr[NL80211_ATTR_DISABLE_EHT, void]
	NL80211_ATTR_MLO_LINKS				nlattr[NL80211_ATTR_MLO_LINKS, array[int8, 332]]
	NL80211_ATTR_MLO_LINK_ID			nlattr[NL80211_ATTR_MLO_LINK_ID, int8]
	NL80211_ATTR_MLD_ADDR				nlattr[NL80211_ATTR_MLD_ADDR, array[int8]]
	NL80211_ATTR_MLO_SUPPORT			nlattr[NL80211_ATTR_MLO_SUPPORT, void]
	NL80211_ATTR_MAX_NUM_AKM_SUITES			nlattr[NL80211_ATTR_MAX_NUM_AKM_SUITES, array[int8]]
	NL80211_ATTR_PUNCT_BITMAP			nlattr[NL80211_ATTR_PUNCT_BITMAP, int32]
	NL80211_ATTR_MAX_HW_TIMESTAMP_PEERS		nlattr[NL80211_ATTR_MAX_HW_TIMESTAMP_PEERS, int16]
	NL80211_ATTR_HW_TIMESTAMP_ENABLED		nlattr[NL80211_ATTR_HW_TIMESTAMP_ENABLED, void]
	NL80211_ATTR_EMA_RNR_ELEMS			nlattr[NL80211_ATTR_EMA_RNR_ELEMS, array[int8]]
	NL80211_ATTR_MLO_LINK_DISABLED			nlattr[NL80211_ATTR_MLO_LINK_DISABLED, void]
	NL80211_ATTR_BSS_DUMP_INCLUDE_USE_DATA		nlattr[NL80211_ATTR_BSS_DUMP_INCLUDE_USE_DATA, void]
	NL80211_ATTR_MLO_TTLM_DLINK			nlattr[NL80211_ATTR_MLO_TTLM_DLINK, array[int8]]
	NL80211_ATTR_MLO_TTLM_ULINK			nlattr[NL80211_ATTR_MLO_TTLM_ULINK, array[int8]]
	NL80211_ATTR_ASSOC_SPP_AMSDU			nlattr[NL80211_ATTR_ASSOC_SPP_AMSDU, void]
] [varlen]

nl80211_rekey_policy$auto_nl80211 [
	NL80211_REKEY_DATA_KEK		nlattr[NL80211_REKEY_DATA_KEK, array[int8, 0:32]]
	NL80211_REKEY_DATA_KCK		nlattr[NL80211_REKEY_DATA_KCK, array[int8, 0:32]]
	NL80211_REKEY_DATA_REPLAY_CTR	nlattr[NL80211_REKEY_DATA_REPLAY_CTR, array[int8]]
	NL80211_REKEY_DATA_AKM		nlattr[NL80211_REKEY_DATA_AKM, int32]
] [varlen]

nl80211_sta_wme_policy$auto_nl80211 [
	NL80211_STA_WME_UAPSD_QUEUES	nlattr[NL80211_STA_WME_UAPSD_QUEUES, int8]
	NL80211_STA_WME_MAX_SP		nlattr[NL80211_STA_WME_MAX_SP, int8]
] [varlen]

nl80211_tid_config_attr_policy$auto_nl80211 [
	NL80211_TID_CONFIG_ATTR_VIF_SUPP	nlattr[NL80211_TID_CONFIG_ATTR_VIF_SUPP, int64]
	NL80211_TID_CONFIG_ATTR_PEER_SUPP	nlattr[NL80211_TID_CONFIG_ATTR_PEER_SUPP, int64]
	NL80211_TID_CONFIG_ATTR_OVERRIDE	nlattr[NL80211_TID_CONFIG_ATTR_OVERRIDE, void]
	NL80211_TID_CONFIG_ATTR_TIDS		nlattr[NL80211_TID_CONFIG_ATTR_TIDS, int16]
	NL80211_TID_CONFIG_ATTR_NOACK		nlattr[NL80211_TID_CONFIG_ATTR_NOACK, int8]
	NL80211_TID_CONFIG_ATTR_RETRY_SHORT	nlattr[NL80211_TID_CONFIG_ATTR_RETRY_SHORT, int8]
	NL80211_TID_CONFIG_ATTR_RETRY_LONG	nlattr[NL80211_TID_CONFIG_ATTR_RETRY_LONG, int8]
	NL80211_TID_CONFIG_ATTR_AMPDU_CTRL	nlattr[NL80211_TID_CONFIG_ATTR_AMPDU_CTRL, int8]
	NL80211_TID_CONFIG_ATTR_RTSCTS_CTRL	nlattr[NL80211_TID_CONFIG_ATTR_RTSCTS_CTRL, int8]
	NL80211_TID_CONFIG_ATTR_AMSDU_CTRL	nlattr[NL80211_TID_CONFIG_ATTR_AMSDU_CTRL, int8]
	NL80211_TID_CONFIG_ATTR_TX_RATE_TYPE	nlattr[NL80211_TID_CONFIG_ATTR_TX_RATE_TYPE, int8]
	NL80211_TID_CONFIG_ATTR_TX_RATE		nlattr[NL80211_TID_CONFIG_ATTR_TX_RATE, array[int8, 7]]
] [varlen]

nl80211_txattr_policy$auto_nl80211 [
	NL80211_TXRATE_LEGACY	nlattr[NL80211_TXRATE_LEGACY, array[int8, 0:32]]
	NL80211_TXRATE_HT	nlattr[NL80211_TXRATE_HT, array[int8, 0:77]]
	NL80211_TXRATE_VHT	nlattr[NL80211_TXRATE_VHT, array[int8]]
	NL80211_TXRATE_GI	nlattr[NL80211_TXRATE_GI, int8]
	NL80211_TXRATE_HE	nlattr[NL80211_TXRATE_HE, array[int8]]
	NL80211_TXRATE_HE_GI	nlattr[NL80211_TXRATE_HE_GI, int8]
	NL80211_TXRATE_HE_LTF	nlattr[NL80211_TXRATE_HE_LTF, int8]
] [varlen]

nl80211_unsol_bcast_probe_resp_policy$auto_nl80211 [
	NL80211_UNSOL_BCAST_PROBE_RESP_ATTR_INT		nlattr[NL80211_UNSOL_BCAST_PROBE_RESP_ATTR_INT, int32]
	NL80211_UNSOL_BCAST_PROBE_RESP_ATTR_TMPL	nlattr[NL80211_UNSOL_BCAST_PROBE_RESP_ATTR_TMPL, array[int8, 0:2304]]
] [varlen]

nl80211_wowlan_policy$auto_nl80211 [
	NL80211_WOWLAN_TRIG_ANY			nlattr[NL80211_WOWLAN_TRIG_ANY, void]
	NL80211_WOWLAN_TRIG_DISCONNECT		nlattr[NL80211_WOWLAN_TRIG_DISCONNECT, void]
	NL80211_WOWLAN_TRIG_MAGIC_PKT		nlattr[NL80211_WOWLAN_TRIG_MAGIC_PKT, void]
	NL80211_WOWLAN_TRIG_PKT_PATTERN		nlattr[NL80211_WOWLAN_TRIG_PKT_PATTERN, array[int8]]
	NL80211_WOWLAN_TRIG_GTK_REKEY_FAILURE	nlattr[NL80211_WOWLAN_TRIG_GTK_REKEY_FAILURE, void]
	NL80211_WOWLAN_TRIG_EAP_IDENT_REQUEST	nlattr[NL80211_WOWLAN_TRIG_EAP_IDENT_REQUEST, void]
	NL80211_WOWLAN_TRIG_4WAY_HANDSHAKE	nlattr[NL80211_WOWLAN_TRIG_4WAY_HANDSHAKE, void]
	NL80211_WOWLAN_TRIG_RFKILL_RELEASE	nlattr[NL80211_WOWLAN_TRIG_RFKILL_RELEASE, void]
	NL80211_WOWLAN_TRIG_TCP_CONNECTION	nlattr[NL80211_WOWLAN_TRIG_TCP_CONNECTION, array[int8]]
	NL80211_WOWLAN_TRIG_NET_DETECT		nlattr[NL80211_WOWLAN_TRIG_NET_DETECT, array[int8]]
] [varlen]

nl80211_wowlan_tcp_policy$auto_nl80211 [
	NL80211_WOWLAN_TCP_SRC_IPV4		nlattr[NL80211_WOWLAN_TCP_SRC_IPV4, ipv4_addr]
	NL80211_WOWLAN_TCP_DST_IPV4		nlattr[NL80211_WOWLAN_TCP_DST_IPV4, ipv4_addr]
	NL80211_WOWLAN_TCP_DST_MAC		nlattr[NL80211_WOWLAN_TCP_DST_MAC, array[int8]]
	NL80211_WOWLAN_TCP_SRC_PORT		nlattr[NL80211_WOWLAN_TCP_SRC_PORT, sock_port]
	NL80211_WOWLAN_TCP_DST_PORT		nlattr[NL80211_WOWLAN_TCP_DST_PORT, sock_port]
	NL80211_WOWLAN_TCP_DATA_PAYLOAD		nlattr[NL80211_WOWLAN_TCP_DATA_PAYLOAD, array[int8]]
	NL80211_WOWLAN_TCP_DATA_PAYLOAD_SEQ	nlattr[NL80211_WOWLAN_TCP_DATA_PAYLOAD_SEQ, array[int8, 12]]
	NL80211_WOWLAN_TCP_DATA_PAYLOAD_TOKEN	nlattr[NL80211_WOWLAN_TCP_DATA_PAYLOAD_TOKEN, int64]
	NL80211_WOWLAN_TCP_DATA_INTERVAL	nlattr[NL80211_WOWLAN_TCP_DATA_INTERVAL, int32]
	NL80211_WOWLAN_TCP_WAKE_PAYLOAD		nlattr[NL80211_WOWLAN_TCP_WAKE_PAYLOAD, array[int8]]
	NL80211_WOWLAN_TCP_WAKE_MASK		nlattr[NL80211_WOWLAN_TCP_WAKE_MASK, array[int8]]
] [varlen]

nl802154_dev_addr_policy$auto_nl802154 [
	NL802154_DEV_ADDR_ATTR_PAN_ID	nlattr[NL802154_DEV_ADDR_ATTR_PAN_ID, int16]
	NL802154_DEV_ADDR_ATTR_MODE	nlattr[NL802154_DEV_ADDR_ATTR_MODE, int32]
	NL802154_DEV_ADDR_ATTR_SHORT	nlattr[NL802154_DEV_ADDR_ATTR_SHORT, int16]
	NL802154_DEV_ADDR_ATTR_EXTENDED	nlattr[NL802154_DEV_ADDR_ATTR_EXTENDED, int64]
] [varlen]

nl802154_dev_policy$auto_nl802154 [
	NL802154_DEV_ATTR_FRAME_COUNTER		nlattr[NL802154_DEV_ATTR_FRAME_COUNTER, int32]
	NL802154_DEV_ATTR_PAN_ID		nlattr[NL802154_DEV_ATTR_PAN_ID, int16]
	NL802154_DEV_ATTR_SHORT_ADDR		nlattr[NL802154_DEV_ATTR_SHORT_ADDR, int16]
	NL802154_DEV_ATTR_EXTENDED_ADDR		nlattr[NL802154_DEV_ATTR_EXTENDED_ADDR, int64]
	NL802154_DEV_ATTR_SECLEVEL_EXEMPT	nlattr[NL802154_DEV_ATTR_SECLEVEL_EXEMPT, int8]
	NL802154_DEV_ATTR_KEY_MODE		nlattr[NL802154_DEV_ATTR_KEY_MODE, int32]
] [varlen]

nl802154_devkey_policy$auto_nl802154 [
	NL802154_DEVKEY_ATTR_FRAME_COUNTER	nlattr[NL802154_DEVKEY_ATTR_FRAME_COUNTER, int32]
	NL802154_DEVKEY_ATTR_EXTENDED_ADDR	nlattr[NL802154_DEVKEY_ATTR_EXTENDED_ADDR, int64]
	NL802154_DEVKEY_ATTR_ID			nlattr[NL802154_DEVKEY_ATTR_ID, array[int8]]
] [varlen]

nl802154_key_id_policy$auto_nl802154 [
	NL802154_KEY_ID_ATTR_MODE		nlattr[NL802154_KEY_ID_ATTR_MODE, int32]
	NL802154_KEY_ID_ATTR_INDEX		nlattr[NL802154_KEY_ID_ATTR_INDEX, int8]
	NL802154_KEY_ID_ATTR_IMPLICIT		nlattr[NL802154_KEY_ID_ATTR_IMPLICIT, array[int8]]
	NL802154_KEY_ID_ATTR_SOURCE_SHORT	nlattr[NL802154_KEY_ID_ATTR_SOURCE_SHORT, int32]
	NL802154_KEY_ID_ATTR_SOURCE_EXTENDED	nlattr[NL802154_KEY_ID_ATTR_SOURCE_EXTENDED, int64]
] [varlen]

nl802154_key_policy$auto_nl802154 [
	NL802154_KEY_ATTR_ID		nlattr[NL802154_KEY_ATTR_ID, array[int8]]
	NL802154_KEY_ATTR_USAGE_FRAMES	nlattr[NL802154_KEY_ATTR_USAGE_FRAMES, int8]
	NL802154_KEY_ATTR_USAGE_CMDS	nlattr[NL802154_KEY_ATTR_USAGE_CMDS, array[int8, 32]]
	NL802154_KEY_ATTR_BYTES		nlattr[NL802154_KEY_ATTR_BYTES, array[int8, 16]]
] [varlen]

nl802154_policy$auto_nl802154 [
	NL802154_ATTR_WPAN_PHY			nlattr[NL802154_ATTR_WPAN_PHY, int32]
	NL802154_ATTR_WPAN_PHY_NAME		nlattr[NL802154_ATTR_WPAN_PHY_NAME, string]
	NL802154_ATTR_IFINDEX			nlattr[NL802154_ATTR_IFINDEX, ifindex]
	NL802154_ATTR_IFNAME			nlattr[NL802154_ATTR_IFNAME, devname]
	NL802154_ATTR_IFTYPE			nlattr[NL802154_ATTR_IFTYPE, int32]
	NL802154_ATTR_WPAN_DEV			nlattr[NL802154_ATTR_WPAN_DEV, int64]
	NL802154_ATTR_PAGE			nlattr[NL802154_ATTR_PAGE, int8]
	NL802154_ATTR_CHANNEL			nlattr[NL802154_ATTR_CHANNEL, int8]
	NL802154_ATTR_PAN_ID			nlattr[NL802154_ATTR_PAN_ID, int16]
	NL802154_ATTR_SHORT_ADDR		nlattr[NL802154_ATTR_SHORT_ADDR, int16]
	NL802154_ATTR_TX_POWER			nlattr[NL802154_ATTR_TX_POWER, int32]
	NL802154_ATTR_CCA_MODE			nlattr[NL802154_ATTR_CCA_MODE, int32]
	NL802154_ATTR_CCA_OPT			nlattr[NL802154_ATTR_CCA_OPT, int32]
	NL802154_ATTR_CCA_ED_LEVEL		nlattr[NL802154_ATTR_CCA_ED_LEVEL, int32]
	NL802154_ATTR_MAX_FRAME_RETRIES		nlattr[NL802154_ATTR_MAX_FRAME_RETRIES, int8]
	NL802154_ATTR_MAX_BE			nlattr[NL802154_ATTR_MAX_BE, int8]
	NL802154_ATTR_MIN_BE			nlattr[NL802154_ATTR_MIN_BE, int8]
	NL802154_ATTR_MAX_CSMA_BACKOFFS		nlattr[NL802154_ATTR_MAX_CSMA_BACKOFFS, int8]
	NL802154_ATTR_LBT_MODE			nlattr[NL802154_ATTR_LBT_MODE, int8]
	NL802154_ATTR_SUPPORTED_CHANNEL		nlattr[NL802154_ATTR_SUPPORTED_CHANNEL, int32]
	NL802154_ATTR_EXTENDED_ADDR		nlattr[NL802154_ATTR_EXTENDED_ADDR, int64]
	NL802154_ATTR_WPAN_PHY_CAPS		nlattr[NL802154_ATTR_WPAN_PHY_CAPS, array[int8]]
	NL802154_ATTR_SUPPORTED_COMMANDS	nlattr[NL802154_ATTR_SUPPORTED_COMMANDS, array[int8]]
	NL802154_ATTR_ACKREQ_DEFAULT		nlattr[NL802154_ATTR_ACKREQ_DEFAULT, int8]
	NL802154_ATTR_PID			nlattr[NL802154_ATTR_PID, int32]
	NL802154_ATTR_NETNS_FD			nlattr[NL802154_ATTR_NETNS_FD, fd_namespace]
	NL802154_ATTR_COORDINATOR		nlattr[NL802154_ATTR_COORDINATOR, array[int8]]
	NL802154_ATTR_SCAN_TYPE			nlattr[NL802154_ATTR_SCAN_TYPE, int8]
	NL802154_ATTR_SCAN_CHANNELS		nlattr[NL802154_ATTR_SCAN_CHANNELS, int32]
	NL802154_ATTR_SCAN_PREAMBLE_CODES	nlattr[NL802154_ATTR_SCAN_PREAMBLE_CODES, array[int8]]
	NL802154_ATTR_SCAN_MEAN_PRF		nlattr[NL802154_ATTR_SCAN_MEAN_PRF, array[int8]]
	NL802154_ATTR_SCAN_DURATION		nlattr[NL802154_ATTR_SCAN_DURATION, int8]
	NL802154_ATTR_SCAN_DONE_REASON		nlattr[NL802154_ATTR_SCAN_DONE_REASON, int8]
	NL802154_ATTR_BEACON_INTERVAL		nlattr[NL802154_ATTR_BEACON_INTERVAL, int8]
	NL802154_ATTR_MAX_ASSOCIATIONS		nlattr[NL802154_ATTR_MAX_ASSOCIATIONS, int32]
	NL802154_ATTR_PEER			nlattr[NL802154_ATTR_PEER, array[int8]]
	NL802154_ATTR_SEC_ENABLED		nlattr[NL802154_ATTR_SEC_ENABLED, bool8]
	NL802154_ATTR_SEC_OUT_LEVEL		nlattr[NL802154_ATTR_SEC_OUT_LEVEL, int32]
	NL802154_ATTR_SEC_OUT_KEY_ID		nlattr[NL802154_ATTR_SEC_OUT_KEY_ID, array[int8]]
	NL802154_ATTR_SEC_FRAME_COUNTER		nlattr[NL802154_ATTR_SEC_FRAME_COUNTER, int32]
	NL802154_ATTR_SEC_LEVEL			nlattr[NL802154_ATTR_SEC_LEVEL, array[int8]]
	NL802154_ATTR_SEC_DEVICE		nlattr[NL802154_ATTR_SEC_DEVICE, array[int8]]
	NL802154_ATTR_SEC_DEVKEY		nlattr[NL802154_ATTR_SEC_DEVKEY, array[int8]]
	NL802154_ATTR_SEC_KEY			nlattr[NL802154_ATTR_SEC_KEY, array[int8]]
] [varlen]

nl802154_seclevel_policy$auto_nl802154 [
	NL802154_SECLEVEL_ATTR_LEVELS		nlattr[NL802154_SECLEVEL_ATTR_LEVELS, int8]
	NL802154_SECLEVEL_ATTR_FRAME		nlattr[NL802154_SECLEVEL_ATTR_FRAME, int32]
	NL802154_SECLEVEL_ATTR_CMD_FRAME	nlattr[NL802154_SECLEVEL_ATTR_CMD_FRAME, int32]
	NL802154_SECLEVEL_ATTR_DEV_OVERRIDE	nlattr[NL802154_SECLEVEL_ATTR_DEV_OVERRIDE, int8]
] [varlen]

nl_neightbl_policy$auto_neighbour [
	NDTA_NAME		nlattr[NDTA_NAME, stringnoz]
	NDTA_THRESH1		nlattr[NDTA_THRESH1, int32]
	NDTA_THRESH2		nlattr[NDTA_THRESH2, int32]
	NDTA_THRESH3		nlattr[NDTA_THRESH3, int32]
	NDTA_PARMS		nlattr[NDTA_PARMS, array[int8]]
	NDTA_GC_INTERVAL	nlattr[NDTA_GC_INTERVAL, int64]
] [varlen]

nl_ntbl_parm_policy$auto_neighbour [
	NDTPA_IFINDEX			nlattr[NDTPA_IFINDEX, ifindex]
	NDTPA_BASE_REACHABLE_TIME	nlattr[NDTPA_BASE_REACHABLE_TIME, int64]
	NDTPA_RETRANS_TIME		nlattr[NDTPA_RETRANS_TIME, int64]
	NDTPA_GC_STALETIME		nlattr[NDTPA_GC_STALETIME, int64]
	NDTPA_DELAY_PROBE_TIME		nlattr[NDTPA_DELAY_PROBE_TIME, int64]
	NDTPA_QUEUE_LEN			nlattr[NDTPA_QUEUE_LEN, int32]
	NDTPA_APP_PROBES		nlattr[NDTPA_APP_PROBES, int32]
	NDTPA_UCAST_PROBES		nlattr[NDTPA_UCAST_PROBES, int32]
	NDTPA_MCAST_PROBES		nlattr[NDTPA_MCAST_PROBES, int32]
	NDTPA_ANYCAST_DELAY		nlattr[NDTPA_ANYCAST_DELAY, int64]
	NDTPA_PROXY_DELAY		nlattr[NDTPA_PROXY_DELAY, int64]
	NDTPA_PROXY_QLEN		nlattr[NDTPA_PROXY_QLEN, int32]
	NDTPA_LOCKTIME			nlattr[NDTPA_LOCKTIME, int64]
	NDTPA_MCAST_REPROBES		nlattr[NDTPA_MCAST_REPROBES, int32]
	NDTPA_INTERVAL_PROBE_TIME_MS	nlattr[NDTPA_INTERVAL_PROBE_TIME_MS, int64]
] [varlen]

nldev_policy$auto_nldev [
	RDMA_NLDEV_ATTR_DEV_INDEX			nlattr[RDMA_NLDEV_ATTR_DEV_INDEX, int32]
	RDMA_NLDEV_ATTR_DEV_NAME			nlattr[RDMA_NLDEV_ATTR_DEV_NAME, devname]
	RDMA_NLDEV_ATTR_PORT_INDEX			nlattr[RDMA_NLDEV_ATTR_PORT_INDEX, int32]
	RDMA_NLDEV_ATTR_FW_VERSION			nlattr[RDMA_NLDEV_ATTR_FW_VERSION, string]
	RDMA_NLDEV_ATTR_NODE_GUID			nlattr[RDMA_NLDEV_ATTR_NODE_GUID, int64]
	RDMA_NLDEV_ATTR_SYS_IMAGE_GUID			nlattr[RDMA_NLDEV_ATTR_SYS_IMAGE_GUID, int64]
	RDMA_NLDEV_ATTR_SUBNET_PREFIX			nlattr[RDMA_NLDEV_ATTR_SUBNET_PREFIX, int64]
	RDMA_NLDEV_ATTR_LID				nlattr[RDMA_NLDEV_ATTR_LID, int32]
	RDMA_NLDEV_ATTR_SM_LID				nlattr[RDMA_NLDEV_ATTR_SM_LID, int32]
	RDMA_NLDEV_ATTR_LMC				nlattr[RDMA_NLDEV_ATTR_LMC, int8]
	RDMA_NLDEV_ATTR_PORT_STATE			nlattr[RDMA_NLDEV_ATTR_PORT_STATE, int8]
	RDMA_NLDEV_ATTR_PORT_PHYS_STATE			nlattr[RDMA_NLDEV_ATTR_PORT_PHYS_STATE, int8]
	RDMA_NLDEV_ATTR_DEV_NODE_TYPE			nlattr[RDMA_NLDEV_ATTR_DEV_NODE_TYPE, int8]
	RDMA_NLDEV_ATTR_RES_SUMMARY			nlattr[RDMA_NLDEV_ATTR_RES_SUMMARY, array[int8]]
	RDMA_NLDEV_ATTR_RES_SUMMARY_ENTRY		nlattr[RDMA_NLDEV_ATTR_RES_SUMMARY_ENTRY, array[int8]]
	RDMA_NLDEV_ATTR_RES_SUMMARY_ENTRY_NAME		nlattr[RDMA_NLDEV_ATTR_RES_SUMMARY_ENTRY_NAME, string]
	RDMA_NLDEV_ATTR_RES_SUMMARY_ENTRY_CURR		nlattr[RDMA_NLDEV_ATTR_RES_SUMMARY_ENTRY_CURR, int64]
	RDMA_NLDEV_ATTR_RES_QP				nlattr[RDMA_NLDEV_ATTR_RES_QP, array[int8]]
	RDMA_NLDEV_ATTR_RES_QP_ENTRY			nlattr[RDMA_NLDEV_ATTR_RES_QP_ENTRY, array[int8]]
	RDMA_NLDEV_ATTR_RES_LQPN			nlattr[RDMA_NLDEV_ATTR_RES_LQPN, int32]
	RDMA_NLDEV_ATTR_RES_RQPN			nlattr[RDMA_NLDEV_ATTR_RES_RQPN, int32]
	RDMA_NLDEV_ATTR_RES_RQ_PSN			nlattr[RDMA_NLDEV_ATTR_RES_RQ_PSN, int32]
	RDMA_NLDEV_ATTR_RES_SQ_PSN			nlattr[RDMA_NLDEV_ATTR_RES_SQ_PSN, int32]
	RDMA_NLDEV_ATTR_RES_PATH_MIG_STATE		nlattr[RDMA_NLDEV_ATTR_RES_PATH_MIG_STATE, int8]
	RDMA_NLDEV_ATTR_RES_TYPE			nlattr[RDMA_NLDEV_ATTR_RES_TYPE, int8]
	RDMA_NLDEV_ATTR_RES_STATE			nlattr[RDMA_NLDEV_ATTR_RES_STATE, int8]
	RDMA_NLDEV_ATTR_RES_PID				nlattr[RDMA_NLDEV_ATTR_RES_PID, int32]
	RDMA_NLDEV_ATTR_RES_KERN_NAME			nlattr[RDMA_NLDEV_ATTR_RES_KERN_NAME, string]
	RDMA_NLDEV_ATTR_RES_CM_ID			nlattr[RDMA_NLDEV_ATTR_RES_CM_ID, array[int8]]
	RDMA_NLDEV_ATTR_RES_CM_ID_ENTRY			nlattr[RDMA_NLDEV_ATTR_RES_CM_ID_ENTRY, array[int8]]
	RDMA_NLDEV_ATTR_RES_PS				nlattr[RDMA_NLDEV_ATTR_RES_PS, int32]
	RDMA_NLDEV_ATTR_RES_SRC_ADDR			nlattr[RDMA_NLDEV_ATTR_RES_SRC_ADDR, array[int8, 128]]
	RDMA_NLDEV_ATTR_RES_DST_ADDR			nlattr[RDMA_NLDEV_ATTR_RES_DST_ADDR, array[int8, 128]]
	RDMA_NLDEV_ATTR_RES_CQ				nlattr[RDMA_NLDEV_ATTR_RES_CQ, array[int8]]
	RDMA_NLDEV_ATTR_RES_CQ_ENTRY			nlattr[RDMA_NLDEV_ATTR_RES_CQ_ENTRY, array[int8]]
	RDMA_NLDEV_ATTR_RES_CQE				nlattr[RDMA_NLDEV_ATTR_RES_CQE, int32]
	RDMA_NLDEV_ATTR_RES_USECNT			nlattr[RDMA_NLDEV_ATTR_RES_USECNT, int64]
	RDMA_NLDEV_ATTR_RES_POLL_CTX			nlattr[RDMA_NLDEV_ATTR_RES_POLL_CTX, int8]
	RDMA_NLDEV_ATTR_RES_MR				nlattr[RDMA_NLDEV_ATTR_RES_MR, array[int8]]
	RDMA_NLDEV_ATTR_RES_MR_ENTRY			nlattr[RDMA_NLDEV_ATTR_RES_MR_ENTRY, array[int8]]
	RDMA_NLDEV_ATTR_RES_RKEY			nlattr[RDMA_NLDEV_ATTR_RES_RKEY, int32]
	RDMA_NLDEV_ATTR_RES_LKEY			nlattr[RDMA_NLDEV_ATTR_RES_LKEY, int32]
	RDMA_NLDEV_ATTR_RES_IOVA			nlattr[RDMA_NLDEV_ATTR_RES_IOVA, int64]
	RDMA_NLDEV_ATTR_RES_MRLEN			nlattr[RDMA_NLDEV_ATTR_RES_MRLEN, int64]
	RDMA_NLDEV_ATTR_RES_PD				nlattr[RDMA_NLDEV_ATTR_RES_PD, array[int8]]
	RDMA_NLDEV_ATTR_RES_PD_ENTRY			nlattr[RDMA_NLDEV_ATTR_RES_PD_ENTRY, array[int8]]
	RDMA_NLDEV_ATTR_RES_LOCAL_DMA_LKEY		nlattr[RDMA_NLDEV_ATTR_RES_LOCAL_DMA_LKEY, int32]
	RDMA_NLDEV_ATTR_RES_UNSAFE_GLOBAL_RKEY		nlattr[RDMA_NLDEV_ATTR_RES_UNSAFE_GLOBAL_RKEY, int32]
	RDMA_NLDEV_ATTR_NDEV_INDEX			nlattr[RDMA_NLDEV_ATTR_NDEV_INDEX, int32]
	RDMA_NLDEV_ATTR_NDEV_NAME			nlattr[RDMA_NLDEV_ATTR_NDEV_NAME, devname]
	RDMA_NLDEV_ATTR_DRIVER				nlattr[RDMA_NLDEV_ATTR_DRIVER, array[int8]]
	RDMA_NLDEV_ATTR_DRIVER_ENTRY			nlattr[RDMA_NLDEV_ATTR_DRIVER_ENTRY, array[int8]]
	RDMA_NLDEV_ATTR_DRIVER_STRING			nlattr[RDMA_NLDEV_ATTR_DRIVER_STRING, string]
	RDMA_NLDEV_ATTR_DRIVER_PRINT_TYPE		nlattr[RDMA_NLDEV_ATTR_DRIVER_PRINT_TYPE, int8]
	RDMA_NLDEV_ATTR_DRIVER_S32			nlattr[RDMA_NLDEV_ATTR_DRIVER_S32, int32]
	RDMA_NLDEV_ATTR_DRIVER_U32			nlattr[RDMA_NLDEV_ATTR_DRIVER_U32, int32]
	RDMA_NLDEV_ATTR_DRIVER_S64			nlattr[RDMA_NLDEV_ATTR_DRIVER_S64, int64]
	RDMA_NLDEV_ATTR_DRIVER_U64			nlattr[RDMA_NLDEV_ATTR_DRIVER_U64, int64]
	RDMA_NLDEV_ATTR_RES_PDN				nlattr[RDMA_NLDEV_ATTR_RES_PDN, int32]
	RDMA_NLDEV_ATTR_RES_CQN				nlattr[RDMA_NLDEV_ATTR_RES_CQN, int32]
	RDMA_NLDEV_ATTR_RES_MRN				nlattr[RDMA_NLDEV_ATTR_RES_MRN, int32]
	RDMA_NLDEV_ATTR_RES_CM_IDN			nlattr[RDMA_NLDEV_ATTR_RES_CM_IDN, int32]
	RDMA_NLDEV_ATTR_RES_CTXN			nlattr[RDMA_NLDEV_ATTR_RES_CTXN, int32]
	RDMA_NLDEV_ATTR_LINK_TYPE			nlattr[RDMA_NLDEV_ATTR_LINK_TYPE, string]
	RDMA_NLDEV_SYS_ATTR_NETNS_MODE			nlattr[RDMA_NLDEV_SYS_ATTR_NETNS_MODE, int8]
	RDMA_NLDEV_ATTR_DEV_PROTOCOL			nlattr[RDMA_NLDEV_ATTR_DEV_PROTOCOL, string]
	RDMA_NLDEV_NET_NS_FD				nlattr[RDMA_NLDEV_NET_NS_FD, fd_namespace]
	RDMA_NLDEV_ATTR_CHARDEV_TYPE			nlattr[RDMA_NLDEV_ATTR_CHARDEV_TYPE, string]
	RDMA_NLDEV_ATTR_CHARDEV_NAME			nlattr[RDMA_NLDEV_ATTR_CHARDEV_NAME, devname]
	RDMA_NLDEV_ATTR_CHARDEV_ABI			nlattr[RDMA_NLDEV_ATTR_CHARDEV_ABI, int64]
	RDMA_NLDEV_ATTR_CHARDEV				nlattr[RDMA_NLDEV_ATTR_CHARDEV, int64]
	RDMA_NLDEV_ATTR_UVERBS_DRIVER_ID		nlattr[RDMA_NLDEV_ATTR_UVERBS_DRIVER_ID, int32]
	RDMA_NLDEV_ATTR_STAT_MODE			nlattr[RDMA_NLDEV_ATTR_STAT_MODE, int32]
	RDMA_NLDEV_ATTR_STAT_RES			nlattr[RDMA_NLDEV_ATTR_STAT_RES, int32]
	RDMA_NLDEV_ATTR_STAT_AUTO_MODE_MASK		nlattr[RDMA_NLDEV_ATTR_STAT_AUTO_MODE_MASK, int32]
	RDMA_NLDEV_ATTR_STAT_COUNTER			nlattr[RDMA_NLDEV_ATTR_STAT_COUNTER, array[int8]]
	RDMA_NLDEV_ATTR_STAT_COUNTER_ENTRY		nlattr[RDMA_NLDEV_ATTR_STAT_COUNTER_ENTRY, array[int8]]
	RDMA_NLDEV_ATTR_STAT_COUNTER_ID			nlattr[RDMA_NLDEV_ATTR_STAT_COUNTER_ID, int32]
	RDMA_NLDEV_ATTR_STAT_HWCOUNTERS			nlattr[RDMA_NLDEV_ATTR_STAT_HWCOUNTERS, array[int8]]
	RDMA_NLDEV_ATTR_STAT_HWCOUNTER_ENTRY		nlattr[RDMA_NLDEV_ATTR_STAT_HWCOUNTER_ENTRY, array[int8]]
	RDMA_NLDEV_ATTR_STAT_HWCOUNTER_ENTRY_NAME	nlattr[RDMA_NLDEV_ATTR_STAT_HWCOUNTER_ENTRY_NAME, string]
	RDMA_NLDEV_ATTR_STAT_HWCOUNTER_ENTRY_VALUE	nlattr[RDMA_NLDEV_ATTR_STAT_HWCOUNTER_ENTRY_VALUE, int64]
	RDMA_NLDEV_ATTR_DEV_DIM				nlattr[RDMA_NLDEV_ATTR_DEV_DIM, int8]
	RDMA_NLDEV_ATTR_RES_RAW				nlattr[RDMA_NLDEV_ATTR_RES_RAW, array[int8]]
	RDMA_NLDEV_ATTR_RES_CTX				nlattr[RDMA_NLDEV_ATTR_RES_CTX, array[int8]]
	RDMA_NLDEV_ATTR_RES_CTX_ENTRY			nlattr[RDMA_NLDEV_ATTR_RES_CTX_ENTRY, array[int8]]
	RDMA_NLDEV_ATTR_RES_SRQ				nlattr[RDMA_NLDEV_ATTR_RES_SRQ, array[int8]]
	RDMA_NLDEV_ATTR_RES_SRQ_ENTRY			nlattr[RDMA_NLDEV_ATTR_RES_SRQ_ENTRY, array[int8]]
	RDMA_NLDEV_ATTR_RES_SRQN			nlattr[RDMA_NLDEV_ATTR_RES_SRQN, int32]
	RDMA_NLDEV_ATTR_MIN_RANGE			nlattr[RDMA_NLDEV_ATTR_MIN_RANGE, int32]
	RDMA_NLDEV_ATTR_MAX_RANGE			nlattr[RDMA_NLDEV_ATTR_MAX_RANGE, int32]
	RDMA_NLDEV_SYS_ATTR_COPY_ON_FORK		nlattr[RDMA_NLDEV_SYS_ATTR_COPY_ON_FORK, int8]
	RDMA_NLDEV_ATTR_STAT_HWCOUNTER_INDEX		nlattr[RDMA_NLDEV_ATTR_STAT_HWCOUNTER_INDEX, int32]
	RDMA_NLDEV_ATTR_STAT_HWCOUNTER_DYNAMIC		nlattr[RDMA_NLDEV_ATTR_STAT_HWCOUNTER_DYNAMIC, int8]
	RDMA_NLDEV_SYS_ATTR_PRIVILEGED_QKEY_MODE	nlattr[RDMA_NLDEV_SYS_ATTR_PRIVILEGED_QKEY_MODE, int8]
	RDMA_NLDEV_ATTR_DRIVER_DETAILS			nlattr[RDMA_NLDEV_ATTR_DRIVER_DETAILS, int8]
	RDMA_NLDEV_ATTR_RES_SUBTYPE			nlattr[RDMA_NLDEV_ATTR_RES_SUBTYPE, string]
	RDMA_NLDEV_ATTR_DEV_TYPE			nlattr[RDMA_NLDEV_ATTR_DEV_TYPE, int8]
	RDMA_NLDEV_ATTR_PARENT_NAME			nlattr[RDMA_NLDEV_ATTR_PARENT_NAME, string]
	RDMA_NLDEV_ATTR_NAME_ASSIGN_TYPE		nlattr[RDMA_NLDEV_ATTR_NAME_ASSIGN_TYPE, int8]
] [varlen]

packet_policy$auto_datapath [
	OVS_PACKET_ATTR_PACKET	nlattr[OVS_PACKET_ATTR_PACKET, array[int8, 14]]
	OVS_PACKET_ATTR_KEY	nlattr[OVS_PACKET_ATTR_KEY, array[int8]]
	OVS_PACKET_ATTR_ACTIONS	nlattr[OVS_PACKET_ATTR_ACTIONS, array[int8]]
	OVS_PACKET_ATTR_PROBE	nlattr[OVS_PACKET_ATTR_PROBE, void]
	OVS_PACKET_ATTR_MRU	nlattr[OVS_PACKET_ATTR_MRU, int16]
	OVS_PACKET_ATTR_HASH	nlattr[OVS_PACKET_ATTR_HASH, int64]
] [varlen]

pedit_key_ex_policy$auto_act_pedit [
	TCA_PEDIT_KEY_EX_HTYPE	nlattr[TCA_PEDIT_KEY_EX_HTYPE, int16]
	TCA_PEDIT_KEY_EX_CMD	nlattr[TCA_PEDIT_KEY_EX_CMD, int16]
] [varlen]

pedit_policy$auto_act_pedit [
	TCA_PEDIT_PARMS		nlattr[TCA_PEDIT_PARMS, array[int8, 24]]
	TCA_PEDIT_PARMS_EX	nlattr[TCA_PEDIT_PARMS_EX, array[int8, 24]]
	TCA_PEDIT_KEYS_EX	nlattr[TCA_PEDIT_KEYS_EX, array[int8]]
] [varlen]

peer_policy$auto_netlink [
	WGPEER_A_PUBLIC_KEY			nlattr[WGPEER_A_PUBLIC_KEY, array[int8]]
	WGPEER_A_PRESHARED_KEY			nlattr[WGPEER_A_PRESHARED_KEY, array[int8]]
	WGPEER_A_FLAGS				nlattr[WGPEER_A_FLAGS, int32]
	WGPEER_A_ENDPOINT			nlattr[WGPEER_A_ENDPOINT, array[int8]]
	WGPEER_A_PERSISTENT_KEEPALIVE_INTERVAL	nlattr[WGPEER_A_PERSISTENT_KEEPALIVE_INTERVAL, int16]
	WGPEER_A_LAST_HANDSHAKE_TIME		nlattr[WGPEER_A_LAST_HANDSHAKE_TIME, array[int8]]
	WGPEER_A_RX_BYTES			nlattr[WGPEER_A_RX_BYTES, int64]
	WGPEER_A_TX_BYTES			nlattr[WGPEER_A_TX_BYTES, int64]
	WGPEER_A_ALLOWEDIPS			nlattr[WGPEER_A_ALLOWEDIPS, array[int8]]
	WGPEER_A_PROTOCOL_VERSION		nlattr[WGPEER_A_PROTOCOL_VERSION, int32]
] [varlen]

pfcp_opt_policy$auto_cls_flower [
	TCA_FLOWER_KEY_ENC_OPT_PFCP_TYPE	nlattr[TCA_FLOWER_KEY_ENC_OPT_PFCP_TYPE, int8]
	TCA_FLOWER_KEY_ENC_OPT_PFCP_SEID	nlattr[TCA_FLOWER_KEY_ENC_OPT_PFCP_SEID, int64]
] [varlen]

pie_policy$auto_sch_pie [
	TCA_PIE_TARGET			nlattr[TCA_PIE_TARGET, int32]
	TCA_PIE_LIMIT			nlattr[TCA_PIE_LIMIT, int32]
	TCA_PIE_TUPDATE			nlattr[TCA_PIE_TUPDATE, int32]
	TCA_PIE_ALPHA			nlattr[TCA_PIE_ALPHA, int32]
	TCA_PIE_BETA			nlattr[TCA_PIE_BETA, int32]
	TCA_PIE_ECN			nlattr[TCA_PIE_ECN, int32]
	TCA_PIE_BYTEMODE		nlattr[TCA_PIE_BYTEMODE, int32]
	TCA_PIE_DQ_RATE_ESTIMATOR	nlattr[TCA_PIE_DQ_RATE_ESTIMATOR, int32]
] [varlen]

police_policy$auto_act_police [
	TCA_POLICE_RATE		nlattr[TCA_POLICE_RATE, array[int8, 1024]]
	TCA_POLICE_PEAKRATE	nlattr[TCA_POLICE_PEAKRATE, array[int8, 1024]]
	TCA_POLICE_AVRATE	nlattr[TCA_POLICE_AVRATE, int32]
	TCA_POLICE_RESULT	nlattr[TCA_POLICE_RESULT, int32]
	TCA_POLICE_RATE64	nlattr[TCA_POLICE_RATE64, int64]
	TCA_POLICE_PEAKRATE64	nlattr[TCA_POLICE_PEAKRATE64, int64]
	TCA_POLICE_PKTRATE64	nlattr[TCA_POLICE_PKTRATE64, int64]
	TCA_POLICE_PKTBURST64	nlattr[TCA_POLICE_PKTBURST64, int64]
] [varlen]

policy$auto_flow_netlink [
	OVS_PSAMPLE_ATTR_GROUP	nlattr[OVS_PSAMPLE_ATTR_GROUP, int32]
	OVS_PSAMPLE_ATTR_COOKIE	nlattr[OVS_PSAMPLE_ATTR_COOKIE, array[int8, 0:16]]
] [varlen]

ppp_nl_policy$auto_ppp_generic [
	IFLA_PPP_DEV_FD	nlattr[IFLA_PPP_DEV_FD, fd]
] [varlen]

proto_nla_policy$auto_nf_conntrack_netlink [
	CTA_PROTO_NUM	nlattr[CTA_PROTO_NUM, int8]
] [varlen]

protoinfo_policy$auto_nf_conntrack_netlink [
	CTA_PROTOINFO_TCP	nlattr[CTA_PROTOINFO_TCP, array[int8]]
	CTA_PROTOINFO_DCCP	nlattr[CTA_PROTOINFO_DCCP, array[int8]]
	CTA_PROTOINFO_SCTP	nlattr[CTA_PROTOINFO_SCTP, array[int8]]
] [varlen]

protonat_nla_policy$auto_nf_nat_core [
	CTA_PROTONAT_PORT_MIN	nlattr[CTA_PROTONAT_PORT_MIN, sock_port]
	CTA_PROTONAT_PORT_MAX	nlattr[CTA_PROTONAT_PORT_MAX, sock_port]
] [varlen]

qfq_policy$auto_sch_qfq [
	TCA_QFQ_WEIGHT	nlattr[TCA_QFQ_WEIGHT, int32]
	TCA_QFQ_LMAX	nlattr[TCA_QFQ_LMAX, int32]
] [varlen]

red_policy$auto_sch_red [
	TCA_RED_UNSPEC			nlattr[TCA_RED_UNSPEC, array[int8]]
	TCA_RED_PARMS			nlattr[TCA_RED_PARMS, array[int8, 16]]
	TCA_RED_STAB			nlattr[TCA_RED_STAB, array[int8, 256]]
	TCA_RED_MAX_P			nlattr[TCA_RED_MAX_P, int32]
	TCA_RED_FLAGS			nlattr[TCA_RED_FLAGS, int32]
	TCA_RED_EARLY_DROP_BLOCK	nlattr[TCA_RED_EARLY_DROP_BLOCK, int32]
	TCA_RED_MARK_BLOCK		nlattr[TCA_RED_MARK_BLOCK, int32]
] [varlen]

reg_rule_policy$auto_nl80211 [
	NL80211_ATTR_REG_RULE_FLAGS		nlattr[NL80211_ATTR_REG_RULE_FLAGS, int32]
	NL80211_ATTR_FREQ_RANGE_START		nlattr[NL80211_ATTR_FREQ_RANGE_START, int32]
	NL80211_ATTR_FREQ_RANGE_END		nlattr[NL80211_ATTR_FREQ_RANGE_END, int32]
	NL80211_ATTR_FREQ_RANGE_MAX_BW		nlattr[NL80211_ATTR_FREQ_RANGE_MAX_BW, int32]
	NL80211_ATTR_POWER_RULE_MAX_ANT_GAIN	nlattr[NL80211_ATTR_POWER_RULE_MAX_ANT_GAIN, int32]
	NL80211_ATTR_POWER_RULE_MAX_EIRP	nlattr[NL80211_ATTR_POWER_RULE_MAX_EIRP, int32]
	NL80211_ATTR_DFS_CAC_TIME		nlattr[NL80211_ATTR_DFS_CAC_TIME, int32]
] [varlen]

resp_add_policy$auto_iwpm_msg [
	IWPM_NLA_RMANAGE_MAPPING_SEQ		nlattr[IWPM_NLA_RMANAGE_MAPPING_SEQ, int32]
	IWPM_NLA_RMANAGE_ADDR			nlattr[IWPM_NLA_RMANAGE_ADDR, array[int8, 128]]
	IWPM_NLA_RMANAGE_MAPPED_LOC_ADDR	nlattr[IWPM_NLA_RMANAGE_MAPPED_LOC_ADDR, array[int8, 128]]
	IWPM_NLA_RMANAGE_MAPPING_ERR		nlattr[IWPM_NLA_RMANAGE_MAPPING_ERR, int16]
] [varlen]

resp_mapinfo_policy$auto_iwpm_msg [
	IWPM_NLA_MAPINFO_ULIB_NAME	nlattr[IWPM_NLA_MAPINFO_ULIB_NAME, stringnoz]
	IWPM_NLA_MAPINFO_ULIB_VER	nlattr[IWPM_NLA_MAPINFO_ULIB_VER, int16]
] [varlen]

resp_query_policy$auto_iwpm_msg [
	IWPM_NLA_RQUERY_MAPPING_SEQ	nlattr[IWPM_NLA_RQUERY_MAPPING_SEQ, int32]
	IWPM_NLA_RQUERY_LOCAL_ADDR	nlattr[IWPM_NLA_RQUERY_LOCAL_ADDR, array[int8, 128]]
	IWPM_NLA_RQUERY_REMOTE_ADDR	nlattr[IWPM_NLA_RQUERY_REMOTE_ADDR, array[int8, 128]]
	IWPM_NLA_RQUERY_MAPPED_LOC_ADDR	nlattr[IWPM_NLA_RQUERY_MAPPED_LOC_ADDR, array[int8, 128]]
	IWPM_NLA_RQUERY_MAPPED_REM_ADDR	nlattr[IWPM_NLA_RQUERY_MAPPED_REM_ADDR, array[int8, 128]]
	IWPM_NLA_RQUERY_MAPPING_ERR	nlattr[IWPM_NLA_RQUERY_MAPPING_ERR, int16]
] [varlen]

resp_reg_policy$auto_iwpm_msg [
	IWPM_NLA_RREG_PID_SEQ		nlattr[IWPM_NLA_RREG_PID_SEQ, int32]
	IWPM_NLA_RREG_IBDEV_NAME	nlattr[IWPM_NLA_RREG_IBDEV_NAME, stringnoz]
	IWPM_NLA_RREG_ULIB_NAME		nlattr[IWPM_NLA_RREG_ULIB_NAME, stringnoz]
	IWPM_NLA_RREG_ULIB_VER		nlattr[IWPM_NLA_RREG_ULIB_VER, int16]
	IWPM_NLA_RREG_PID_ERR		nlattr[IWPM_NLA_RREG_PID_ERR, int16]
] [varlen]

route4_policy$auto_cls_route [
	TCA_ROUTE4_CLASSID	nlattr[TCA_ROUTE4_CLASSID, int32]
	TCA_ROUTE4_TO		nlattr[TCA_ROUTE4_TO, int32]
	TCA_ROUTE4_FROM		nlattr[TCA_ROUTE4_FROM, int32]
	TCA_ROUTE4_IIF		nlattr[TCA_ROUTE4_IIF, int32]
] [varlen]

rpl_iptunnel_policy$auto_rpl_iptunnel [
	RPL_IPTUNNEL_SRH	nlattr[RPL_IPTUNNEL_SRH, array[int8]]
] [varlen]

rtm_ipmr_policy$auto_ipmr [
	RTA_DST		nlattr[RTA_DST, int32]
	RTA_SRC		nlattr[RTA_SRC, int32]
	RTA_IIF		nlattr[RTA_IIF, int32]
	RTA_MULTIPATH	nlattr[RTA_MULTIPATH, int64]
	RTA_TABLE	nlattr[RTA_TABLE, int32]
] [varlen]

rtm_ipv4_policy$auto_ip_fib [
	RTA_UNSPEC	nlattr[RTA_UNSPEC, array[int8]]
	RTA_DST		nlattr[RTA_DST, int32]
	RTA_SRC		nlattr[RTA_SRC, int32]
	RTA_IIF		nlattr[RTA_IIF, int32]
	RTA_OIF		nlattr[RTA_OIF, int32]
	RTA_GATEWAY	nlattr[RTA_GATEWAY, int32]
	RTA_PRIORITY	nlattr[RTA_PRIORITY, int32]
	RTA_PREFSRC	nlattr[RTA_PREFSRC, int32]
	RTA_METRICS	nlattr[RTA_METRICS, array[int8]]
	RTA_MULTIPATH	nlattr[RTA_MULTIPATH, int64]
	RTA_FLOW	nlattr[RTA_FLOW, int32]
	RTA_TABLE	nlattr[RTA_TABLE, int32]
	RTA_MARK	nlattr[RTA_MARK, int32]
	RTA_ENCAP_TYPE	nlattr[RTA_ENCAP_TYPE, int16]
	RTA_ENCAP	nlattr[RTA_ENCAP, array[int8]]
	RTA_UID		nlattr[RTA_UID, int32]
	RTA_IP_PROTO	nlattr[RTA_IP_PROTO, int8]
	RTA_SPORT	nlattr[RTA_SPORT, sock_port]
	RTA_DPORT	nlattr[RTA_DPORT, sock_port]
	RTA_NH_ID	nlattr[RTA_NH_ID, int32]
] [varlen]

rtm_ipv6_policy$auto_route [
	RTA_UNSPEC	nlattr[RTA_UNSPEC, array[int8]]
	RTA_IIF		nlattr[RTA_IIF, int32]
	RTA_OIF		nlattr[RTA_OIF, int32]
	RTA_GATEWAY	nlattr[RTA_GATEWAY, array[int8, 16]]
	RTA_PRIORITY	nlattr[RTA_PRIORITY, int32]
	RTA_PREFSRC	nlattr[RTA_PREFSRC, array[int8, 16]]
	RTA_METRICS	nlattr[RTA_METRICS, array[int8]]
	RTA_MULTIPATH	nlattr[RTA_MULTIPATH, int64]
	RTA_TABLE	nlattr[RTA_TABLE, int32]
	RTA_MARK	nlattr[RTA_MARK, int32]
	RTA_PREF	nlattr[RTA_PREF, int8]
	RTA_ENCAP_TYPE	nlattr[RTA_ENCAP_TYPE, int16]
	RTA_ENCAP	nlattr[RTA_ENCAP, array[int8]]
	RTA_EXPIRES	nlattr[RTA_EXPIRES, int32]
	RTA_UID		nlattr[RTA_UID, int32]
	RTA_IP_PROTO	nlattr[RTA_IP_PROTO, int8]
	RTA_SPORT	nlattr[RTA_SPORT, sock_port]
	RTA_DPORT	nlattr[RTA_DPORT, sock_port]
	RTA_NH_ID	nlattr[RTA_NH_ID, int32]
] [varlen]

rtm_mpls_policy$auto_af_mpls [
	RTA_DST			nlattr[RTA_DST, int32]
	RTA_OIF			nlattr[RTA_OIF, int32]
	RTA_TTL_PROPAGATE	nlattr[RTA_TTL_PROPAGATE, int8]
] [varlen]

rtm_nh_policy_del$auto_nexthop [
	NHA_ID	nlattr[NHA_ID, int32]
] [varlen]

rtm_nh_policy_dump$auto_nexthop [
	NHA_OIF		nlattr[NHA_OIF, int32]
	NHA_GROUPS	nlattr[NHA_GROUPS, void]
	NHA_MASTER	nlattr[NHA_MASTER, int32]
	NHA_FDB		nlattr[NHA_FDB, void]
	NHA_OP_FLAGS	nlattr[NHA_OP_FLAGS, int32]
] [varlen]

rtm_nh_policy_dump_bucket$auto_nexthop [
	NHA_ID		nlattr[NHA_ID, int32]
	NHA_OIF		nlattr[NHA_OIF, int32]
	NHA_MASTER	nlattr[NHA_MASTER, int32]
	NHA_RES_BUCKET	nlattr[NHA_RES_BUCKET, array[int8]]
] [varlen]

rtm_nh_policy_get$auto_nexthop [
	NHA_ID		nlattr[NHA_ID, int32]
	NHA_OP_FLAGS	nlattr[NHA_OP_FLAGS, int32]
] [varlen]

rtm_nh_policy_get_bucket$auto_nexthop [
	NHA_ID		nlattr[NHA_ID, int32]
	NHA_RES_BUCKET	nlattr[NHA_RES_BUCKET, array[int8]]
] [varlen]

rtm_nh_policy_new$auto_nexthop [
	NHA_ID			nlattr[NHA_ID, int32]
	NHA_GROUP		nlattr[NHA_GROUP, array[int8]]
	NHA_GROUP_TYPE		nlattr[NHA_GROUP_TYPE, int16]
	NHA_BLACKHOLE		nlattr[NHA_BLACKHOLE, void]
	NHA_OIF			nlattr[NHA_OIF, int32]
	NHA_GATEWAY		nlattr[NHA_GATEWAY, array[int8]]
	NHA_ENCAP_TYPE		nlattr[NHA_ENCAP_TYPE, int16]
	NHA_ENCAP		nlattr[NHA_ENCAP, array[int8]]
	NHA_FDB			nlattr[NHA_FDB, void]
	NHA_RES_GROUP		nlattr[NHA_RES_GROUP, array[int8]]
	NHA_HW_STATS_ENABLE	nlattr[NHA_HW_STATS_ENABLE, bool32]
] [varlen]

rtm_nh_res_bucket_policy_dump$auto_nexthop [
	NHA_RES_BUCKET_NH_ID	nlattr[NHA_RES_BUCKET_NH_ID, int32]
] [varlen]

rtm_nh_res_bucket_policy_get$auto_nexthop [
	NHA_RES_BUCKET_INDEX	nlattr[NHA_RES_BUCKET_INDEX, int16]
] [varlen]

rtm_nh_res_policy_new$auto_nexthop [
	NHA_RES_GROUP_BUCKETS		nlattr[NHA_RES_GROUP_BUCKETS, int16]
	NHA_RES_GROUP_IDLE_TIMER	nlattr[NHA_RES_GROUP_IDLE_TIMER, int32]
	NHA_RES_GROUP_UNBALANCED_TIMER	nlattr[NHA_RES_GROUP_UNBALANCED_TIMER, int32]
] [varlen]

rtm_phonet_policy$auto_pn_netlink [
	RTA_DST	nlattr[RTA_DST, int8]
	RTA_OIF	nlattr[RTA_OIF, int32]
] [varlen]

rtm_tca_policy$auto_pkt_sched [
	TCA_KIND		nlattr[TCA_KIND, stringnoz]
	TCA_RATE		nlattr[TCA_RATE, int16]
	TCA_STAB		nlattr[TCA_STAB, array[int8]]
	TCA_DUMP_INVISIBLE	nlattr[TCA_DUMP_INVISIBLE, void]
	TCA_CHAIN		nlattr[TCA_CHAIN, int32]
	TCA_INGRESS_BLOCK	nlattr[TCA_INGRESS_BLOCK, int32]
	TCA_EGRESS_BLOCK	nlattr[TCA_EGRESS_BLOCK, int32]
] [varlen]

rtnl_net_policy$auto_net_namespace [
	NETNSA_NONE		nlattr[NETNSA_NONE, array[int8]]
	NETNSA_NSID		nlattr[NETNSA_NSID, int32]
	NETNSA_PID		nlattr[NETNSA_PID, int32]
	NETNSA_FD		nlattr[NETNSA_FD, fd]
	NETNSA_TARGET_NSID	nlattr[NETNSA_TARGET_NSID, int32]
] [varlen]

rtnl_stats_get_policy$auto_rtnetlink [
	IFLA_STATS_GET_FILTERS	nlattr[IFLA_STATS_GET_FILTERS, array[int8, 5]]
] [varlen]

rtnl_stats_get_policy_filters$auto_rtnetlink [
	IFLA_STATS_LINK_OFFLOAD_XSTATS	nlattr[IFLA_STATS_LINK_OFFLOAD_XSTATS, int32]
] [varlen]

sample_policy$auto_act_sample [
	TCA_SAMPLE_PARMS		nlattr[TCA_SAMPLE_PARMS, array[int8, 20]]
	TCA_SAMPLE_RATE			nlattr[TCA_SAMPLE_RATE, int32]
	TCA_SAMPLE_TRUNC_SIZE		nlattr[TCA_SAMPLE_TRUNC_SIZE, int32]
	TCA_SAMPLE_PSAMPLE_GROUP	nlattr[TCA_SAMPLE_PSAMPLE_GROUP, int32]
] [varlen]

sar_policy$auto_nl80211 [
	NL80211_SAR_ATTR_TYPE	nlattr[NL80211_SAR_ATTR_TYPE, int32]
	NL80211_SAR_ATTR_SPECS	nlattr[NL80211_SAR_ATTR_SPECS, int32]
] [varlen]

sar_specs_policy$auto_nl80211 [
	NL80211_SAR_ATTR_SPECS_POWER		nlattr[NL80211_SAR_ATTR_SPECS_POWER, int32]
	NL80211_SAR_ATTR_SPECS_RANGE_INDEX	nlattr[NL80211_SAR_ATTR_SPECS_RANGE_INDEX, int32]
] [varlen]

sctp_nla_policy$auto_nf_conntrack_proto_sctp [
	CTA_PROTOINFO_SCTP_STATE		nlattr[CTA_PROTOINFO_SCTP_STATE, int8]
	CTA_PROTOINFO_SCTP_VTAG_ORIGINAL	nlattr[CTA_PROTOINFO_SCTP_VTAG_ORIGINAL, int32]
	CTA_PROTOINFO_SCTP_VTAG_REPLY		nlattr[CTA_PROTOINFO_SCTP_VTAG_REPLY, int32]
] [varlen]

sctp_timeout_nla_policy$auto_nf_conntrack_proto_sctp [
	CTA_TIMEOUT_SCTP_CLOSED			nlattr[CTA_TIMEOUT_SCTP_CLOSED, int32]
	CTA_TIMEOUT_SCTP_COOKIE_WAIT		nlattr[CTA_TIMEOUT_SCTP_COOKIE_WAIT, int32]
	CTA_TIMEOUT_SCTP_COOKIE_ECHOED		nlattr[CTA_TIMEOUT_SCTP_COOKIE_ECHOED, int32]
	CTA_TIMEOUT_SCTP_ESTABLISHED		nlattr[CTA_TIMEOUT_SCTP_ESTABLISHED, int32]
	CTA_TIMEOUT_SCTP_SHUTDOWN_SENT		nlattr[CTA_TIMEOUT_SCTP_SHUTDOWN_SENT, int32]
	CTA_TIMEOUT_SCTP_SHUTDOWN_RECD		nlattr[CTA_TIMEOUT_SCTP_SHUTDOWN_RECD, int32]
	CTA_TIMEOUT_SCTP_SHUTDOWN_ACK_SENT	nlattr[CTA_TIMEOUT_SCTP_SHUTDOWN_ACK_SENT, int32]
	CTA_TIMEOUT_SCTP_HEARTBEAT_SENT		nlattr[CTA_TIMEOUT_SCTP_HEARTBEAT_SENT, int32]
	CTA_TIMEOUT_SCTP_HEARTBEAT_ACKED	nlattr[CTA_TIMEOUT_SCTP_HEARTBEAT_ACKED, int32]
] [varlen]

seg6_genl_policy$auto_seg6 [
	SEG6_ATTR_DST		nlattr[SEG6_ATTR_DST, array[int8, 0:16]]
	SEG6_ATTR_DSTLEN	nlattr[SEG6_ATTR_DSTLEN, int32]
	SEG6_ATTR_HMACKEYID	nlattr[SEG6_ATTR_HMACKEYID, int32]
	SEG6_ATTR_SECRET	nlattr[SEG6_ATTR_SECRET, array[int8]]
	SEG6_ATTR_SECRETLEN	nlattr[SEG6_ATTR_SECRETLEN, int8]
	SEG6_ATTR_ALGID		nlattr[SEG6_ATTR_ALGID, int8]
	SEG6_ATTR_HMACINFO	nlattr[SEG6_ATTR_HMACINFO, array[int8]]
] [varlen]

seg6_iptunnel_policy$auto_seg6_iptunnel [
	SEG6_IPTUNNEL_SRH	nlattr[SEG6_IPTUNNEL_SRH, array[int8]]
] [varlen]

seg6_local_counters_policy$auto_seg6_local [
	SEG6_LOCAL_CNT_PACKETS	nlattr[SEG6_LOCAL_CNT_PACKETS, int64]
	SEG6_LOCAL_CNT_BYTES	nlattr[SEG6_LOCAL_CNT_BYTES, int64]
	SEG6_LOCAL_CNT_ERRORS	nlattr[SEG6_LOCAL_CNT_ERRORS, int64]
] [varlen]

seg6_local_flavors_policy$auto_seg6_local [
	SEG6_LOCAL_FLV_OPERATION	nlattr[SEG6_LOCAL_FLV_OPERATION, int32]
	SEG6_LOCAL_FLV_LCBLOCK_BITS	nlattr[SEG6_LOCAL_FLV_LCBLOCK_BITS, int8]
	SEG6_LOCAL_FLV_LCNODE_FN_BITS	nlattr[SEG6_LOCAL_FLV_LCNODE_FN_BITS, int8]
] [varlen]

seg6_local_policy$auto_seg6_local [
	SEG6_LOCAL_ACTION	nlattr[SEG6_LOCAL_ACTION, int32]
	SEG6_LOCAL_SRH		nlattr[SEG6_LOCAL_SRH, array[int8]]
	SEG6_LOCAL_TABLE	nlattr[SEG6_LOCAL_TABLE, int32]
	SEG6_LOCAL_NH4		nlattr[SEG6_LOCAL_NH4, int32]
	SEG6_LOCAL_NH6		nlattr[SEG6_LOCAL_NH6, array[int8, 0:16]]
	SEG6_LOCAL_IIF		nlattr[SEG6_LOCAL_IIF, int32]
	SEG6_LOCAL_OIF		nlattr[SEG6_LOCAL_OIF, int32]
	SEG6_LOCAL_BPF		nlattr[SEG6_LOCAL_BPF, array[int8]]
	SEG6_LOCAL_VRFTABLE	nlattr[SEG6_LOCAL_VRFTABLE, int32]
	SEG6_LOCAL_COUNTERS	nlattr[SEG6_LOCAL_COUNTERS, array[int8]]
	SEG6_LOCAL_FLAVORS	nlattr[SEG6_LOCAL_FLAVORS, array[int8]]
] [varlen]

seqadj_policy$auto_nf_conntrack_netlink [
	CTA_SEQADJ_CORRECTION_POS	nlattr[CTA_SEQADJ_CORRECTION_POS, int32]
	CTA_SEQADJ_OFFSET_BEFORE	nlattr[CTA_SEQADJ_OFFSET_BEFORE, int32]
	CTA_SEQADJ_OFFSET_AFTER		nlattr[CTA_SEQADJ_OFFSET_AFTER, int32]
] [varlen]

sfb_policy$auto_sch_sfb [
	TCA_SFB_PARMS	nlattr[TCA_SFB_PARMS, array[int8, 36]]
] [varlen]

simple_policy$auto_act_simple [
	TCA_DEF_PARMS	nlattr[TCA_DEF_PARMS, array[int8, 20]]
	TCA_DEF_DATA	nlattr[TCA_DEF_DATA, stringnoz]
] [varlen]

skbedit_policy$auto_act_skbedit [
	TCA_SKBEDIT_PARMS		nlattr[TCA_SKBEDIT_PARMS, array[int8, 20]]
	TCA_SKBEDIT_PRIORITY		nlattr[TCA_SKBEDIT_PRIORITY, int32]
	TCA_SKBEDIT_QUEUE_MAPPING	nlattr[TCA_SKBEDIT_QUEUE_MAPPING, int16]
	TCA_SKBEDIT_MARK		nlattr[TCA_SKBEDIT_MARK, int32]
	TCA_SKBEDIT_PTYPE		nlattr[TCA_SKBEDIT_PTYPE, int16]
	TCA_SKBEDIT_MASK		nlattr[TCA_SKBEDIT_MASK, int32]
	TCA_SKBEDIT_FLAGS		nlattr[TCA_SKBEDIT_FLAGS, int64]
	TCA_SKBEDIT_QUEUE_MAPPING_MAX	nlattr[TCA_SKBEDIT_QUEUE_MAPPING_MAX, int16]
] [varlen]

skbmod_policy$auto_act_skbmod [
	TCA_SKBMOD_PARMS	nlattr[TCA_SKBMOD_PARMS, array[int8, 32]]
	TCA_SKBMOD_DMAC		nlattr[TCA_SKBMOD_DMAC, array[int8, 6]]
	TCA_SKBMOD_SMAC		nlattr[TCA_SKBMOD_SMAC, array[int8, 6]]
	TCA_SKBMOD_ETYPE	nlattr[TCA_SKBMOD_ETYPE, int16]
] [varlen]

smc_gen_ueid_policy$auto_smc_netlink [
	SMC_NLA_EID_TABLE_UNSPEC	nlattr[SMC_NLA_EID_TABLE_UNSPEC, array[int8]]
	SMC_NLA_EID_TABLE_ENTRY		nlattr[SMC_NLA_EID_TABLE_ENTRY, stringnoz]
] [varlen]

smc_pnet_policy$auto_smc_pnet [
	SMC_PNETID_NAME		nlattr[SMC_PNETID_NAME, string]
	SMC_PNETID_ETHNAME	nlattr[SMC_PNETID_ETHNAME, string]
	SMC_PNETID_IBNAME	nlattr[SMC_PNETID_IBNAME, string]
	SMC_PNETID_IBPORT	nlattr[SMC_PNETID_IBPORT, int8]
] [varlen]

sta_flags_policy$auto_nl80211 [
	NL80211_STA_FLAG_AUTHORIZED	nlattr[NL80211_STA_FLAG_AUTHORIZED, void]
	NL80211_STA_FLAG_SHORT_PREAMBLE	nlattr[NL80211_STA_FLAG_SHORT_PREAMBLE, void]
	NL80211_STA_FLAG_WME		nlattr[NL80211_STA_FLAG_WME, void]
	NL80211_STA_FLAG_MFP		nlattr[NL80211_STA_FLAG_MFP, void]
	NL80211_STA_FLAG_AUTHENTICATED	nlattr[NL80211_STA_FLAG_AUTHENTICATED, void]
	NL80211_STA_FLAG_TDLS_PEER	nlattr[NL80211_STA_FLAG_TDLS_PEER, void]
] [varlen]

stab_policy$auto_sch_api [
	TCA_STAB_BASE	nlattr[TCA_STAB_BASE, array[int8, 24]]
	TCA_STAB_DATA	nlattr[TCA_STAB_DATA, array[int8]]
] [varlen]

strset_stringsets_policy$auto_strset [
	ETHTOOL_A_STRINGSETS_STRINGSET	nlattr[ETHTOOL_A_STRINGSETS_STRINGSET, array[int8]]
] [varlen]

synproxy_policy$auto_nf_conntrack_netlink [
	CTA_SYNPROXY_ISN	nlattr[CTA_SYNPROXY_ISN, int32]
	CTA_SYNPROXY_ITS	nlattr[CTA_SYNPROXY_ITS, int32]
	CTA_SYNPROXY_TSOFF	nlattr[CTA_SYNPROXY_TSOFF, int32]
] [varlen]

taprio_policy$auto_sch_taprio [
	TCA_TAPRIO_ATTR_PRIOMAP				nlattr[TCA_TAPRIO_ATTR_PRIOMAP, array[int8, 82]]
	TCA_TAPRIO_ATTR_SCHED_ENTRY_LIST		nlattr[TCA_TAPRIO_ATTR_SCHED_ENTRY_LIST, array[int8]]
	TCA_TAPRIO_ATTR_SCHED_BASE_TIME			nlattr[TCA_TAPRIO_ATTR_SCHED_BASE_TIME, int64]
	TCA_TAPRIO_ATTR_SCHED_SINGLE_ENTRY		nlattr[TCA_TAPRIO_ATTR_SCHED_SINGLE_ENTRY, array[int8]]
	TCA_TAPRIO_ATTR_SCHED_CLOCKID			nlattr[TCA_TAPRIO_ATTR_SCHED_CLOCKID, int32]
	TCA_TAPRIO_ATTR_SCHED_CYCLE_TIME		nlattr[TCA_TAPRIO_ATTR_SCHED_CYCLE_TIME, int64]
	TCA_TAPRIO_ATTR_SCHED_CYCLE_TIME_EXTENSION	nlattr[TCA_TAPRIO_ATTR_SCHED_CYCLE_TIME_EXTENSION, int64]
	TCA_TAPRIO_ATTR_FLAGS				nlattr[TCA_TAPRIO_ATTR_FLAGS, int32]
	TCA_TAPRIO_ATTR_TXTIME_DELAY			nlattr[TCA_TAPRIO_ATTR_TXTIME_DELAY, int32]
	TCA_TAPRIO_ATTR_TC_ENTRY			nlattr[TCA_TAPRIO_ATTR_TC_ENTRY, array[int8]]
] [varlen]

taprio_tc_policy$auto_sch_taprio [
	TCA_TAPRIO_TC_ENTRY_INDEX	nlattr[TCA_TAPRIO_TC_ENTRY_INDEX, int32]
	TCA_TAPRIO_TC_ENTRY_MAX_SDU	nlattr[TCA_TAPRIO_TC_ENTRY_MAX_SDU, int32]
	TCA_TAPRIO_TC_ENTRY_FP		nlattr[TCA_TAPRIO_TC_ENTRY_FP, int32]
] [varlen]

taskstats_cmd_get_policy$auto_taskstats [
	TASKSTATS_CMD_ATTR_PID			nlattr[TASKSTATS_CMD_ATTR_PID, int32]
	TASKSTATS_CMD_ATTR_TGID			nlattr[TASKSTATS_CMD_ATTR_TGID, int32]
	TASKSTATS_CMD_ATTR_REGISTER_CPUMASK	nlattr[TASKSTATS_CMD_ATTR_REGISTER_CPUMASK, stringnoz]
	TASKSTATS_CMD_ATTR_DEREGISTER_CPUMASK	nlattr[TASKSTATS_CMD_ATTR_DEREGISTER_CPUMASK, stringnoz]
] [varlen]

tbf_policy$auto_sch_tbf [
	TCA_TBF_PARMS	nlattr[TCA_TBF_PARMS, array[int8, 36]]
	TCA_TBF_RTAB	nlattr[TCA_TBF_RTAB, array[int8, 0:1024]]
	TCA_TBF_PTAB	nlattr[TCA_TBF_PTAB, array[int8, 0:1024]]
	TCA_TBF_RATE64	nlattr[TCA_TBF_RATE64, int64]
	TCA_TBF_PRATE64	nlattr[TCA_TBF_PRATE64, int64]
	TCA_TBF_BURST	nlattr[TCA_TBF_BURST, int32]
	TCA_TBF_PBURST	nlattr[TCA_TBF_PBURST, int32]
] [varlen]

tcaa_policy$auto_act_api [
	TCA_ROOT_FLAGS		nlattr[TCA_ROOT_FLAGS, int32]
	TCA_ROOT_TIME_DELTA	nlattr[TCA_ROOT_TIME_DELTA, int32]
] [varlen]

tcf_action_policy$auto_act_api [
	TCA_ACT_KIND		nlattr[TCA_ACT_KIND, stringnoz]
	TCA_ACT_OPTIONS		nlattr[TCA_ACT_OPTIONS, array[int8]]
	TCA_ACT_INDEX		nlattr[TCA_ACT_INDEX, int32]
	TCA_ACT_COOKIE		nlattr[TCA_ACT_COOKIE, array[int8, 0:16]]
	TCA_ACT_FLAGS		nlattr[TCA_ACT_FLAGS, int32]
	TCA_ACT_HW_STATS	nlattr[TCA_ACT_HW_STATS, int32]
] [varlen]

tcf_tfilter_dump_policy$auto_cls_api [
	TCA_CHAIN	nlattr[TCA_CHAIN, int32]
	TCA_DUMP_FLAGS	nlattr[TCA_DUMP_FLAGS, int32]
] [varlen]

tcp_metrics_nl_policy$auto_tcp_metrics [
	TCP_METRICS_ATTR_ADDR_IPV4	nlattr[TCP_METRICS_ATTR_ADDR_IPV4, ipv4_addr]
	TCP_METRICS_ATTR_ADDR_IPV6	nlattr[TCP_METRICS_ATTR_ADDR_IPV6, ipv6_addr]
	TCP_METRICS_ATTR_SADDR_IPV4	nlattr[TCP_METRICS_ATTR_SADDR_IPV4, ipv4_addr]
] [varlen]

tcp_nla_policy$auto_nf_conntrack_proto_tcp [
	CTA_PROTOINFO_TCP_STATE			nlattr[CTA_PROTOINFO_TCP_STATE, int8]
	CTA_PROTOINFO_TCP_WSCALE_ORIGINAL	nlattr[CTA_PROTOINFO_TCP_WSCALE_ORIGINAL, int8]
	CTA_PROTOINFO_TCP_WSCALE_REPLY		nlattr[CTA_PROTOINFO_TCP_WSCALE_REPLY, int8]
	CTA_PROTOINFO_TCP_FLAGS_ORIGINAL	nlattr[CTA_PROTOINFO_TCP_FLAGS_ORIGINAL, int16]
	CTA_PROTOINFO_TCP_FLAGS_REPLY		nlattr[CTA_PROTOINFO_TCP_FLAGS_REPLY, int16]
] [varlen]

tcp_timeout_nla_policy$auto_nf_conntrack_proto_tcp [
	CTA_TIMEOUT_TCP_SYN_SENT	nlattr[CTA_TIMEOUT_TCP_SYN_SENT, int32]
	CTA_TIMEOUT_TCP_SYN_RECV	nlattr[CTA_TIMEOUT_TCP_SYN_RECV, int32]
	CTA_TIMEOUT_TCP_ESTABLISHED	nlattr[CTA_TIMEOUT_TCP_ESTABLISHED, int32]
	CTA_TIMEOUT_TCP_FIN_WAIT	nlattr[CTA_TIMEOUT_TCP_FIN_WAIT, int32]
	CTA_TIMEOUT_TCP_CLOSE_WAIT	nlattr[CTA_TIMEOUT_TCP_CLOSE_WAIT, int32]
	CTA_TIMEOUT_TCP_LAST_ACK	nlattr[CTA_TIMEOUT_TCP_LAST_ACK, int32]
	CTA_TIMEOUT_TCP_TIME_WAIT	nlattr[CTA_TIMEOUT_TCP_TIME_WAIT, int32]
	CTA_TIMEOUT_TCP_CLOSE		nlattr[CTA_TIMEOUT_TCP_CLOSE, int32]
	CTA_TIMEOUT_TCP_SYN_SENT2	nlattr[CTA_TIMEOUT_TCP_SYN_SENT2, int32]
	CTA_TIMEOUT_TCP_RETRANS		nlattr[CTA_TIMEOUT_TCP_RETRANS, int32]
	CTA_TIMEOUT_TCP_UNACK		nlattr[CTA_TIMEOUT_TCP_UNACK, int32]
] [varlen]

team_attr_option_nl_policy$auto_team_nl [
	TEAM_ATTR_OPTION_NAME		nlattr[TEAM_ATTR_OPTION_NAME, stringnoz]
	TEAM_ATTR_OPTION_CHANGED	nlattr[TEAM_ATTR_OPTION_CHANGED, void]
	TEAM_ATTR_OPTION_TYPE		nlattr[TEAM_ATTR_OPTION_TYPE, int8]
	TEAM_ATTR_OPTION_DATA		nlattr[TEAM_ATTR_OPTION_DATA, array[int8]]
	TEAM_ATTR_OPTION_REMOVED	nlattr[TEAM_ATTR_OPTION_REMOVED, void]
	TEAM_ATTR_OPTION_PORT_IFINDEX	nlattr[TEAM_ATTR_OPTION_PORT_IFINDEX, ifindex]
	TEAM_ATTR_OPTION_ARRAY_INDEX	nlattr[TEAM_ATTR_OPTION_ARRAY_INDEX, int32]
] [varlen]

team_item_option_nl_policy$auto_team_nl [
	TEAM_ATTR_ITEM_OPTION	nlattr[TEAM_ATTR_ITEM_OPTION, array[int8, 7]]
] [varlen]

team_nl_policy$auto_team_nl [
	TEAM_ATTR_TEAM_IFINDEX	nlattr[TEAM_ATTR_TEAM_IFINDEX, ifindex]
	TEAM_ATTR_LIST_OPTION	nlattr[TEAM_ATTR_LIST_OPTION, int8]
] [varlen]

thermal_genl_policy$auto_thermal_netlink [
	THERMAL_GENL_ATTR_TZ				nlattr[THERMAL_GENL_ATTR_TZ, array[int8]]
	THERMAL_GENL_ATTR_TZ_ID				nlattr[THERMAL_GENL_ATTR_TZ_ID, int32]
	THERMAL_GENL_ATTR_TZ_TEMP			nlattr[THERMAL_GENL_ATTR_TZ_TEMP, int32]
	THERMAL_GENL_ATTR_TZ_TRIP			nlattr[THERMAL_GENL_ATTR_TZ_TRIP, array[int8]]
	THERMAL_GENL_ATTR_TZ_TRIP_ID			nlattr[THERMAL_GENL_ATTR_TZ_TRIP_ID, int32]
	THERMAL_GENL_ATTR_TZ_TRIP_TYPE			nlattr[THERMAL_GENL_ATTR_TZ_TRIP_TYPE, int32]
	THERMAL_GENL_ATTR_TZ_TRIP_TEMP			nlattr[THERMAL_GENL_ATTR_TZ_TRIP_TEMP, int32]
	THERMAL_GENL_ATTR_TZ_TRIP_HYST			nlattr[THERMAL_GENL_ATTR_TZ_TRIP_HYST, int32]
	THERMAL_GENL_ATTR_TZ_MODE			nlattr[THERMAL_GENL_ATTR_TZ_MODE, int32]
	THERMAL_GENL_ATTR_TZ_NAME			nlattr[THERMAL_GENL_ATTR_TZ_NAME, stringnoz]
	THERMAL_GENL_ATTR_TZ_CDEV_WEIGHT		nlattr[THERMAL_GENL_ATTR_TZ_CDEV_WEIGHT, int32]
	THERMAL_GENL_ATTR_TZ_GOV			nlattr[THERMAL_GENL_ATTR_TZ_GOV, array[int8]]
	THERMAL_GENL_ATTR_TZ_GOV_NAME			nlattr[THERMAL_GENL_ATTR_TZ_GOV_NAME, stringnoz]
	THERMAL_GENL_ATTR_CDEV				nlattr[THERMAL_GENL_ATTR_CDEV, array[int8]]
	THERMAL_GENL_ATTR_CDEV_ID			nlattr[THERMAL_GENL_ATTR_CDEV_ID, int32]
	THERMAL_GENL_ATTR_CDEV_CUR_STATE		nlattr[THERMAL_GENL_ATTR_CDEV_CUR_STATE, int32]
	THERMAL_GENL_ATTR_CDEV_MAX_STATE		nlattr[THERMAL_GENL_ATTR_CDEV_MAX_STATE, int32]
	THERMAL_GENL_ATTR_CDEV_NAME			nlattr[THERMAL_GENL_ATTR_CDEV_NAME, stringnoz]
	THERMAL_GENL_ATTR_CPU_CAPABILITY		nlattr[THERMAL_GENL_ATTR_CPU_CAPABILITY, array[int8]]
	THERMAL_GENL_ATTR_CPU_CAPABILITY_ID		nlattr[THERMAL_GENL_ATTR_CPU_CAPABILITY_ID, int32]
	THERMAL_GENL_ATTR_CPU_CAPABILITY_PERFORMANCE	nlattr[THERMAL_GENL_ATTR_CPU_CAPABILITY_PERFORMANCE, int32]
	THERMAL_GENL_ATTR_CPU_CAPABILITY_EFFICIENCY	nlattr[THERMAL_GENL_ATTR_CPU_CAPABILITY_EFFICIENCY, int32]
] [varlen]

tipc_nl_bearer_policy$auto_netlink [
	TIPC_NLA_BEARER_UNSPEC	nlattr[TIPC_NLA_BEARER_UNSPEC, array[int8]]
	TIPC_NLA_BEARER_NAME	nlattr[TIPC_NLA_BEARER_NAME, string]
	TIPC_NLA_BEARER_PROP	nlattr[TIPC_NLA_BEARER_PROP, array[int8]]
	TIPC_NLA_BEARER_DOMAIN	nlattr[TIPC_NLA_BEARER_DOMAIN, int32]
] [varlen]

tipc_nl_link_policy$auto_netlink [
	TIPC_NLA_LINK_UNSPEC	nlattr[TIPC_NLA_LINK_UNSPEC, array[int8]]
	TIPC_NLA_LINK_NAME	nlattr[TIPC_NLA_LINK_NAME, string]
	TIPC_NLA_LINK_MTU	nlattr[TIPC_NLA_LINK_MTU, int32]
	TIPC_NLA_LINK_BROADCAST	nlattr[TIPC_NLA_LINK_BROADCAST, void]
	TIPC_NLA_LINK_UP	nlattr[TIPC_NLA_LINK_UP, void]
	TIPC_NLA_LINK_ACTIVE	nlattr[TIPC_NLA_LINK_ACTIVE, void]
	TIPC_NLA_LINK_PROP	nlattr[TIPC_NLA_LINK_PROP, array[int8]]
	TIPC_NLA_LINK_STATS	nlattr[TIPC_NLA_LINK_STATS, array[int8]]
	TIPC_NLA_LINK_RX	nlattr[TIPC_NLA_LINK_RX, int32]
	TIPC_NLA_LINK_TX	nlattr[TIPC_NLA_LINK_TX, int32]
] [varlen]

tipc_nl_media_policy$auto_netlink [
	TIPC_NLA_MEDIA_UNSPEC	nlattr[TIPC_NLA_MEDIA_UNSPEC, array[int8]]
	TIPC_NLA_MEDIA_NAME	nlattr[TIPC_NLA_MEDIA_NAME, stringnoz]
	TIPC_NLA_MEDIA_PROP	nlattr[TIPC_NLA_MEDIA_PROP, array[int8]]
] [varlen]

tipc_nl_monitor_policy$auto_netlink [
	TIPC_NLA_MON_UNSPEC			nlattr[TIPC_NLA_MON_UNSPEC, array[int8]]
	TIPC_NLA_MON_ACTIVATION_THRESHOLD	nlattr[TIPC_NLA_MON_ACTIVATION_THRESHOLD, int32]
	TIPC_NLA_MON_REF			nlattr[TIPC_NLA_MON_REF, int32]
] [varlen]

tipc_nl_name_table_policy$auto_netlink [
	TIPC_NLA_NAME_TABLE_UNSPEC	nlattr[TIPC_NLA_NAME_TABLE_UNSPEC, array[int8]]
	TIPC_NLA_NAME_TABLE_PUBL	nlattr[TIPC_NLA_NAME_TABLE_PUBL, array[int8]]
] [varlen]

tipc_nl_net_policy$auto_netlink [
	TIPC_NLA_NET_UNSPEC		nlattr[TIPC_NLA_NET_UNSPEC, array[int8]]
	TIPC_NLA_NET_ID			nlattr[TIPC_NLA_NET_ID, int32]
	TIPC_NLA_NET_ADDR		nlattr[TIPC_NLA_NET_ADDR, int32]
	TIPC_NLA_NET_NODEID		nlattr[TIPC_NLA_NET_NODEID, int64]
	TIPC_NLA_NET_NODEID_W1		nlattr[TIPC_NLA_NET_NODEID_W1, int64]
	TIPC_NLA_NET_ADDR_LEGACY	nlattr[TIPC_NLA_NET_ADDR_LEGACY, void]
] [varlen]

tipc_nl_node_policy$auto_netlink [
	TIPC_NLA_NODE_UNSPEC		nlattr[TIPC_NLA_NODE_UNSPEC, array[int8]]
	TIPC_NLA_NODE_ADDR		nlattr[TIPC_NLA_NODE_ADDR, int32]
	TIPC_NLA_NODE_UP		nlattr[TIPC_NLA_NODE_UP, void]
	TIPC_NLA_NODE_ID		nlattr[TIPC_NLA_NODE_ID, array[int8, 0:16]]
	TIPC_NLA_NODE_KEY		nlattr[TIPC_NLA_NODE_KEY, array[int8, 0:72]]
	TIPC_NLA_NODE_KEY_MASTER	nlattr[TIPC_NLA_NODE_KEY_MASTER, void]
	TIPC_NLA_NODE_REKEYING		nlattr[TIPC_NLA_NODE_REKEYING, int32]
] [varlen]

tipc_nl_policy$auto_netlink [
	TIPC_NLA_UNSPEC		nlattr[TIPC_NLA_UNSPEC, array[int8]]
	TIPC_NLA_BEARER		nlattr[TIPC_NLA_BEARER, array[int8]]
	TIPC_NLA_SOCK		nlattr[TIPC_NLA_SOCK, array[int8]]
	TIPC_NLA_PUBL		nlattr[TIPC_NLA_PUBL, array[int8]]
	TIPC_NLA_LINK		nlattr[TIPC_NLA_LINK, array[int8]]
	TIPC_NLA_MEDIA		nlattr[TIPC_NLA_MEDIA, array[int8]]
	TIPC_NLA_NODE		nlattr[TIPC_NLA_NODE, array[int8]]
	TIPC_NLA_NET		nlattr[TIPC_NLA_NET, array[int8]]
	TIPC_NLA_NAME_TABLE	nlattr[TIPC_NLA_NAME_TABLE, array[int8]]
	TIPC_NLA_MON		nlattr[TIPC_NLA_MON, array[int8]]
] [varlen]

tipc_nl_prop_policy$auto_netlink [
	TIPC_NLA_PROP_UNSPEC		nlattr[TIPC_NLA_PROP_UNSPEC, array[int8]]
	TIPC_NLA_PROP_PRIO		nlattr[TIPC_NLA_PROP_PRIO, int32]
	TIPC_NLA_PROP_TOL		nlattr[TIPC_NLA_PROP_TOL, int32]
	TIPC_NLA_PROP_WIN		nlattr[TIPC_NLA_PROP_WIN, int32]
	TIPC_NLA_PROP_MTU		nlattr[TIPC_NLA_PROP_MTU, int32]
	TIPC_NLA_PROP_BROADCAST		nlattr[TIPC_NLA_PROP_BROADCAST, int32]
	TIPC_NLA_PROP_BROADCAST_RATIO	nlattr[TIPC_NLA_PROP_BROADCAST_RATIO, int32]
] [varlen]

tipc_nl_sock_policy$auto_netlink [
	TIPC_NLA_SOCK_UNSPEC	nlattr[TIPC_NLA_SOCK_UNSPEC, array[int8]]
	TIPC_NLA_SOCK_ADDR	nlattr[TIPC_NLA_SOCK_ADDR, int32]
	TIPC_NLA_SOCK_REF	nlattr[TIPC_NLA_SOCK_REF, int32]
	TIPC_NLA_SOCK_CON	nlattr[TIPC_NLA_SOCK_CON, array[int8]]
	TIPC_NLA_SOCK_HAS_PUBL	nlattr[TIPC_NLA_SOCK_HAS_PUBL, void]
] [varlen]

tipc_nl_udp_policy$auto_netlink [
	TIPC_NLA_UDP_UNSPEC	nlattr[TIPC_NLA_UDP_UNSPEC, array[int8]]
	TIPC_NLA_UDP_LOCAL	nlattr[TIPC_NLA_UDP_LOCAL, array[int8, 0:128]]
	TIPC_NLA_UDP_REMOTE	nlattr[TIPC_NLA_UDP_REMOTE, array[int8, 0:128]]
] [varlen]

tunnel_key_policy$auto_act_tunnel_key [
	TCA_TUNNEL_KEY_PARMS		nlattr[TCA_TUNNEL_KEY_PARMS, array[int8, 24]]
	TCA_TUNNEL_KEY_ENC_IPV4_SRC	nlattr[TCA_TUNNEL_KEY_ENC_IPV4_SRC, ipv4_addr]
	TCA_TUNNEL_KEY_ENC_IPV4_DST	nlattr[TCA_TUNNEL_KEY_ENC_IPV4_DST, ipv4_addr]
	TCA_TUNNEL_KEY_ENC_IPV6_SRC	nlattr[TCA_TUNNEL_KEY_ENC_IPV6_SRC, ipv6_addr]
	TCA_TUNNEL_KEY_ENC_IPV6_DST	nlattr[TCA_TUNNEL_KEY_ENC_IPV6_DST, ipv6_addr]
	TCA_TUNNEL_KEY_ENC_KEY_ID	nlattr[TCA_TUNNEL_KEY_ENC_KEY_ID, int32]
	TCA_TUNNEL_KEY_ENC_DST_PORT	nlattr[TCA_TUNNEL_KEY_ENC_DST_PORT, sock_port]
	TCA_TUNNEL_KEY_NO_CSUM		nlattr[TCA_TUNNEL_KEY_NO_CSUM, int8]
	TCA_TUNNEL_KEY_ENC_OPTS		nlattr[TCA_TUNNEL_KEY_ENC_OPTS, array[int8]]
	TCA_TUNNEL_KEY_ENC_TOS		nlattr[TCA_TUNNEL_KEY_ENC_TOS, int8]
	TCA_TUNNEL_KEY_ENC_TTL		nlattr[TCA_TUNNEL_KEY_ENC_TTL, int8]
] [varlen]

tuple_nla_policy$auto_nf_conntrack_netlink [
	CTA_TUPLE_IP	nlattr[CTA_TUPLE_IP, array[int8]]
	CTA_TUPLE_PROTO	nlattr[CTA_TUPLE_PROTO, array[int8]]
	CTA_TUPLE_ZONE	nlattr[CTA_TUPLE_ZONE, int16]
] [varlen]

txq_params_policy$auto_nl80211 [
	NL80211_TXQ_ATTR_AC	nlattr[NL80211_TXQ_ATTR_AC, int8]
	NL80211_TXQ_ATTR_TXOP	nlattr[NL80211_TXQ_ATTR_TXOP, int16]
	NL80211_TXQ_ATTR_CWMIN	nlattr[NL80211_TXQ_ATTR_CWMIN, int16]
	NL80211_TXQ_ATTR_CWMAX	nlattr[NL80211_TXQ_ATTR_CWMAX, int16]
	NL80211_TXQ_ATTR_AIFS	nlattr[NL80211_TXQ_ATTR_AIFS, int8]
] [varlen]

u32_policy$auto_cls_u32 [
	TCA_U32_CLASSID	nlattr[TCA_U32_CLASSID, int32]
	TCA_U32_HASH	nlattr[TCA_U32_HASH, int32]
	TCA_U32_LINK	nlattr[TCA_U32_LINK, int32]
	TCA_U32_DIVISOR	nlattr[TCA_U32_DIVISOR, int32]
	TCA_U32_SEL	nlattr[TCA_U32_SEL, array[int8, 16]]
	TCA_U32_INDEV	nlattr[TCA_U32_INDEV, stringnoz]
	TCA_U32_MARK	nlattr[TCA_U32_MARK, array[int8, 12]]
	TCA_U32_FLAGS	nlattr[TCA_U32_FLAGS, int32]
] [varlen]

udp_timeout_nla_policy$auto_nf_conntrack_proto_udp [
	CTA_TIMEOUT_UDP_UNREPLIED	nlattr[CTA_TIMEOUT_UDP_UNREPLIED, int32]
	CTA_TIMEOUT_UDP_REPLIED		nlattr[CTA_TIMEOUT_UDP_REPLIED, int32]
] [varlen]

userspace_policy$auto_flow_netlink [
	OVS_USERSPACE_ATTR_PID			nlattr[OVS_USERSPACE_ATTR_PID, int32]
	OVS_USERSPACE_ATTR_USERDATA		nlattr[OVS_USERSPACE_ATTR_USERDATA, array[int8]]
	OVS_USERSPACE_ATTR_EGRESS_TUN_PORT	nlattr[OVS_USERSPACE_ATTR_EGRESS_TUN_PORT, int32]
] [varlen]

vdpa_nl_policy$auto_vdpa [
	VDPA_ATTR_MGMTDEV_BUS_NAME	nlattr[VDPA_ATTR_MGMTDEV_BUS_NAME, string]
	VDPA_ATTR_MGMTDEV_DEV_NAME	nlattr[VDPA_ATTR_MGMTDEV_DEV_NAME, stringnoz]
	VDPA_ATTR_DEV_NAME		nlattr[VDPA_ATTR_DEV_NAME, stringnoz]
	VDPA_ATTR_DEV_NET_CFG_MACADDR	nlattr[VDPA_ATTR_DEV_NET_CFG_MACADDR, array[int8]]
	VDPA_ATTR_DEV_NET_CFG_MAX_VQP	nlattr[VDPA_ATTR_DEV_NET_CFG_MAX_VQP, int16]
	VDPA_ATTR_DEV_NET_CFG_MTU	nlattr[VDPA_ATTR_DEV_NET_CFG_MTU, int16]
	VDPA_ATTR_DEV_QUEUE_INDEX	nlattr[VDPA_ATTR_DEV_QUEUE_INDEX, int32]
	VDPA_ATTR_DEV_FEATURES		nlattr[VDPA_ATTR_DEV_FEATURES, int64]
] [varlen]

veth_policy$auto_veth [
	VETH_INFO_PEER	nlattr[VETH_INFO_PEER, array[int8, 16]]
] [varlen]

vlan_map_policy$auto_vlan_netlink [
	IFLA_VLAN_QOS_MAPPING	nlattr[IFLA_VLAN_QOS_MAPPING, int64]
] [varlen]

vlan_policy$auto_act_vlan [
	TCA_VLAN_UNSPEC			nlattr[TCA_VLAN_UNSPEC, array[int8]]
	TCA_VLAN_PARMS			nlattr[TCA_VLAN_PARMS, array[int8, 24]]
	TCA_VLAN_PUSH_VLAN_ID		nlattr[TCA_VLAN_PUSH_VLAN_ID, int16]
	TCA_VLAN_PUSH_VLAN_PROTOCOL	nlattr[TCA_VLAN_PUSH_VLAN_PROTOCOL, int16]
	TCA_VLAN_PUSH_VLAN_PRIORITY	nlattr[TCA_VLAN_PUSH_VLAN_PRIORITY, int8]
	TCA_VLAN_PUSH_ETH_DST		nlattr[TCA_VLAN_PUSH_ETH_DST, array[int8]]
	TCA_VLAN_PUSH_ETH_SRC		nlattr[TCA_VLAN_PUSH_ETH_SRC, array[int8]]
] [varlen]

vlan_policy$auto_vlan_netlink [
	IFLA_VLAN_ID		nlattr[IFLA_VLAN_ID, int16]
	IFLA_VLAN_FLAGS		nlattr[IFLA_VLAN_FLAGS, int64]
	IFLA_VLAN_EGRESS_QOS	nlattr[IFLA_VLAN_EGRESS_QOS, array[int8]]
	IFLA_VLAN_INGRESS_QOS	nlattr[IFLA_VLAN_INGRESS_QOS, array[int8]]
	IFLA_VLAN_PROTOCOL	nlattr[IFLA_VLAN_PROTOCOL, int16]
] [varlen]

vlan_tunnel_policy$auto_br_netlink_tunnel [
	IFLA_BRIDGE_VLAN_TUNNEL_UNSPEC	nlattr[IFLA_BRIDGE_VLAN_TUNNEL_UNSPEC, array[int8]]
	IFLA_BRIDGE_VLAN_TUNNEL_ID	nlattr[IFLA_BRIDGE_VLAN_TUNNEL_ID, int32]
	IFLA_BRIDGE_VLAN_TUNNEL_VID	nlattr[IFLA_BRIDGE_VLAN_TUNNEL_VID, int16]
	IFLA_BRIDGE_VLAN_TUNNEL_FLAGS	nlattr[IFLA_BRIDGE_VLAN_TUNNEL_FLAGS, int16]
] [varlen]

vni_filter_entry_policy$auto_vxlan_vnifilter [
	VXLAN_VNIFILTER_ENTRY_START	nlattr[VXLAN_VNIFILTER_ENTRY_START, int32]
	VXLAN_VNIFILTER_ENTRY_END	nlattr[VXLAN_VNIFILTER_ENTRY_END, int32]
	VXLAN_VNIFILTER_ENTRY_GROUP	nlattr[VXLAN_VNIFILTER_ENTRY_GROUP, int32]
	VXLAN_VNIFILTER_ENTRY_GROUP6	nlattr[VXLAN_VNIFILTER_ENTRY_GROUP6, array[int8, 0:16]]
] [varlen]

vni_filter_policy$auto_vxlan_vnifilter [
	VXLAN_VNIFILTER_ENTRY	nlattr[VXLAN_VNIFILTER_ENTRY, array[int8]]
] [varlen]

vport_policy$auto_datapath [
	OVS_VPORT_ATTR_PORT_NO		nlattr[OVS_VPORT_ATTR_PORT_NO, int32]
	OVS_VPORT_ATTR_TYPE		nlattr[OVS_VPORT_ATTR_TYPE, int32]
	OVS_VPORT_ATTR_NAME		nlattr[OVS_VPORT_ATTR_NAME, string]
	OVS_VPORT_ATTR_OPTIONS		nlattr[OVS_VPORT_ATTR_OPTIONS, array[int8]]
	OVS_VPORT_ATTR_UPCALL_PID	nlattr[OVS_VPORT_ATTR_UPCALL_PID, array[int8]]
	OVS_VPORT_ATTR_STATS		nlattr[OVS_VPORT_ATTR_STATS, array[int8, 64]]
	OVS_VPORT_ATTR_IFINDEX		nlattr[OVS_VPORT_ATTR_IFINDEX, ifindex]
	OVS_VPORT_ATTR_NETNSID		nlattr[OVS_VPORT_ATTR_NETNSID, int32]
	OVS_VPORT_ATTR_UPCALL_STATS	nlattr[OVS_VPORT_ATTR_UPCALL_STATS, array[int8]]
] [varlen]

vrf_nl_policy$auto_vrf [
	IFLA_VRF_TABLE	nlattr[IFLA_VRF_TABLE, int32]
] [varlen]

vti6_policy$auto_ip6_vti [
	IFLA_VTI_LINK	nlattr[IFLA_VTI_LINK, int32]
	IFLA_VTI_IKEY	nlattr[IFLA_VTI_IKEY, int32]
	IFLA_VTI_OKEY	nlattr[IFLA_VTI_OKEY, int32]
	IFLA_VTI_LOCAL	nlattr[IFLA_VTI_LOCAL, array[int8, 16]]
	IFLA_VTI_REMOTE	nlattr[IFLA_VTI_REMOTE, array[int8, 16]]
	IFLA_VTI_FWMARK	nlattr[IFLA_VTI_FWMARK, int32]
] [varlen]

vti_policy$auto_ip_vti [
	IFLA_VTI_LINK	nlattr[IFLA_VTI_LINK, int32]
	IFLA_VTI_IKEY	nlattr[IFLA_VTI_IKEY, int32]
	IFLA_VTI_OKEY	nlattr[IFLA_VTI_OKEY, int32]
	IFLA_VTI_LOCAL	nlattr[IFLA_VTI_LOCAL, int32]
	IFLA_VTI_REMOTE	nlattr[IFLA_VTI_REMOTE, int32]
	IFLA_VTI_FWMARK	nlattr[IFLA_VTI_FWMARK, int32]
] [varlen]

vxcan_policy$auto_vxcan [
	VXCAN_INFO_PEER	nlattr[VXCAN_INFO_PEER, array[int8, 16]]
] [varlen]

vxlan_del_bulk_policy$auto_vxlan_core [
	NDA_DST			nlattr[NDA_DST, array[int8]]
	NDA_PORT		nlattr[NDA_PORT, sock_port]
	NDA_VNI			nlattr[NDA_VNI, int32]
	NDA_SRC_VNI		nlattr[NDA_SRC_VNI, int32]
	NDA_NH_ID		nlattr[NDA_NH_ID, int32]
	NDA_NDM_STATE_MASK	nlattr[NDA_NDM_STATE_MASK, int16]
	NDA_NDM_FLAGS_MASK	nlattr[NDA_NDM_FLAGS_MASK, int8]
] [varlen]

vxlan_mdbe_attrs_del_bulk_pol$auto_vxlan_mdb [
	MDBE_ATTR_RTPROT	nlattr[MDBE_ATTR_RTPROT, int8]
	MDBE_ATTR_DST		nlattr[MDBE_ATTR_DST, array[int8]]
	MDBE_ATTR_DST_PORT	nlattr[MDBE_ATTR_DST_PORT, sock_port]
	MDBE_ATTR_VNI		nlattr[MDBE_ATTR_VNI, int32]
	MDBE_ATTR_SRC_VNI	nlattr[MDBE_ATTR_SRC_VNI, int32]
	MDBE_ATTR_STATE_MASK	nlattr[MDBE_ATTR_STATE_MASK, int8]
] [varlen]

vxlan_mdbe_attrs_get_pol$auto_vxlan_mdb [
	MDBE_ATTR_SOURCE	nlattr[MDBE_ATTR_SOURCE, array[int8]]
	MDBE_ATTR_SRC_VNI	nlattr[MDBE_ATTR_SRC_VNI, int32]
] [varlen]

vxlan_mdbe_attrs_pol$auto_vxlan_mdb [
	MDBE_ATTR_SOURCE	nlattr[MDBE_ATTR_SOURCE, array[int8]]
	MDBE_ATTR_SRC_LIST	nlattr[MDBE_ATTR_SRC_LIST, int8]
	MDBE_ATTR_GROUP_MODE	nlattr[MDBE_ATTR_GROUP_MODE, int8]
	MDBE_ATTR_RTPROT	nlattr[MDBE_ATTR_RTPROT, int8]
	MDBE_ATTR_DST		nlattr[MDBE_ATTR_DST, array[int8]]
	MDBE_ATTR_DST_PORT	nlattr[MDBE_ATTR_DST_PORT, sock_port]
	MDBE_ATTR_VNI		nlattr[MDBE_ATTR_VNI, int32]
	MDBE_ATTR_IFINDEX	nlattr[MDBE_ATTR_IFINDEX, ifindex]
	MDBE_ATTR_SRC_VNI	nlattr[MDBE_ATTR_SRC_VNI, int32]
] [varlen]

vxlan_mdbe_src_list_entry_pol$auto_vxlan_mdb [
	MDBE_SRCATTR_ADDRESS	nlattr[MDBE_SRCATTR_ADDRESS, array[int8]]
] [varlen]

vxlan_mdbe_src_list_pol$auto_vxlan_mdb [
	MDBE_SRC_LIST_ENTRY	nlattr[MDBE_SRC_LIST_ENTRY, int8]
] [varlen]

vxlan_opt_policy$auto_act_tunnel_key [
	TCA_TUNNEL_KEY_ENC_OPT_VXLAN_GBP	nlattr[TCA_TUNNEL_KEY_ENC_OPT_VXLAN_GBP, int32]
] [varlen]

vxlan_opt_policy$auto_cls_flower [
	TCA_FLOWER_KEY_ENC_OPT_VXLAN_GBP	nlattr[TCA_FLOWER_KEY_ENC_OPT_VXLAN_GBP, int32]
] [varlen]

vxlan_opt_policy$auto_ip_tunnel_core [
	LWTUNNEL_IP_OPT_VXLAN_GBP	nlattr[LWTUNNEL_IP_OPT_VXLAN_GBP, int32]
] [varlen]

vxlan_policy$auto_vxlan_core [
	IFLA_VXLAN_UNSPEC		nlattr[IFLA_VXLAN_UNSPEC, array[int8]]
	IFLA_VXLAN_ID			nlattr[IFLA_VXLAN_ID, int32]
	IFLA_VXLAN_GROUP		nlattr[IFLA_VXLAN_GROUP, int32]
	IFLA_VXLAN_LINK			nlattr[IFLA_VXLAN_LINK, int32]
	IFLA_VXLAN_LOCAL		nlattr[IFLA_VXLAN_LOCAL, int32]
	IFLA_VXLAN_TTL			nlattr[IFLA_VXLAN_TTL, int8]
	IFLA_VXLAN_TOS			nlattr[IFLA_VXLAN_TOS, int8]
	IFLA_VXLAN_LEARNING		nlattr[IFLA_VXLAN_LEARNING, int8]
	IFLA_VXLAN_AGEING		nlattr[IFLA_VXLAN_AGEING, int32]
	IFLA_VXLAN_LIMIT		nlattr[IFLA_VXLAN_LIMIT, int32]
	IFLA_VXLAN_PORT_RANGE		nlattr[IFLA_VXLAN_PORT_RANGE, int32]
	IFLA_VXLAN_PROXY		nlattr[IFLA_VXLAN_PROXY, int8]
	IFLA_VXLAN_RSC			nlattr[IFLA_VXLAN_RSC, int8]
	IFLA_VXLAN_L2MISS		nlattr[IFLA_VXLAN_L2MISS, int8]
	IFLA_VXLAN_L3MISS		nlattr[IFLA_VXLAN_L3MISS, int8]
	IFLA_VXLAN_PORT			nlattr[IFLA_VXLAN_PORT, sock_port]
	IFLA_VXLAN_GROUP6		nlattr[IFLA_VXLAN_GROUP6, array[int8, 16]]
	IFLA_VXLAN_LOCAL6		nlattr[IFLA_VXLAN_LOCAL6, array[int8, 16]]
	IFLA_VXLAN_UDP_CSUM		nlattr[IFLA_VXLAN_UDP_CSUM, int8]
	IFLA_VXLAN_UDP_ZERO_CSUM6_TX	nlattr[IFLA_VXLAN_UDP_ZERO_CSUM6_TX, int8]
	IFLA_VXLAN_UDP_ZERO_CSUM6_RX	nlattr[IFLA_VXLAN_UDP_ZERO_CSUM6_RX, int8]
	IFLA_VXLAN_REMCSUM_TX		nlattr[IFLA_VXLAN_REMCSUM_TX, int8]
	IFLA_VXLAN_REMCSUM_RX		nlattr[IFLA_VXLAN_REMCSUM_RX, int8]
	IFLA_VXLAN_GBP			nlattr[IFLA_VXLAN_GBP, void]
	IFLA_VXLAN_REMCSUM_NOPARTIAL	nlattr[IFLA_VXLAN_REMCSUM_NOPARTIAL, void]
	IFLA_VXLAN_COLLECT_METADATA	nlattr[IFLA_VXLAN_COLLECT_METADATA, int8]
	IFLA_VXLAN_LABEL		nlattr[IFLA_VXLAN_LABEL, int32]
	IFLA_VXLAN_GPE			nlattr[IFLA_VXLAN_GPE, void]
	IFLA_VXLAN_TTL_INHERIT		nlattr[IFLA_VXLAN_TTL_INHERIT, void]
	IFLA_VXLAN_DF			nlattr[IFLA_VXLAN_DF, int8]
	IFLA_VXLAN_VNIFILTER		nlattr[IFLA_VXLAN_VNIFILTER, int8]
	IFLA_VXLAN_LOCALBYPASS		nlattr[IFLA_VXLAN_LOCALBYPASS, int8]
	IFLA_VXLAN_LABEL_POLICY		nlattr[IFLA_VXLAN_LABEL_POLICY, int32]
] [varlen]

wwan_rtnl_policy$auto_wwan_core [
	IFLA_WWAN_LINK_ID	nlattr[IFLA_WWAN_LINK_ID, int32]
] [varlen]

xfrm_lwt_policy$auto_xfrm_interface_core [
	LWT_XFRM_IF_ID	nlattr[LWT_XFRM_IF_ID, int32]
	LWT_XFRM_LINK	nlattr[LWT_XFRM_LINK, int32]
] [varlen]

xfrma_policy$auto_xfrm [
	XFRMA_UNSPEC			nlattr[XFRMA_UNSPEC, array[int8]]
	XFRMA_ALG_AUTH			nlattr[XFRMA_ALG_AUTH, array[int8, 68]]
	XFRMA_ALG_CRYPT			nlattr[XFRMA_ALG_CRYPT, array[int8, 68]]
	XFRMA_ALG_COMP			nlattr[XFRMA_ALG_COMP, array[int8, 68]]
	XFRMA_ENCAP			nlattr[XFRMA_ENCAP, array[int8, 24]]
	XFRMA_TMPL			nlattr[XFRMA_TMPL, array[int8, 64]]
	XFRMA_SA			nlattr[XFRMA_SA, array[int8, 224]]
	XFRMA_POLICY			nlattr[XFRMA_POLICY, array[int8, 168]]
	XFRMA_SEC_CTX			nlattr[XFRMA_SEC_CTX, int64]
	XFRMA_LTIME_VAL			nlattr[XFRMA_LTIME_VAL, array[int8, 32]]
	XFRMA_REPLAY_VAL		nlattr[XFRMA_REPLAY_VAL, array[int8, 12]]
	XFRMA_REPLAY_THRESH		nlattr[XFRMA_REPLAY_THRESH, int32]
	XFRMA_ETIMER_THRESH		nlattr[XFRMA_ETIMER_THRESH, int32]
	XFRMA_SRCADDR			nlattr[XFRMA_SRCADDR, array[int8, 16]]
	XFRMA_COADDR			nlattr[XFRMA_COADDR, array[int8, 16]]
	XFRMA_LASTUSED			nlattr[XFRMA_LASTUSED, int64]
	XFRMA_POLICY_TYPE		nlattr[XFRMA_POLICY_TYPE, array[int8, 6]]
	XFRMA_MIGRATE			nlattr[XFRMA_MIGRATE, array[int8, 76]]
	XFRMA_ALG_AEAD			nlattr[XFRMA_ALG_AEAD, array[int8, 72]]
	XFRMA_KMADDRESS			nlattr[XFRMA_KMADDRESS, array[int8, 40]]
	XFRMA_ALG_AUTH_TRUNC		nlattr[XFRMA_ALG_AUTH_TRUNC, array[int8, 72]]
	XFRMA_MARK			nlattr[XFRMA_MARK, int64]
	XFRMA_TFCPAD			nlattr[XFRMA_TFCPAD, int32]
	XFRMA_REPLAY_ESN_VAL		nlattr[XFRMA_REPLAY_ESN_VAL, array[int8, 24]]
	XFRMA_SA_EXTRA_FLAGS		nlattr[XFRMA_SA_EXTRA_FLAGS, int32]
	XFRMA_PROTO			nlattr[XFRMA_PROTO, int8]
	XFRMA_ADDRESS_FILTER		nlattr[XFRMA_ADDRESS_FILTER, array[int8, 36]]
	XFRMA_OFFLOAD_DEV		nlattr[XFRMA_OFFLOAD_DEV, int64]
	XFRMA_SET_MARK			nlattr[XFRMA_SET_MARK, int32]
	XFRMA_SET_MARK_MASK		nlattr[XFRMA_SET_MARK_MASK, int32]
	XFRMA_IF_ID			nlattr[XFRMA_IF_ID, int32]
	XFRMA_MTIMER_THRESH		nlattr[XFRMA_MTIMER_THRESH, int32]
	XFRMA_SA_DIR			nlattr[XFRMA_SA_DIR, int8]
	XFRMA_NAT_KEEPALIVE_INTERVAL	nlattr[XFRMA_NAT_KEEPALIVE_INTERVAL, int32]
] [varlen]

xfrma_spd_policy$auto_xfrm_user [
	XFRMA_SPD_IPV4_HTHRESH	nlattr[XFRMA_SPD_IPV4_HTHRESH, int16]
	XFRMA_SPD_IPV6_HTHRESH	nlattr[XFRMA_SPD_IPV6_HTHRESH, int16]
] [varlen]

xfrmi_policy$auto_xfrm_interface_core [
	IFLA_XFRM_UNSPEC		nlattr[IFLA_XFRM_UNSPEC, array[int8]]
	IFLA_XFRM_LINK			nlattr[IFLA_XFRM_LINK, int32]
	IFLA_XFRM_IF_ID			nlattr[IFLA_XFRM_IF_ID, int32]
	IFLA_XFRM_COLLECT_METADATA	nlattr[IFLA_XFRM_COLLECT_METADATA, void]
] [varlen]

type msghdr_auto[POLICY] msghdr_netlink[netlink_msg_t[autogenerated_netlink, genlmsghdr, POLICY]]
resource autogenerated_netlink[int16]
syz_genetlink_get_family_id$auto(name ptr[in, string], fd sock_nl_generic) autogenerated_netlink
sendmsg$autorun(fd sock_nl_generic, msg ptr[in, auto_union], f flags[send_flags])

auto_union [
	policy0		msghdr_auto[ack_mapinfo_policy$auto_iwpm_msg]
	policy1		msghdr_auto[act_bpf_policy$auto_act_bpf]
	policy2		msghdr_auto[allowedip_policy$auto_netlink]
	policy3		msghdr_auto[band_policy$auto_meter]
	policy4		msghdr_auto[bareudp_policy$auto_bareudp]
	policy5		msghdr_auto[basic_policy$auto_cls_basic]
	policy6		msghdr_auto[batadv_ifla_policy$auto_soft_interface]
	policy7		msghdr_auto[bit_policy$auto_bitset]
	policy8		msghdr_auto[bitset_policy$auto_bitset]
	policy9		msghdr_auto[bond_policy$auto_bond_netlink]
	policy10	msghdr_auto[bond_slave_policy$auto_bond_netlink]
	policy11	msghdr_auto[bpf_nl_policy$auto_lwt_bpf]
	policy12	msghdr_auto[bpf_policy$auto_cls_bpf]
	policy13	msghdr_auto[bpf_prog_policy$auto_lwt_bpf]
	policy14	msghdr_auto[bpf_prog_policy$auto_seg6_local]
	policy15	msghdr_auto[br_cfm_cc_ccm_tx_policy$auto_br_cfm_netlink]
	policy16	msghdr_auto[br_cfm_cc_config_policy$auto_br_cfm_netlink]
	policy17	msghdr_auto[br_cfm_cc_peer_mep_policy$auto_br_cfm_netlink]
	policy18	msghdr_auto[br_cfm_cc_rdi_policy$auto_br_cfm_netlink]
	policy19	msghdr_auto[br_cfm_mep_config_policy$auto_br_cfm_netlink]
	policy20	msghdr_auto[br_cfm_mep_create_policy$auto_br_cfm_netlink]
	policy21	msghdr_auto[br_cfm_mep_delete_policy$auto_br_cfm_netlink]
	policy22	msghdr_auto[br_cfm_policy$auto_br_cfm_netlink]
	policy23	msghdr_auto[br_fdb_del_bulk_policy$auto_br_fdb]
	policy24	msghdr_auto[br_mdbe_attrs_del_bulk_pol$auto_br_mdb]
	policy25	msghdr_auto[br_mdbe_attrs_get_pol$auto_br_mdb]
	policy26	msghdr_auto[br_mdbe_attrs_pol$auto_br_mdb]
	policy27	msghdr_auto[br_mdbe_src_list_entry_pol$auto_br_mdb]
	policy28	msghdr_auto[br_mdbe_src_list_pol$auto_br_mdb]
	policy29	msghdr_auto[br_mrp_in_role_policy$auto_br_mrp_netlink]
	policy30	msghdr_auto[br_mrp_in_state_policy$auto_br_mrp_netlink]
	policy31	msghdr_auto[br_mrp_instance_policy$auto_br_mrp_netlink]
	policy32	msghdr_auto[br_mrp_policy$auto_br_mrp_netlink]
	policy33	msghdr_auto[br_mrp_port_role_policy$auto_br_mrp_netlink]
	policy34	msghdr_auto[br_mrp_port_state_policy$auto_br_mrp_netlink]
	policy35	msghdr_auto[br_mrp_ring_role_policy$auto_br_mrp_netlink]
	policy36	msghdr_auto[br_mrp_ring_state_policy$auto_br_mrp_netlink]
	policy37	msghdr_auto[br_mrp_start_in_test_policy$auto_br_mrp_netlink]
	policy38	msghdr_auto[br_mrp_start_test_policy$auto_br_mrp_netlink]
	policy39	msghdr_auto[br_mst_nl_policy$auto_br_mst]
	policy40	msghdr_auto[br_nda_fdb_pol$auto_br_fdb]
	policy41	msghdr_auto[br_policy$auto_br_netlink]
	policy42	msghdr_auto[br_port_policy$auto_br_netlink]
	policy43	msghdr_auto[br_vlan_db_dump_pol$auto_br_vlan]
	policy44	msghdr_auto[br_vlan_db_gpol$auto_br_vlan_options]
	policy45	msghdr_auto[br_vlan_db_policy$auto_br_vlan]
	policy46	msghdr_auto[br_vlandb_tinfo_pol$auto_br_vlan_options]
	policy47	msghdr_auto[cable_test_tdr_act_cfg_policy$auto_cabletest]
	policy48	msghdr_auto[cake_policy$auto_sch_cake]
	policy49	msghdr_auto[can_policy$auto_netlink]
	policy50	msghdr_auto[can_tdc_policy$auto_netlink]
	policy51	msghdr_auto[cbs_policy$auto_sch_cbs]
	policy52	msghdr_auto[cfm_opt_policy$auto_cls_flower]
	policy53	msghdr_auto[cgroup_policy$auto_cls_cgroup]
	policy54	msghdr_auto[cgw_policy$auto_gw]
	policy55	msghdr_auto[choke_policy$auto_sch_choke]
	policy56	msghdr_auto[coalesce_irq_moderation_policy$auto_coalesce]
	policy57	msghdr_auto[coalesce_profile_policy$auto_coalesce]
	policy58	msghdr_auto[codel_policy$auto_sch_codel]
	policy59	msghdr_auto[compat_policy$auto_xfrm_compat]
	policy60	msghdr_auto[connmark_policy$auto_act_connmark]
	policy61	msghdr_auto[cpl_policy$auto_flow_netlink]
	policy62	msghdr_auto[crypto_policy$auto_crypto_user]
	policy63	msghdr_auto[csum_policy$auto_act_csum]
	policy64	msghdr_auto[ct_nla_policy$auto_nf_conntrack_netlink]
	policy65	msghdr_auto[ct_policy$auto_act_ct]
	policy66	msghdr_auto[cta_filter_nla_policy$auto_nf_conntrack_netlink]
	policy67	msghdr_auto[cta_ip_nla_policy$auto_nf_conntrack_netlink]
	policy68	msghdr_auto[ctinfo_policy$auto_act_ctinfo]
	policy69	msghdr_auto[cttimeout_nla_policy$auto_nfnetlink_cttimeout]
	policy70	msghdr_auto[dcbnl_app_nest$auto_dcbnl]
	policy71	msghdr_auto[dcbnl_bcn_nest$auto_dcbnl]
	policy72	msghdr_auto[dcbnl_cap_nest$auto_dcbnl]
	policy73	msghdr_auto[dcbnl_featcfg_nest$auto_dcbnl]
	policy74	msghdr_auto[dcbnl_ieee_policy$auto_dcbnl]
	policy75	msghdr_auto[dcbnl_numtcs_nest$auto_dcbnl]
	policy76	msghdr_auto[dcbnl_pfc_up_nest$auto_dcbnl]
	policy77	msghdr_auto[dcbnl_pg_nest$auto_dcbnl]
	policy78	msghdr_auto[dcbnl_rtnl_policy$auto_dcbnl]
	policy79	msghdr_auto[dcbnl_tc_param_nest$auto_dcbnl]
	policy80	msghdr_auto[dccp_nla_policy$auto_nf_conntrack_proto_dccp]
	policy81	msghdr_auto[dccp_timeout_nla_policy$auto_nf_conntrack_proto_dccp]
	policy82	msghdr_auto[devconf_ipv4_policy$auto_devinet]
	policy83	msghdr_auto[devconf_ipv6_policy$auto_addrconf]
	policy84	msghdr_auto[devconf_mpls_policy$auto_af_mpls]
	policy85	msghdr_auto[devlink_dl_port_function_nl_policy$auto_netlink_gen]
	policy86	msghdr_auto[devlink_dl_selftest_id_nl_policy$auto_netlink_gen]
	policy87	msghdr_auto[devlink_dpipe_entries_get_nl_policy$auto_netlink_gen]
	policy88	msghdr_auto[devlink_dpipe_headers_get_nl_policy$auto_netlink_gen]
	policy89	msghdr_auto[devlink_dpipe_table_counters_set_nl_policy$auto_netlink_gen]
	policy90	msghdr_auto[devlink_dpipe_table_get_nl_policy$auto_netlink_gen]
	policy91	msghdr_auto[devlink_eswitch_get_nl_policy$auto_netlink_gen]
	policy92	msghdr_auto[devlink_eswitch_set_nl_policy$auto_netlink_gen]
	policy93	msghdr_auto[devlink_flash_update_nl_policy$auto_netlink_gen]
	policy94	msghdr_auto[devlink_function_nl_policy$auto_port]
	policy95	msghdr_auto[devlink_get_nl_policy$auto_netlink_gen]
	policy96	msghdr_auto[devlink_health_reporter_diagnose_nl_policy$auto_netlink_gen]
	policy97	msghdr_auto[devlink_health_reporter_dump_clear_nl_policy$auto_netlink_gen]
	policy98	msghdr_auto[devlink_health_reporter_dump_get_nl_policy$auto_netlink_gen]
	policy99	msghdr_auto[devlink_health_reporter_get_do_nl_policy$auto_netlink_gen]
	policy100	msghdr_auto[devlink_health_reporter_get_dump_nl_policy$auto_netlink_gen]
	policy101	msghdr_auto[devlink_health_reporter_recover_nl_policy$auto_netlink_gen]
	policy102	msghdr_auto[devlink_health_reporter_set_nl_policy$auto_netlink_gen]
	policy103	msghdr_auto[devlink_health_reporter_test_nl_policy$auto_netlink_gen]
	policy104	msghdr_auto[devlink_info_get_nl_policy$auto_netlink_gen]
	policy105	msghdr_auto[devlink_linecard_get_do_nl_policy$auto_netlink_gen]
	policy106	msghdr_auto[devlink_linecard_get_dump_nl_policy$auto_netlink_gen]
	policy107	msghdr_auto[devlink_linecard_set_nl_policy$auto_netlink_gen]
	policy108	msghdr_auto[devlink_notify_filter_set_nl_policy$auto_netlink_gen]
	policy109	msghdr_auto[devlink_param_get_do_nl_policy$auto_netlink_gen]
	policy110	msghdr_auto[devlink_param_get_dump_nl_policy$auto_netlink_gen]
	policy111	msghdr_auto[devlink_param_set_nl_policy$auto_netlink_gen]
	policy112	msghdr_auto[devlink_port_del_nl_policy$auto_netlink_gen]
	policy113	msghdr_auto[devlink_port_get_do_nl_policy$auto_netlink_gen]
	policy114	msghdr_auto[devlink_port_get_dump_nl_policy$auto_netlink_gen]
	policy115	msghdr_auto[devlink_port_new_nl_policy$auto_netlink_gen]
	policy116	msghdr_auto[devlink_port_param_get_nl_policy$auto_netlink_gen]
	policy117	msghdr_auto[devlink_port_param_set_nl_policy$auto_netlink_gen]
	policy118	msghdr_auto[devlink_port_set_nl_policy$auto_netlink_gen]
	policy119	msghdr_auto[devlink_port_split_nl_policy$auto_netlink_gen]
	policy120	msghdr_auto[devlink_port_unsplit_nl_policy$auto_netlink_gen]
	policy121	msghdr_auto[devlink_rate_del_nl_policy$auto_netlink_gen]
	policy122	msghdr_auto[devlink_rate_get_do_nl_policy$auto_netlink_gen]
	policy123	msghdr_auto[devlink_rate_get_dump_nl_policy$auto_netlink_gen]
	policy124	msghdr_auto[devlink_rate_new_nl_policy$auto_netlink_gen]
	policy125	msghdr_auto[devlink_rate_set_nl_policy$auto_netlink_gen]
	policy126	msghdr_auto[devlink_region_del_nl_policy$auto_netlink_gen]
	policy127	msghdr_auto[devlink_region_get_do_nl_policy$auto_netlink_gen]
	policy128	msghdr_auto[devlink_region_get_dump_nl_policy$auto_netlink_gen]
	policy129	msghdr_auto[devlink_region_new_nl_policy$auto_netlink_gen]
	policy130	msghdr_auto[devlink_region_read_nl_policy$auto_netlink_gen]
	policy131	msghdr_auto[devlink_reload_nl_policy$auto_netlink_gen]
	policy132	msghdr_auto[devlink_resource_dump_nl_policy$auto_netlink_gen]
	policy133	msghdr_auto[devlink_resource_set_nl_policy$auto_netlink_gen]
	policy134	msghdr_auto[devlink_sb_get_do_nl_policy$auto_netlink_gen]
	policy135	msghdr_auto[devlink_sb_get_dump_nl_policy$auto_netlink_gen]
	policy136	msghdr_auto[devlink_sb_occ_max_clear_nl_policy$auto_netlink_gen]
	policy137	msghdr_auto[devlink_sb_occ_snapshot_nl_policy$auto_netlink_gen]
	policy138	msghdr_auto[devlink_sb_pool_get_do_nl_policy$auto_netlink_gen]
	policy139	msghdr_auto[devlink_sb_pool_get_dump_nl_policy$auto_netlink_gen]
	policy140	msghdr_auto[devlink_sb_pool_set_nl_policy$auto_netlink_gen]
	policy141	msghdr_auto[devlink_sb_port_pool_get_do_nl_policy$auto_netlink_gen]
	policy142	msghdr_auto[devlink_sb_port_pool_get_dump_nl_policy$auto_netlink_gen]
	policy143	msghdr_auto[devlink_sb_port_pool_set_nl_policy$auto_netlink_gen]
	policy144	msghdr_auto[devlink_sb_tc_pool_bind_get_do_nl_policy$auto_netlink_gen]
	policy145	msghdr_auto[devlink_sb_tc_pool_bind_get_dump_nl_policy$auto_netlink_gen]
	policy146	msghdr_auto[devlink_sb_tc_pool_bind_set_nl_policy$auto_netlink_gen]
	policy147	msghdr_auto[devlink_selftest_nl_policy$auto_dev]
	policy148	msghdr_auto[devlink_selftests_get_nl_policy$auto_netlink_gen]
	policy149	msghdr_auto[devlink_selftests_run_nl_policy$auto_netlink_gen]
	policy150	msghdr_auto[devlink_trap_get_do_nl_policy$auto_netlink_gen]
	policy151	msghdr_auto[devlink_trap_get_dump_nl_policy$auto_netlink_gen]
	policy152	msghdr_auto[devlink_trap_group_get_do_nl_policy$auto_netlink_gen]
	policy153	msghdr_auto[devlink_trap_group_get_dump_nl_policy$auto_netlink_gen]
	policy154	msghdr_auto[devlink_trap_group_set_nl_policy$auto_netlink_gen]
	policy155	msghdr_auto[devlink_trap_policer_get_do_nl_policy$auto_netlink_gen]
	policy156	msghdr_auto[devlink_trap_policer_get_dump_nl_policy$auto_netlink_gen]
	policy157	msghdr_auto[devlink_trap_policer_set_nl_policy$auto_netlink_gen]
	policy158	msghdr_auto[devlink_trap_set_nl_policy$auto_netlink_gen]
	policy159	msghdr_auto[drr_policy$auto_sch_drr]
	policy160	msghdr_auto[dsa_policy$auto_netlink]
	policy161	msghdr_auto[em_ipt_policy$auto_em_ipt]
	policy162	msghdr_auto[em_policy$auto_ematch]
	policy163	msghdr_auto[enc_opts_policy$auto_act_tunnel_key]
	policy164	msghdr_auto[enc_opts_policy$auto_cls_flower]
	policy165	msghdr_auto[entry_policy$auto_act_gate]
	policy166	msghdr_auto[entry_policy$auto_sch_taprio]
	policy167	msghdr_auto[erspan_opt_policy$auto_act_tunnel_key]
	policy168	msghdr_auto[erspan_opt_policy$auto_cls_flower]
	policy169	msghdr_auto[erspan_opt_policy$auto_ip_tunnel_core]
	policy170	msghdr_auto[etf_policy$auto_sch_etf]
	policy171	msghdr_auto[ethnl_header_policy$auto_netlink]
	policy172	msghdr_auto[ethnl_header_policy_stats$auto_netlink]
	policy173	msghdr_auto[ets_class_policy$auto_sch_ets]
	policy174	msghdr_auto[ets_policy$auto_sch_ets]
	policy175	msghdr_auto[ets_priomap_policy$auto_sch_ets]
	policy176	msghdr_auto[ets_quanta_policy$auto_sch_ets]
	policy177	msghdr_auto[exp_nat_nla_policy$auto_nf_conntrack_netlink]
	policy178	msghdr_auto[exp_nla_policy$auto_nf_conntrack_netlink]
	policy179	msghdr_auto[exts_policy$auto_vport_vxlan]
	policy180	msghdr_auto[fib_rule_policy$auto_fib_rules]
	policy181	msghdr_auto[filter_policy$auto_nfnetlink_acct]
	policy182	msghdr_auto[fl_policy$auto_cls_flower]
	policy183	msghdr_auto[flow_policy$auto_cls_flow]
	policy184	msghdr_auto[fou_nl_policy$auto_fou_nl]
	policy185	msghdr_auto[fq_codel_policy$auto_sch_fq_codel]
	policy186	msghdr_auto[fq_pie_policy$auto_sch_fq_pie]
	policy187	msghdr_auto[fq_policy$auto_sch_fq]
	policy188	msghdr_auto[fw_policy$auto_cls_fw]
	policy189	msghdr_auto[gact_policy$auto_act_gact]
	policy190	msghdr_auto[gate_policy$auto_act_gate]
	policy191	msghdr_auto[generic_timeout_nla_policy$auto_nf_conntrack_proto_generic]
	policy192	msghdr_auto[geneve_opt_policy$auto_act_tunnel_key]
	policy193	msghdr_auto[geneve_opt_policy$auto_cls_flower]
	policy194	msghdr_auto[geneve_opt_policy$auto_ip_tunnel_core]
	policy195	msghdr_auto[geneve_policy$auto_geneve]
	policy196	msghdr_auto[get_stringset_policy$auto_strset]
	policy197	msghdr_auto[gre_timeout_nla_policy$auto_nf_conntrack_proto_gre]
	policy198	msghdr_auto[gred_policy$auto_sch_gred]
	policy199	msghdr_auto[gred_vq_policy$auto_sch_gred]
	policy200	msghdr_auto[gred_vqe_policy$auto_sch_gred]
	policy201	msghdr_auto[gtp_opt_policy$auto_cls_flower]
	policy202	msghdr_auto[gtp_policy$auto_gtp]
	policy203	msghdr_auto[he_bss_color_policy$auto_nl80211]
	policy204	msghdr_auto[he_obss_pd_policy$auto_nl80211]
	policy205	msghdr_auto[hello_policy$auto_iwpm_msg]
	policy206	msghdr_auto[help_nla_policy$auto_nf_conntrack_netlink]
	policy207	msghdr_auto[hfsc_policy$auto_sch_hfsc]
	policy208	msghdr_auto[hhf_policy$auto_sch_hhf]
	policy209	msghdr_auto[hsr_policy$auto_hsr_netlink]
	policy210	msghdr_auto[htb_policy$auto_sch_htb]
	policy211	msghdr_auto[hwsim_edge_policy$auto_mac802154_hwsim]
	policy212	msghdr_auto[hwsim_ftm_capa_policy$auto_mac80211_hwsim]
	policy213	msghdr_auto[hwsim_ftm_result_policy$auto_mac80211_hwsim]
	policy214	msghdr_auto[hwsim_pmsr_capa_policy$auto_mac80211_hwsim]
	policy215	msghdr_auto[hwsim_pmsr_capa_type_policy$auto_mac80211_hwsim]
	policy216	msghdr_auto[hwsim_pmsr_peer_result_policy$auto_mac80211_hwsim]
	policy217	msghdr_auto[hwsim_pmsr_peers_result_policy$auto_mac80211_hwsim]
	policy218	msghdr_auto[hwsim_pmsr_resp_policy$auto_mac80211_hwsim]
	policy219	msghdr_auto[hwsim_pmsr_resp_type_policy$auto_mac80211_hwsim]
	policy220	msghdr_auto[hwsim_rate_info_policy$auto_mac80211_hwsim]
	policy221	msghdr_auto[ib_nl_addr_policy$auto_addr]
	policy222	msghdr_auto[ib_nl_policy$auto_sa_query]
	policy223	msghdr_auto[icmp_nla_policy$auto_nf_conntrack_proto_icmp]
	policy224	msghdr_auto[icmp_timeout_nla_policy$auto_nf_conntrack_proto_icmp]
	policy225	msghdr_auto[icmpv6_nla_policy$auto_nf_conntrack_proto_icmpv6]
	policy226	msghdr_auto[icmpv6_timeout_nla_policy$auto_nf_conntrack_proto_icmpv6]
	policy227	msghdr_auto[ifa_ipv4_policy$auto_devinet]
	policy228	msghdr_auto[ifa_ipv6_policy$auto_addrconf]
	policy229	msghdr_auto[ifa_phonet_policy$auto_pn_netlink]
	policy230	msghdr_auto[ifal_policy$auto_addrlabel]
	policy231	msghdr_auto[ife_policy$auto_act_ife]
	policy232	msghdr_auto[ifla_info_policy$auto_rtnetlink]
	policy233	msghdr_auto[ifla_policy$auto_rtnetlink]
	policy234	msghdr_auto[ifla_port_policy$auto_rtnetlink]
	policy235	msghdr_auto[ifla_proto_down_reason_policy$auto_rtnetlink]
	policy236	msghdr_auto[ifla_stats_set_policy$auto_rtnetlink]
	policy237	msghdr_auto[ifla_vf_policy$auto_rtnetlink]
	policy238	msghdr_auto[ifla_xdp_policy$auto_rtnetlink]
	policy239	msghdr_auto[ila_nl_policy$auto_ila_lwt]
	policy240	msghdr_auto[inet6_af_policy$auto_addrconf]
	policy241	msghdr_auto[inet_af_policy$auto_devinet]
	policy242	msghdr_auto[ip6_tnl_policy$auto_ip6_tunnel]
	policy243	msghdr_auto[ip6_tun_policy$auto_ip_tunnel_core]
	policy244	msghdr_auto[ip6gre_policy$auto_ip6_gre]
	policy245	msghdr_auto[ip6mr_getroute_policy$auto_ip6mr]
	policy246	msghdr_auto[ip_opts_policy$auto_ip_tunnel_core]
	policy247	msghdr_auto[ip_set_adt_policy$auto_ip_set_core]
	policy248	msghdr_auto[ip_set_create_policy$auto_ip_set_core]
	policy249	msghdr_auto[ip_set_dump_policy$auto_ip_set_core]
	policy250	msghdr_auto[ip_set_index_policy$auto_ip_set_core]
	policy251	msghdr_auto[ip_set_protocol_policy$auto_ip_set_core]
	policy252	msghdr_auto[ip_set_setname2_policy$auto_ip_set_core]
	policy253	msghdr_auto[ip_set_setname_policy$auto_ip_set_core]
	policy254	msghdr_auto[ip_set_type_policy$auto_ip_set_core]
	policy255	msghdr_auto[ip_tun_policy$auto_ip_tunnel_core]
	policy256	msghdr_auto[ip_vs_daemon_policy$auto_ip_vs_ctl]
	policy257	msghdr_auto[ip_vs_dest_policy$auto_ip_vs_ctl]
	policy258	msghdr_auto[ip_vs_svc_policy$auto_ip_vs_ctl]
	policy259	msghdr_auto[ipaddr_policy$auto_ip_set_core]
	policy260	msghdr_auto[ipcaif_policy$auto_chnl_net]
	policy261	msghdr_auto[ipgre_policy$auto_ip_gre]
	policy262	msghdr_auto[ipip6_policy$auto_sit]
	policy263	msghdr_auto[ipip_policy$auto_ipip]
	policy264	msghdr_auto[ipoib_policy$auto_ipoib_netlink]
	policy265	msghdr_auto[ipvlan_nl_policy$auto_ipvlan_main]
	policy266	msghdr_auto[macsec_genl_offload_policy$auto_macsec]
	policy267	msghdr_auto[macsec_genl_rxsc_policy$auto_macsec]
	policy268	msghdr_auto[macsec_genl_sa_policy$auto_macsec]
	policy269	msghdr_auto[macsec_rtnl_policy$auto_macsec]
	policy270	msghdr_auto[macvlan_policy$auto_macvlan]
	policy271	msghdr_auto[mall_policy$auto_cls_matchall]
	policy272	msghdr_auto[map_error_policy$auto_iwpm_msg]
	policy273	msghdr_auto[mdba_del_bulk_policy$auto_rtnetlink]
	policy274	msghdr_auto[mdba_get_policy$auto_rtnetlink]
	policy275	msghdr_auto[mdba_policy$auto_rtnetlink]
	policy276	msghdr_auto[meta_policy$auto_em_meta]
	policy277	msghdr_auto[mirred_policy$auto_act_mirred]
	policy278	msghdr_auto[mntr_flags_policy$auto_nl80211]
	policy279	msghdr_auto[mpls_iptunnel_policy$auto_mpls_iptunnel]
	policy280	msghdr_auto[mpls_policy$auto_act_mpls]
	policy281	msghdr_auto[mpls_stack_entry_policy$auto_cls_flower]
	policy282	msghdr_auto[mptcp_pm_add_addr_nl_policy$auto_mptcp_pm_gen]
	policy283	msghdr_auto[mptcp_pm_address_nl_policy$auto_mptcp_pm_gen]
	policy284	msghdr_auto[mptcp_pm_announce_nl_policy$auto_mptcp_pm_gen]
	policy285	msghdr_auto[mptcp_pm_del_addr_nl_policy$auto_mptcp_pm_gen]
	policy286	msghdr_auto[mptcp_pm_flush_addrs_nl_policy$auto_mptcp_pm_gen]
	policy287	msghdr_auto[mptcp_pm_get_addr_nl_policy$auto_mptcp_pm_gen]
	policy288	msghdr_auto[mptcp_pm_get_limits_nl_policy$auto_mptcp_pm_gen]
	policy289	msghdr_auto[mptcp_pm_remove_nl_policy$auto_mptcp_pm_gen]
	policy290	msghdr_auto[mptcp_pm_set_flags_nl_policy$auto_mptcp_pm_gen]
	policy291	msghdr_auto[mptcp_pm_set_limits_nl_policy$auto_mptcp_pm_gen]
	policy292	msghdr_auto[mptcp_pm_subflow_create_nl_policy$auto_mptcp_pm_gen]
	policy293	msghdr_auto[mptcp_pm_subflow_destroy_nl_policy$auto_mptcp_pm_gen]
	policy294	msghdr_auto[mqprio_policy$auto_sch_mqprio]
	policy295	msghdr_auto[mqprio_tc_entry_policy$auto_sch_mqprio]
	policy296	msghdr_auto[nat_nla_policy$auto_nf_nat_core]
	policy297	msghdr_auto[nat_policy$auto_act_nat]
	policy298	msghdr_auto[nbd_device_policy$auto_nbd]
	policy299	msghdr_auto[nbd_sock_policy$auto_nbd]
	policy300	msghdr_auto[nda_policy$auto_neighbour]
	policy301	msghdr_auto[netdev_page_pool_info_nl_policy$auto_netdev_genl_gen]
	policy302	msghdr_auto[netem_policy$auto_sch_netem]
	policy303	msghdr_auto[nf_ct_port_nla_policy$auto_nf_conntrack_l4proto]
	policy304	msghdr_auto[nfc_sdp_genl_policy$auto_netlink]
	policy305	msghdr_auto[nfnl_acct_policy$auto_nfnetlink_acct]
	policy306	msghdr_auto[nfnl_batch_policy$auto_nfnetlink]
	policy307	msghdr_auto[nfnl_compat_policy_get$auto_nft_compat]
	policy308	msghdr_auto[nfnl_cthelper_expect_pol$auto_nfnetlink_cthelper]
	policy309	msghdr_auto[nfnl_cthelper_expect_policy_set$auto_nfnetlink_cthelper]
	policy310	msghdr_auto[nfnl_cthelper_policy$auto_nfnetlink_cthelper]
	policy311	msghdr_auto[nfnl_cthelper_tuple_pol$auto_nfnetlink_cthelper]
	policy312	msghdr_auto[nfnl_osf_policy$auto_nfnetlink_osf]
	policy313	msghdr_auto[nfqa_cfg_policy$auto_nfnetlink_queue]
	policy314	msghdr_auto[nfqa_verdict_batch_policy$auto_nfnetlink_queue]
	policy315	msghdr_auto[nfqa_verdict_policy$auto_nfnetlink_queue]
	policy316	msghdr_auto[nfqa_vlan_policy$auto_nfnetlink_queue]
	policy317	msghdr_auto[nfsd_sock_nl_policy$auto_netlink]
	policy318	msghdr_auto[nfsd_version_nl_policy$auto_netlink]
	policy319	msghdr_auto[nft_bitwise_policy$auto_nft_bitwise]
	policy320	msghdr_auto[nft_byteorder_policy$auto_nft_byteorder]
	policy321	msghdr_auto[nft_chain_policy$auto_nf_tables_api]
	policy322	msghdr_auto[nft_cmp_policy$auto_nft_cmp]
	policy323	msghdr_auto[nft_concat_policy$auto_nf_tables_api]
	policy324	msghdr_auto[nft_connlimit_policy$auto_nft_connlimit]
	policy325	msghdr_auto[nft_counter_policy$auto_nf_tables_api]
	policy326	msghdr_auto[nft_counter_policy$auto_nft_counter]
	policy327	msghdr_auto[nft_ct_expect_policy$auto_nft_ct]
	policy328	msghdr_auto[nft_ct_helper_policy$auto_nft_ct]
	policy329	msghdr_auto[nft_ct_policy$auto_nft_ct]
	policy330	msghdr_auto[nft_ct_timeout_policy$auto_nft_ct]
	policy331	msghdr_auto[nft_data_policy$auto_nf_tables_api]
	policy332	msghdr_auto[nft_dup_ipv4_policy$auto_nft_dup_ipv4]
	policy333	msghdr_auto[nft_dup_ipv6_policy$auto_nft_dup_ipv6]
	policy334	msghdr_auto[nft_dup_netdev_policy$auto_nft_dup_netdev]
	policy335	msghdr_auto[nft_dynset_policy$auto_nft_dynset]
	policy336	msghdr_auto[nft_expr_policy$auto_nf_tables_api]
	policy337	msghdr_auto[nft_exthdr_policy$auto_nft_exthdr]
	policy338	msghdr_auto[nft_fib_policy$auto_nft_fib]
	policy339	msghdr_auto[nft_flow_offload_policy$auto_nft_flow_offload]
	policy340	msghdr_auto[nft_flowtable_hook_policy$auto_nf_tables_api]
	policy341	msghdr_auto[nft_flowtable_policy$auto_nf_tables_api]
	policy342	msghdr_auto[nft_fwd_netdev_policy$auto_nft_fwd_netdev]
	policy343	msghdr_auto[nft_hash_policy$auto_nft_hash]
	policy344	msghdr_auto[nft_hook_policy$auto_nf_tables_api]
	policy345	msghdr_auto[nft_immediate_policy$auto_nft_immediate]
	policy346	msghdr_auto[nft_inner_policy$auto_nft_inner]
	policy347	msghdr_auto[nft_last_policy$auto_nft_last]
	policy348	msghdr_auto[nft_limit_policy$auto_nft_limit]
	policy349	msghdr_auto[nft_log_policy$auto_nft_log]
	policy350	msghdr_auto[nft_lookup_policy$auto_nft_lookup]
	policy351	msghdr_auto[nft_masq_policy$auto_nft_masq]
	policy352	msghdr_auto[nft_match_policy$auto_nft_compat]
	policy353	msghdr_auto[nft_meta_policy$auto_nft_meta]
	policy354	msghdr_auto[nft_nat_policy$auto_nft_nat]
	policy355	msghdr_auto[nft_ng_policy$auto_nft_numgen]
	policy356	msghdr_auto[nft_obj_policy$auto_nf_tables_api]
	policy357	msghdr_auto[nft_objref_policy$auto_nft_objref]
	policy358	msghdr_auto[nft_osf_policy$auto_nft_osf]
	policy359	msghdr_auto[nft_payload_policy$auto_nft_payload]
	policy360	msghdr_auto[nft_queue_policy$auto_nft_queue]
	policy361	msghdr_auto[nft_quota_policy$auto_nft_quota]
	policy362	msghdr_auto[nft_range_policy$auto_nft_range]
	policy363	msghdr_auto[nft_redir_policy$auto_nft_redir]
	policy364	msghdr_auto[nft_reject_policy$auto_nft_reject]
	policy365	msghdr_auto[nft_rt_policy$auto_nft_rt]
	policy366	msghdr_auto[nft_rule_compat_policy$auto_nft_compat]
	policy367	msghdr_auto[nft_rule_policy$auto_nf_tables_api]
	policy368	msghdr_auto[nft_secmark_policy$auto_nft_meta]
	policy369	msghdr_auto[nft_set_desc_policy$auto_nf_tables_api]
	policy370	msghdr_auto[nft_set_elem_list_policy$auto_nf_tables_api]
	policy371	msghdr_auto[nft_set_elem_policy$auto_nf_tables_api]
	policy372	msghdr_auto[nft_set_policy$auto_nf_tables_api]
	policy373	msghdr_auto[nft_socket_policy$auto_nft_socket]
	policy374	msghdr_auto[nft_synproxy_policy$auto_nft_synproxy]
	policy375	msghdr_auto[nft_table_policy$auto_nf_tables_api]
	policy376	msghdr_auto[nft_target_policy$auto_nft_compat]
	policy377	msghdr_auto[nft_tproxy_policy$auto_nft_tproxy]
	policy378	msghdr_auto[nft_tunnel_ip6_policy$auto_nft_tunnel]
	policy379	msghdr_auto[nft_tunnel_ip_policy$auto_nft_tunnel]
	policy380	msghdr_auto[nft_tunnel_key_policy$auto_nft_tunnel]
	policy381	msghdr_auto[nft_tunnel_opts_erspan_policy$auto_nft_tunnel]
	policy382	msghdr_auto[nft_tunnel_opts_geneve_policy$auto_nft_tunnel]
	policy383	msghdr_auto[nft_tunnel_opts_policy$auto_nft_tunnel]
	policy384	msghdr_auto[nft_tunnel_opts_vxlan_policy$auto_nft_tunnel]
	policy385	msghdr_auto[nft_tunnel_policy$auto_nft_tunnel]
	policy386	msghdr_auto[nft_verdict_policy$auto_nf_tables_api]
	policy387	msghdr_auto[nft_xfrm_policy$auto_nft_xfrm]
	policy388	msghdr_auto[nfula_cfg_policy$auto_nfnetlink_log]
	policy389	msghdr_auto[nl80211_attr_cqm_policy$auto_nl80211]
	policy390	msghdr_auto[nl80211_bss_select_policy$auto_nl80211]
	policy391	msghdr_auto[nl80211_coalesce_policy$auto_nl80211]
	policy392	msghdr_auto[nl80211_fils_discovery_policy$auto_nl80211]
	policy393	msghdr_auto[nl80211_ftm_responder_policy$auto_nl80211]
	policy394	msghdr_auto[nl80211_key_default_policy$auto_nl80211]
	policy395	msghdr_auto[nl80211_key_policy$auto_nl80211]
	policy396	msghdr_auto[nl80211_match_policy$auto_nl80211]
	policy397	msghdr_auto[nl80211_mbssid_config_policy$auto_nl80211]
	policy398	msghdr_auto[nl80211_mesh_setup_params_policy$auto_nl80211]
	policy399	msghdr_auto[nl80211_meshconf_params_policy$auto_nl80211]
	policy400	msghdr_auto[nl80211_nan_func_policy$auto_nl80211]
	policy401	msghdr_auto[nl80211_nan_srf_policy$auto_nl80211]
	policy402	msghdr_auto[nl80211_packet_pattern_policy$auto_nl80211]
	policy403	msghdr_auto[nl80211_plan_policy$auto_nl80211]
	policy404	msghdr_auto[nl80211_pmsr_attr_policy$auto_nl80211]
	policy405	msghdr_auto[nl80211_pmsr_ftm_req_attr_policy$auto_nl80211]
	policy406	msghdr_auto[nl80211_pmsr_peer_attr_policy$auto_nl80211]
	policy407	msghdr_auto[nl80211_pmsr_req_attr_policy$auto_nl80211]
	policy408	msghdr_auto[nl80211_pmsr_req_data_policy$auto_nl80211]
	policy409	msghdr_auto[nl80211_rekey_policy$auto_nl80211]
	policy410	msghdr_auto[nl80211_sta_wme_policy$auto_nl80211]
	policy411	msghdr_auto[nl80211_tid_config_attr_policy$auto_nl80211]
	policy412	msghdr_auto[nl80211_txattr_policy$auto_nl80211]
	policy413	msghdr_auto[nl80211_unsol_bcast_probe_resp_policy$auto_nl80211]
	policy414	msghdr_auto[nl80211_wowlan_policy$auto_nl80211]
	policy415	msghdr_auto[nl80211_wowlan_tcp_policy$auto_nl80211]
	policy416	msghdr_auto[nl802154_dev_addr_policy$auto_nl802154]
	policy417	msghdr_auto[nl802154_dev_policy$auto_nl802154]
	policy418	msghdr_auto[nl802154_devkey_policy$auto_nl802154]
	policy419	msghdr_auto[nl802154_key_id_policy$auto_nl802154]
	policy420	msghdr_auto[nl802154_key_policy$auto_nl802154]
	policy421	msghdr_auto[nl802154_seclevel_policy$auto_nl802154]
	policy422	msghdr_auto[nl_neightbl_policy$auto_neighbour]
	policy423	msghdr_auto[nl_ntbl_parm_policy$auto_neighbour]
	policy424	msghdr_auto[nldev_policy$auto_nldev]
	policy425	msghdr_auto[pedit_key_ex_policy$auto_act_pedit]
	policy426	msghdr_auto[pedit_policy$auto_act_pedit]
	policy427	msghdr_auto[peer_policy$auto_netlink]
	policy428	msghdr_auto[pfcp_opt_policy$auto_cls_flower]
	policy429	msghdr_auto[pie_policy$auto_sch_pie]
	policy430	msghdr_auto[police_policy$auto_act_police]
	policy431	msghdr_auto[policy$auto_flow_netlink]
	policy432	msghdr_auto[ppp_nl_policy$auto_ppp_generic]
	policy433	msghdr_auto[proto_nla_policy$auto_nf_conntrack_netlink]
	policy434	msghdr_auto[protoinfo_policy$auto_nf_conntrack_netlink]
	policy435	msghdr_auto[protonat_nla_policy$auto_nf_nat_core]
	policy436	msghdr_auto[qfq_policy$auto_sch_qfq]
	policy437	msghdr_auto[red_policy$auto_sch_red]
	policy438	msghdr_auto[reg_rule_policy$auto_nl80211]
	policy439	msghdr_auto[resp_add_policy$auto_iwpm_msg]
	policy440	msghdr_auto[resp_mapinfo_policy$auto_iwpm_msg]
	policy441	msghdr_auto[resp_query_policy$auto_iwpm_msg]
	policy442	msghdr_auto[resp_reg_policy$auto_iwpm_msg]
	policy443	msghdr_auto[route4_policy$auto_cls_route]
	policy444	msghdr_auto[rpl_iptunnel_policy$auto_rpl_iptunnel]
	policy445	msghdr_auto[rtm_ipmr_policy$auto_ipmr]
	policy446	msghdr_auto[rtm_ipv4_policy$auto_ip_fib]
	policy447	msghdr_auto[rtm_ipv6_policy$auto_route]
	policy448	msghdr_auto[rtm_mpls_policy$auto_af_mpls]
	policy449	msghdr_auto[rtm_nh_policy_del$auto_nexthop]
	policy450	msghdr_auto[rtm_nh_policy_dump$auto_nexthop]
	policy451	msghdr_auto[rtm_nh_policy_dump_bucket$auto_nexthop]
	policy452	msghdr_auto[rtm_nh_policy_get$auto_nexthop]
	policy453	msghdr_auto[rtm_nh_policy_get_bucket$auto_nexthop]
	policy454	msghdr_auto[rtm_nh_policy_new$auto_nexthop]
	policy455	msghdr_auto[rtm_nh_res_bucket_policy_dump$auto_nexthop]
	policy456	msghdr_auto[rtm_nh_res_bucket_policy_get$auto_nexthop]
	policy457	msghdr_auto[rtm_nh_res_policy_new$auto_nexthop]
	policy458	msghdr_auto[rtm_phonet_policy$auto_pn_netlink]
	policy459	msghdr_auto[rtm_tca_policy$auto_pkt_sched]
	policy460	msghdr_auto[rtnl_net_policy$auto_net_namespace]
	policy461	msghdr_auto[rtnl_stats_get_policy$auto_rtnetlink]
	policy462	msghdr_auto[rtnl_stats_get_policy_filters$auto_rtnetlink]
	policy463	msghdr_auto[sample_policy$auto_act_sample]
	policy464	msghdr_auto[sar_policy$auto_nl80211]
	policy465	msghdr_auto[sar_specs_policy$auto_nl80211]
	policy466	msghdr_auto[sctp_nla_policy$auto_nf_conntrack_proto_sctp]
	policy467	msghdr_auto[sctp_timeout_nla_policy$auto_nf_conntrack_proto_sctp]
	policy468	msghdr_auto[seg6_iptunnel_policy$auto_seg6_iptunnel]
	policy469	msghdr_auto[seg6_local_counters_policy$auto_seg6_local]
	policy470	msghdr_auto[seg6_local_flavors_policy$auto_seg6_local]
	policy471	msghdr_auto[seg6_local_policy$auto_seg6_local]
	policy472	msghdr_auto[seqadj_policy$auto_nf_conntrack_netlink]
	policy473	msghdr_auto[sfb_policy$auto_sch_sfb]
	policy474	msghdr_auto[simple_policy$auto_act_simple]
	policy475	msghdr_auto[skbedit_policy$auto_act_skbedit]
	policy476	msghdr_auto[skbmod_policy$auto_act_skbmod]
	policy477	msghdr_auto[sta_flags_policy$auto_nl80211]
	policy478	msghdr_auto[stab_policy$auto_sch_api]
	policy479	msghdr_auto[strset_stringsets_policy$auto_strset]
	policy480	msghdr_auto[synproxy_policy$auto_nf_conntrack_netlink]
	policy481	msghdr_auto[taprio_policy$auto_sch_taprio]
	policy482	msghdr_auto[taprio_tc_policy$auto_sch_taprio]
	policy483	msghdr_auto[tbf_policy$auto_sch_tbf]
	policy484	msghdr_auto[tcaa_policy$auto_act_api]
	policy485	msghdr_auto[tcf_action_policy$auto_act_api]
	policy486	msghdr_auto[tcf_tfilter_dump_policy$auto_cls_api]
	policy487	msghdr_auto[tcp_nla_policy$auto_nf_conntrack_proto_tcp]
	policy488	msghdr_auto[tcp_timeout_nla_policy$auto_nf_conntrack_proto_tcp]
	policy489	msghdr_auto[team_attr_option_nl_policy$auto_team_nl]
	policy490	msghdr_auto[team_item_option_nl_policy$auto_team_nl]
	policy491	msghdr_auto[team_nl_policy$auto_team_nl]
	policy492	msghdr_auto[tipc_nl_bearer_policy$auto_netlink]
	policy493	msghdr_auto[tipc_nl_link_policy$auto_netlink]
	policy494	msghdr_auto[tipc_nl_media_policy$auto_netlink]
	policy495	msghdr_auto[tipc_nl_monitor_policy$auto_netlink]
	policy496	msghdr_auto[tipc_nl_name_table_policy$auto_netlink]
	policy497	msghdr_auto[tipc_nl_net_policy$auto_netlink]
	policy498	msghdr_auto[tipc_nl_node_policy$auto_netlink]
	policy499	msghdr_auto[tipc_nl_prop_policy$auto_netlink]
	policy500	msghdr_auto[tipc_nl_sock_policy$auto_netlink]
	policy501	msghdr_auto[tipc_nl_udp_policy$auto_netlink]
	policy502	msghdr_auto[tunnel_key_policy$auto_act_tunnel_key]
	policy503	msghdr_auto[tuple_nla_policy$auto_nf_conntrack_netlink]
	policy504	msghdr_auto[txq_params_policy$auto_nl80211]
	policy505	msghdr_auto[u32_policy$auto_cls_u32]
	policy506	msghdr_auto[udp_timeout_nla_policy$auto_nf_conntrack_proto_udp]
	policy507	msghdr_auto[userspace_policy$auto_flow_netlink]
	policy508	msghdr_auto[veth_policy$auto_veth]
	policy509	msghdr_auto[vlan_map_policy$auto_vlan_netlink]
	policy510	msghdr_auto[vlan_policy$auto_act_vlan]
	policy511	msghdr_auto[vlan_policy$auto_vlan_netlink]
	policy512	msghdr_auto[vlan_tunnel_policy$auto_br_netlink_tunnel]
	policy513	msghdr_auto[vni_filter_entry_policy$auto_vxlan_vnifilter]
	policy514	msghdr_auto[vni_filter_policy$auto_vxlan_vnifilter]
	policy515	msghdr_auto[vrf_nl_policy$auto_vrf]
	policy516	msghdr_auto[vti6_policy$auto_ip6_vti]
	policy517	msghdr_auto[vti_policy$auto_ip_vti]
	policy518	msghdr_auto[vxcan_policy$auto_vxcan]
	policy519	msghdr_auto[vxlan_del_bulk_policy$auto_vxlan_core]
	policy520	msghdr_auto[vxlan_mdbe_attrs_del_bulk_pol$auto_vxlan_mdb]
	policy521	msghdr_auto[vxlan_mdbe_attrs_get_pol$auto_vxlan_mdb]
	policy522	msghdr_auto[vxlan_mdbe_attrs_pol$auto_vxlan_mdb]
	policy523	msghdr_auto[vxlan_mdbe_src_list_entry_pol$auto_vxlan_mdb]
	policy524	msghdr_auto[vxlan_mdbe_src_list_pol$auto_vxlan_mdb]
	policy525	msghdr_auto[vxlan_opt_policy$auto_act_tunnel_key]
	policy526	msghdr_auto[vxlan_opt_policy$auto_cls_flower]
	policy527	msghdr_auto[vxlan_opt_policy$auto_ip_tunnel_core]
	policy528	msghdr_auto[vxlan_policy$auto_vxlan_core]
	policy529	msghdr_auto[wwan_rtnl_policy$auto_wwan_core]
	policy530	msghdr_auto[xfrm_lwt_policy$auto_xfrm_interface_core]
	policy531	msghdr_auto[xfrma_policy$auto_xfrm]
	policy532	msghdr_auto[xfrma_spd_policy$auto_xfrm_user]
	policy533	msghdr_auto[xfrmi_policy$auto_xfrm_interface_core]
]
