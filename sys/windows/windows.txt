# Code generated by tools/syz-declextract. DO NOT EDIT.

VerSetConditionMask(ConditionMask int64, TypeMask int32, Condition int8)
GetEnvironmentStrings()
FreeEnvironmentStringsA(penv ptr[inout, int8])
GetStdHandle(nStdHandle int32) HANDLE
SetStdHandle(nStdHandle int32, hHandle HANDLE)
SetStdHandleEx(nStdHandle int32, hHandle HANDLE, phPrevValue ptr[inout, HANDLE])
GetCommandLineA()
GetEnvironmentVariableA(lpName ptr[inout, int8], lpBuffer ptr[inout, int8], nSize int32)
SetEnvironmentVariableA(lpName ptr[inout, int8], lpValue ptr[inout, int8])
ExpandEnvironmentStringsA(lpSrc ptr[inout, int8], lpDst ptr[inout, int8], nSize int32)
SetCurrentDirectoryA(lpPathName ptr[inout, int8])
GetCurrentDirectoryA(nBufferLength int32, lpBuffer ptr[inout, int8])
SearchPathA(lpPath ptr[inout, int8], lpFileName ptr[inout, int8], lpExtension ptr[inout, int8], nBufferLength int32, lpBuffer ptr[inout, int8], lpFilePart ptr[inout, ptr[inout, int8]])
NeedCurrentDirectoryForExePathA(ExeName ptr[inout, int8])
CompareFileTime(lpFileTime1 ptr[inout, intptr], lpFileTime2 ptr[inout, intptr])
CreateDirectoryA(lpPathName ptr[inout, int8], lpSecurityAttributes ptr[inout, intptr])
DeleteFileA(lpFileName ptr[inout, int8])
FileTimeToLocalFileTime(lpFileTime ptr[inout, intptr], lpLocalFileTime ptr[inout, intptr])
FindClose(hFindFile HANDLE)
FindCloseChangeNotification(hChangeHandle HANDLE)
FindFirstChangeNotificationA(lpPathName ptr[inout, int8], bWatchSubtree int32, dwNotifyFilter int32) HANDLE
FindFirstFileA(lpFileName ptr[inout, int8], lpFindFileData ptr[inout, intptr]) HANDLE
FindFirstFileExA(lpFileName ptr[inout, int8], fInfoLevelId int32, lpFindFileData ptr[inout, array[int8]], fSearchOp int32, lpSearchFilter ptr[inout, array[int8]], dwAdditionalFlags int32) HANDLE
FindNextChangeNotification(hChangeHandle HANDLE)
FindNextFileA(hFindFile HANDLE, lpFindFileData ptr[inout, intptr])
FindVolumeClose(hFindVolume HANDLE)
FlushFileBuffers(hFile HANDLE)
GetDiskFreeSpaceA(lpRootPathName ptr[inout, int8], lpSectorsPerCluster ptr[inout, int32], lpBytesPerSector ptr[inout, int32], lpNumberOfFreeClusters ptr[inout, int32], lpTotalNumberOfClusters ptr[inout, int32])
GetDiskFreeSpaceExA(lpDirectoryName ptr[inout, int8], lpFreeBytesAvailableToCaller ptr[inout, intptr], lpTotalNumberOfBytes ptr[inout, intptr], lpTotalNumberOfFreeBytes ptr[inout, intptr])
GetDriveTypeA(lpRootPathName ptr[inout, int8])
GetFileAttributesA(lpFileName ptr[inout, int8])
GetFileAttributesExA(lpFileName ptr[inout, int8], fInfoLevelId int32, lpFileInformation ptr[inout, array[int8]])
GetFileInformationByHandle(hFile HANDLE, lpFileInformation ptr[inout, intptr])
GetFileSize(hFile HANDLE, lpFileSizeHigh ptr[inout, int32])
GetFileSizeEx(hFile HANDLE, lpFileSize ptr[inout, intptr])
GetFileType(hFile HANDLE)
GetFinalPathNameByHandleA(hFile HANDLE, lpszFilePath ptr[inout, int8], cchFilePath int32, dwFlags int32)
GetFileTime(hFile HANDLE, lpCreationTime ptr[inout, intptr], lpLastAccessTime ptr[inout, intptr], lpLastWriteTime ptr[inout, intptr])
GetFullPathNameA(lpFileName ptr[inout, int8], nBufferLength int32, lpBuffer ptr[inout, int8], lpFilePart ptr[inout, ptr[inout, int8]])
GetLogicalDrives()
GetLongPathNameA(lpszShortPath ptr[inout, int8], lpszLongPath ptr[inout, int8], cchBuffer int32)
LocalFileTimeToFileTime(lpLocalFileTime ptr[inout, intptr], lpFileTime ptr[inout, intptr])
LockFile(hFile HANDLE, dwFileOffsetLow int32, dwFileOffsetHigh int32, nNumberOfBytesToLockLow int32, nNumberOfBytesToLockHigh int32)
LockFileEx(hFile HANDLE, dwFlags int32, dwReserved int32, nNumberOfBytesToLockLow int32, nNumberOfBytesToLockHigh int32, lpOverlapped ptr[inout, intptr])
ReadFile(hFile HANDLE, lpBuffer ptr[inout, array[int8]], nNumberOfBytesToRead int32, lpNumberOfBytesRead ptr[inout, int32], lpOverlapped ptr[inout, intptr])
ReadFileEx(hFile HANDLE, lpBuffer ptr[inout, array[int8]], nNumberOfBytesToRead int32, lpOverlapped ptr[inout, intptr], lpCompletionRoutine ptr[inout, intptr])
ReadFileScatter(hFile HANDLE, aSegmentArray ptr[inout, intptr], nNumberOfBytesToRead int32, lpReserved ptr[inout, int32], lpOverlapped ptr[inout, intptr])
RemoveDirectoryA(lpPathName ptr[inout, int8])
SetEndOfFile(hFile HANDLE)
SetFileAttributesA(lpFileName ptr[inout, int8], dwFileAttributes int32)
SetFileInformationByHandle(hFile HANDLE, FileInformationClass int32, lpFileInformation ptr[inout, array[int8]], dwBufferSize int32)
SetFilePointer(hFile HANDLE, lDistanceToMove int32, lpDistanceToMoveHigh ptr[inout, int32], dwMoveMethod int32)
SetFilePointerEx(hFile HANDLE, liDistanceToMove intptr, lpNewFilePointer ptr[inout, intptr], dwMoveMethod int32)
SetFileTime(hFile HANDLE, lpCreationTime ptr[inout, intptr], lpLastAccessTime ptr[inout, intptr], lpLastWriteTime ptr[inout, intptr])
SetFileValidData(hFile HANDLE, ValidDataLength int64)
UnlockFile(hFile HANDLE, dwFileOffsetLow int32, dwFileOffsetHigh int32, nNumberOfBytesToUnlockLow int32, nNumberOfBytesToUnlockHigh int32)
UnlockFileEx(hFile HANDLE, dwReserved int32, nNumberOfBytesToUnlockLow int32, nNumberOfBytesToUnlockHigh int32, lpOverlapped ptr[inout, intptr])
WriteFile(hFile HANDLE, lpBuffer ptr[inout, array[int8]], nNumberOfBytesToWrite int32, lpNumberOfBytesWritten ptr[inout, int32], lpOverlapped ptr[inout, intptr])
WriteFileEx(hFile HANDLE, lpBuffer ptr[inout, array[int8]], nNumberOfBytesToWrite int32, lpOverlapped ptr[inout, intptr], lpCompletionRoutine ptr[inout, intptr])
WriteFileGather(hFile HANDLE, aSegmentArray ptr[inout, intptr], nNumberOfBytesToWrite int32, lpReserved ptr[inout, int32], lpOverlapped ptr[inout, intptr])
CreateFile2(lpFileName ptr[inout, int16], dwDesiredAccess int32, dwShareMode int32, dwCreationDisposition int32, pCreateExParams ptr[inout, intptr]) HANDLE
SetFileIoOverlappedRange(FileHandle HANDLE, OverlappedRangeStart ptr[inout, int8], Length int32)
GetCompressedFileSizeA(lpFileName ptr[inout, int8], lpFileSizeHigh ptr[inout, int32])
AreFileApisANSI()
GetTempPathA(nBufferLength int32, lpBuffer ptr[inout, int8])
GetVolumeInformationA(lpRootPathName ptr[inout, int8], lpVolumeNameBuffer ptr[inout, int8], nVolumeNameSize int32, lpVolumeSerialNumber ptr[inout, int32], lpMaximumComponentLength ptr[inout, int32], lpFileSystemFlags ptr[inout, int32], lpFileSystemNameBuffer ptr[inout, int8], nFileSystemNameSize int32)
GetTempFileNameA(lpPathName ptr[inout, int8], lpPrefixString ptr[inout, int8], uUnique int32, lpTempFileName ptr[inout, int8])
SetFileApisToOEM()
SetFileApisToANSI()
IsDebuggerPresent()
DebugBreak()
OutputDebugStringA(lpOutputString ptr[inout, int8])
ContinueDebugEvent(dwProcessId int32, dwThreadId int32, dwContinueStatus int32)
WaitForDebugEvent(lpDebugEvent ptr[inout, intptr], dwMilliseconds int32)
DebugActiveProcess(dwProcessId int32)
DebugActiveProcessStop(dwProcessId int32)
CheckRemoteDebuggerPresent(hProcess HANDLE, pbDebuggerPresent ptr[inout, int32])
WaitForDebugEventEx(lpDebugEvent ptr[inout, intptr], dwMilliseconds int32)
Beep(dwFreq int32, dwDuration int32)
DuplicateHandle(hSourceProcessHandle HANDLE, hSourceHandle HANDLE, hTargetProcessHandle HANDLE, lpTargetHandle ptr[inout, HANDLE], dwDesiredAccess int32, bInheritHandle int32, dwOptions int32)
CompareObjectHandles(hFirstObjectHandle HANDLE, hSecondObjectHandle HANDLE)
GetHandleInformation(hObject HANDLE, lpdwFlags ptr[inout, int32])
SetHandleInformation(hObject HANDLE, dwMask int32, dwFlags int32)
RaiseException(dwExceptionCode int32, dwExceptionFlags int32, nNumberOfArguments int32, lpArguments ptr[inout, int64])
UnhandledExceptionFilter(ExceptionInfo ptr[inout, intptr])
SetUnhandledExceptionFilter(lpTopLevelExceptionFilter ptr[inout, intptr])
GetLastError()
SetLastError(dwErrCode int32)
GetErrorMode()
SetErrorMode(uMode int32)
AddVectoredExceptionHandler(First int32, Handler ptr[inout, intptr])
RemoveVectoredExceptionHandler(Handle ptr[inout, array[int8]])
AddVectoredContinueHandler(First int32, Handler ptr[inout, intptr])
RemoveVectoredContinueHandler(Handle ptr[inout, array[int8]])
RaiseFailFastException(pExceptionRecord ptr[inout, intptr], pContextRecord ptr[inout, intptr], dwFlags int32)
FatalAppExitA(uAction int32, lpMessageText ptr[inout, int8])
GetThreadErrorMode()
SetThreadErrorMode(dwNewMode int32, lpOldMode ptr[inout, int32])
TerminateProcessOnMemoryExhaustion(FailedAllocationSize int64)
FlsAlloc(lpCallback ptr[inout, intptr])
FlsGetValue(dwFlsIndex int32)
FlsSetValue(dwFlsIndex int32, lpFlsData ptr[inout, array[int8]])
FlsFree(dwFlsIndex int32)
IsThreadAFiber()
CreatePipe(hReadPipe ptr[inout, HANDLE], hWritePipe ptr[inout, HANDLE], lpPipeAttributes ptr[inout, intptr], nSize int32)
ConnectNamedPipe(hNamedPipe HANDLE, lpOverlapped ptr[inout, intptr])
DisconnectNamedPipe(hNamedPipe HANDLE)
SetNamedPipeHandleState(hNamedPipe HANDLE, lpMode ptr[inout, int32], lpMaxCollectionCount ptr[inout, int32], lpCollectDataTimeout ptr[inout, int32])
PeekNamedPipe(hNamedPipe HANDLE, lpBuffer ptr[inout, array[int8]], nBufferSize int32, lpBytesRead ptr[inout, int32], lpTotalBytesAvail ptr[inout, int32], lpBytesLeftThisMessage ptr[inout, int32])
TransactNamedPipe(hNamedPipe HANDLE, lpInBuffer ptr[inout, array[int8]], nInBufferSize int32, lpOutBuffer ptr[inout, array[int8]], nOutBufferSize int32, lpBytesRead ptr[inout, int32], lpOverlapped ptr[inout, intptr])
ImpersonateNamedPipeClient(hNamedPipe HANDLE)
GetNamedPipeInfo(hNamedPipe HANDLE, lpFlags ptr[inout, int32], lpOutBufferSize ptr[inout, int32], lpInBufferSize ptr[inout, int32], lpMaxInstances ptr[inout, int32])
QueryPerformanceCounter(lpPerformanceCount ptr[inout, intptr])
QueryPerformanceFrequency(lpFrequency ptr[inout, intptr])
HeapCreate(flOptions int32, dwInitialSize int64, dwMaximumSize int64) HANDLE
HeapDestroy(hHeap HANDLE)
HeapAlloc(hHeap HANDLE, dwFlags int32, dwBytes int64)
HeapReAlloc(hHeap HANDLE, dwFlags int32, lpMem ptr[inout, array[int8]], dwBytes int64)
HeapFree(hHeap HANDLE, dwFlags int32, lpMem ptr[inout, array[int8]])
HeapSize(hHeap HANDLE, dwFlags int32, lpMem ptr[inout, array[int8]])
GetProcessHeap() HANDLE
HeapCompact(hHeap HANDLE, dwFlags int32)
HeapSetInformation(HeapHandle HANDLE, HeapInformationClass int32, HeapInformation ptr[inout, array[int8]], HeapInformationLength int64)
HeapValidate(hHeap HANDLE, dwFlags int32, lpMem ptr[inout, array[int8]])
HeapSummary(hHeap HANDLE, dwFlags int32, lpSummary ptr[inout, intptr])
GetProcessHeaps(NumberOfHeaps int32, ProcessHeaps ptr[inout, HANDLE])
HeapLock(hHeap HANDLE)
HeapUnlock(hHeap HANDLE)
HeapWalk(hHeap HANDLE, lpEntry ptr[inout, intptr])
HeapQueryInformation(HeapHandle HANDLE, HeapInformationClass int32, HeapInformation ptr[inout, array[int8]], HeapInformationLength int64, ReturnLength ptr[inout, int64])
CreateIoCompletionPort(FileHandle HANDLE, ExistingCompletionPort HANDLE, CompletionKey int64, NumberOfConcurrentThreads int32) HANDLE
GetQueuedCompletionStatus(CompletionPort HANDLE, lpNumberOfBytesTransferred ptr[inout, int32], lpCompletionKey ptr[inout, int64], lpOverlapped ptr[inout, ptr[inout, intptr]], dwMilliseconds int32)
GetQueuedCompletionStatusEx(CompletionPort HANDLE, lpCompletionPortEntries ptr[inout, intptr], ulCount int32, ulNumEntriesRemoved ptr[inout, int32], dwMilliseconds int32, fAlertable int32)
PostQueuedCompletionStatus(CompletionPort HANDLE, dwNumberOfBytesTransferred int32, dwCompletionKey int64, lpOverlapped ptr[inout, intptr])
DeviceIoControl(hDevice HANDLE, dwIoControlCode int32, lpInBuffer ptr[inout, array[int8]], nInBufferSize int32, lpOutBuffer ptr[inout, array[int8]], nOutBufferSize int32, lpBytesReturned ptr[inout, int32], lpOverlapped ptr[inout, intptr])
GetOverlappedResult(hFile HANDLE, lpOverlapped ptr[inout, intptr], lpNumberOfBytesTransferred ptr[inout, int32], bWait int32)
CancelIoEx(hFile HANDLE, lpOverlapped ptr[inout, intptr])
CancelIo(hFile HANDLE)
GetOverlappedResultEx(hFile HANDLE, lpOverlapped ptr[inout, intptr], lpNumberOfBytesTransferred ptr[inout, int32], dwMilliseconds int32, bAlertable int32)
CancelSynchronousIo(hThread HANDLE)
InitializeSRWLock(SRWLock ptr[inout, intptr])
ReleaseSRWLockExclusive(SRWLock ptr[inout, intptr])
ReleaseSRWLockShared(SRWLock ptr[inout, intptr])
AcquireSRWLockExclusive(SRWLock ptr[inout, intptr])
AcquireSRWLockShared(SRWLock ptr[inout, intptr])
TryAcquireSRWLockExclusive(SRWLock ptr[inout, intptr])
TryAcquireSRWLockShared(SRWLock ptr[inout, intptr])
InitializeCriticalSection(lpCriticalSection ptr[inout, intptr])
EnterCriticalSection(lpCriticalSection ptr[inout, intptr])
LeaveCriticalSection(lpCriticalSection ptr[inout, intptr])
InitializeCriticalSectionAndSpinCount(lpCriticalSection ptr[inout, intptr], dwSpinCount int32)
InitializeCriticalSectionEx(lpCriticalSection ptr[inout, intptr], dwSpinCount int32, Flags int32)
SetCriticalSectionSpinCount(lpCriticalSection ptr[inout, intptr], dwSpinCount int32)
TryEnterCriticalSection(lpCriticalSection ptr[inout, intptr])
DeleteCriticalSection(lpCriticalSection ptr[inout, intptr])
InitOnceInitialize(InitOnce ptr[inout, intptr])
InitOnceExecuteOnce(InitOnce ptr[inout, intptr], InitFn ptr[inout, intptr], Parameter ptr[inout, array[int8]], Context ptr[inout, ptr[inout, array[int8]]])
InitOnceBeginInitialize(lpInitOnce ptr[inout, intptr], dwFlags int32, fPending ptr[inout, int32], lpContext ptr[inout, ptr[inout, array[int8]]])
InitOnceComplete(lpInitOnce ptr[inout, intptr], dwFlags int32, lpContext ptr[inout, array[int8]])
InitializeConditionVariable(ConditionVariable ptr[inout, intptr])
WakeConditionVariable(ConditionVariable ptr[inout, intptr])
WakeAllConditionVariable(ConditionVariable ptr[inout, intptr])
SleepConditionVariableCS(ConditionVariable ptr[inout, intptr], CriticalSection ptr[inout, intptr], dwMilliseconds int32)
SetEvent(hEvent HANDLE)
ResetEvent(hEvent HANDLE)
ReleaseSemaphore(hSemaphore HANDLE, lReleaseCount int32, lpPreviousCount ptr[inout, int32])
ReleaseMutex(hMutex HANDLE)
WaitForSingleObject(hHandle HANDLE, dwMilliseconds int32)
SleepEx(dwMilliseconds int32, bAlertable int32)
WaitForSingleObjectEx(hHandle HANDLE, dwMilliseconds int32, bAlertable int32)
WaitForMultipleObjectsEx(nCount int32, lpHandles ptr[inout, ptr[inout, array[int8]]], bWaitAll int32, dwMilliseconds int32, bAlertable int32)
CreateMutexA(lpMutexAttributes ptr[inout, intptr], bInitialOwner int32, lpName ptr[inout, int8]) HANDLE
CreateEventA(lpEventAttributes ptr[inout, intptr], bManualReset int32, bInitialState int32, lpName ptr[inout, int8]) HANDLE
OpenEventA(dwDesiredAccess int32, bInheritHandle int32, lpName ptr[inout, int8]) HANDLE
SetWaitableTimerEx(hTimer HANDLE, lpDueTime ptr[inout, intptr], lPeriod int32, pfnCompletionRoutine ptr[inout, intptr], lpArgToCompletionRoutine ptr[inout, array[int8]], WakeContext ptr[inout, intptr], TolerableDelay int32)
SetWaitableTimer(hTimer HANDLE, lpDueTime ptr[inout, intptr], lPeriod int32, pfnCompletionRoutine ptr[inout, intptr], lpArgToCompletionRoutine ptr[inout, array[int8]], fResume int32)
CancelWaitableTimer(hTimer HANDLE)
CreateMutexExA(lpMutexAttributes ptr[inout, intptr], lpName ptr[inout, int8], dwFlags int32, dwDesiredAccess int32) HANDLE
CreateEventExA(lpEventAttributes ptr[inout, intptr], lpName ptr[inout, int8], dwFlags int32, dwDesiredAccess int32) HANDLE
EnterSynchronizationBarrier(lpBarrier ptr[inout, intptr], dwFlags int32)
InitializeSynchronizationBarrier(lpBarrier ptr[inout, intptr], lTotalThreads int32, lSpinCount int32)
DeleteSynchronizationBarrier(lpBarrier ptr[inout, intptr])
Sleep(dwMilliseconds int32)
WaitOnAddress(Address ptr[inout, array[int8]], CompareAddress ptr[inout, array[int8]], AddressSize int64, dwMilliseconds int32)
WakeByAddressSingle(Address ptr[inout, array[int8]])
WakeByAddressAll(Address ptr[inout, array[int8]])
SignalObjectAndWait(hObjectToSignal HANDLE, hObjectToWaitOn HANDLE, dwMilliseconds int32, bAlertable int32)
WaitForMultipleObjects(nCount int32, lpHandles ptr[inout, ptr[inout, array[int8]]], bWaitAll int32, dwMilliseconds int32)
InitializeSListHead(ListHead ptr[inout, intptr])
InterlockedPopEntrySList(ListHead ptr[inout, intptr])
InterlockedPushEntrySList(ListHead ptr[inout, intptr], ListEntry ptr[inout, intptr])
InterlockedPushListSListEx(ListHead ptr[inout, intptr], List ptr[inout, intptr], ListEnd ptr[inout, intptr], Count int32)
InterlockedFlushSList(ListHead ptr[inout, intptr])
QueryDepthSList(ListHead ptr[inout, intptr])
QueueUserAPC(pfnAPC ptr[inout, intptr], hThread HANDLE, dwData int64)
GetProcessTimes(hProcess HANDLE, lpCreationTime ptr[inout, intptr], lpExitTime ptr[inout, intptr], lpKernelTime ptr[inout, intptr], lpUserTime ptr[inout, intptr])
GetCurrentProcess() HANDLE
GetCurrentProcessId()
ExitProcess(uExitCode int32)
TerminateProcess(hProcess HANDLE, uExitCode int32)
GetExitCodeProcess(hProcess HANDLE, lpExitCode ptr[inout, int32])
SwitchToThread()
CreateThread(lpThreadAttributes ptr[inout, intptr], dwStackSize int64, lpStartAddress ptr[inout, intptr], lpParameter ptr[inout, array[int8]], dwCreationFlags int32, lpThreadId ptr[inout, int32]) HANDLE
CreateRemoteThread(hProcess HANDLE, lpThreadAttributes ptr[inout, intptr], dwStackSize int64, lpStartAddress ptr[inout, intptr], lpParameter ptr[inout, array[int8]], dwCreationFlags int32, lpThreadId ptr[inout, int32]) HANDLE
GetCurrentThread() HANDLE
GetCurrentThreadId()
OpenThread(dwDesiredAccess int32, bInheritHandle int32, dwThreadId int32) HANDLE
SetThreadPriority(hThread HANDLE, nPriority int32)
SetThreadPriorityBoost(hThread HANDLE, bDisablePriorityBoost int32)
GetThreadPriorityBoost(hThread HANDLE, pDisablePriorityBoost ptr[inout, int32])
GetThreadPriority(hThread HANDLE)
ExitThread(dwExitCode int32)
TerminateThread(hThread HANDLE, dwExitCode int32)
GetExitCodeThread(hThread HANDLE, lpExitCode ptr[inout, int32])
SuspendThread(hThread HANDLE)
ResumeThread(hThread HANDLE)
TlsAlloc()
TlsGetValue(dwTlsIndex int32)
TlsSetValue(dwTlsIndex int32, lpTlsValue ptr[inout, array[int8]])
TlsFree(dwTlsIndex int32)
CreateProcessA(lpApplicationName ptr[inout, int8], lpCommandLine ptr[inout, int8], lpProcessAttributes ptr[inout, intptr], lpThreadAttributes ptr[inout, intptr], bInheritHandles int32, dwCreationFlags int32, lpEnvironment ptr[inout, array[int8]], lpCurrentDirectory ptr[inout, int8], lpStartupInfo ptr[inout, intptr])
SetProcessShutdownParameters(dwLevel int32, dwFlags int32)
GetProcessVersion(ProcessId int32)
SetThreadToken(Thread ptr[inout, HANDLE], Token HANDLE)
OpenProcessToken(ProcessHandle HANDLE, DesiredAccess int32, TokenHandle ptr[inout, HANDLE])
OpenThreadToken(ThreadHandle HANDLE, DesiredAccess int32, OpenAsSelf int32, TokenHandle ptr[inout, HANDLE])
SetPriorityClass(hProcess HANDLE, dwPriorityClass int32)
SetThreadStackGuarantee(StackSizeInBytes ptr[inout, int32])
GetPriorityClass(hProcess HANDLE)
ProcessIdToSessionId(dwProcessId int32, pSessionId ptr[inout, int32])
GetProcessId(Process HANDLE)
GetThreadId(Thread HANDLE)
FlushProcessWriteBuffers()
GetProcessIdOfThread(Thread HANDLE)
InitializeProcThreadAttributeList(lpAttributeList ptr[inout, intptr], dwAttributeCount int32, dwFlags int32, lpSize ptr[inout, int64])
DeleteProcThreadAttributeList(lpAttributeList ptr[inout, intptr])
SetProcessAffinityUpdateMode(hProcess HANDLE, dwFlags int32)
QueryProcessAffinityUpdateMode(hProcess HANDLE, lpdwFlags ptr[inout, int32])
UpdateProcThreadAttribute(lpAttributeList ptr[inout, intptr], dwFlags int32, Attribute int64, lpValue ptr[inout, array[int8]], cbSize int64, lpPreviousValue ptr[inout, array[int8]], lpReturnSize ptr[inout, int64])
CreateRemoteThreadEx(hProcess HANDLE, lpThreadAttributes ptr[inout, intptr], dwStackSize int64, lpStartAddress ptr[inout, intptr], lpParameter ptr[inout, array[int8]], dwCreationFlags int32, lpAttributeList ptr[inout, intptr], lpThreadId ptr[inout, int32]) HANDLE
GetCurrentThreadStackLimits(LowLimit ptr[inout, int64], HighLimit ptr[inout, int64])
GetThreadContext(hThread HANDLE, lpContext ptr[inout, intptr])
GetProcessMitigationPolicy(hProcess HANDLE, MitigationPolicy int32, lpBuffer ptr[inout, array[int8]], dwLength int64)
SetThreadContext(hThread HANDLE, lpContext ptr[inout, intptr])
SetProcessMitigationPolicy(MitigationPolicy int32, lpBuffer ptr[inout, array[int8]], dwLength int64)
FlushInstructionCache(hProcess HANDLE, lpBaseAddress ptr[inout, array[int8]], dwSize int64)
GetThreadTimes(hThread HANDLE, lpCreationTime ptr[inout, intptr], lpExitTime ptr[inout, intptr], lpKernelTime ptr[inout, intptr], lpUserTime ptr[inout, intptr])
OpenProcess(dwDesiredAccess int32, bInheritHandle int32, dwProcessId int32) HANDLE
IsProcessorFeaturePresent(ProcessorFeature int32)
GetProcessHandleCount(hProcess HANDLE, pdwHandleCount ptr[inout, int32])
GetCurrentProcessorNumber()
SetThreadIdealProcessorEx(hThread HANDLE, lpIdealProcessor ptr[inout, intptr], lpPreviousIdealProcessor ptr[inout, intptr])
GetThreadIdealProcessorEx(hThread HANDLE, lpIdealProcessor ptr[inout, intptr])
GetCurrentProcessorNumberEx(ProcNumber ptr[inout, intptr])
GetProcessPriorityBoost(hProcess HANDLE, pDisablePriorityBoost ptr[inout, int32])
SetProcessPriorityBoost(hProcess HANDLE, bDisablePriorityBoost int32)
GetThreadIOPendingFlag(hThread HANDLE, lpIOIsPending ptr[inout, int32])
GetSystemTimes(lpIdleTime ptr[inout, intptr], lpKernelTime ptr[inout, intptr], lpUserTime ptr[inout, intptr])
GetThreadInformation(hThread HANDLE, ThreadInformationClass int32, ThreadInformation ptr[inout, array[int8]], ThreadInformationSize int32)
SetThreadInformation(hThread HANDLE, ThreadInformationClass int32, ThreadInformation ptr[inout, array[int8]], ThreadInformationSize int32)
IsProcessCritical(hProcess HANDLE, Critical ptr[inout, int32])
SetProtectedPolicy(PolicyGuid ptr[inout, intptr], PolicyValue int64, OldPolicyValue ptr[inout, int64])
QueryProtectedPolicy(PolicyGuid ptr[inout, intptr], PolicyValue ptr[inout, int64])
SetThreadIdealProcessor(hThread HANDLE, dwIdealProcessor int32)
SetProcessInformation(hProcess HANDLE, ProcessInformationClass int32, ProcessInformation ptr[inout, array[int8]], ProcessInformationSize int32)
GetProcessInformation(hProcess HANDLE, ProcessInformationClass int32, ProcessInformation ptr[inout, array[int8]], ProcessInformationSize int32)
GetSystemCpuSetInformation(Information ptr[inout, intptr], BufferLength int32, ReturnedLength ptr[inout, int32], Process HANDLE, Flags int32)
GetProcessDefaultCpuSets(Process HANDLE, CpuSetIds ptr[inout, int32], CpuSetIdCount int32, RequiredIdCount ptr[inout, int32])
SetProcessDefaultCpuSets(Process HANDLE, CpuSetIds ptr[inout, int32], CpuSetIdCount int32)
GetThreadSelectedCpuSets(Thread HANDLE, CpuSetIds ptr[inout, int32], CpuSetIdCount int32, RequiredIdCount ptr[inout, int32])
SetThreadSelectedCpuSets(Thread HANDLE, CpuSetIds ptr[inout, int32], CpuSetIdCount int32)
CreateProcessAsUserA(hToken HANDLE, lpApplicationName ptr[inout, int8], lpCommandLine ptr[inout, int8], lpProcessAttributes ptr[inout, intptr], lpThreadAttributes ptr[inout, intptr], bInheritHandles int32, dwCreationFlags int32, lpEnvironment ptr[inout, array[int8]], lpCurrentDirectory ptr[inout, int8])
GetProcessShutdownParameters(lpdwLevel ptr[inout, int32], lpdwFlags ptr[inout, int32])
GlobalMemoryStatusEx(lpBuffer ptr[inout, intptr])
GetSystemInfo(lpSystemInfo ptr[inout, intptr])
GetSystemTime(lpSystemTime ptr[inout, intptr])
GetSystemTimeAsFileTime(lpSystemTimeAsFileTime ptr[inout, intptr])
GetLocalTime(lpSystemTime ptr[inout, intptr])
GetVersion()
SetLocalTime(lpSystemTime ptr[inout, intptr])
GetTickCount()
GetTickCount64()
GetSystemTimeAdjustment(lpTimeAdjustment ptr[inout, int32], lpTimeIncrement ptr[inout, int32], lpTimeAdjustmentDisabled ptr[inout, int32])
GetSystemDirectoryA(lpBuffer ptr[inout, int8], uSize int32)
GetWindowsDirectoryA(lpBuffer ptr[inout, int8], uSize int32)
GetSystemWindowsDirectoryA(lpBuffer ptr[inout, int8], uSize int32)
GetComputerNameExA(NameType int32, lpBuffer ptr[inout, int8], nSize ptr[inout, int32])
SetSystemTime(lpSystemTime ptr[inout, intptr])
GetVersionExA(lpVersionInformation ptr[inout, intptr])
GetLogicalProcessorInformation(Buffer ptr[inout, intptr], ReturnedLength ptr[inout, int32])
GetLogicalProcessorInformationEx(RelationshipType int32, Buffer ptr[inout, intptr], ReturnedLength ptr[inout, int32])
GetNativeSystemInfo(lpSystemInfo ptr[inout, intptr])
GetSystemTimePreciseAsFileTime(lpSystemTimeAsFileTime ptr[inout, intptr])
GetProductInfo(dwOSMajorVersion int32, dwOSMinorVersion int32, dwSpMajorVersion int32, dwSpMinorVersion int32, pdwReturnedProductType ptr[inout, int32])
GetOsSafeBootMode(Flags ptr[inout, int32])
EnumSystemFirmwareTables(FirmwareTableProviderSignature int32, pFirmwareTableEnumBuffer ptr[inout, array[int8]], BufferSize int32)
GetSystemFirmwareTable(FirmwareTableProviderSignature int32, FirmwareTableID int32, pFirmwareTableBuffer ptr[inout, array[int8]], BufferSize int32)
GetPhysicallyInstalledSystemMemory(TotalMemoryInKilobytes ptr[inout, int64])
SetSystemTimeAdjustment(dwTimeAdjustment int32, bTimeAdjustmentDisabled int32)
InstallELAMCertificateInfo(ELAMFile HANDLE)
GetProcessorSystemCycleTime(Group int16, Buffer ptr[inout, intptr], ReturnedLength ptr[inout, int32])
GetOsManufacturingMode(pbEnabled ptr[inout, int32])
GetIntegratedDisplaySize(sizeInInches ptr[inout, intptr])
SetComputerNameA(lpComputerName ptr[inout, int8])
SetComputerNameExA(NameType int32, lpBuffer ptr[inout, int8])
VirtualProtect(lpAddress ptr[inout, array[int8]], dwSize int64, flNewProtect int32, lpflOldProtect ptr[inout, int32])
VirtualFree(lpAddress ptr[inout, array[int8]], dwSize int64, dwFreeType int32)
VirtualQuery(lpAddress ptr[inout, array[int8]], lpBuffer ptr[inout, intptr], dwLength int64)
VirtualAllocEx(hProcess HANDLE, lpAddress ptr[inout, array[int8]], dwSize int64, flAllocationType int32, flProtect int32)
VirtualFreeEx(hProcess HANDLE, lpAddress ptr[inout, array[int8]], dwSize int64, dwFreeType int32)
VirtualProtectEx(hProcess HANDLE, lpAddress ptr[inout, array[int8]], dwSize int64, flNewProtect int32, lpflOldProtect ptr[inout, int32])
VirtualQueryEx(hProcess HANDLE, lpAddress ptr[inout, array[int8]], lpBuffer ptr[inout, intptr], dwLength int64)
ReadProcessMemory(hProcess HANDLE, lpBaseAddress ptr[inout, array[int8]], lpBuffer ptr[inout, array[int8]], nSize int64, lpNumberOfBytesRead ptr[inout, int64])
WriteProcessMemory(hProcess HANDLE, lpBaseAddress ptr[inout, array[int8]], lpBuffer ptr[inout, array[int8]], nSize int64, lpNumberOfBytesWritten ptr[inout, int64])
MapViewOfFile(hFileMappingObject HANDLE, dwDesiredAccess int32, dwFileOffsetHigh int32, dwFileOffsetLow int32, dwNumberOfBytesToMap int64)
MapViewOfFileEx(hFileMappingObject HANDLE, dwDesiredAccess int32, dwFileOffsetHigh int32, dwFileOffsetLow int32, dwNumberOfBytesToMap int64, lpBaseAddress ptr[inout, array[int8]])
FlushViewOfFile(lpBaseAddress ptr[inout, array[int8]], dwNumberOfBytesToFlush int64)
UnmapViewOfFile(lpBaseAddress ptr[inout, array[int8]])
GetLargePageMinimum()
GetProcessWorkingSetSizeEx(hProcess HANDLE, lpMinimumWorkingSetSize ptr[inout, int64], lpMaximumWorkingSetSize ptr[inout, int64], Flags ptr[inout, int32])
SetProcessWorkingSetSizeEx(hProcess HANDLE, dwMinimumWorkingSetSize int64, dwMaximumWorkingSetSize int64, Flags int32)
VirtualLock(lpAddress ptr[inout, array[int8]], dwSize int64)
VirtualUnlock(lpAddress ptr[inout, array[int8]], dwSize int64)
GetWriteWatch(dwFlags int32, lpBaseAddress ptr[inout, array[int8]], dwRegionSize int64, lpAddresses ptr[inout, ptr[inout, array[int8]]], lpdwCount ptr[inout, int64], lpdwGranularity ptr[inout, int32])
ResetWriteWatch(lpBaseAddress ptr[inout, array[int8]], dwRegionSize int64)
CreateMemoryResourceNotification(NotificationType int32) HANDLE
QueryMemoryResourceNotification(ResourceNotificationHandle HANDLE, ResourceState ptr[inout, int32])
GetSystemFileCacheSize(lpMinimumFileCacheSize ptr[inout, int64], lpMaximumFileCacheSize ptr[inout, int64], lpFlags ptr[inout, int32])
SetSystemFileCacheSize(MinimumFileCacheSize int64, MaximumFileCacheSize int64, Flags int32)
PrefetchVirtualMemory(hProcess HANDLE, NumberOfEntries int64, VirtualAddresses ptr[inout, intptr], Flags int32)
CreateFileMappingFromApp(hFile HANDLE, SecurityAttributes ptr[inout, intptr], PageProtection int32, MaximumSize int64, Name ptr[inout, int16]) HANDLE
MapViewOfFileFromApp(hFileMappingObject HANDLE, DesiredAccess int32, FileOffset int64, NumberOfBytesToMap int64)
UnmapViewOfFileEx(BaseAddress ptr[inout, array[int8]], UnmapFlags int32)
AllocateUserPhysicalPages(hProcess HANDLE, NumberOfPages ptr[inout, int64], PageArray ptr[inout, int64])
FreeUserPhysicalPages(hProcess HANDLE, NumberOfPages ptr[inout, int64], PageArray ptr[inout, int64])
MapUserPhysicalPages(VirtualAddress ptr[inout, array[int8]], NumberOfPages int64, PageArray ptr[inout, int64])
AllocateUserPhysicalPagesNuma(hProcess HANDLE, NumberOfPages ptr[inout, int64], PageArray ptr[inout, int64], nndPreferred int32)
VirtualAllocExNuma(hProcess HANDLE, lpAddress ptr[inout, array[int8]], dwSize int64, flAllocationType int32, flProtect int32, nndPreferred int32)
GetMemoryErrorHandlingCapabilities(Capabilities ptr[inout, int32])
RegisterBadMemoryNotification(Callback ptr[inout, intptr])
UnregisterBadMemoryNotification(RegistrationHandle ptr[inout, array[int8]])
OfferVirtualMemory(VirtualAddress ptr[inout, array[int8]], Size int64, Priority int32)
ReclaimVirtualMemory(VirtualAddress ptr[inout, array[int8]], Size int64)
DiscardVirtualMemory(VirtualAddress ptr[inout, array[int8]], Size int64)
SetProcessValidCallTargets(hProcess HANDLE, VirtualAddress ptr[inout, array[int8]], RegionSize int64, NumberOfOffsets int32, OffsetInformation ptr[inout, intptr])
VirtualAllocFromApp(BaseAddress ptr[inout, array[int8]], Size int64, AllocationType int32, Protection int32)
VirtualProtectFromApp(Address ptr[inout, array[int8]], Size int64, NewProtection int32, OldProtection ptr[inout, int32])
OpenFileMappingFromApp(DesiredAccess int32, InheritHandle int32, Name ptr[inout, int16]) HANDLE
QueryVirtualMemoryInformation(Process HANDLE, VirtualAddress ptr[inout, array[int8]], MemoryInformationClass int32, MemoryInformation ptr[inout, array[int8]], MemoryInformationSize int64, ReturnSize ptr[inout, int64])
IsEnclaveTypeSupported(flEnclaveType int32)
CreateEnclave(hProcess HANDLE, lpAddress ptr[inout, array[int8]], dwSize int64, dwInitialCommitment int64, flEnclaveType int32, lpEnclaveInformation ptr[inout, array[int8]], dwInfoLength int32, lpEnclaveError ptr[inout, int32])
LoadEnclaveData(hProcess HANDLE, lpAddress ptr[inout, array[int8]], lpBuffer ptr[inout, array[int8]], nSize int64, flProtect int32, lpPageInformation ptr[inout, array[int8]], dwInfoLength int32, lpNumberOfBytesWritten ptr[inout, int64], lpEnclaveError ptr[inout, int32])
InitializeEnclave(hProcess HANDLE, lpAddress ptr[inout, array[int8]], lpEnclaveInformation ptr[inout, array[int8]], dwInfoLength int32, lpEnclaveError ptr[inout, int32])
QueueUserWorkItem(Function ptr[inout, intptr], Context ptr[inout, array[int8]], Flags int32)
UnregisterWaitEx(WaitHandle HANDLE, CompletionEvent HANDLE)
CreateTimerQueue() HANDLE
CreateTimerQueueTimer(phNewTimer ptr[inout, HANDLE], TimerQueue HANDLE, Callback ptr[inout, intptr], Parameter ptr[inout, array[int8]], DueTime int32, Period int32, Flags int32)
ChangeTimerQueueTimer(TimerQueue HANDLE, Timer HANDLE, DueTime int32, Period int32)
DeleteTimerQueueTimer(TimerQueue HANDLE, Timer HANDLE, CompletionEvent HANDLE)
DeleteTimerQueueEx(TimerQueue HANDLE, CompletionEvent HANDLE)
CreateThreadpool(reserved ptr[inout, array[int8]])
SetThreadpoolThreadMaximum(ptpp ptr[inout, intptr], cthrdMost int32)
SetThreadpoolThreadMinimum(ptpp ptr[inout, intptr], cthrdMic int32)
SetThreadpoolStackInformation(ptpp ptr[inout, intptr], ptpsi ptr[inout, intptr])
QueryThreadpoolStackInformation(ptpp ptr[inout, intptr], ptpsi ptr[inout, intptr])
CloseThreadpool(ptpp ptr[inout, intptr])
CreateThreadpoolCleanupGroup()
CloseThreadpoolCleanupGroupMembers(ptpcg ptr[inout, intptr], fCancelPendingCallbacks int32, pvCleanupContext ptr[inout, array[int8]])
CloseThreadpoolCleanupGroup(ptpcg ptr[inout, intptr])
SetEventWhenCallbackReturns(pci ptr[inout, intptr], evt HANDLE)
ReleaseSemaphoreWhenCallbackReturns(pci ptr[inout, intptr], sem HANDLE, crel int32)
ReleaseMutexWhenCallbackReturns(pci ptr[inout, intptr], mut HANDLE)
LeaveCriticalSectionWhenCallbackReturns(pci ptr[inout, intptr], pcs ptr[inout, intptr])
FreeLibraryWhenCallbackReturns(pci ptr[inout, intptr], mod ptr[inout, intptr])
CallbackMayRunLong(pci ptr[inout, intptr])
DisassociateCurrentThreadFromCallback(pci ptr[inout, intptr])
TrySubmitThreadpoolCallback(pfns ptr[inout, intptr], pv ptr[inout, array[int8]], pcbe ptr[inout, intptr])
CreateThreadpoolWork(pfnwk ptr[inout, intptr], pv ptr[inout, array[int8]], pcbe ptr[inout, intptr])
SubmitThreadpoolWork(pwk ptr[inout, intptr])
WaitForThreadpoolWorkCallbacks(pwk ptr[inout, intptr], fCancelPendingCallbacks int32)
CloseThreadpoolWork(pwk ptr[inout, intptr])
CreateThreadpoolTimer(pfnti ptr[inout, intptr], pv ptr[inout, array[int8]], pcbe ptr[inout, intptr])
SetThreadpoolTimer(pti ptr[inout, intptr], pftDueTime ptr[inout, intptr], msPeriod int32, msWindowLength int32)
IsThreadpoolTimerSet(pti ptr[inout, intptr])
WaitForThreadpoolTimerCallbacks(pti ptr[inout, intptr], fCancelPendingCallbacks int32)
CloseThreadpoolTimer(pti ptr[inout, intptr])
CreateThreadpoolWait(pfnwa ptr[inout, intptr], pv ptr[inout, array[int8]], pcbe ptr[inout, intptr])
SetThreadpoolWait(pwa ptr[inout, intptr], h HANDLE, pftTimeout ptr[inout, intptr])
WaitForThreadpoolWaitCallbacks(pwa ptr[inout, intptr], fCancelPendingCallbacks int32)
CloseThreadpoolWait(pwa ptr[inout, intptr])
CreateThreadpoolIo(fl HANDLE, pfnio ptr[inout, intptr], pv ptr[inout, array[int8]], pcbe ptr[inout, intptr])
StartThreadpoolIo(pio ptr[inout, intptr])
CancelThreadpoolIo(pio ptr[inout, intptr])
WaitForThreadpoolIoCallbacks(pio ptr[inout, intptr], fCancelPendingCallbacks int32)
CloseThreadpoolIo(pio ptr[inout, intptr])
SetThreadpoolTimerEx(pti ptr[inout, intptr], pftDueTime ptr[inout, intptr], msPeriod int32, msWindowLength int32)
SetThreadpoolWaitEx(pwa ptr[inout, intptr], h HANDLE, pftTimeout ptr[inout, intptr], Reserved ptr[inout, array[int8]])
IsProcessInJob(ProcessHandle HANDLE, JobHandle HANDLE, Result ptr[inout, int32])
FreeMemoryJobObject(Buffer ptr[inout, array[int8]])
AssignProcessToJobObject(hJob HANDLE, hProcess HANDLE)
TerminateJobObject(hJob HANDLE, uExitCode int32)
SetInformationJobObject(hJob HANDLE, JobObjectInformationClass int32, lpJobObjectInformation ptr[inout, array[int8]], cbJobObjectInformationLength int32)
SetIoRateControlInformationJobObject(hJob HANDLE, IoRateControlInfo ptr[inout, intptr])
QueryInformationJobObject(hJob HANDLE, JobObjectInformationClass int32, lpJobObjectInformation ptr[inout, array[int8]], cbJobObjectInformationLength int32, lpReturnLength ptr[inout, int32])
QueryIoRateControlInformationJobObject(hJob HANDLE, VolumeName ptr[inout, int16], InfoBlocks ptr[inout, ptr[inout, intptr]], InfoBlockCount ptr[inout, int32])
Wow64DisableWow64FsRedirection(OldValue ptr[inout, ptr[inout, array[int8]]])
Wow64RevertWow64FsRedirection(OlValue ptr[inout, array[int8]])
IsWow64Process(hProcess HANDLE, Wow64Process ptr[inout, int32])
GetSystemWow64DirectoryA(lpBuffer ptr[inout, int8], uSize int32)
GetSystemWow64Directory2A(lpBuffer ptr[inout, int8], uSize int32, ImageFileMachineType int16)
Wow64SetThreadDefaultGuestMachine(Machine int16)
IsWow64Process2(hProcess HANDLE, pProcessMachine ptr[inout, int16], pNativeMachine ptr[inout, int16])
DisableThreadLibraryCalls(hLibModule ptr[inout, intptr])
FindStringOrdinal(dwFindStringOrdinalFlags int32, lpStringSource ptr[inout, int16], cchSource int32, lpStringValue ptr[inout, int16], cchValue int32, bIgnoreCase int32)
FreeLibrary(hLibModule ptr[inout, intptr])
FreeLibraryAndExitThread(hLibModule ptr[inout, intptr], dwExitCode int32)
FreeResource(hResData ptr[inout, array[int8]])
GetModuleFileNameA(hModule ptr[inout, intptr], lpFilename ptr[inout, int8], nSize int32)
GetModuleHandleA(lpModuleName ptr[inout, int8])
GetModuleHandleExA(dwFlags int32, lpModuleName ptr[inout, int8], phModule ptr[inout, ptr[inout, intptr]])
GetProcAddress(hModule ptr[inout, intptr], lpProcName ptr[inout, int8])
LoadLibraryExA(lpLibFileName ptr[inout, int8], hFile HANDLE, dwFlags int32)
LoadResource(hModule ptr[inout, intptr], hResInfo ptr[inout, intptr])
LoadStringA(hInstance ptr[inout, intptr], uID int32, lpBuffer ptr[inout, int8], cchBufferMax int32)
LockResource(hResData ptr[inout, array[int8]])
SizeofResource(hModule ptr[inout, intptr], hResInfo ptr[inout, intptr])
AddDllDirectory(NewDirectory ptr[inout, int16])
RemoveDllDirectory(Cookie ptr[inout, array[int8]])
SetDefaultDllDirectories(DirectoryFlags int32)
EnumResourceLanguagesExA(hModule ptr[inout, intptr], lpType ptr[inout, int8], lpName ptr[inout, int8], lpEnumFunc ptr[inout, intptr], lParam int64, dwFlags int32, LangId int16)
EnumResourceNamesExA(hModule ptr[inout, intptr], lpType ptr[inout, int8], lpEnumFunc ptr[inout, intptr], lParam int64, dwFlags int32, LangId int16)
EnumResourceTypesExA(hModule ptr[inout, intptr], lpEnumFunc ptr[inout, intptr], lParam int64, dwFlags int32, LangId int16)
LoadLibraryA(lpLibFileName ptr[inout, int8])
AccessCheck(pSecurityDescriptor ptr[inout, array[int8]], ClientToken HANDLE, DesiredAccess int32, GenericMapping ptr[inout, intptr], PrivilegeSet ptr[inout, intptr], PrivilegeSetLength ptr[inout, int32], GrantedAccess ptr[inout, int32], AccessStatus ptr[inout, int32])
AccessCheckByType(pSecurityDescriptor ptr[inout, array[int8]], PrincipalSelfSid ptr[inout, array[int8]], ClientToken HANDLE, DesiredAccess int32, ObjectTypeList ptr[inout, intptr], ObjectTypeListLength int32, GenericMapping ptr[inout, intptr], PrivilegeSet ptr[inout, intptr], PrivilegeSetLength ptr[inout, int32])
AccessCheckByTypeResultList(pSecurityDescriptor ptr[inout, array[int8]], PrincipalSelfSid ptr[inout, array[int8]], ClientToken HANDLE, DesiredAccess int32, ObjectTypeList ptr[inout, intptr], ObjectTypeListLength int32, GenericMapping ptr[inout, intptr], PrivilegeSet ptr[inout, intptr], PrivilegeSetLength ptr[inout, int32])
AddAccessAllowedAce(pAcl ptr[inout, intptr], dwAceRevision int32, AccessMask int32, pSid ptr[inout, array[int8]])
AddAccessAllowedAceEx(pAcl ptr[inout, intptr], dwAceRevision int32, AceFlags int32, AccessMask int32, pSid ptr[inout, array[int8]])
AddAccessAllowedObjectAce(pAcl ptr[inout, intptr], dwAceRevision int32, AceFlags int32, AccessMask int32, ObjectTypeGuid ptr[inout, intptr], InheritedObjectTypeGuid ptr[inout, intptr], pSid ptr[inout, array[int8]])
AddAccessDeniedAce(pAcl ptr[inout, intptr], dwAceRevision int32, AccessMask int32, pSid ptr[inout, array[int8]])
AddAccessDeniedAceEx(pAcl ptr[inout, intptr], dwAceRevision int32, AceFlags int32, AccessMask int32, pSid ptr[inout, array[int8]])
AddAccessDeniedObjectAce(pAcl ptr[inout, intptr], dwAceRevision int32, AceFlags int32, AccessMask int32, ObjectTypeGuid ptr[inout, intptr], InheritedObjectTypeGuid ptr[inout, intptr], pSid ptr[inout, array[int8]])
AddAce(pAcl ptr[inout, intptr], dwAceRevision int32, dwStartingAceIndex int32, pAceList ptr[inout, array[int8]], nAceListLength int32)
AddAuditAccessAce(pAcl ptr[inout, intptr], dwAceRevision int32, dwAccessMask int32, pSid ptr[inout, array[int8]], bAuditSuccess int32, bAuditFailure int32)
AddAuditAccessAceEx(pAcl ptr[inout, intptr], dwAceRevision int32, AceFlags int32, dwAccessMask int32, pSid ptr[inout, array[int8]], bAuditSuccess int32, bAuditFailure int32)
AddAuditAccessObjectAce(pAcl ptr[inout, intptr], dwAceRevision int32, AceFlags int32, AccessMask int32, ObjectTypeGuid ptr[inout, intptr], InheritedObjectTypeGuid ptr[inout, intptr], pSid ptr[inout, array[int8]], bAuditSuccess int32, bAuditFailure int32)
AddMandatoryAce(pAcl ptr[inout, intptr], dwAceRevision int32, AceFlags int32, MandatoryPolicy int32, pLabelSid ptr[inout, array[int8]])
AddResourceAttributeAce(pAcl ptr[inout, intptr], dwAceRevision int32, AceFlags int32, AccessMask int32, pSid ptr[inout, array[int8]], pAttributeInfo ptr[inout, intptr], pReturnLength ptr[inout, int32])
AddScopedPolicyIDAce(pAcl ptr[inout, intptr], dwAceRevision int32, AceFlags int32, AccessMask int32, pSid ptr[inout, array[int8]])
AdjustTokenGroups(TokenHandle HANDLE, ResetToDefault int32, NewState ptr[inout, intptr], BufferLength int32, PreviousState ptr[inout, intptr], ReturnLength ptr[inout, int32])
AdjustTokenPrivileges(TokenHandle HANDLE, DisableAllPrivileges int32, NewState ptr[inout, intptr], BufferLength int32, PreviousState ptr[inout, intptr], ReturnLength ptr[inout, int32])
AllocateAndInitializeSid(pIdentifierAuthority ptr[inout, intptr], nSubAuthorityCount int8, nSubAuthority0 int32, nSubAuthority1 int32, nSubAuthority2 int32, nSubAuthority3 int32, nSubAuthority4 int32, nSubAuthority5 int32, nSubAuthority6 int32)
AllocateLocallyUniqueId(Luid ptr[inout, intptr])
AreAllAccessesGranted(GrantedAccess int32, DesiredAccess int32)
AreAnyAccessesGranted(GrantedAccess int32, DesiredAccess int32)
CheckTokenMembership(TokenHandle HANDLE, SidToCheck ptr[inout, array[int8]], IsMember ptr[inout, int32])
CheckTokenCapability(TokenHandle HANDLE, CapabilitySidToCheck ptr[inout, array[int8]], HasCapability ptr[inout, int32])
GetAppContainerAce(Acl ptr[inout, intptr], StartingAceIndex int32, AppContainerAce ptr[inout, ptr[inout, array[int8]]], AppContainerAceIndex ptr[inout, int32])
CheckTokenMembershipEx(TokenHandle HANDLE, SidToCheck ptr[inout, array[int8]], Flags int32, IsMember ptr[inout, int32])
ConvertToAutoInheritPrivateObjectSecurity(ParentDescriptor ptr[inout, array[int8]], CurrentSecurityDescriptor ptr[inout, array[int8]], NewSecurityDescriptor ptr[inout, ptr[inout, array[int8]]], ObjectType ptr[inout, intptr], IsDirectoryObject int8, GenericMapping ptr[inout, intptr])
CopySid(nDestinationSidLength int32, pDestinationSid ptr[inout, array[int8]], pSourceSid ptr[inout, array[int8]])
CreatePrivateObjectSecurity(ParentDescriptor ptr[inout, array[int8]], CreatorDescriptor ptr[inout, array[int8]], NewDescriptor ptr[inout, ptr[inout, array[int8]]], IsDirectoryObject int32, Token HANDLE, GenericMapping ptr[inout, intptr])
CreatePrivateObjectSecurityEx(ParentDescriptor ptr[inout, array[int8]], CreatorDescriptor ptr[inout, array[int8]], NewDescriptor ptr[inout, ptr[inout, array[int8]]], ObjectType ptr[inout, intptr], IsContainerObject int32, AutoInheritFlags int32, Token HANDLE, GenericMapping ptr[inout, intptr])
CreatePrivateObjectSecurityWithMultipleInheritance(ParentDescriptor ptr[inout, array[int8]], CreatorDescriptor ptr[inout, array[int8]], NewDescriptor ptr[inout, ptr[inout, array[int8]]], ObjectTypes ptr[inout, ptr[inout, intptr]], GuidCount int32, IsContainerObject int32, AutoInheritFlags int32, Token HANDLE, GenericMapping ptr[inout, intptr])
CreateRestrictedToken(ExistingTokenHandle HANDLE, Flags int32, DisableSidCount int32, SidsToDisable ptr[inout, intptr], DeletePrivilegeCount int32, PrivilegesToDelete ptr[inout, intptr], RestrictedSidCount int32, SidsToRestrict ptr[inout, intptr], NewTokenHandle ptr[inout, HANDLE])
CreateWellKnownSid(WellKnownSidType int32, DomainSid ptr[inout, array[int8]], pSid ptr[inout, array[int8]], cbSid ptr[inout, int32])
EqualDomainSid(pSid1 ptr[inout, array[int8]], pSid2 ptr[inout, array[int8]], pfEqual ptr[inout, int32])
DeleteAce(pAcl ptr[inout, intptr], dwAceIndex int32)
DestroyPrivateObjectSecurity(ObjectDescriptor ptr[inout, ptr[inout, array[int8]]])
DuplicateToken(ExistingTokenHandle HANDLE, ImpersonationLevel int32, DuplicateTokenHandle ptr[inout, HANDLE])
DuplicateTokenEx(hExistingToken HANDLE, dwDesiredAccess int32, lpTokenAttributes ptr[inout, intptr], ImpersonationLevel int32, TokenType int32, phNewToken ptr[inout, HANDLE])
EqualPrefixSid(pSid1 ptr[inout, array[int8]], pSid2 ptr[inout, array[int8]])
EqualSid(pSid1 ptr[inout, array[int8]], pSid2 ptr[inout, array[int8]])
FindFirstFreeAce(pAcl ptr[inout, intptr], pAce ptr[inout, ptr[inout, array[int8]]])
FreeSid(pSid ptr[inout, array[int8]])
GetAce(pAcl ptr[inout, intptr], dwAceIndex int32, pAce ptr[inout, ptr[inout, array[int8]]])
GetAclInformation(pAcl ptr[inout, intptr], pAclInformation ptr[inout, array[int8]], nAclInformationLength int32, dwAclInformationClass int32)
GetKernelObjectSecurity(Handle HANDLE, RequestedInformation int32, pSecurityDescriptor ptr[inout, array[int8]], nLength int32, lpnLengthNeeded ptr[inout, int32])
GetLengthSid(pSid ptr[inout, array[int8]])
GetPrivateObjectSecurity(ObjectDescriptor ptr[inout, array[int8]], SecurityInformation int32, ResultantDescriptor ptr[inout, array[int8]], DescriptorLength int32, ReturnLength ptr[inout, int32])
GetSecurityDescriptorControl(pSecurityDescriptor ptr[inout, array[int8]], pControl ptr[inout, int16], lpdwRevision ptr[inout, int32])
GetSecurityDescriptorDacl(pSecurityDescriptor ptr[inout, array[int8]], lpbDaclPresent ptr[inout, int32], pDacl ptr[inout, ptr[inout, intptr]], lpbDaclDefaulted ptr[inout, int32])
GetSecurityDescriptorGroup(pSecurityDescriptor ptr[inout, array[int8]], pGroup ptr[inout, ptr[inout, array[int8]]], lpbGroupDefaulted ptr[inout, int32])
GetSecurityDescriptorLength(pSecurityDescriptor ptr[inout, array[int8]])
GetSecurityDescriptorOwner(pSecurityDescriptor ptr[inout, array[int8]], pOwner ptr[inout, ptr[inout, array[int8]]], lpbOwnerDefaulted ptr[inout, int32])
GetSecurityDescriptorRMControl(SecurityDescriptor ptr[inout, array[int8]], RMControl ptr[inout, int8])
GetSecurityDescriptorSacl(pSecurityDescriptor ptr[inout, array[int8]], lpbSaclPresent ptr[inout, int32], pSacl ptr[inout, ptr[inout, intptr]], lpbSaclDefaulted ptr[inout, int32])
GetSidIdentifierAuthority(pSid ptr[inout, array[int8]])
GetSidLengthRequired(nSubAuthorityCount int8)
GetSidSubAuthority(pSid ptr[inout, array[int8]], nSubAuthority int32)
GetSidSubAuthorityCount(pSid ptr[inout, array[int8]])
GetTokenInformation(TokenHandle HANDLE, TokenInformationClass int32, TokenInformation ptr[inout, array[int8]], TokenInformationLength int32, ReturnLength ptr[inout, int32])
GetWindowsAccountDomainSid(pSid ptr[inout, array[int8]], pDomainSid ptr[inout, array[int8]], cbDomainSid ptr[inout, int32])
ImpersonateAnonymousToken(ThreadHandle HANDLE)
ImpersonateLoggedOnUser(hToken HANDLE)
ImpersonateSelf(ImpersonationLevel int32)
InitializeAcl(pAcl ptr[inout, intptr], nAclLength int32, dwAclRevision int32)
InitializeSecurityDescriptor(pSecurityDescriptor ptr[inout, array[int8]], dwRevision int32)
InitializeSid(Sid ptr[inout, array[int8]], pIdentifierAuthority ptr[inout, intptr], nSubAuthorityCount int8)
IsTokenRestricted(TokenHandle HANDLE)
IsValidAcl(pAcl ptr[inout, intptr])
IsValidSecurityDescriptor(pSecurityDescriptor ptr[inout, array[int8]])
IsValidSid(pSid ptr[inout, array[int8]])
IsWellKnownSid(pSid ptr[inout, array[int8]], WellKnownSidType int32)
MakeAbsoluteSD(pSelfRelativeSecurityDescriptor ptr[inout, array[int8]], pAbsoluteSecurityDescriptor ptr[inout, array[int8]], lpdwAbsoluteSecurityDescriptorSize ptr[inout, int32], pDacl ptr[inout, intptr], lpdwDaclSize ptr[inout, int32], pSacl ptr[inout, intptr], lpdwSaclSize ptr[inout, int32], pOwner ptr[inout, array[int8]], lpdwOwnerSize ptr[inout, int32])
MakeSelfRelativeSD(pAbsoluteSecurityDescriptor ptr[inout, array[int8]], pSelfRelativeSecurityDescriptor ptr[inout, array[int8]], lpdwBufferLength ptr[inout, int32])
MapGenericMask(AccessMask ptr[inout, int32], GenericMapping ptr[inout, intptr])
PrivilegeCheck(ClientToken HANDLE, RequiredPrivileges ptr[inout, intptr], pfResult ptr[inout, int32])
QuerySecurityAccessMask(SecurityInformation int32, DesiredAccess ptr[inout, int32])
RevertToSelf()
SetAclInformation(pAcl ptr[inout, intptr], pAclInformation ptr[inout, array[int8]], nAclInformationLength int32, dwAclInformationClass int32)
SetKernelObjectSecurity(Handle HANDLE, SecurityInformation int32, SecurityDescriptor ptr[inout, array[int8]])
SetPrivateObjectSecurity(SecurityInformation int32, ModificationDescriptor ptr[inout, array[int8]], ObjectsSecurityDescriptor ptr[inout, ptr[inout, array[int8]]], GenericMapping ptr[inout, intptr], Token HANDLE)
SetPrivateObjectSecurityEx(SecurityInformation int32, ModificationDescriptor ptr[inout, array[int8]], ObjectsSecurityDescriptor ptr[inout, ptr[inout, array[int8]]], AutoInheritFlags int32, GenericMapping ptr[inout, intptr], Token HANDLE)
SetSecurityAccessMask(SecurityInformation int32, DesiredAccess ptr[inout, int32])
SetSecurityDescriptorControl(pSecurityDescriptor ptr[inout, array[int8]], ControlBitsOfInterest int16, ControlBitsToSet int16)
SetSecurityDescriptorDacl(pSecurityDescriptor ptr[inout, array[int8]], bDaclPresent int32, pDacl ptr[inout, intptr], bDaclDefaulted int32)
SetSecurityDescriptorGroup(pSecurityDescriptor ptr[inout, array[int8]], pGroup ptr[inout, array[int8]], bGroupDefaulted int32)
SetSecurityDescriptorOwner(pSecurityDescriptor ptr[inout, array[int8]], pOwner ptr[inout, array[int8]], bOwnerDefaulted int32)
SetSecurityDescriptorRMControl(SecurityDescriptor ptr[inout, array[int8]], RMControl ptr[inout, int8])
SetSecurityDescriptorSacl(pSecurityDescriptor ptr[inout, array[int8]], bSaclPresent int32, pSacl ptr[inout, intptr], bSaclDefaulted int32)
SetTokenInformation(TokenHandle HANDLE, TokenInformationClass int32, TokenInformation ptr[inout, array[int8]], TokenInformationLength int32)
SetCachedSigningLevel(SourceFiles ptr[inout, HANDLE], SourceFileCount int32, Flags int32, TargetFile HANDLE)
GetCachedSigningLevel(File HANDLE, Flags ptr[inout, int32], SigningLevel ptr[inout, int32], Thumbprint ptr[inout, int8], ThumbprintSize ptr[inout, int32], ThumbprintAlgorithm ptr[inout, int32])
CveEventWrite(CveId ptr[inout, int16], AdditionalDetails ptr[inout, int16])
ClosePrivateNamespace(Handle HANDLE, Flags int32)
AddSIDToBoundaryDescriptor(BoundaryDescriptor ptr[inout, HANDLE], RequiredSid ptr[inout, array[int8]])
DeleteBoundaryDescriptor(BoundaryDescriptor HANDLE)
GetNumaHighestNodeNumber(HighestNodeNumber ptr[inout, int32])
GetNumaNodeProcessorMaskEx(Node int16, ProcessorMask ptr[inout, intptr])
GetNumaProximityNodeEx(ProximityId int32, NodeNumber ptr[inout, int16])
GetProcessGroupAffinity(hProcess HANDLE, GroupCount ptr[inout, int16], GroupArray ptr[inout, int16])
GetThreadGroupAffinity(hThread HANDLE, GroupAffinity ptr[inout, intptr])
SetThreadGroupAffinity(hThread HANDLE, GroupAffinity ptr[inout, intptr], PreviousGroupAffinity ptr[inout, intptr])
GetAppContainerNamedObjectPath(Token HANDLE, AppContainerSid ptr[inout, array[int8]], ObjectPathLength int32, ObjectPath ptr[inout, int16], ReturnLength ptr[inout, int32])
QueryThreadCycleTime(ThreadHandle HANDLE, CycleTime ptr[inout, int64])
QueryProcessCycleTime(ProcessHandle HANDLE, CycleTime ptr[inout, int64])
QueryIdleProcessorCycleTime(BufferLength ptr[inout, int32], ProcessorIdleCycleTime ptr[inout, int64])
QueryIdleProcessorCycleTimeEx(Group int16, BufferLength ptr[inout, int32], ProcessorIdleCycleTime ptr[inout, int64])
QueryInterruptTimePrecise(lpInterruptTimePrecise ptr[inout, int64])
QueryUnbiasedInterruptTimePrecise(lpUnbiasedInterruptTimePrecise ptr[inout, int64])
QueryInterruptTime(lpInterruptTime ptr[inout, int64])
QueryUnbiasedInterruptTime(UnbiasedTime ptr[inout, int64])
GlobalAlloc(uFlags int32, dwBytes int64)
GlobalReAlloc(hMem ptr[inout, array[int8]], dwBytes int64, uFlags int32)
GlobalSize(hMem ptr[inout, array[int8]])
GlobalUnlock(hMem ptr[inout, array[int8]])
GlobalLock(hMem ptr[inout, array[int8]])
GlobalFlags(hMem ptr[inout, array[int8]])
GlobalHandle(pMem ptr[inout, array[int8]])
GlobalFree(hMem ptr[inout, array[int8]])
GlobalCompact(dwMinFree int32)
GlobalFix(hMem ptr[inout, array[int8]])
GlobalUnfix(hMem ptr[inout, array[int8]])
GlobalWire(hMem ptr[inout, array[int8]])
GlobalUnWire(hMem ptr[inout, array[int8]])
GlobalMemoryStatus(lpBuffer ptr[inout, intptr])
LocalAlloc(uFlags int32, uBytes int64)
LocalReAlloc(hMem ptr[inout, array[int8]], uBytes int64, uFlags int32)
LocalLock(hMem ptr[inout, array[int8]])
LocalHandle(pMem ptr[inout, array[int8]])
LocalUnlock(hMem ptr[inout, array[int8]])
LocalSize(hMem ptr[inout, array[int8]])
LocalFlags(hMem ptr[inout, array[int8]])
LocalFree(hMem ptr[inout, array[int8]])
LocalShrink(hMem ptr[inout, array[int8]], cbNewSize int32)
LocalCompact(uMinFree int32)
GetBinaryTypeA(lpApplicationName ptr[inout, int8], lpBinaryType ptr[inout, int32])
GetShortPathNameA(lpszLongPath ptr[inout, int8], lpszShortPath ptr[inout, int8], cchBuffer int32)
GetLongPathNameTransactedA(lpszShortPath ptr[inout, int8], lpszLongPath ptr[inout, int8], cchBuffer int32, hTransaction HANDLE)
GetProcessAffinityMask(hProcess HANDLE, lpProcessAffinityMask ptr[inout, int64], lpSystemAffinityMask ptr[inout, int64])
SetProcessAffinityMask(hProcess HANDLE, dwProcessAffinityMask int64)
GetProcessIoCounters(hProcess HANDLE, lpIoCounters ptr[inout, intptr])
GetProcessWorkingSetSize(hProcess HANDLE, lpMinimumWorkingSetSize ptr[inout, int64], lpMaximumWorkingSetSize ptr[inout, int64])
SetProcessWorkingSetSize(hProcess HANDLE, dwMinimumWorkingSetSize int64, dwMaximumWorkingSetSize int64)
FatalExit(ExitCode int32)
SetEnvironmentStringsA(NewEnvironment ptr[inout, int8])
SwitchToFiber(lpFiber ptr[inout, array[int8]])
DeleteFiber(lpFiber ptr[inout, array[int8]])
ConvertFiberToThread()
CreateFiberEx(dwStackCommitSize int64, dwStackReserveSize int64, dwFlags int32, lpStartAddress ptr[inout, intptr], lpParameter ptr[inout, array[int8]])
ConvertThreadToFiberEx(lpParameter ptr[inout, array[int8]], dwFlags int32)
CreateFiber(dwStackSize int64, lpStartAddress ptr[inout, intptr], lpParameter ptr[inout, array[int8]])
ConvertThreadToFiber(lpParameter ptr[inout, array[int8]])
CreateUmsCompletionList(UmsCompletionList ptr[inout, ptr[inout, array[int8]]])
DequeueUmsCompletionListItems(UmsCompletionList ptr[inout, array[int8]], WaitTimeOut int32, UmsThreadList ptr[inout, ptr[inout, array[int8]]])
GetUmsCompletionListEvent(UmsCompletionList ptr[inout, array[int8]], UmsCompletionEvent ptr[inout, HANDLE])
ExecuteUmsThread(UmsThread ptr[inout, array[int8]])
UmsThreadYield(SchedulerParam ptr[inout, array[int8]])
DeleteUmsCompletionList(UmsCompletionList ptr[inout, array[int8]])
GetCurrentUmsThread()
GetNextUmsListItem(UmsContext ptr[inout, array[int8]])
QueryUmsThreadInformation(UmsThread ptr[inout, array[int8]], UmsThreadInfoClass int32, UmsThreadInformation ptr[inout, array[int8]], UmsThreadInformationLength int32, ReturnLength ptr[inout, int32])
SetUmsThreadInformation(UmsThread ptr[inout, array[int8]], UmsThreadInfoClass int32, UmsThreadInformation ptr[inout, array[int8]], UmsThreadInformationLength int32)
DeleteUmsThreadContext(UmsThread ptr[inout, array[int8]])
CreateUmsThreadContext(lpUmsThread ptr[inout, ptr[inout, array[int8]]])
EnterUmsSchedulingMode(SchedulerStartupInfo ptr[inout, intptr])
GetUmsSystemThreadInformation(ThreadHandle HANDLE, SystemThreadInfo ptr[inout, intptr])
SetThreadAffinityMask(hThread HANDLE, dwThreadAffinityMask int64)
SetProcessDEPPolicy(dwFlags int32)
GetProcessDEPPolicy(hProcess HANDLE, lpFlags ptr[inout, int32], lpPermanent ptr[inout, int32])
RequestWakeupLatency(latency int32)
IsSystemResumeAutomatic()
GetThreadSelectorEntry(hThread HANDLE, dwSelector int32, lpSelectorEntry ptr[inout, array[int8]])
SetThreadExecutionState(esFlags int32)
PowerCreateRequest(Context ptr[inout, intptr]) HANDLE
PowerSetRequest(PowerRequest HANDLE, RequestType int32)
PowerClearRequest(PowerRequest HANDLE, RequestType int32)
SetFileCompletionNotificationModes(FileHandle HANDLE, Flags int8)
Wow64GetThreadContext(hThread HANDLE, lpContext ptr[inout, intptr])
Wow64SetThreadContext(hThread HANDLE, lpContext ptr[inout, intptr])
Wow64GetThreadSelectorEntry(hThread HANDLE, dwSelector int32, lpSelectorEntry ptr[inout, intptr])
Wow64SuspendThread(hThread HANDLE)
DebugSetProcessKillOnExit(KillOnExit int32)
DebugBreakProcess(Process HANDLE)
PulseEvent(hEvent HANDLE)
GlobalDeleteAtom(nAtom int16)
InitAtomTable(nSize int32)
DeleteAtom(nAtom int16)
SetHandleCount(uNumber int32)
RequestDeviceWakeup(hDevice HANDLE)
CancelDeviceWakeupRequest(hDevice HANDLE)
GetDevicePowerState(hDevice HANDLE, pfOn ptr[inout, int32])
SetMessageWaitingIndicator(hMsgIndicator HANDLE, ulMsgCount int32)
SetFileShortNameA(hFile HANDLE, lpShortName ptr[inout, int8])
LoadModule(lpModuleName ptr[inout, int8], lpParameterBlock ptr[inout, array[int8]])
WinExec(lpCmdLine ptr[inout, int8], uCmdShow int32)
ClearCommBreak(hFile HANDLE)
ClearCommError(hFile HANDLE, lpErrors ptr[inout, int32], lpStat ptr[inout, intptr])
SetupComm(hFile HANDLE, dwInQueue int32, dwOutQueue int32)
EscapeCommFunction(hFile HANDLE, dwFunc int32)
GetCommConfig(hCommDev HANDLE, lpCC ptr[inout, intptr], lpdwSize ptr[inout, int32])
GetCommMask(hFile HANDLE, lpEvtMask ptr[inout, int32])
GetCommProperties(hFile HANDLE, lpCommProp ptr[inout, intptr])
GetCommModemStatus(hFile HANDLE, lpModemStat ptr[inout, int32])
GetCommState(hFile HANDLE, lpDCB ptr[inout, intptr])
GetCommTimeouts(hFile HANDLE, lpCommTimeouts ptr[inout, intptr])
PurgeComm(hFile HANDLE, dwFlags int32)
SetCommBreak(hFile HANDLE)
SetCommConfig(hCommDev HANDLE, lpCC ptr[inout, intptr], dwSize int32)
SetCommMask(hFile HANDLE, dwEvtMask int32)
SetCommState(hFile HANDLE, lpDCB ptr[inout, intptr])
SetCommTimeouts(hFile HANDLE, lpCommTimeouts ptr[inout, intptr])
TransmitCommChar(hFile HANDLE, cChar int8)
WaitCommEvent(hFile HANDLE, lpEvtMask ptr[inout, int32], lpOverlapped ptr[inout, intptr])
SetTapePosition(hDevice HANDLE, dwPositionMethod int32, dwPartition int32, dwOffsetLow int32, dwOffsetHigh int32, bImmediate int32)
GetTapePosition(hDevice HANDLE, dwPositionType int32, lpdwPartition ptr[inout, int32], lpdwOffsetLow ptr[inout, int32], lpdwOffsetHigh ptr[inout, int32])
PrepareTape(hDevice HANDLE, dwOperation int32, bImmediate int32)
EraseTape(hDevice HANDLE, dwEraseType int32, bImmediate int32)
CreateTapePartition(hDevice HANDLE, dwPartitionMethod int32, dwCount int32, dwSize int32)
WriteTapemark(hDevice HANDLE, dwTapemarkType int32, dwTapemarkCount int32, bImmediate int32)
GetTapeStatus(hDevice HANDLE)
GetTapeParameters(hDevice HANDLE, dwOperation int32, lpdwSize ptr[inout, int32], lpTapeInformation ptr[inout, array[int8]])
SetTapeParameters(hDevice HANDLE, dwOperation int32, lpTapeInformation ptr[inout, array[int8]])
MulDiv(nNumber int32, nNumerator int32, nDenominator int32)
GetSystemDEPPolicy()
GetSystemRegistryQuota(pdwQuotaAllowed ptr[inout, int32], pdwQuotaUsed ptr[inout, int32])
FileTimeToDosDateTime(lpFileTime ptr[inout, intptr], lpFatDate ptr[inout, int16], lpFatTime ptr[inout, int16])
DosDateTimeToFileTime(wFatDate int16, wFatTime int16, lpFileTime ptr[inout, intptr])
FormatMessageA(dwFlags int32, lpSource ptr[inout, array[int8]], dwMessageId int32, dwLanguageId int32, lpBuffer ptr[inout, int8], nSize int32, Arguments ptr[inout, ptr[inout, int8]])
CreateMailslotA(lpName ptr[inout, int8], nMaxMessageSize int32, lReadTimeout int32, lpSecurityAttributes ptr[inout, intptr]) HANDLE
GetMailslotInfo(hMailslot HANDLE, lpMaxMessageSize ptr[inout, int32], lpNextSize ptr[inout, int32], lpMessageCount ptr[inout, int32], lpReadTimeout ptr[inout, int32])
SetMailslotInfo(hMailslot HANDLE, lReadTimeout int32)
EncryptFileA(lpFileName ptr[inout, int8])
DecryptFileA(lpFileName ptr[inout, int8], dwReserved int32)
FileEncryptionStatusA(lpFileName ptr[inout, int8], lpStatus ptr[inout, int32])
OpenEncryptedFileRawA(lpFileName ptr[inout, int8], ulFlags int32, pvContext ptr[inout, ptr[inout, array[int8]]])
ReadEncryptedFileRaw(pfExportCallback ptr[inout, intptr], pvCallbackContext ptr[inout, array[int8]], pvContext ptr[inout, array[int8]])
WriteEncryptedFileRaw(pfImportCallback ptr[inout, intptr], pvCallbackContext ptr[inout, array[int8]], pvContext ptr[inout, array[int8]])
CloseEncryptedFileRaw(pvContext ptr[inout, array[int8]])
lstrcmpA(lpString1 ptr[inout, int8], lpString2 ptr[inout, int8])
lstrcmpiA(lpString1 ptr[inout, int8], lpString2 ptr[inout, int8])
lstrcpynA(lpString1 ptr[inout, int8], lpString2 ptr[inout, int8], iMaxLength int32)
lstrcpyA(lpString1 ptr[inout, int8], lpString2 ptr[inout, int8])
lstrcatA(lpString1 ptr[inout, int8], lpString2 ptr[inout, int8])
lstrlenA(lpString ptr[inout, int8])
OpenFile(lpFileName ptr[inout, int8], lpReOpenBuff ptr[inout, intptr], uStyle int32)
IsTextUnicode(lpv ptr[inout, array[int8]], iSize int32, lpiResult ptr[inout, int32])
BackupRead(hFile HANDLE, lpBuffer ptr[inout, int8], nNumberOfBytesToRead int32, lpNumberOfBytesRead ptr[inout, int32], bAbort int32, bProcessSecurity int32, lpContext ptr[inout, ptr[inout, array[int8]]])
BackupSeek(hFile HANDLE, dwLowBytesToSeek int32, dwHighBytesToSeek int32, lpdwLowByteSeeked ptr[inout, int32], lpdwHighByteSeeked ptr[inout, int32], lpContext ptr[inout, ptr[inout, array[int8]]])
BackupWrite(hFile HANDLE, lpBuffer ptr[inout, int8], nNumberOfBytesToWrite int32, lpNumberOfBytesWritten ptr[inout, int32], bAbort int32, bProcessSecurity int32, lpContext ptr[inout, ptr[inout, array[int8]]])
OpenMutexA(dwDesiredAccess int32, bInheritHandle int32, lpName ptr[inout, int8]) HANDLE
CreateSemaphoreA(lpSemaphoreAttributes ptr[inout, intptr], lInitialCount int32, lMaximumCount int32, lpName ptr[inout, int8]) HANDLE
OpenSemaphoreA(dwDesiredAccess int32, bInheritHandle int32, lpName ptr[inout, int8]) HANDLE
CreateWaitableTimerA(lpTimerAttributes ptr[inout, intptr], bManualReset int32, lpTimerName ptr[inout, int8]) HANDLE
OpenWaitableTimerA(dwDesiredAccess int32, bInheritHandle int32, lpTimerName ptr[inout, int8]) HANDLE
CreateSemaphoreExA(lpSemaphoreAttributes ptr[inout, intptr], lInitialCount int32, lMaximumCount int32, lpName ptr[inout, int8], dwFlags int32, dwDesiredAccess int32) HANDLE
CreateWaitableTimerExA(lpTimerAttributes ptr[inout, intptr], lpTimerName ptr[inout, int8], dwFlags int32, dwDesiredAccess int32) HANDLE
CreateFileMappingA(hFile HANDLE, lpFileMappingAttributes ptr[inout, intptr], flProtect int32, dwMaximumSizeHigh int32, dwMaximumSizeLow int32, lpName ptr[inout, int8]) HANDLE
CreateFileMappingNumaA(hFile HANDLE, lpFileMappingAttributes ptr[inout, intptr], flProtect int32, dwMaximumSizeHigh int32, dwMaximumSizeLow int32, lpName ptr[inout, int8], nndPreferred int32) HANDLE
OpenFileMappingA(dwDesiredAccess int32, bInheritHandle int32, lpName ptr[inout, int8]) HANDLE
GetLogicalDriveStringsA(nBufferLength int32, lpBuffer ptr[inout, int8])
LoadPackagedLibrary(lpwLibFileName ptr[inout, int16], Reserved int32)
QueryFullProcessImageNameA(hProcess HANDLE, dwFlags int32, lpExeName ptr[inout, int8], lpdwSize ptr[inout, int32])
GetStartupInfoA(lpStartupInfo ptr[inout, intptr])
GetFirmwareEnvironmentVariableA(lpName ptr[inout, int8], lpGuid ptr[inout, int8], pBuffer ptr[inout, array[int8]], nSize int32)
GetFirmwareEnvironmentVariableExA(lpName ptr[inout, int8], lpGuid ptr[inout, int8], pBuffer ptr[inout, array[int8]], nSize int32, pdwAttribubutes ptr[inout, int32])
SetFirmwareEnvironmentVariableA(lpName ptr[inout, int8], lpGuid ptr[inout, int8], pValue ptr[inout, array[int8]], nSize int32)
SetFirmwareEnvironmentVariableExA(lpName ptr[inout, int8], lpGuid ptr[inout, int8], pValue ptr[inout, array[int8]], nSize int32, dwAttributes int32)
GetFirmwareType(FirmwareType ptr[inout, int32])
IsNativeVhdBoot(NativeVhdBoot ptr[inout, int32])
FindResourceA(hModule ptr[inout, intptr], lpName ptr[inout, int8], lpType ptr[inout, int8])
FindResourceExA(hModule ptr[inout, intptr], lpType ptr[inout, int8], lpName ptr[inout, int8], wLanguage int16)
EnumResourceTypesA(hModule ptr[inout, intptr], lpEnumFunc ptr[inout, intptr], lParam int64)
EnumResourceNamesA(hModule ptr[inout, intptr], lpType ptr[inout, int8], lpEnumFunc ptr[inout, intptr], lParam int64)
EnumResourceLanguagesA(hModule ptr[inout, intptr], lpType ptr[inout, int8], lpName ptr[inout, int8], lpEnumFunc ptr[inout, intptr], lParam int64)
BeginUpdateResourceA(pFileName ptr[inout, int8], bDeleteExistingResources int32) HANDLE
UpdateResourceA(hUpdate HANDLE, lpType ptr[inout, int8], lpName ptr[inout, int8], wLanguage int16, lpData ptr[inout, array[int8]], cb int32)
EndUpdateResourceA(hUpdate HANDLE, fDiscard int32)
GlobalAddAtomA(lpString ptr[inout, int8])
GlobalAddAtomExA(lpString ptr[inout, int8], Flags int32)
GlobalFindAtomA(lpString ptr[inout, int8])
GlobalGetAtomNameA(nAtom int16, lpBuffer ptr[inout, int8], nSize int32)
AddAtomA(lpString ptr[inout, int8])
FindAtomA(lpString ptr[inout, int8])
GetAtomNameA(nAtom int16, lpBuffer ptr[inout, int8], nSize int32)
GetProfileIntA(lpAppName ptr[inout, int8], lpKeyName ptr[inout, int8], nDefault int32)
GetProfileStringA(lpAppName ptr[inout, int8], lpKeyName ptr[inout, int8], lpDefault ptr[inout, int8], lpReturnedString ptr[inout, int8], nSize int32)
WriteProfileStringA(lpAppName ptr[inout, int8], lpKeyName ptr[inout, int8], lpString ptr[inout, int8])
GetProfileSectionA(lpAppName ptr[inout, int8], lpReturnedString ptr[inout, int8], nSize int32)
WriteProfileSectionA(lpAppName ptr[inout, int8], lpString ptr[inout, int8])
GetPrivateProfileIntA(lpAppName ptr[inout, int8], lpKeyName ptr[inout, int8], nDefault int32, lpFileName ptr[inout, int8])
GetPrivateProfileStringA(lpAppName ptr[inout, int8], lpKeyName ptr[inout, int8], lpDefault ptr[inout, int8], lpReturnedString ptr[inout, int8], nSize int32, lpFileName ptr[inout, int8])
WritePrivateProfileStringA(lpAppName ptr[inout, int8], lpKeyName ptr[inout, int8], lpString ptr[inout, int8], lpFileName ptr[inout, int8])
GetPrivateProfileSectionA(lpAppName ptr[inout, int8], lpReturnedString ptr[inout, int8], nSize int32, lpFileName ptr[inout, int8])
WritePrivateProfileSectionA(lpAppName ptr[inout, int8], lpString ptr[inout, int8], lpFileName ptr[inout, int8])
GetPrivateProfileSectionNamesA(lpszReturnBuffer ptr[inout, int8], nSize int32, lpFileName ptr[inout, int8])
GetPrivateProfileStructA(lpszSection ptr[inout, int8], lpszKey ptr[inout, int8], lpStruct ptr[inout, array[int8]], uSizeStruct int32, szFile ptr[inout, int8])
WritePrivateProfileStructA(lpszSection ptr[inout, int8], lpszKey ptr[inout, int8], lpStruct ptr[inout, array[int8]], uSizeStruct int32, szFile ptr[inout, int8])
Wow64EnableWow64FsRedirection(Wow64FsEnableRedirection int8)
SetDllDirectoryA(lpPathName ptr[inout, int8])
GetDllDirectoryA(nBufferLength int32, lpBuffer ptr[inout, int8])
SetSearchPathMode(Flags int32)
CreateDirectoryExA(lpTemplateDirectory ptr[inout, int8], lpNewDirectory ptr[inout, int8], lpSecurityAttributes ptr[inout, intptr])
CreateDirectoryTransactedA(lpTemplateDirectory ptr[inout, int8], lpNewDirectory ptr[inout, int8], lpSecurityAttributes ptr[inout, intptr], hTransaction HANDLE)
RemoveDirectoryTransactedA(lpPathName ptr[inout, int8], hTransaction HANDLE)
GetFullPathNameTransactedA(lpFileName ptr[inout, int8], nBufferLength int32, lpBuffer ptr[inout, int8], lpFilePart ptr[inout, ptr[inout, int8]], hTransaction HANDLE)
DefineDosDeviceA(dwFlags int32, lpDeviceName ptr[inout, int8], lpTargetPath ptr[inout, int8])
QueryDosDeviceA(lpDeviceName ptr[inout, int8], lpTargetPath ptr[inout, int8], ucchMax int32)
CreateFileTransactedA(lpFileName ptr[inout, int8], dwDesiredAccess int32, dwShareMode int32, lpSecurityAttributes ptr[inout, intptr], dwCreationDisposition int32, dwFlagsAndAttributes int32, hTemplateFile HANDLE, hTransaction HANDLE, pusMiniVersion ptr[inout, int16]) HANDLE
ReOpenFile(hOriginalFile HANDLE, dwDesiredAccess int32, dwShareMode int32, dwFlagsAndAttributes int32) HANDLE
SetFileAttributesTransactedA(lpFileName ptr[inout, int8], dwFileAttributes int32, hTransaction HANDLE)
GetFileAttributesTransactedA(lpFileName ptr[inout, int8], fInfoLevelId int32, lpFileInformation ptr[inout, array[int8]], hTransaction HANDLE)
GetCompressedFileSizeTransactedA(lpFileName ptr[inout, int8], lpFileSizeHigh ptr[inout, int32], hTransaction HANDLE)
DeleteFileTransactedA(lpFileName ptr[inout, int8], hTransaction HANDLE)
CheckNameLegalDOS8Dot3A(lpName ptr[inout, int8], lpOemName ptr[inout, int8], OemNameSize int32, pbNameContainsSpaces ptr[inout, int32], pbNameLegal ptr[inout, int32])
FindFirstFileTransactedA(lpFileName ptr[inout, int8], fInfoLevelId int32, lpFindFileData ptr[inout, array[int8]], fSearchOp int32, lpSearchFilter ptr[inout, array[int8]], dwAdditionalFlags int32, hTransaction HANDLE) HANDLE
CopyFileA(lpExistingFileName ptr[inout, int8], lpNewFileName ptr[inout, int8], bFailIfExists int32)
CopyFileExA(lpExistingFileName ptr[inout, int8], lpNewFileName ptr[inout, int8], lpProgressRoutine ptr[inout, intptr], lpData ptr[inout, array[int8]], pbCancel ptr[inout, int32], dwCopyFlags int32)
CopyFileTransactedA(lpExistingFileName ptr[inout, int8], lpNewFileName ptr[inout, int8], lpProgressRoutine ptr[inout, intptr], lpData ptr[inout, array[int8]], pbCancel ptr[inout, int32], dwCopyFlags int32, hTransaction HANDLE)
CopyFile2(pwszExistingFileName ptr[inout, int16], pwszNewFileName ptr[inout, int16], pExtendedParameters ptr[inout, intptr])
MoveFileA(lpExistingFileName ptr[inout, int8], lpNewFileName ptr[inout, int8])
MoveFileExA(lpExistingFileName ptr[inout, int8], lpNewFileName ptr[inout, int8], dwFlags int32)
MoveFileWithProgressA(lpExistingFileName ptr[inout, int8], lpNewFileName ptr[inout, int8], lpProgressRoutine ptr[inout, intptr], lpData ptr[inout, array[int8]], dwFlags int32)
MoveFileTransactedA(lpExistingFileName ptr[inout, int8], lpNewFileName ptr[inout, int8], lpProgressRoutine ptr[inout, intptr], lpData ptr[inout, array[int8]], dwFlags int32, hTransaction HANDLE)
ReplaceFileA(lpReplacedFileName ptr[inout, int8], lpReplacementFileName ptr[inout, int8], lpBackupFileName ptr[inout, int8], dwReplaceFlags int32, lpExclude ptr[inout, array[int8]], lpReserved ptr[inout, array[int8]])
CreateHardLinkA(lpFileName ptr[inout, int8], lpExistingFileName ptr[inout, int8], lpSecurityAttributes ptr[inout, intptr])
CreateHardLinkTransactedA(lpFileName ptr[inout, int8], lpExistingFileName ptr[inout, int8], lpSecurityAttributes ptr[inout, intptr], hTransaction HANDLE)
CreateNamedPipeA(lpName ptr[inout, int8], dwOpenMode int32, dwPipeMode int32, nMaxInstances int32, nOutBufferSize int32, nInBufferSize int32, nDefaultTimeOut int32, lpSecurityAttributes ptr[inout, intptr]) HANDLE
GetNamedPipeHandleStateA(hNamedPipe HANDLE, lpState ptr[inout, int32], lpCurInstances ptr[inout, int32], lpMaxCollectionCount ptr[inout, int32], lpCollectDataTimeout ptr[inout, int32], lpUserName ptr[inout, int8], nMaxUserNameSize int32)
CallNamedPipeA(lpNamedPipeName ptr[inout, int8], lpInBuffer ptr[inout, array[int8]], nInBufferSize int32, lpOutBuffer ptr[inout, array[int8]], nOutBufferSize int32, lpBytesRead ptr[inout, int32], nTimeOut int32)
WaitNamedPipeA(lpNamedPipeName ptr[inout, int8], nTimeOut int32)
GetNamedPipeClientComputerNameA(Pipe HANDLE, ClientComputerName ptr[inout, int8], ClientComputerNameLength int32)
GetNamedPipeClientProcessId(Pipe HANDLE, ClientProcessId ptr[inout, int32])
GetNamedPipeClientSessionId(Pipe HANDLE, ClientSessionId ptr[inout, int32])
GetNamedPipeServerProcessId(Pipe HANDLE, ServerProcessId ptr[inout, int32])
GetNamedPipeServerSessionId(Pipe HANDLE, ServerSessionId ptr[inout, int32])
SetVolumeLabelA(lpRootPathName ptr[inout, int8], lpVolumeName ptr[inout, int8])
SetFileBandwidthReservation(hFile HANDLE, nPeriodMilliseconds int32, nBytesPerPeriod int32, bDiscardable int32, lpTransferSize ptr[inout, int32], lpNumOutstandingRequests ptr[inout, int32])
GetFileBandwidthReservation(hFile HANDLE, lpPeriodMilliseconds ptr[inout, int32], lpBytesPerPeriod ptr[inout, int32], pDiscardable ptr[inout, int32], lpTransferSize ptr[inout, int32], lpNumOutstandingRequests ptr[inout, int32])
ClearEventLogA(hEventLog HANDLE, lpBackupFileName ptr[inout, int8])
BackupEventLogA(hEventLog HANDLE, lpBackupFileName ptr[inout, int8])
CloseEventLog(hEventLog HANDLE)
DeregisterEventSource(hEventLog HANDLE)
NotifyChangeEventLog(hEventLog HANDLE, hEvent HANDLE)
GetNumberOfEventLogRecords(hEventLog HANDLE, NumberOfRecords ptr[inout, int32])
GetOldestEventLogRecord(hEventLog HANDLE, OldestRecord ptr[inout, int32])
OpenEventLogA(lpUNCServerName ptr[inout, int8], lpSourceName ptr[inout, int8]) HANDLE
RegisterEventSourceA(lpUNCServerName ptr[inout, int8], lpSourceName ptr[inout, int8]) HANDLE
OpenBackupEventLogA(lpUNCServerName ptr[inout, int8], lpFileName ptr[inout, int8]) HANDLE
ReadEventLogA(hEventLog HANDLE, dwReadFlags int32, dwRecordOffset int32, lpBuffer ptr[inout, array[int8]], nNumberOfBytesToRead int32, pnBytesRead ptr[inout, int32], pnMinNumberOfBytesNeeded ptr[inout, int32])
ReportEventA(hEventLog HANDLE, wType int16, wCategory int16, dwEventID int32, lpUserSid ptr[inout, array[int8]], wNumStrings int16, dwDataSize int32, lpStrings ptr[inout, ptr[inout, int8]], lpRawData ptr[inout, array[int8]])
GetEventLogInformation(hEventLog HANDLE, dwInfoLevel int32, lpBuffer ptr[inout, array[int8]], cbBufSize int32, pcbBytesNeeded ptr[inout, int32])
OperationStart(OperationStartParams ptr[inout, intptr])
OperationEnd(OperationEndParams ptr[inout, intptr])
AccessCheckAndAuditAlarmA(SubsystemName ptr[inout, int8], HandleId ptr[inout, array[int8]], ObjectTypeName ptr[inout, int8], ObjectName ptr[inout, int8], SecurityDescriptor ptr[inout, array[int8]], DesiredAccess int32, GenericMapping ptr[inout, intptr], ObjectCreation int32, GrantedAccess ptr[inout, int32])
AccessCheckByTypeAndAuditAlarmA(SubsystemName ptr[inout, int8], HandleId ptr[inout, array[int8]], ObjectTypeName ptr[inout, int8], ObjectName ptr[inout, int8], SecurityDescriptor ptr[inout, array[int8]], PrincipalSelfSid ptr[inout, array[int8]], DesiredAccess int32, AuditType int32, Flags int32)
AccessCheckByTypeResultListAndAuditAlarmA(SubsystemName ptr[inout, int8], HandleId ptr[inout, array[int8]], ObjectTypeName ptr[inout, int8], ObjectName ptr[inout, int8], SecurityDescriptor ptr[inout, array[int8]], PrincipalSelfSid ptr[inout, array[int8]], DesiredAccess int32, AuditType int32, Flags int32)
AccessCheckByTypeResultListAndAuditAlarmByHandleA(SubsystemName ptr[inout, int8], HandleId ptr[inout, array[int8]], ClientToken HANDLE, ObjectTypeName ptr[inout, int8], ObjectName ptr[inout, int8], SecurityDescriptor ptr[inout, array[int8]], PrincipalSelfSid ptr[inout, array[int8]], DesiredAccess int32, AuditType int32)
ObjectOpenAuditAlarmA(SubsystemName ptr[inout, int8], HandleId ptr[inout, array[int8]], ObjectTypeName ptr[inout, int8], ObjectName ptr[inout, int8], pSecurityDescriptor ptr[inout, array[int8]], ClientToken HANDLE, DesiredAccess int32, GrantedAccess int32, Privileges ptr[inout, intptr])
ObjectPrivilegeAuditAlarmA(SubsystemName ptr[inout, int8], HandleId ptr[inout, array[int8]], ClientToken HANDLE, DesiredAccess int32, Privileges ptr[inout, intptr], AccessGranted int32)
ObjectCloseAuditAlarmA(SubsystemName ptr[inout, int8], HandleId ptr[inout, array[int8]], GenerateOnClose int32)
ObjectDeleteAuditAlarmA(SubsystemName ptr[inout, int8], HandleId ptr[inout, array[int8]], GenerateOnClose int32)
PrivilegedServiceAuditAlarmA(SubsystemName ptr[inout, int8], ServiceName ptr[inout, int8], ClientToken HANDLE, Privileges ptr[inout, intptr], AccessGranted int32)
AddConditionalAce(pAcl ptr[inout, intptr], dwAceRevision int32, AceFlags int32, AceType int8, AccessMask int32, pSid ptr[inout, array[int8]], ConditionStr ptr[inout, int16], ReturnLength ptr[inout, int32])
SetFileSecurityA(lpFileName ptr[inout, int8], SecurityInformation int32, pSecurityDescriptor ptr[inout, array[int8]])
GetFileSecurityA(lpFileName ptr[inout, int8], RequestedInformation int32, pSecurityDescriptor ptr[inout, array[int8]], nLength int32, lpnLengthNeeded ptr[inout, int32])
MapViewOfFileExNuma(hFileMappingObject HANDLE, dwDesiredAccess int32, dwFileOffsetHigh int32, dwFileOffsetLow int32, dwNumberOfBytesToMap int64, lpBaseAddress ptr[inout, array[int8]], nndPreferred int32)
IsBadReadPtr(lp ptr[inout, array[int8]], ucb int64)
IsBadWritePtr(lp ptr[inout, array[int8]], ucb int64)
IsBadHugeReadPtr(lp ptr[inout, array[int8]], ucb int64)
IsBadHugeWritePtr(lp ptr[inout, array[int8]], ucb int64)
IsBadCodePtr(lpfn ptr[inout, intptr])
IsBadStringPtrA(lpsz ptr[inout, int8], ucchMax int64)
LookupAccountSidA(lpSystemName ptr[inout, int8], Sid ptr[inout, array[int8]], Name ptr[inout, int8], cchName ptr[inout, int32], ReferencedDomainName ptr[inout, int8], cchReferencedDomainName ptr[inout, int32], peUse ptr[inout, int32])
LookupAccountNameA(lpSystemName ptr[inout, int8], lpAccountName ptr[inout, int8], Sid ptr[inout, array[int8]], cbSid ptr[inout, int32], ReferencedDomainName ptr[inout, int8], cchReferencedDomainName ptr[inout, int32], peUse ptr[inout, int32])
LookupPrivilegeValueA(lpSystemName ptr[inout, int8], lpName ptr[inout, int8], lpLuid ptr[inout, intptr])
LookupPrivilegeNameA(lpSystemName ptr[inout, int8], lpLuid ptr[inout, intptr], lpName ptr[inout, int8], cchName ptr[inout, int32])
LookupPrivilegeDisplayNameA(lpSystemName ptr[inout, int8], lpName ptr[inout, int8], lpDisplayName ptr[inout, int8], cchDisplayName ptr[inout, int32], lpLanguageId ptr[inout, int32])
BuildCommDCBA(lpDef ptr[inout, int8], lpDCB ptr[inout, intptr])
BuildCommDCBAndTimeoutsA(lpDef ptr[inout, int8], lpDCB ptr[inout, intptr], lpCommTimeouts ptr[inout, intptr])
CommConfigDialogA(lpszName ptr[inout, int8], hWnd ptr[inout, intptr], lpCC ptr[inout, intptr])
GetDefaultCommConfigA(lpszName ptr[inout, int8], lpCC ptr[inout, intptr], lpdwSize ptr[inout, int32])
SetDefaultCommConfigA(lpszName ptr[inout, int8], lpCC ptr[inout, intptr], dwSize int32)
GetComputerNameA(lpBuffer ptr[inout, int8], nSize ptr[inout, int32])
DnsHostnameToComputerNameA(Hostname ptr[inout, int8], ComputerName ptr[inout, int8], nSize ptr[inout, int32])
GetUserNameA(lpBuffer ptr[inout, int8], pcbBuffer ptr[inout, int32])
LogonUserA(lpszUsername ptr[inout, int8], lpszDomain ptr[inout, int8], lpszPassword ptr[inout, int8], dwLogonType int32, dwLogonProvider int32, phToken ptr[inout, HANDLE])
LogonUserExA(lpszUsername ptr[inout, int8], lpszDomain ptr[inout, int8], lpszPassword ptr[inout, int8], dwLogonType int32, dwLogonProvider int32, phToken ptr[inout, HANDLE], ppLogonSid ptr[inout, ptr[inout, array[int8]]], ppProfileBuffer ptr[inout, ptr[inout, array[int8]]], pdwProfileLength ptr[inout, int32])
IsTokenUntrusted(TokenHandle HANDLE)
RegisterWaitForSingleObject(phNewWaitObject ptr[inout, HANDLE], hObject HANDLE, Callback ptr[inout, intptr], Context ptr[inout, array[int8]], dwMilliseconds int32, dwFlags int32)
UnregisterWait(WaitHandle HANDLE)
BindIoCompletionCallback(FileHandle HANDLE, Function ptr[inout, intptr], Flags int32)
SetTimerQueueTimer(TimerQueue HANDLE, Callback ptr[inout, intptr], Parameter ptr[inout, array[int8]], DueTime int32, Period int32, PreferIo int32) HANDLE
CancelTimerQueueTimer(TimerQueue HANDLE, Timer HANDLE)
DeleteTimerQueue(TimerQueue HANDLE)
CreatePrivateNamespaceA(lpPrivateNamespaceAttributes ptr[inout, intptr], lpBoundaryDescriptor ptr[inout, array[int8]], lpAliasPrefix ptr[inout, int8]) HANDLE
OpenPrivateNamespaceA(lpBoundaryDescriptor ptr[inout, array[int8]], lpAliasPrefix ptr[inout, int8]) HANDLE
CreateBoundaryDescriptorA(Name ptr[inout, int8], Flags int32) HANDLE
AddIntegrityLabelToBoundaryDescriptor(BoundaryDescriptor ptr[inout, HANDLE], IntegrityLabel ptr[inout, array[int8]])
GetCurrentHwProfileA(lpHwProfileInfo ptr[inout, intptr])
VerifyVersionInfoA(lpVersionInformation ptr[inout, intptr], dwTypeMask int32, dwlConditionMask int64)
SystemTimeToTzSpecificLocalTime(lpTimeZoneInformation ptr[inout, intptr], lpUniversalTime ptr[inout, intptr], lpLocalTime ptr[inout, intptr])
TzSpecificLocalTimeToSystemTime(lpTimeZoneInformation ptr[inout, intptr], lpLocalTime ptr[inout, intptr], lpUniversalTime ptr[inout, intptr])
FileTimeToSystemTime(lpFileTime ptr[inout, intptr], lpSystemTime ptr[inout, intptr])
SystemTimeToFileTime(lpSystemTime ptr[inout, intptr], lpFileTime ptr[inout, intptr])
GetTimeZoneInformation(lpTimeZoneInformation ptr[inout, intptr])
SetTimeZoneInformation(lpTimeZoneInformation ptr[inout, intptr])
SetDynamicTimeZoneInformation(lpTimeZoneInformation ptr[inout, intptr])
GetDynamicTimeZoneInformation(pTimeZoneInformation ptr[inout, intptr])
GetTimeZoneInformationForYear(wYear int16, pdtzi ptr[inout, intptr], ptzi ptr[inout, intptr])
EnumDynamicTimeZoneInformation(dwIndex int32, lpTimeZoneInformation ptr[inout, intptr])
GetDynamicTimeZoneInformationEffectiveYears(lpTimeZoneInformation ptr[inout, intptr], FirstYear ptr[inout, int32], LastYear ptr[inout, int32])
SystemTimeToTzSpecificLocalTimeEx(lpTimeZoneInformation ptr[inout, intptr], lpUniversalTime ptr[inout, intptr], lpLocalTime ptr[inout, intptr])
TzSpecificLocalTimeToSystemTimeEx(lpTimeZoneInformation ptr[inout, intptr], lpLocalTime ptr[inout, intptr], lpUniversalTime ptr[inout, intptr])
SetSystemPowerState(fSuspend int32, fForce int32)
GetSystemPowerStatus(lpSystemPowerStatus ptr[inout, intptr])
MapUserPhysicalPagesScatter(VirtualAddresses ptr[inout, ptr[inout, array[int8]]], NumberOfPages int64, PageArray ptr[inout, int64])
CreateJobObjectA(lpJobAttributes ptr[inout, intptr], lpName ptr[inout, int8]) HANDLE
OpenJobObjectA(dwDesiredAccess int32, bInheritHandle int32, lpName ptr[inout, int8]) HANDLE
CreateJobSet(NumJob int32, UserJobSet ptr[inout, intptr], Flags int32)
FindFirstVolumeA(lpszVolumeName ptr[inout, int8], cchBufferLength int32) HANDLE
FindNextVolumeA(hFindVolume HANDLE, lpszVolumeName ptr[inout, int8], cchBufferLength int32)
FindFirstVolumeMountPointA(lpszRootPathName ptr[inout, int8], lpszVolumeMountPoint ptr[inout, int8], cchBufferLength int32) HANDLE
FindNextVolumeMountPointA(hFindVolumeMountPoint HANDLE, lpszVolumeMountPoint ptr[inout, int8], cchBufferLength int32)
FindVolumeMountPointClose(hFindVolumeMountPoint HANDLE)
SetVolumeMountPointA(lpszVolumeMountPoint ptr[inout, int8], lpszVolumeName ptr[inout, int8])
DeleteVolumeMountPointA(lpszVolumeMountPoint ptr[inout, int8])
GetVolumeNameForVolumeMountPointA(lpszVolumeMountPoint ptr[inout, int8], lpszVolumeName ptr[inout, int8], cchBufferLength int32)
GetVolumePathNameA(lpszFileName ptr[inout, int8], lpszVolumePathName ptr[inout, int8], cchBufferLength int32)
GetVolumePathNamesForVolumeNameA(lpszVolumeName ptr[inout, int8], lpszVolumePathNames ptr[inout, int8], cchBufferLength int32, lpcchReturnLength ptr[inout, int32])
CreateActCtxA(pActCtx ptr[inout, intptr]) HANDLE
AddRefActCtx(hActCtx HANDLE)
ReleaseActCtx(hActCtx HANDLE)
ZombifyActCtx(hActCtx HANDLE)
ActivateActCtx(hActCtx HANDLE, lpCookie ptr[inout, int64])
DeactivateActCtx(dwFlags int32, ulCookie int64)
GetCurrentActCtx(lphActCtx ptr[inout, HANDLE])
FindActCtxSectionStringA(dwFlags int32, lpExtensionGuid ptr[inout, intptr], ulSectionId int32, lpStringToFind ptr[inout, int8], ReturnedData ptr[inout, intptr])
FindActCtxSectionGuid(dwFlags int32, lpExtensionGuid ptr[inout, intptr], ulSectionId int32, lpGuidToFind ptr[inout, intptr], ReturnedData ptr[inout, intptr])
WTSGetActiveConsoleSessionId()
GetActiveProcessorGroupCount()
GetMaximumProcessorGroupCount()
GetActiveProcessorCount(GroupNumber int16)
GetMaximumProcessorCount(GroupNumber int16)
GetNumaProcessorNode(Processor int8, NodeNumber ptr[inout, int8])
GetNumaNodeNumberFromHandle(hFile HANDLE, NodeNumber ptr[inout, int16])
GetNumaProcessorNodeEx(Processor ptr[inout, intptr], NodeNumber ptr[inout, int16])
GetNumaNodeProcessorMask(Node int8, ProcessorMask ptr[inout, int64])
GetNumaAvailableMemoryNode(Node int8, AvailableBytes ptr[inout, int64])
GetNumaAvailableMemoryNodeEx(Node int16, AvailableBytes ptr[inout, int64])
GetNumaProximityNode(ProximityId int32, NodeNumber ptr[inout, int8])
RegisterApplicationRecoveryCallback(pRecoveyCallback ptr[inout, intptr], pvParameter ptr[inout, array[int8]], dwPingInterval int32, dwFlags int32)
UnregisterApplicationRecoveryCallback()
RegisterApplicationRestart(pwzCommandline ptr[inout, int16], dwFlags int32)
UnregisterApplicationRestart()
GetApplicationRecoveryCallback(hProcess HANDLE, pRecoveryCallback ptr[inout, ptr[inout, intptr]], ppvParameter ptr[inout, ptr[inout, array[int8]]], pdwPingInterval ptr[inout, int32], pdwFlags ptr[inout, int32])
GetApplicationRestartSettings(hProcess HANDLE, pwzCommandline ptr[inout, int16], pcchSize ptr[inout, int32], pdwFlags ptr[inout, int32])
ApplicationRecoveryInProgress(pbCancelled ptr[inout, int32])
ApplicationRecoveryFinished(bSuccess int32)
GetFileInformationByHandleEx(hFile HANDLE, FileInformationClass int32, lpFileInformation ptr[inout, array[int8]], dwBufferSize int32)
OpenFileById(hVolumeHint HANDLE, lpFileId ptr[inout, intptr], dwDesiredAccess int32, dwShareMode int32, lpSecurityAttributes ptr[inout, intptr], dwFlagsAndAttributes int32) HANDLE
CreateSymbolicLinkA(lpSymlinkFileName ptr[inout, int8], lpTargetFileName ptr[inout, int8], dwFlags int32)
CreateSymbolicLinkTransactedA(lpSymlinkFileName ptr[inout, int8], lpTargetFileName ptr[inout, int8], dwFlags int32, hTransaction HANDLE)
ReplacePartitionUnit(TargetPartition ptr[inout, int16], SparePartition ptr[inout, int16], Flags int32)
AddSecureMemoryCacheCallback(pfnCallBack ptr[inout, intptr])
RemoveSecureMemoryCacheCallback(pfnCallBack ptr[inout, intptr])
CopyContext(Destination ptr[inout, intptr], ContextFlags int32, Source ptr[inout, intptr])
InitializeContext(Buffer ptr[inout, array[int8]], ContextFlags int32, Context ptr[inout, ptr[inout, intptr]], ContextLength ptr[inout, int32])
GetEnabledXStateFeatures()
GetXStateFeaturesMask(Context ptr[inout, intptr], FeatureMask ptr[inout, int64])
LocateXStateFeature(Context ptr[inout, intptr], FeatureId int32, Length ptr[inout, int32])
SetXStateFeaturesMask(Context ptr[inout, intptr], FeatureMask int64)
EnableThreadProfiling(ThreadHandle HANDLE, Flags int32, HardwareCounters int64, PerformanceDataHandle ptr[inout, HANDLE])
DisableThreadProfiling(PerformanceDataHandle HANDLE)
QueryThreadProfiling(ThreadHandle HANDLE, Enabled ptr[inout, int8])
ReadThreadProfilingData(PerformanceDataHandle HANDLE, Flags int32, PerformanceData ptr[inout, intptr])
AddFontResourceA(arg0 ptr[inout, int8])
AnimatePalette(hPal ptr[inout, intptr], iStartIndex int32, cEntries int32, ppe ptr[inout, intptr])
Arc(hdc ptr[inout, intptr], x1 int32, y1 int32, x2 int32, y2 int32, x3 int32, y3 int32, x4 int32, y4 int32)
BitBlt(hdc ptr[inout, intptr], x int32, y int32, cx int32, cy int32, hdcSrc ptr[inout, intptr], x1 int32, y1 int32, rop int32)
CancelDC(hdc ptr[inout, intptr])
Chord(hdc ptr[inout, intptr], x1 int32, y1 int32, x2 int32, y2 int32, x3 int32, y3 int32, x4 int32, y4 int32)
ChoosePixelFormat(hdc ptr[inout, intptr], ppfd ptr[inout, intptr])
CloseMetaFile(hdc ptr[inout, intptr])
CombineRgn(hrgnDst ptr[inout, intptr], hrgnSrc1 ptr[inout, intptr], hrgnSrc2 ptr[inout, intptr], iMode int32)
CopyMetaFileA(arg0 ptr[inout, intptr], arg1 ptr[inout, int8])
CreateBitmap(nWidth int32, nHeight int32, nPlanes int32, nBitCount int32, lpBits ptr[inout, array[int8]])
CreateBitmapIndirect(pbm ptr[inout, intptr])
CreateBrushIndirect(plbrush ptr[inout, intptr])
CreateCompatibleBitmap(hdc ptr[inout, intptr], cx int32, cy int32)
CreateDiscardableBitmap(hdc ptr[inout, intptr], cx int32, cy int32)
CreateCompatibleDC(hdc ptr[inout, intptr])
CreateDCA(pwszDriver ptr[inout, int8], pwszDevice ptr[inout, int8], pszPort ptr[inout, int8], pdm ptr[inout, intptr])
CreateDIBitmap(hdc ptr[inout, intptr], pbmih ptr[inout, intptr], flInit int32, pjBits ptr[inout, array[int8]], pbmi ptr[inout, intptr], iUsage int32)
CreateDIBPatternBrush(h ptr[inout, array[int8]], iUsage int32)
CreateDIBPatternBrushPt(lpPackedDIB ptr[inout, array[int8]], iUsage int32)
CreateEllipticRgn(x1 int32, y1 int32, x2 int32, y2 int32)
CreateEllipticRgnIndirect(lprect ptr[inout, intptr])
CreateFontIndirectA(lplf ptr[inout, intptr])
CreateFontA(cHeight int32, cWidth int32, cEscapement int32, cOrientation int32, cWeight int32, bItalic int32, bUnderline int32, bStrikeOut int32, iCharSet int32)
CreateHatchBrush(iHatch int32, color int32)
CreateICA(pszDriver ptr[inout, int8], pszDevice ptr[inout, int8], pszPort ptr[inout, int8], pdm ptr[inout, intptr])
CreateMetaFileA(pszFile ptr[inout, int8])
CreatePalette(plpal ptr[inout, intptr])
CreatePen(iStyle int32, cWidth int32, color int32)
CreatePenIndirect(plpen ptr[inout, intptr])
CreatePolyPolygonRgn(pptl ptr[inout, intptr], pc ptr[inout, int32], cPoly int32, iMode int32)
CreatePatternBrush(hbm ptr[inout, intptr])
CreateRectRgn(x1 int32, y1 int32, x2 int32, y2 int32)
CreateRectRgnIndirect(lprect ptr[inout, intptr])
CreateRoundRectRgn(x1 int32, y1 int32, x2 int32, y2 int32, w int32, h int32)
CreateScalableFontResourceA(fdwHidden int32, lpszFont ptr[inout, int8], lpszFile ptr[inout, int8], lpszPath ptr[inout, int8])
CreateSolidBrush(color int32)
DeleteDC(hdc ptr[inout, intptr])
DeleteMetaFile(hmf ptr[inout, intptr])
DeleteObject(ho ptr[inout, array[int8]])
DescribePixelFormat(hdc ptr[inout, intptr], iPixelFormat int32, nBytes int32, ppfd ptr[inout, intptr])
DeviceCapabilitiesA(pDevice ptr[inout, int8], pPort ptr[inout, int8], fwCapability int16, pOutput ptr[inout, int8], pDevMode ptr[inout, intptr])
DrawEscape(hdc ptr[inout, intptr], iEscape int32, cjIn int32, lpIn ptr[inout, int8])
Ellipse(hdc ptr[inout, intptr], left int32, top int32, right int32, bottom int32)
EnumFontFamiliesExA(hdc ptr[inout, intptr], lpLogfont ptr[inout, intptr], lpProc ptr[inout, intptr], lParam int64, dwFlags int32)
EnumFontFamiliesA(hdc ptr[inout, intptr], lpLogfont ptr[inout, int8], lpProc ptr[inout, intptr], lParam int64)
EnumFontsA(hdc ptr[inout, intptr], lpLogfont ptr[inout, int8], lpProc ptr[inout, intptr], lParam int64)
EnumObjects(hdc ptr[inout, intptr], nType int32, lpFunc ptr[inout, intptr], lParam int64)
EqualRgn(hrgn1 ptr[inout, intptr], hrgn2 ptr[inout, intptr])
Escape(hdc ptr[inout, intptr], iEscape int32, cjIn int32, pvIn ptr[inout, int8], pvOut ptr[inout, array[int8]])
ExtEscape(hdc ptr[inout, intptr], iEscape int32, cjInput int32, lpInData ptr[inout, int8], cjOutput int32, lpOutData ptr[inout, int8])
ExcludeClipRect(hdc ptr[inout, intptr], left int32, top int32, right int32, bottom int32)
ExtCreateRegion(lpx ptr[inout, intptr], nCount int32, lpData ptr[inout, intptr])
ExtFloodFill(hdc ptr[inout, intptr], x int32, y int32, color int32, type int32)
FillRgn(hdc ptr[inout, intptr], hrgn ptr[inout, intptr], hbr ptr[inout, intptr])
FloodFill(hdc ptr[inout, intptr], x int32, y int32, color int32)
FrameRgn(hdc ptr[inout, intptr], hrgn ptr[inout, intptr], hbr ptr[inout, intptr], w int32, h int32)
GetROP2(hdc ptr[inout, intptr])
GetAspectRatioFilterEx(hdc ptr[inout, intptr], lpsize ptr[inout, intptr])
GetBkColor(hdc ptr[inout, intptr])
GetDCBrushColor(hdc ptr[inout, intptr])
GetDCPenColor(hdc ptr[inout, intptr])
GetBkMode(hdc ptr[inout, intptr])
GetBitmapBits(hbit ptr[inout, intptr], cb int32, lpvBits ptr[inout, array[int8]])
GetBitmapDimensionEx(hbit ptr[inout, intptr], lpsize ptr[inout, intptr])
GetBoundsRect(hdc ptr[inout, intptr], lprect ptr[inout, intptr], flags int32)
GetBrushOrgEx(hdc ptr[inout, intptr], lppt ptr[inout, intptr])
GetCharWidthA(hdc ptr[inout, intptr], iFirst int32, iLast int32, lpBuffer ptr[inout, int32])
GetCharWidth32A(hdc ptr[inout, intptr], iFirst int32, iLast int32, lpBuffer ptr[inout, int32])
GetCharWidthFloatA(hdc ptr[inout, intptr], iFirst int32, iLast int32, lpBuffer ptr[inout, intptr])
GetCharABCWidthsA(hdc ptr[inout, intptr], wFirst int32, wLast int32, lpABC ptr[inout, intptr])
GetCharABCWidthsFloatA(hdc ptr[inout, intptr], iFirst int32, iLast int32, lpABC ptr[inout, intptr])
GetClipBox(hdc ptr[inout, intptr], lprect ptr[inout, intptr])
GetClipRgn(hdc ptr[inout, intptr], hrgn ptr[inout, intptr])
GetMetaRgn(hdc ptr[inout, intptr], hrgn ptr[inout, intptr])
GetCurrentObject(hdc ptr[inout, intptr], type int32)
GetCurrentPositionEx(hdc ptr[inout, intptr], lppt ptr[inout, intptr])
GetDeviceCaps(hdc ptr[inout, intptr], index int32)
GetDIBits(hdc ptr[inout, intptr], hbm ptr[inout, intptr], start int32, cLines int32, lpvBits ptr[inout, array[int8]], lpbmi ptr[inout, intptr], usage int32)
GetFontData(hdc ptr[inout, intptr], dwTable int32, dwOffset int32, pvBuffer ptr[inout, array[int8]], cjBuffer int32)
GetGlyphOutlineA(hdc ptr[inout, intptr], uChar int32, fuFormat int32, lpgm ptr[inout, intptr], cjBuffer int32, pvBuffer ptr[inout, array[int8]], lpmat2 ptr[inout, intptr])
GetGraphicsMode(hdc ptr[inout, intptr])
GetMapMode(hdc ptr[inout, intptr])
GetMetaFileBitsEx(hMF ptr[inout, intptr], cbBuffer int32, lpData ptr[inout, array[int8]])
GetMetaFileA(lpName ptr[inout, int8])
GetNearestColor(hdc ptr[inout, intptr], color int32)
GetNearestPaletteIndex(h ptr[inout, intptr], color int32)
GetObjectType(h ptr[inout, array[int8]])
GetOutlineTextMetricsA(hdc ptr[inout, intptr], cjCopy int32, potm ptr[inout, intptr])
GetPaletteEntries(hpal ptr[inout, intptr], iStart int32, cEntries int32, pPalEntries ptr[inout, intptr])
GetPixel(hdc ptr[inout, intptr], x int32, y int32)
GetPixelFormat(hdc ptr[inout, intptr])
GetPolyFillMode(hdc ptr[inout, intptr])
GetRasterizerCaps(lpraststat ptr[inout, intptr], cjBytes int32)
GetRandomRgn(hdc ptr[inout, intptr], hrgn ptr[inout, intptr], i int32)
GetRegionData(hrgn ptr[inout, intptr], nCount int32, lpRgnData ptr[inout, intptr])
GetRgnBox(hrgn ptr[inout, intptr], lprc ptr[inout, intptr])
GetStockObject(i int32)
GetStretchBltMode(hdc ptr[inout, intptr])
GetSystemPaletteEntries(hdc ptr[inout, intptr], iStart int32, cEntries int32, pPalEntries ptr[inout, intptr])
GetSystemPaletteUse(hdc ptr[inout, intptr])
GetTextCharacterExtra(hdc ptr[inout, intptr])
GetTextAlign(hdc ptr[inout, intptr])
GetTextColor(hdc ptr[inout, intptr])
GetTextExtentPointA(hdc ptr[inout, intptr], lpString ptr[inout, int8], c int32, lpsz ptr[inout, intptr])
GetTextExtentPoint32A(hdc ptr[inout, intptr], lpString ptr[inout, int8], c int32, psizl ptr[inout, intptr])
GetTextExtentExPointA(hdc ptr[inout, intptr], lpszString ptr[inout, int8], cchString int32, nMaxExtent int32, lpnFit ptr[inout, int32], lpnDx ptr[inout, int32], lpSize ptr[inout, intptr])
GetTextCharset(hdc ptr[inout, intptr])
GetTextCharsetInfo(hdc ptr[inout, intptr], lpSig ptr[inout, intptr], dwFlags int32)
TranslateCharsetInfo(lpSrc ptr[inout, int32], lpCs ptr[inout, intptr], dwFlags int32)
GetFontLanguageInfo(hdc ptr[inout, intptr])
GetCharacterPlacementA(hdc ptr[inout, intptr], lpString ptr[inout, int8], nCount int32, nMexExtent int32, lpResults ptr[inout, intptr], dwFlags int32)
GetFontUnicodeRanges(hdc ptr[inout, intptr], lpgs ptr[inout, intptr])
GetGlyphIndicesA(hdc ptr[inout, intptr], lpstr ptr[inout, int8], c int32, pgi ptr[inout, int16], fl int32)
GetTextExtentPointI(hdc ptr[inout, intptr], pgiIn ptr[inout, int16], cgi int32, psize ptr[inout, intptr])
GetTextExtentExPointI(hdc ptr[inout, intptr], lpwszString ptr[inout, int16], cwchString int32, nMaxExtent int32, lpnFit ptr[inout, int32], lpnDx ptr[inout, int32], lpSize ptr[inout, intptr])
GetCharWidthI(hdc ptr[inout, intptr], giFirst int32, cgi int32, pgi ptr[inout, int16], piWidths ptr[inout, int32])
GetCharABCWidthsI(hdc ptr[inout, intptr], giFirst int32, cgi int32, pgi ptr[inout, int16], pabc ptr[inout, intptr])
AddFontResourceExA(name ptr[inout, int8], fl int32, res ptr[inout, array[int8]])
RemoveFontResourceExA(name ptr[inout, int8], fl int32, pdv ptr[inout, array[int8]])
AddFontMemResourceEx(pFileView ptr[inout, array[int8]], cjSize int32, pvResrved ptr[inout, array[int8]], pNumFonts ptr[inout, int32]) HANDLE
RemoveFontMemResourceEx(h HANDLE)
CreateFontIndirectExA(arg0 ptr[inout, intptr])
GetViewportExtEx(hdc ptr[inout, intptr], lpsize ptr[inout, intptr])
GetViewportOrgEx(hdc ptr[inout, intptr], lppoint ptr[inout, intptr])
GetWindowExtEx(hdc ptr[inout, intptr], lpsize ptr[inout, intptr])
GetWindowOrgEx(hdc ptr[inout, intptr], lppoint ptr[inout, intptr])
IntersectClipRect(hdc ptr[inout, intptr], left int32, top int32, right int32, bottom int32)
InvertRgn(hdc ptr[inout, intptr], hrgn ptr[inout, intptr])
LineDDA(xStart int32, yStart int32, xEnd int32, yEnd int32, lpProc ptr[inout, intptr], data int64)
LineTo(hdc ptr[inout, intptr], x int32, y int32)
MaskBlt(hdcDest ptr[inout, intptr], xDest int32, yDest int32, width int32, height int32, hdcSrc ptr[inout, intptr], xSrc int32, ySrc int32, hbmMask ptr[inout, intptr])
PlgBlt(hdcDest ptr[inout, intptr], lpPoint ptr[inout, intptr], hdcSrc ptr[inout, intptr], xSrc int32, ySrc int32, width int32, height int32, hbmMask ptr[inout, intptr], xMask int32)
OffsetClipRgn(hdc ptr[inout, intptr], x int32, y int32)
OffsetRgn(hrgn ptr[inout, intptr], x int32, y int32)
PatBlt(hdc ptr[inout, intptr], x int32, y int32, w int32, h int32, rop int32)
Pie(hdc ptr[inout, intptr], left int32, top int32, right int32, bottom int32, xr1 int32, yr1 int32, xr2 int32, yr2 int32)
PlayMetaFile(hdc ptr[inout, intptr], hmf ptr[inout, intptr])
PaintRgn(hdc ptr[inout, intptr], hrgn ptr[inout, intptr])
PolyPolygon(hdc ptr[inout, intptr], apt ptr[inout, intptr], asz ptr[inout, int32], csz int32)
PtInRegion(hrgn ptr[inout, intptr], x int32, y int32)
PtVisible(hdc ptr[inout, intptr], x int32, y int32)
RectInRegion(hrgn ptr[inout, intptr], lprect ptr[inout, intptr])
RectVisible(hdc ptr[inout, intptr], lprect ptr[inout, intptr])
Rectangle(hdc ptr[inout, intptr], left int32, top int32, right int32, bottom int32)
RestoreDC(hdc ptr[inout, intptr], nSavedDC int32)
ResetDCA(hdc ptr[inout, intptr], lpdm ptr[inout, intptr])
RealizePalette(hdc ptr[inout, intptr])
RemoveFontResourceA(lpFileName ptr[inout, int8])
RoundRect(hdc ptr[inout, intptr], left int32, top int32, right int32, bottom int32, width int32, height int32)
ResizePalette(hpal ptr[inout, intptr], n int32)
SaveDC(hdc ptr[inout, intptr])
SelectClipRgn(hdc ptr[inout, intptr], hrgn ptr[inout, intptr])
ExtSelectClipRgn(hdc ptr[inout, intptr], hrgn ptr[inout, intptr], mode int32)
SetMetaRgn(hdc ptr[inout, intptr])
SelectObject(hdc ptr[inout, intptr], h ptr[inout, array[int8]])
SelectPalette(hdc ptr[inout, intptr], hPal ptr[inout, intptr], bForceBkgd int32)
SetBkColor(hdc ptr[inout, intptr], color int32)
SetDCBrushColor(hdc ptr[inout, intptr], color int32)
SetDCPenColor(hdc ptr[inout, intptr], color int32)
SetBkMode(hdc ptr[inout, intptr], mode int32)
SetBitmapBits(hbm ptr[inout, intptr], cb int32, pvBits ptr[inout, array[int8]])
SetBoundsRect(hdc ptr[inout, intptr], lprect ptr[inout, intptr], flags int32)
SetDIBits(hdc ptr[inout, intptr], hbm ptr[inout, intptr], start int32, cLines int32, lpBits ptr[inout, array[int8]], lpbmi ptr[inout, intptr], ColorUse int32)
SetDIBitsToDevice(hdc ptr[inout, intptr], xDest int32, yDest int32, w int32, h int32, xSrc int32, ySrc int32, StartScan int32, cLines int32)
SetMapperFlags(hdc ptr[inout, intptr], flags int32)
SetGraphicsMode(hdc ptr[inout, intptr], iMode int32)
SetMapMode(hdc ptr[inout, intptr], iMode int32)
SetLayout(hdc ptr[inout, intptr], l int32)
GetLayout(hdc ptr[inout, intptr])
SetMetaFileBitsEx(cbBuffer int32, lpData ptr[inout, int8])
SetPaletteEntries(hpal ptr[inout, intptr], iStart int32, cEntries int32, pPalEntries ptr[inout, intptr])
SetPixel(hdc ptr[inout, intptr], x int32, y int32, color int32)
SetPixelV(hdc ptr[inout, intptr], x int32, y int32, color int32)
SetPixelFormat(hdc ptr[inout, intptr], format int32, ppfd ptr[inout, intptr])
SetPolyFillMode(hdc ptr[inout, intptr], mode int32)
StretchBlt(hdcDest ptr[inout, intptr], xDest int32, yDest int32, wDest int32, hDest int32, hdcSrc ptr[inout, intptr], xSrc int32, ySrc int32, wSrc int32)
SetRectRgn(hrgn ptr[inout, intptr], left int32, top int32, right int32, bottom int32)
StretchDIBits(hdc ptr[inout, intptr], xDest int32, yDest int32, DestWidth int32, DestHeight int32, xSrc int32, ySrc int32, SrcWidth int32, SrcHeight int32)
SetROP2(hdc ptr[inout, intptr], rop2 int32)
SetStretchBltMode(hdc ptr[inout, intptr], mode int32)
SetSystemPaletteUse(hdc ptr[inout, intptr], use int32)
SetTextCharacterExtra(hdc ptr[inout, intptr], extra int32)
SetTextColor(hdc ptr[inout, intptr], color int32)
SetTextAlign(hdc ptr[inout, intptr], align int32)
SetTextJustification(hdc ptr[inout, intptr], extra int32, count int32)
UpdateColors(hdc ptr[inout, intptr])
AlphaBlend(hdcDest ptr[inout, intptr], xoriginDest int32, yoriginDest int32, wDest int32, hDest int32, hdcSrc ptr[inout, intptr], xoriginSrc int32, yoriginSrc int32, wSrc int32)
TransparentBlt(hdcDest ptr[inout, intptr], xoriginDest int32, yoriginDest int32, wDest int32, hDest int32, hdcSrc ptr[inout, intptr], xoriginSrc int32, yoriginSrc int32, wSrc int32)
GradientFill(hdc ptr[inout, intptr], pVertex ptr[inout, intptr], nVertex int32, pMesh ptr[inout, array[int8]], nMesh int32, ulMode int32)
GdiAlphaBlend(hdcDest ptr[inout, intptr], xoriginDest int32, yoriginDest int32, wDest int32, hDest int32, hdcSrc ptr[inout, intptr], xoriginSrc int32, yoriginSrc int32, wSrc int32)
GdiTransparentBlt(hdcDest ptr[inout, intptr], xoriginDest int32, yoriginDest int32, wDest int32, hDest int32, hdcSrc ptr[inout, intptr], xoriginSrc int32, yoriginSrc int32, wSrc int32)
GdiGradientFill(hdc ptr[inout, intptr], pVertex ptr[inout, intptr], nVertex int32, pMesh ptr[inout, array[int8]], nCount int32, ulMode int32)
PlayMetaFileRecord(hdc ptr[inout, intptr], lpHandleTable ptr[inout, intptr], lpMR ptr[inout, intptr], noObjs int32)
EnumMetaFile(hdc ptr[inout, intptr], hmf ptr[inout, intptr], proc ptr[inout, intptr], param int64)
CloseEnhMetaFile(hdc ptr[inout, intptr])
CopyEnhMetaFileA(hEnh ptr[inout, intptr], lpFileName ptr[inout, int8])
CreateEnhMetaFileA(hdc ptr[inout, intptr], lpFilename ptr[inout, int8], lprc ptr[inout, intptr], lpDesc ptr[inout, int8])
DeleteEnhMetaFile(hmf ptr[inout, intptr])
EnumEnhMetaFile(hdc ptr[inout, intptr], hmf ptr[inout, intptr], proc ptr[inout, intptr], param ptr[inout, array[int8]], lpRect ptr[inout, intptr])
GetEnhMetaFileA(lpName ptr[inout, int8])
GetEnhMetaFileBits(hEMF ptr[inout, intptr], nSize int32, lpData ptr[inout, int8])
GetEnhMetaFileDescriptionA(hemf ptr[inout, intptr], cchBuffer int32, lpDescription ptr[inout, int8])
GetEnhMetaFileHeader(hemf ptr[inout, intptr], nSize int32, lpEnhMetaHeader ptr[inout, intptr])
GetEnhMetaFilePaletteEntries(hemf ptr[inout, intptr], nNumEntries int32, lpPaletteEntries ptr[inout, intptr])
GetEnhMetaFilePixelFormat(hemf ptr[inout, intptr], cbBuffer int32, ppfd ptr[inout, intptr])
GetWinMetaFileBits(hemf ptr[inout, intptr], cbData16 int32, pData16 ptr[inout, int8], iMapMode int32, hdcRef ptr[inout, intptr])
PlayEnhMetaFile(hdc ptr[inout, intptr], hmf ptr[inout, intptr], lprect ptr[inout, intptr])
PlayEnhMetaFileRecord(hdc ptr[inout, intptr], pht ptr[inout, intptr], pmr ptr[inout, intptr], cht int32)
SetEnhMetaFileBits(nSize int32, pb ptr[inout, int8])
SetWinMetaFileBits(nSize int32, lpMeta16Data ptr[inout, int8], hdcRef ptr[inout, intptr], lpMFP ptr[inout, intptr])
GdiComment(hdc ptr[inout, intptr], nSize int32, lpData ptr[inout, int8])
GetTextMetricsA(hdc ptr[inout, intptr], lptm ptr[inout, intptr])
AngleArc(hdc ptr[inout, intptr], x int32, y int32, r int32, StartAngle intptr, SweepAngle intptr)
PolyPolyline(hdc ptr[inout, intptr], apt ptr[inout, intptr], asz ptr[inout, int32], csz int32)
GetWorldTransform(hdc ptr[inout, intptr], lpxf ptr[inout, intptr])
SetWorldTransform(hdc ptr[inout, intptr], lpxf ptr[inout, intptr])
ModifyWorldTransform(hdc ptr[inout, intptr], lpxf ptr[inout, intptr], mode int32)
CombineTransform(lpxfOut ptr[inout, intptr], lpxf1 ptr[inout, intptr], lpxf2 ptr[inout, intptr])
CreateDIBSection(hdc ptr[inout, intptr], pbmi ptr[inout, intptr], usage int32, ppvBits ptr[inout, ptr[inout, array[int8]]], hSection HANDLE, offset int32)
GetDIBColorTable(hdc ptr[inout, intptr], iStart int32, cEntries int32, prgbq ptr[inout, intptr])
SetDIBColorTable(hdc ptr[inout, intptr], iStart int32, cEntries int32, prgbq ptr[inout, intptr])
SetColorAdjustment(hdc ptr[inout, intptr], lpca ptr[inout, intptr])
GetColorAdjustment(hdc ptr[inout, intptr], lpca ptr[inout, intptr])
CreateHalftonePalette(hdc ptr[inout, intptr])
StartDocA(hdc ptr[inout, intptr], lpdi ptr[inout, intptr])
EndDoc(hdc ptr[inout, intptr])
StartPage(hdc ptr[inout, intptr])
EndPage(hdc ptr[inout, intptr])
AbortDoc(hdc ptr[inout, intptr])
SetAbortProc(hdc ptr[inout, intptr], proc ptr[inout, intptr])
AbortPath(hdc ptr[inout, intptr])
ArcTo(hdc ptr[inout, intptr], left int32, top int32, right int32, bottom int32, xr1 int32, yr1 int32, xr2 int32, yr2 int32)
BeginPath(hdc ptr[inout, intptr])
CloseFigure(hdc ptr[inout, intptr])
EndPath(hdc ptr[inout, intptr])
FillPath(hdc ptr[inout, intptr])
FlattenPath(hdc ptr[inout, intptr])
GetPath(hdc ptr[inout, intptr], apt ptr[inout, intptr], aj ptr[inout, int8], cpt int32)
PathToRegion(hdc ptr[inout, intptr])
PolyDraw(hdc ptr[inout, intptr], apt ptr[inout, intptr], aj ptr[inout, int8], cpt int32)
SelectClipPath(hdc ptr[inout, intptr], mode int32)
SetArcDirection(hdc ptr[inout, intptr], dir int32)
SetMiterLimit(hdc ptr[inout, intptr], limit intptr, old ptr[inout, intptr])
StrokeAndFillPath(hdc ptr[inout, intptr])
StrokePath(hdc ptr[inout, intptr])
WidenPath(hdc ptr[inout, intptr])
ExtCreatePen(iPenStyle int32, cWidth int32, plbrush ptr[inout, intptr], cStyle int32, pstyle ptr[inout, int32])
GetMiterLimit(hdc ptr[inout, intptr], plimit ptr[inout, intptr])
GetArcDirection(hdc ptr[inout, intptr])
GetObjectA(h HANDLE, c int32, pv ptr[inout, array[int8]])
MoveToEx(hdc ptr[inout, intptr], x int32, y int32, lppt ptr[inout, intptr])
TextOutA(hdc ptr[inout, intptr], x int32, y int32, lpString ptr[inout, int8], c int32)
ExtTextOutA(hdc ptr[inout, intptr], x int32, y int32, options int32, lprect ptr[inout, intptr], lpString ptr[inout, int8], c int32, lpDx ptr[inout, int32])
PolyTextOutA(hdc ptr[inout, intptr], ppt ptr[inout, intptr], nstrings int32)
CreatePolygonRgn(pptl ptr[inout, intptr], cPoint int32, iMode int32)
DPtoLP(hdc ptr[inout, intptr], lppt ptr[inout, intptr], c int32)
LPtoDP(hdc ptr[inout, intptr], lppt ptr[inout, intptr], c int32)
Polygon(hdc ptr[inout, intptr], apt ptr[inout, intptr], cpt int32)
Polyline(hdc ptr[inout, intptr], apt ptr[inout, intptr], cpt int32)
PolyBezier(hdc ptr[inout, intptr], apt ptr[inout, intptr], cpt int32)
PolyBezierTo(hdc ptr[inout, intptr], apt ptr[inout, intptr], cpt int32)
PolylineTo(hdc ptr[inout, intptr], apt ptr[inout, intptr], cpt int32)
SetViewportExtEx(hdc ptr[inout, intptr], x int32, y int32, lpsz ptr[inout, intptr])
SetViewportOrgEx(hdc ptr[inout, intptr], x int32, y int32, lppt ptr[inout, intptr])
SetWindowExtEx(hdc ptr[inout, intptr], x int32, y int32, lpsz ptr[inout, intptr])
SetWindowOrgEx(hdc ptr[inout, intptr], x int32, y int32, lppt ptr[inout, intptr])
OffsetViewportOrgEx(hdc ptr[inout, intptr], x int32, y int32, lppt ptr[inout, intptr])
OffsetWindowOrgEx(hdc ptr[inout, intptr], x int32, y int32, lppt ptr[inout, intptr])
ScaleViewportExtEx(hdc ptr[inout, intptr], xn int32, dx int32, yn int32, yd int32, lpsz ptr[inout, intptr])
ScaleWindowExtEx(hdc ptr[inout, intptr], xn int32, xd int32, yn int32, yd int32, lpsz ptr[inout, intptr])
SetBitmapDimensionEx(hbm ptr[inout, intptr], w int32, h int32, lpsz ptr[inout, intptr])
SetBrushOrgEx(hdc ptr[inout, intptr], x int32, y int32, lppt ptr[inout, intptr])
GetTextFaceA(hdc ptr[inout, intptr], c int32, lpName ptr[inout, int8])
GetKerningPairsA(hdc ptr[inout, intptr], nPairs int32, lpKernPair ptr[inout, intptr])
GetDCOrgEx(hdc ptr[inout, intptr], lppt ptr[inout, intptr])
FixBrushOrgEx(hdc ptr[inout, intptr], x int32, y int32, ptl ptr[inout, intptr])
UnrealizeObject(h ptr[inout, array[int8]])
GdiFlush()
GdiSetBatchLimit(dw int32)
GdiGetBatchLimit()
SetICMMode(hdc ptr[inout, intptr], mode int32)
CheckColorsInGamut(hdc ptr[inout, intptr], lpRGBTriple ptr[inout, intptr], dlpBuffer ptr[inout, array[int8]], nCount int32)
GetColorSpace(hdc ptr[inout, intptr])
GetLogColorSpaceA(hColorSpace ptr[inout, intptr], lpBuffer ptr[inout, intptr], nSize int32)
CreateColorSpaceA(lplcs ptr[inout, intptr])
SetColorSpace(hdc ptr[inout, intptr], hcs ptr[inout, intptr])
DeleteColorSpace(hcs ptr[inout, intptr])
GetICMProfileA(hdc ptr[inout, intptr], pBufSize ptr[inout, int32], pszFilename ptr[inout, int8])
SetICMProfileA(hdc ptr[inout, intptr], lpFileName ptr[inout, int8])
GetDeviceGammaRamp(hdc ptr[inout, intptr], lpRamp ptr[inout, array[int8]])
SetDeviceGammaRamp(hdc ptr[inout, intptr], lpRamp ptr[inout, array[int8]])
ColorMatchToTarget(hdc ptr[inout, intptr], hdcTarget ptr[inout, intptr], action int32)
EnumICMProfilesA(hdc ptr[inout, intptr], proc ptr[inout, intptr], param int64)
UpdateICMRegKeyA(reserved int32, lpszCMID ptr[inout, int8], lpszFileName ptr[inout, int8], command int32)
ColorCorrectPalette(hdc ptr[inout, intptr], hPal ptr[inout, intptr], deFirst int32, num int32)
wglCopyContext(arg0 ptr[inout, intptr], arg1 ptr[inout, intptr], arg2 int32)
wglCreateContext(arg0 ptr[inout, intptr])
wglCreateLayerContext(arg0 ptr[inout, intptr], arg1 int32)
wglDeleteContext(arg0 ptr[inout, intptr])
wglGetCurrentContext()
wglGetCurrentDC()
wglGetProcAddress(arg0 ptr[inout, int8])
wglMakeCurrent(arg0 ptr[inout, intptr], arg1 ptr[inout, intptr])
wglShareLists(arg0 ptr[inout, intptr], arg1 ptr[inout, intptr])
wglUseFontBitmapsA(arg0 ptr[inout, intptr], arg1 int32, arg2 int32, arg3 int32)
SwapBuffers(arg0 ptr[inout, intptr])
wglUseFontOutlinesA(arg0 ptr[inout, intptr], arg1 int32, arg2 int32, arg3 int32, arg4 intptr, arg5 intptr, arg6 int32, arg7 ptr[inout, intptr])
wglDescribeLayerPlane(arg0 ptr[inout, intptr], arg1 int32, arg2 int32, arg3 int32, arg4 ptr[inout, intptr])
wglSetLayerPaletteEntries(arg0 ptr[inout, intptr], arg1 int32, arg2 int32, arg3 int32, arg4 ptr[inout, int32])
wglGetLayerPaletteEntries(arg0 ptr[inout, intptr], arg1 int32, arg2 int32, arg3 int32, arg4 ptr[inout, int32])
wglRealizeLayerPalette(arg0 ptr[inout, intptr], arg1 int32, arg2 int32)
wglSwapLayerBuffers(arg0 ptr[inout, intptr], arg1 int32)
wglSwapMultipleBuffers(arg0 int32, arg1 ptr[inout, intptr])
wvsprintfA(arg0 ptr[inout, int8], arg1 ptr[inout, int8], arglist ptr[inout, int8])
wsprintfA(arg0 ptr[inout, int8], arg1 ptr[inout, int8])
LoadKeyboardLayoutA(pwszKLID ptr[inout, int8], Flags int32)
ActivateKeyboardLayout(hkl ptr[inout, intptr], Flags int32)
ToUnicodeEx(wVirtKey int32, wScanCode int32, lpKeyState ptr[inout, int8], pwszBuff ptr[inout, int16], cchBuff int32, wFlags int32, dwhkl ptr[inout, intptr])
UnloadKeyboardLayout(hkl ptr[inout, intptr])
GetKeyboardLayoutNameA(pwszKLID ptr[inout, int8])
GetKeyboardLayoutList(nBuff int32, lpList ptr[inout, ptr[inout, intptr]])
GetKeyboardLayout(idThread int32)
GetMouseMovePointsEx(cbSize int32, lppt ptr[inout, intptr], lpptBuf ptr[inout, intptr], nBufPoints int32, resolution int32)
CreateDesktopA(lpszDesktop ptr[inout, int8], lpszDevice ptr[inout, int8], pDevmode ptr[inout, intptr], dwFlags int32, dwDesiredAccess int32, lpsa ptr[inout, intptr])
CreateDesktopExA(lpszDesktop ptr[inout, int8], lpszDevice ptr[inout, int8], pDevmode ptr[inout, intptr], dwFlags int32, dwDesiredAccess int32, lpsa ptr[inout, intptr], ulHeapSize int32, pvoid ptr[inout, array[int8]])
OpenDesktopA(lpszDesktop ptr[inout, int8], dwFlags int32, fInherit int32, dwDesiredAccess int32)
OpenInputDesktop(dwFlags int32, fInherit int32, dwDesiredAccess int32)
EnumDesktopsA(hwinsta ptr[inout, intptr], lpEnumFunc ptr[inout, intptr], lParam int64)
EnumDesktopWindows(hDesktop ptr[inout, intptr], lpfn ptr[inout, intptr], lParam int64)
SwitchDesktop(hDesktop ptr[inout, intptr])
SetThreadDesktop(hDesktop ptr[inout, intptr])
CloseDesktop(hDesktop ptr[inout, intptr])
GetThreadDesktop(dwThreadId int32)
CreateWindowStationA(lpwinsta ptr[inout, int8], dwFlags int32, dwDesiredAccess int32, lpsa ptr[inout, intptr])
OpenWindowStationA(lpszWinSta ptr[inout, int8], fInherit int32, dwDesiredAccess int32)
EnumWindowStationsA(lpEnumFunc ptr[inout, intptr], lParam int64)
CloseWindowStation(hWinSta ptr[inout, intptr])
SetProcessWindowStation(hWinSta ptr[inout, intptr])
GetProcessWindowStation()
SetUserObjectSecurity(hObj HANDLE, pSIRequested ptr[inout, int32], pSID ptr[inout, array[int8]])
GetUserObjectSecurity(hObj HANDLE, pSIRequested ptr[inout, int32], pSID ptr[inout, array[int8]], nLength int32, lpnLengthNeeded ptr[inout, int32])
GetUserObjectInformationA(hObj HANDLE, nIndex int32, pvInfo ptr[inout, array[int8]], nLength int32, lpnLengthNeeded ptr[inout, int32])
SetUserObjectInformationA(hObj HANDLE, nIndex int32, pvInfo ptr[inout, array[int8]], nLength int32)
IsHungAppWindow(hwnd ptr[inout, intptr])
DisableProcessWindowsGhosting()
RegisterWindowMessageA(lpString ptr[inout, int8])
TrackMouseEvent(lpEventTrack ptr[inout, intptr])
DrawEdge(hdc ptr[inout, intptr], qrc ptr[inout, intptr], edge int32, grfFlags int32)
DrawFrameControl(arg0 ptr[inout, intptr], arg1 ptr[inout, intptr], arg2 int32, arg3 int32)
DrawCaption(hwnd ptr[inout, intptr], hdc ptr[inout, intptr], lprect ptr[inout, intptr], flags int32)
DrawAnimatedRects(hwnd ptr[inout, intptr], idAni int32, lprcFrom ptr[inout, intptr], lprcTo ptr[inout, intptr])
GetMessageA(lpMsg ptr[inout, intptr], hWnd ptr[inout, intptr], wMsgFilterMin int32, wMsgFilterMax int32)
TranslateMessage(lpMsg ptr[inout, intptr])
DispatchMessageA(lpMsg ptr[inout, intptr])
SetMessageQueue(cMessagesMax int32)
PeekMessageA(lpMsg ptr[inout, intptr], hWnd ptr[inout, intptr], wMsgFilterMin int32, wMsgFilterMax int32, wRemoveMsg int32)
RegisterHotKey(hWnd ptr[inout, intptr], id int32, fsModifiers int32, vk int32)
UnregisterHotKey(hWnd ptr[inout, intptr], id int32)
SwapMouseButton(fSwap int32)
GetMessagePos()
GetMessageTime()
GetMessageExtraInfo()
GetUnpredictedMessagePos()
IsWow64Message()
SetMessageExtraInfo(lParam int64)
SendMessageA(hWnd ptr[inout, intptr], Msg int32, wParam int64, lParam int64)
SendMessageTimeoutA(hWnd ptr[inout, intptr], Msg int32, wParam int64, lParam int64, fuFlags int32, uTimeout int32, lpdwResult ptr[inout, int64])
SendNotifyMessageA(hWnd ptr[inout, intptr], Msg int32, wParam int64, lParam int64)
SendMessageCallbackA(hWnd ptr[inout, intptr], Msg int32, wParam int64, lParam int64, lpResultCallBack ptr[inout, intptr], dwData int64)
BroadcastSystemMessageExA(flags int32, lpInfo ptr[inout, int32], Msg int32, wParam int64, lParam int64, pbsmInfo ptr[inout, intptr])
BroadcastSystemMessageA(flags int32, lpInfo ptr[inout, int32], Msg int32, wParam int64, lParam int64)
RegisterDeviceNotificationA(hRecipient HANDLE, NotificationFilter ptr[inout, array[int8]], Flags int32)
UnregisterDeviceNotification(Handle ptr[inout, array[int8]])
RegisterPowerSettingNotification(hRecipient HANDLE, PowerSettingGuid ptr[inout, intptr], Flags int32)
UnregisterPowerSettingNotification(Handle ptr[inout, array[int8]])
RegisterSuspendResumeNotification(hRecipient HANDLE, Flags int32)
UnregisterSuspendResumeNotification(Handle ptr[inout, array[int8]])
PostMessageA(hWnd ptr[inout, intptr], Msg int32, wParam int64, lParam int64)
PostThreadMessageA(idThread int32, Msg int32, wParam int64, lParam int64)
AttachThreadInput(idAttach int32, idAttachTo int32, fAttach int32)
ReplyMessage(lResult int64)
WaitMessage()
WaitForInputIdle(hProcess HANDLE, dwMilliseconds int32)
DefWindowProcA(hWnd ptr[inout, intptr], Msg int32, wParam int64, lParam int64)
PostQuitMessage(nExitCode int32)
CallWindowProcA(lpPrevWndFunc ptr[inout, intptr], hWnd ptr[inout, intptr], Msg int32, wParam int64, lParam int64)
InSendMessage()
InSendMessageEx(lpReserved ptr[inout, array[int8]])
GetDoubleClickTime()
SetDoubleClickTime(arg0 int32)
RegisterClassA(lpWndClass ptr[inout, intptr])
UnregisterClassA(lpClassName ptr[inout, int8], hInstance ptr[inout, intptr])
GetClassInfoA(hInstance ptr[inout, intptr], lpClassName ptr[inout, int8], lpWndClass ptr[inout, intptr])
RegisterClassExA(arg0 ptr[inout, intptr])
GetClassInfoExA(hInstance ptr[inout, intptr], lpszClass ptr[inout, int8], lpwcx ptr[inout, intptr])
CreateWindowExA(dwExStyle int32, lpClassName ptr[inout, int8], lpWindowName ptr[inout, int8], dwStyle int32, X int32, Y int32, nWidth int32, nHeight int32, hWndParent ptr[inout, intptr])
IsWindow(hWnd ptr[inout, intptr])
IsMenu(hMenu ptr[inout, intptr])
IsChild(hWndParent ptr[inout, intptr], hWnd ptr[inout, intptr])
DestroyWindow(hWnd ptr[inout, intptr])
ShowWindow(hWnd ptr[inout, intptr], nCmdShow int32)
AnimateWindow(hWnd ptr[inout, intptr], dwTime int32, dwFlags int32)
UpdateLayeredWindow(hWnd ptr[inout, intptr], hdcDst ptr[inout, intptr], pptDst ptr[inout, intptr], psize ptr[inout, intptr], hdcSrc ptr[inout, intptr], pptSrc ptr[inout, intptr], crKey int32, pblend ptr[inout, intptr], dwFlags int32)
UpdateLayeredWindowIndirect(hWnd ptr[inout, intptr], pULWInfo ptr[inout, intptr])
GetLayeredWindowAttributes(hwnd ptr[inout, intptr], pcrKey ptr[inout, int32], pbAlpha ptr[inout, int8], pdwFlags ptr[inout, int32])
PrintWindow(hwnd ptr[inout, intptr], hdcBlt ptr[inout, intptr], nFlags int32)
SetLayeredWindowAttributes(hwnd ptr[inout, intptr], crKey int32, bAlpha int8, dwFlags int32)
ShowWindowAsync(hWnd ptr[inout, intptr], nCmdShow int32)
FlashWindow(hWnd ptr[inout, intptr], bInvert int32)
FlashWindowEx(pfwi ptr[inout, intptr])
ShowOwnedPopups(hWnd ptr[inout, intptr], fShow int32)
OpenIcon(hWnd ptr[inout, intptr])
CloseWindow(hWnd ptr[inout, intptr])
MoveWindow(hWnd ptr[inout, intptr], X int32, Y int32, nWidth int32, nHeight int32, bRepaint int32)
SetWindowPos(hWnd ptr[inout, intptr], hWndInsertAfter ptr[inout, intptr], X int32, Y int32, cx int32, cy int32, uFlags int32)
GetWindowPlacement(hWnd ptr[inout, intptr], lpwndpl ptr[inout, intptr])
SetWindowPlacement(hWnd ptr[inout, intptr], lpwndpl ptr[inout, intptr])
GetWindowDisplayAffinity(hWnd ptr[inout, intptr], pdwAffinity ptr[inout, int32])
SetWindowDisplayAffinity(hWnd ptr[inout, intptr], dwAffinity int32)
BeginDeferWindowPos(nNumWindows int32)
DeferWindowPos(hWinPosInfo ptr[inout, array[int8]], hWnd ptr[inout, intptr], hWndInsertAfter ptr[inout, intptr], x int32, y int32, cx int32, cy int32, uFlags int32)
EndDeferWindowPos(hWinPosInfo ptr[inout, array[int8]])
IsWindowVisible(hWnd ptr[inout, intptr])
IsIconic(hWnd ptr[inout, intptr])
AnyPopup()
BringWindowToTop(hWnd ptr[inout, intptr])
IsZoomed(hWnd ptr[inout, intptr])
CreateDialogParamA(hInstance ptr[inout, intptr], lpTemplateName ptr[inout, int8], hWndParent ptr[inout, intptr], lpDialogFunc ptr[inout, intptr], dwInitParam int64)
CreateDialogIndirectParamA(hInstance ptr[inout, intptr], lpTemplate ptr[inout, intptr], hWndParent ptr[inout, intptr], lpDialogFunc ptr[inout, intptr], dwInitParam int64)
DialogBoxParamA(hInstance ptr[inout, intptr], lpTemplateName ptr[inout, int8], hWndParent ptr[inout, intptr], lpDialogFunc ptr[inout, intptr], dwInitParam int64)
DialogBoxIndirectParamA(hInstance ptr[inout, intptr], hDialogTemplate ptr[inout, intptr], hWndParent ptr[inout, intptr], lpDialogFunc ptr[inout, intptr], dwInitParam int64)
EndDialog(hDlg ptr[inout, intptr], nResult int64)
GetDlgItem(hDlg ptr[inout, intptr], nIDDlgItem int32)
SetDlgItemInt(hDlg ptr[inout, intptr], nIDDlgItem int32, uValue int32, bSigned int32)
GetDlgItemInt(hDlg ptr[inout, intptr], nIDDlgItem int32, lpTranslated ptr[inout, int32], bSigned int32)
SetDlgItemTextA(hDlg ptr[inout, intptr], nIDDlgItem int32, lpString ptr[inout, int8])
GetDlgItemTextA(hDlg ptr[inout, intptr], nIDDlgItem int32, lpString ptr[inout, int8], cchMax int32)
CheckDlgButton(hDlg ptr[inout, intptr], nIDButton int32, uCheck int32)
CheckRadioButton(hDlg ptr[inout, intptr], nIDFirstButton int32, nIDLastButton int32, nIDCheckButton int32)
IsDlgButtonChecked(hDlg ptr[inout, intptr], nIDButton int32)
SendDlgItemMessageA(hDlg ptr[inout, intptr], nIDDlgItem int32, Msg int32, wParam int64, lParam int64)
GetNextDlgGroupItem(hDlg ptr[inout, intptr], hCtl ptr[inout, intptr], bPrevious int32)
GetNextDlgTabItem(hDlg ptr[inout, intptr], hCtl ptr[inout, intptr], bPrevious int32)
GetDlgCtrlID(hWnd ptr[inout, intptr])
GetDialogBaseUnits()
DefDlgProcA(hDlg ptr[inout, intptr], Msg int32, wParam int64, lParam int64)
CallMsgFilterA(lpMsg ptr[inout, intptr], nCode int32)
OpenClipboard(hWndNewOwner ptr[inout, intptr])
CloseClipboard()
GetClipboardSequenceNumber()
GetClipboardOwner()
SetClipboardViewer(hWndNewViewer ptr[inout, intptr])
GetClipboardViewer()
ChangeClipboardChain(hWndRemove ptr[inout, intptr], hWndNewNext ptr[inout, intptr])
SetClipboardData(uFormat int32, hMem HANDLE) HANDLE
GetClipboardData(uFormat int32) HANDLE
RegisterClipboardFormatA(lpszFormat ptr[inout, int8])
CountClipboardFormats()
EnumClipboardFormats(format int32)
GetClipboardFormatNameA(format int32, lpszFormatName ptr[inout, int8], cchMaxCount int32)
EmptyClipboard()
IsClipboardFormatAvailable(format int32)
GetPriorityClipboardFormat(paFormatPriorityList ptr[inout, int32], cFormats int32)
GetOpenClipboardWindow()
AddClipboardFormatListener(hwnd ptr[inout, intptr])
RemoveClipboardFormatListener(hwnd ptr[inout, intptr])
GetUpdatedClipboardFormats(lpuiFormats ptr[inout, int32], cFormats int32, pcFormatsOut ptr[inout, int32])
CharToOemA(pSrc ptr[inout, int8], pDst ptr[inout, int8])
OemToCharA(pSrc ptr[inout, int8], pDst ptr[inout, int8])
CharToOemBuffA(lpszSrc ptr[inout, int8], lpszDst ptr[inout, int8], cchDstLength int32)
OemToCharBuffA(lpszSrc ptr[inout, int8], lpszDst ptr[inout, int8], cchDstLength int32)
CharUpperA(lpsz ptr[inout, int8])
CharUpperBuffA(lpsz ptr[inout, int8], cchLength int32)
CharLowerA(lpsz ptr[inout, int8])
CharLowerBuffA(lpsz ptr[inout, int8], cchLength int32)
CharNextA(lpsz ptr[inout, int8])
CharPrevA(lpszStart ptr[inout, int8], lpszCurrent ptr[inout, int8])
CharNextExA(CodePage int16, lpCurrentChar ptr[inout, int8], dwFlags int32)
CharPrevExA(CodePage int16, lpStart ptr[inout, int8], lpCurrentChar ptr[inout, int8], dwFlags int32)
IsCharAlphaA(ch int8)
IsCharAlphaNumericA(ch int8)
IsCharUpperA(ch int8)
IsCharLowerA(ch int8)
SetFocus(hWnd ptr[inout, intptr])
GetActiveWindow()
GetFocus()
GetKBCodePage()
GetKeyState(nVirtKey int32)
GetAsyncKeyState(vKey int32)
GetKeyboardState(lpKeyState ptr[inout, int8])
SetKeyboardState(lpKeyState ptr[inout, int8])
GetKeyNameTextA(lParam int32, lpString ptr[inout, int8], cchSize int32)
GetKeyboardType(nTypeFlag int32)
ToAscii(uVirtKey int32, uScanCode int32, lpKeyState ptr[inout, int8], lpChar ptr[inout, int16], uFlags int32)
ToAsciiEx(uVirtKey int32, uScanCode int32, lpKeyState ptr[inout, int8], lpChar ptr[inout, int16], uFlags int32, dwhkl ptr[inout, intptr])
ToUnicode(wVirtKey int32, wScanCode int32, lpKeyState ptr[inout, int8], pwszBuff ptr[inout, int16], cchBuff int32, wFlags int32)
OemKeyScan(wOemChar int16)
VkKeyScanA(ch int8)
VkKeyScanExA(ch int8, dwhkl ptr[inout, intptr])
keybd_event(bVk int8, bScan int8, dwFlags int32, dwExtraInfo int64)
mouse_event(dwFlags int32, dx int32, dy int32, dwData int32, dwExtraInfo int64)
SendInput(cInputs int32, pInputs ptr[inout, intptr], cbSize int32)
GetTouchInputInfo(hTouchInput ptr[inout, intptr], cInputs int32, pInputs ptr[inout, intptr], cbSize int32)
CloseTouchInputHandle(hTouchInput ptr[inout, intptr])
RegisterTouchWindow(hwnd ptr[inout, intptr], ulFlags int32)
UnregisterTouchWindow(hwnd ptr[inout, intptr])
IsTouchWindow(hwnd ptr[inout, intptr], pulFlags ptr[inout, int32])
InitializeTouchInjection(maxCount int32, dwMode int32)
InjectTouchInput(count int32, contacts ptr[inout, intptr])
GetPointerType(pointerId int32, pointerType ptr[inout, int32])
GetPointerCursorId(pointerId int32, cursorId ptr[inout, int32])
GetPointerInfo(pointerId int32, pointerInfo ptr[inout, intptr])
GetPointerInfoHistory(pointerId int32, entriesCount ptr[inout, int32], pointerInfo ptr[inout, intptr])
GetPointerFrameInfo(pointerId int32, pointerCount ptr[inout, int32], pointerInfo ptr[inout, intptr])
GetPointerFrameInfoHistory(pointerId int32, entriesCount ptr[inout, int32], pointerCount ptr[inout, int32], pointerInfo ptr[inout, intptr])
GetPointerTouchInfo(pointerId int32, touchInfo ptr[inout, intptr])
GetPointerTouchInfoHistory(pointerId int32, entriesCount ptr[inout, int32], touchInfo ptr[inout, intptr])
GetPointerFrameTouchInfo(pointerId int32, pointerCount ptr[inout, int32], touchInfo ptr[inout, intptr])
GetPointerFrameTouchInfoHistory(pointerId int32, entriesCount ptr[inout, int32], pointerCount ptr[inout, int32], touchInfo ptr[inout, intptr])
GetPointerPenInfo(pointerId int32, penInfo ptr[inout, intptr])
GetPointerPenInfoHistory(pointerId int32, entriesCount ptr[inout, int32], penInfo ptr[inout, intptr])
GetPointerFramePenInfo(pointerId int32, pointerCount ptr[inout, int32], penInfo ptr[inout, intptr])
GetPointerFramePenInfoHistory(pointerId int32, entriesCount ptr[inout, int32], pointerCount ptr[inout, int32], penInfo ptr[inout, intptr])
SkipPointerFrameMessages(pointerId int32)
RegisterPointerInputTarget(hwnd ptr[inout, intptr], pointerType int32)
UnregisterPointerInputTarget(hwnd ptr[inout, intptr], pointerType int32)
RegisterPointerInputTargetEx(hwnd ptr[inout, intptr], pointerType int32, fObserve int32)
UnregisterPointerInputTargetEx(hwnd ptr[inout, intptr], pointerType int32)
EnableMouseInPointer(fEnable int32)
IsMouseInPointerEnabled()
RegisterTouchHitTestingWindow(hwnd ptr[inout, intptr], value int32)
EvaluateProximityToRect(controlBoundingBox ptr[inout, intptr], pHitTestingInput ptr[inout, intptr], pProximityEval ptr[inout, intptr])
EvaluateProximityToPolygon(numVertices int32, controlPolygon ptr[inout, intptr], pHitTestingInput ptr[inout, intptr], pProximityEval ptr[inout, intptr])
PackTouchHitTestingProximityEvaluation(pHitTestingInput ptr[inout, intptr], pProximityEval ptr[inout, intptr])
GetWindowFeedbackSetting(hwnd ptr[inout, intptr], feedback int32, dwFlags int32, pSize ptr[inout, int32], config ptr[inout, array[int8]])
SetWindowFeedbackSetting(hwnd ptr[inout, intptr], feedback int32, dwFlags int32, size int32, configuration ptr[inout, array[int8]])
GetPointerInputTransform(pointerId int32, historyCount int32, inputTransform ptr[inout, intptr])
GetLastInputInfo(plii ptr[inout, intptr])
MapVirtualKeyA(uCode int32, uMapType int32)
MapVirtualKeyExA(uCode int32, uMapType int32, dwhkl ptr[inout, intptr])
GetInputState()
GetQueueStatus(flags int32)
GetCapture()
SetCapture(hWnd ptr[inout, intptr])
ReleaseCapture()
MsgWaitForMultipleObjects(nCount int32, pHandles ptr[inout, ptr[inout, array[int8]]], fWaitAll int32, dwMilliseconds int32, dwWakeMask int32)
MsgWaitForMultipleObjectsEx(nCount int32, pHandles ptr[inout, ptr[inout, array[int8]]], dwMilliseconds int32, dwWakeMask int32, dwFlags int32)
SetTimer(hWnd ptr[inout, intptr], nIDEvent int64, uElapse int32, lpTimerFunc ptr[inout, intptr])
SetCoalescableTimer(hWnd ptr[inout, intptr], nIDEvent int64, uElapse int32, lpTimerFunc ptr[inout, intptr], uToleranceDelay int32)
KillTimer(hWnd ptr[inout, intptr], uIDEvent int64)
IsWindowUnicode(hWnd ptr[inout, intptr])
EnableWindow(hWnd ptr[inout, intptr], bEnable int32)
IsWindowEnabled(hWnd ptr[inout, intptr])
LoadAcceleratorsA(hInstance ptr[inout, intptr], lpTableName ptr[inout, int8])
CreateAcceleratorTableA(paccel ptr[inout, intptr], cAccel int32)
DestroyAcceleratorTable(hAccel ptr[inout, intptr])
CopyAcceleratorTableA(hAccelSrc ptr[inout, intptr], lpAccelDst ptr[inout, intptr], cAccelEntries int32)
TranslateAcceleratorA(hWnd ptr[inout, intptr], hAccTable ptr[inout, intptr], lpMsg ptr[inout, intptr])
GetSystemMetrics(nIndex int32)
GetSystemMetricsForDpi(nIndex int32, dpi int32)
LoadMenuA(hInstance ptr[inout, intptr], lpMenuName ptr[inout, int8])
LoadMenuIndirectA(lpMenuTemplate ptr[inout, array[int8]])
GetMenu(hWnd ptr[inout, intptr])
SetMenu(hWnd ptr[inout, intptr], hMenu ptr[inout, intptr])
ChangeMenuA(hMenu ptr[inout, intptr], cmd int32, lpszNewItem ptr[inout, int8], cmdInsert int32, flags int32)
HiliteMenuItem(hWnd ptr[inout, intptr], hMenu ptr[inout, intptr], uIDHiliteItem int32, uHilite int32)
GetMenuStringA(hMenu ptr[inout, intptr], uIDItem int32, lpString ptr[inout, int8], cchMax int32, flags int32)
GetMenuState(hMenu ptr[inout, intptr], uId int32, uFlags int32)
DrawMenuBar(hWnd ptr[inout, intptr])
GetSystemMenu(hWnd ptr[inout, intptr], bRevert int32)
CreateMenu()
CreatePopupMenu()
DestroyMenu(hMenu ptr[inout, intptr])
CheckMenuItem(hMenu ptr[inout, intptr], uIDCheckItem int32, uCheck int32)
EnableMenuItem(hMenu ptr[inout, intptr], uIDEnableItem int32, uEnable int32)
GetSubMenu(hMenu ptr[inout, intptr], nPos int32)
GetMenuItemID(hMenu ptr[inout, intptr], nPos int32)
GetMenuItemCount(hMenu ptr[inout, intptr])
InsertMenuA(hMenu ptr[inout, intptr], uPosition int32, uFlags int32, uIDNewItem int64, lpNewItem ptr[inout, int8])
AppendMenuA(hMenu ptr[inout, intptr], uFlags int32, uIDNewItem int64, lpNewItem ptr[inout, int8])
ModifyMenuA(hMnu ptr[inout, intptr], uPosition int32, uFlags int32, uIDNewItem int64, lpNewItem ptr[inout, int8])
RemoveMenu(hMenu ptr[inout, intptr], uPosition int32, uFlags int32)
DeleteMenu(hMenu ptr[inout, intptr], uPosition int32, uFlags int32)
SetMenuItemBitmaps(hMenu ptr[inout, intptr], uPosition int32, uFlags int32, hBitmapUnchecked ptr[inout, intptr], hBitmapChecked ptr[inout, intptr])
GetMenuCheckMarkDimensions()
TrackPopupMenu(hMenu ptr[inout, intptr], uFlags int32, x int32, y int32, nReserved int32, hWnd ptr[inout, intptr], prcRect ptr[inout, intptr])
TrackPopupMenuEx(hMenu ptr[inout, intptr], uFlags int32, x int32, y int32, hwnd ptr[inout, intptr], lptpm ptr[inout, intptr])
CalculatePopupWindowPosition(anchorPoint ptr[inout, intptr], windowSize ptr[inout, intptr], flags int32, excludeRect ptr[inout, intptr], popupWindowPosition ptr[inout, intptr])
GetMenuInfo(arg0 ptr[inout, intptr], arg1 ptr[inout, intptr])
SetMenuInfo(arg0 ptr[inout, intptr], arg1 ptr[inout, intptr])
EndMenu()
InsertMenuItemA(hmenu ptr[inout, intptr], item int32, fByPosition int32, lpmi ptr[inout, intptr])
GetMenuItemInfoA(hmenu ptr[inout, intptr], item int32, fByPosition int32, lpmii ptr[inout, intptr])
SetMenuItemInfoA(hmenu ptr[inout, intptr], item int32, fByPositon int32, lpmii ptr[inout, intptr])
GetMenuDefaultItem(hMenu ptr[inout, intptr], fByPos int32, gmdiFlags int32)
SetMenuDefaultItem(hMenu ptr[inout, intptr], uItem int32, fByPos int32)
GetMenuItemRect(hWnd ptr[inout, intptr], hMenu ptr[inout, intptr], uItem int32, lprcItem ptr[inout, intptr])
MenuItemFromPoint(hWnd ptr[inout, intptr], hMenu ptr[inout, intptr], ptScreen intptr)
DragObject(hwndParent ptr[inout, intptr], hwndFrom ptr[inout, intptr], fmt int32, data int64, hcur ptr[inout, intptr])
DragDetect(hwnd ptr[inout, intptr], pt intptr)
DrawIcon(hDC ptr[inout, intptr], X int32, Y int32, hIcon ptr[inout, intptr])
DrawTextA(hdc ptr[inout, intptr], lpchText ptr[inout, int8], cchText int32, lprc ptr[inout, intptr], format int32)
DrawTextExA(hdc ptr[inout, intptr], lpchText ptr[inout, int8], cchText int32, lprc ptr[inout, intptr], format int32, lpdtp ptr[inout, intptr])
GrayStringA(hDC ptr[inout, intptr], hBrush ptr[inout, intptr], lpOutputFunc ptr[inout, intptr], lpData int64, nCount int32, X int32, Y int32, nWidth int32, nHeight int32)
DrawStateA(hdc ptr[inout, intptr], hbrFore ptr[inout, intptr], qfnCallBack ptr[inout, intptr], lData int64, wData int64, x int32, y int32, cx int32, cy int32)
TabbedTextOutA(hdc ptr[inout, intptr], x int32, y int32, lpString ptr[inout, int8], chCount int32, nTabPositions int32, lpnTabStopPositions ptr[inout, int32], nTabOrigin int32)
GetTabbedTextExtentA(hdc ptr[inout, intptr], lpString ptr[inout, int8], chCount int32, nTabPositions int32, lpnTabStopPositions ptr[inout, int32])
UpdateWindow(hWnd ptr[inout, intptr])
SetActiveWindow(hWnd ptr[inout, intptr])
GetForegroundWindow()
PaintDesktop(hdc ptr[inout, intptr])
SwitchToThisWindow(hwnd ptr[inout, intptr], fUnknown int32)
SetForegroundWindow(hWnd ptr[inout, intptr])
AllowSetForegroundWindow(dwProcessId int32)
LockSetForegroundWindow(uLockCode int32)
WindowFromDC(hDC ptr[inout, intptr])
GetDC(hWnd ptr[inout, intptr])
GetDCEx(hWnd ptr[inout, intptr], hrgnClip ptr[inout, intptr], flags int32)
GetWindowDC(hWnd ptr[inout, intptr])
ReleaseDC(hWnd ptr[inout, intptr], hDC ptr[inout, intptr])
BeginPaint(hWnd ptr[inout, intptr], lpPaint ptr[inout, intptr])
EndPaint(hWnd ptr[inout, intptr], lpPaint ptr[inout, intptr])
GetUpdateRect(hWnd ptr[inout, intptr], lpRect ptr[inout, intptr], bErase int32)
GetUpdateRgn(hWnd ptr[inout, intptr], hRgn ptr[inout, intptr], bErase int32)
SetWindowRgn(hWnd ptr[inout, intptr], hRgn ptr[inout, intptr], bRedraw int32)
GetWindowRgn(hWnd ptr[inout, intptr], hRgn ptr[inout, intptr])
GetWindowRgnBox(hWnd ptr[inout, intptr], lprc ptr[inout, intptr])
ExcludeUpdateRgn(hDC ptr[inout, intptr], hWnd ptr[inout, intptr])
InvalidateRect(hWnd ptr[inout, intptr], lpRect ptr[inout, intptr], bErase int32)
ValidateRect(hWnd ptr[inout, intptr], lpRect ptr[inout, intptr])
InvalidateRgn(hWnd ptr[inout, intptr], hRgn ptr[inout, intptr], bErase int32)
ValidateRgn(hWnd ptr[inout, intptr], hRgn ptr[inout, intptr])
RedrawWindow(hWnd ptr[inout, intptr], lprcUpdate ptr[inout, intptr], hrgnUpdate ptr[inout, intptr], flags int32)
LockWindowUpdate(hWndLock ptr[inout, intptr])
ScrollWindow(hWnd ptr[inout, intptr], XAmount int32, YAmount int32, lpRect ptr[inout, intptr], lpClipRect ptr[inout, intptr])
ScrollDC(hDC ptr[inout, intptr], dx int32, dy int32, lprcScroll ptr[inout, intptr], lprcClip ptr[inout, intptr], hrgnUpdate ptr[inout, intptr], lprcUpdate ptr[inout, intptr])
ScrollWindowEx(hWnd ptr[inout, intptr], dx int32, dy int32, prcScroll ptr[inout, intptr], prcClip ptr[inout, intptr], hrgnUpdate ptr[inout, intptr], prcUpdate ptr[inout, intptr], flags int32)
SetScrollPos(hWnd ptr[inout, intptr], nBar int32, nPos int32, bRedraw int32)
GetScrollPos(hWnd ptr[inout, intptr], nBar int32)
SetScrollRange(hWnd ptr[inout, intptr], nBar int32, nMinPos int32, nMaxPos int32, bRedraw int32)
GetScrollRange(hWnd ptr[inout, intptr], nBar int32, lpMinPos ptr[inout, int32], lpMaxPos ptr[inout, int32])
ShowScrollBar(hWnd ptr[inout, intptr], wBar int32, bShow int32)
EnableScrollBar(hWnd ptr[inout, intptr], wSBflags int32, wArrows int32)
SetPropA(hWnd ptr[inout, intptr], lpString ptr[inout, int8], hData HANDLE)
GetPropA(hWnd ptr[inout, intptr], lpString ptr[inout, int8]) HANDLE
RemovePropA(hWnd ptr[inout, intptr], lpString ptr[inout, int8]) HANDLE
EnumPropsExA(hWnd ptr[inout, intptr], lpEnumFunc ptr[inout, intptr], lParam int64)
EnumPropsA(hWnd ptr[inout, intptr], lpEnumFunc ptr[inout, intptr])
SetWindowTextA(hWnd ptr[inout, intptr], lpString ptr[inout, int8])
GetWindowTextA(hWnd ptr[inout, intptr], lpString ptr[inout, int8], nMaxCount int32)
GetWindowTextLengthA(hWnd ptr[inout, intptr])
GetClientRect(hWnd ptr[inout, intptr], lpRect ptr[inout, intptr])
GetWindowRect(hWnd ptr[inout, intptr], lpRect ptr[inout, intptr])
AdjustWindowRect(lpRect ptr[inout, intptr], dwStyle int32, bMenu int32)
AdjustWindowRectEx(lpRect ptr[inout, intptr], dwStyle int32, bMenu int32, dwExStyle int32)
AdjustWindowRectExForDpi(lpRect ptr[inout, intptr], dwStyle int32, bMenu int32, dwExStyle int32, dpi int32)
SetWindowContextHelpId(arg0 ptr[inout, intptr], arg1 int32)
GetWindowContextHelpId(arg0 ptr[inout, intptr])
SetMenuContextHelpId(arg0 ptr[inout, intptr], arg1 int32)
GetMenuContextHelpId(arg0 ptr[inout, intptr])
MessageBoxA(hWnd ptr[inout, intptr], lpText ptr[inout, int8], lpCaption ptr[inout, int8], uType int32)
MessageBoxExA(hWnd ptr[inout, intptr], lpText ptr[inout, int8], lpCaption ptr[inout, int8], uType int32, wLanguageId int16)
MessageBoxIndirectA(lpmbp ptr[inout, intptr])
MessageBeep(uType int32)
ShowCursor(bShow int32)
SetCursorPos(X int32, Y int32)
SetPhysicalCursorPos(X int32, Y int32)
SetCursor(hCursor ptr[inout, intptr])
GetCursorPos(lpPoint ptr[inout, intptr])
GetPhysicalCursorPos(lpPoint ptr[inout, intptr])
GetClipCursor(lpRect ptr[inout, intptr])
GetCursor()
CreateCaret(hWnd ptr[inout, intptr], hBitmap ptr[inout, intptr], nWidth int32, nHeight int32)
GetCaretBlinkTime()
SetCaretBlinkTime(uMSeconds int32)
DestroyCaret()
HideCaret(hWnd ptr[inout, intptr])
ShowCaret(hWnd ptr[inout, intptr])
SetCaretPos(X int32, Y int32)
GetCaretPos(lpPoint ptr[inout, intptr])
ClientToScreen(hWnd ptr[inout, intptr], lpPoint ptr[inout, intptr])
ScreenToClient(hWnd ptr[inout, intptr], lpPoint ptr[inout, intptr])
LogicalToPhysicalPoint(hWnd ptr[inout, intptr], lpPoint ptr[inout, intptr])
PhysicalToLogicalPoint(hWnd ptr[inout, intptr], lpPoint ptr[inout, intptr])
LogicalToPhysicalPointForPerMonitorDPI(hWnd ptr[inout, intptr], lpPoint ptr[inout, intptr])
PhysicalToLogicalPointForPerMonitorDPI(hWnd ptr[inout, intptr], lpPoint ptr[inout, intptr])
MapWindowPoints(hWndFrom ptr[inout, intptr], hWndTo ptr[inout, intptr], lpPoints ptr[inout, intptr], cPoints int32)
WindowFromPoint(Point intptr)
WindowFromPhysicalPoint(Point intptr)
ChildWindowFromPoint(hWndParent ptr[inout, intptr], Point intptr)
ClipCursor(lpRect ptr[inout, intptr])
ChildWindowFromPointEx(hwnd ptr[inout, intptr], pt intptr, flags int32)
GetSysColor(nIndex int32)
GetSysColorBrush(nIndex int32)
SetSysColors(cElements int32, lpaElements ptr[inout, int32], lpaRgbValues ptr[inout, int32])
DrawFocusRect(hDC ptr[inout, intptr], lprc ptr[inout, intptr])
FillRect(hDC ptr[inout, intptr], lprc ptr[inout, intptr], hbr ptr[inout, intptr])
FrameRect(hDC ptr[inout, intptr], lprc ptr[inout, intptr], hbr ptr[inout, intptr])
InvertRect(hDC ptr[inout, intptr], lprc ptr[inout, intptr])
SetRect(lprc ptr[inout, intptr], xLeft int32, yTop int32, xRight int32, yBottom int32)
SetRectEmpty(lprc ptr[inout, intptr])
CopyRect(lprcDst ptr[inout, intptr], lprcSrc ptr[inout, intptr])
InflateRect(lprc ptr[inout, intptr], dx int32, dy int32)
IntersectRect(lprcDst ptr[inout, intptr], lprcSrc1 ptr[inout, intptr], lprcSrc2 ptr[inout, intptr])
UnionRect(lprcDst ptr[inout, intptr], lprcSrc1 ptr[inout, intptr], lprcSrc2 ptr[inout, intptr])
SubtractRect(lprcDst ptr[inout, intptr], lprcSrc1 ptr[inout, intptr], lprcSrc2 ptr[inout, intptr])
OffsetRect(lprc ptr[inout, intptr], dx int32, dy int32)
IsRectEmpty(lprc ptr[inout, intptr])
EqualRect(lprc1 ptr[inout, intptr], lprc2 ptr[inout, intptr])
PtInRect(lprc ptr[inout, intptr], pt intptr)
GetWindowWord(hWnd ptr[inout, intptr], nIndex int32)
SetWindowWord(hWnd ptr[inout, intptr], nIndex int32, wNewWord int16)
GetWindowLongA(hWnd ptr[inout, intptr], nIndex int32)
SetWindowLongA(hWnd ptr[inout, intptr], nIndex int32, dwNewLong int32)
GetWindowLongPtrA(hWnd ptr[inout, intptr], nIndex int32)
SetWindowLongPtrA(hWnd ptr[inout, intptr], nIndex int32, dwNewLong int64)
GetClassWord(hWnd ptr[inout, intptr], nIndex int32)
SetClassWord(hWnd ptr[inout, intptr], nIndex int32, wNewWord int16)
GetClassLongA(hWnd ptr[inout, intptr], nIndex int32)
SetClassLongA(hWnd ptr[inout, intptr], nIndex int32, dwNewLong int32)
GetClassLongPtrA(hWnd ptr[inout, intptr], nIndex int32)
SetClassLongPtrA(hWnd ptr[inout, intptr], nIndex int32, dwNewLong int64)
GetProcessDefaultLayout(pdwDefaultLayout ptr[inout, int32])
SetProcessDefaultLayout(dwDefaultLayout int32)
GetDesktopWindow()
GetParent(hWnd ptr[inout, intptr])
SetParent(hWndChild ptr[inout, intptr], hWndNewParent ptr[inout, intptr])
EnumChildWindows(hWndParent ptr[inout, intptr], lpEnumFunc ptr[inout, intptr], lParam int64)
FindWindowA(lpClassName ptr[inout, int8], lpWindowName ptr[inout, int8])
FindWindowExA(hWndParent ptr[inout, intptr], hWndChildAfter ptr[inout, intptr], lpszClass ptr[inout, int8], lpszWindow ptr[inout, int8])
GetShellWindow()
RegisterShellHookWindow(hwnd ptr[inout, intptr])
DeregisterShellHookWindow(hwnd ptr[inout, intptr])
EnumWindows(lpEnumFunc ptr[inout, intptr], lParam int64)
EnumThreadWindows(dwThreadId int32, lpfn ptr[inout, intptr], lParam int64)
GetClassNameA(hWnd ptr[inout, intptr], lpClassName ptr[inout, int8], nMaxCount int32)
GetTopWindow(hWnd ptr[inout, intptr])
GetWindowThreadProcessId(hWnd ptr[inout, intptr], lpdwProcessId ptr[inout, int32])
IsGUIThread(bConvert int32)
GetLastActivePopup(hWnd ptr[inout, intptr])
GetWindow(hWnd ptr[inout, intptr], uCmd int32)
SetWindowsHookA(nFilterType int32, pfnFilterProc ptr[inout, intptr])
UnhookWindowsHook(nCode int32, pfnFilterProc ptr[inout, intptr])
SetWindowsHookExA(idHook int32, lpfn ptr[inout, intptr], hmod ptr[inout, intptr], dwThreadId int32)
UnhookWindowsHookEx(hhk ptr[inout, intptr])
CallNextHookEx(hhk ptr[inout, intptr], nCode int32, wParam int64, lParam int64)
CheckMenuRadioItem(hmenu ptr[inout, intptr], first int32, last int32, check int32, flags int32)
LoadBitmapA(hInstance ptr[inout, intptr], lpBitmapName ptr[inout, int8])
LoadCursorA(hInstance ptr[inout, intptr], lpCursorName ptr[inout, int8])
LoadCursorFromFileA(lpFileName ptr[inout, int8])
CreateCursor(hInst ptr[inout, intptr], xHotSpot int32, yHotSpot int32, nWidth int32, nHeight int32, pvANDPlane ptr[inout, array[int8]], pvXORPlane ptr[inout, array[int8]])
DestroyCursor(hCursor ptr[inout, intptr])
SetSystemCursor(hcur ptr[inout, intptr], id int32)
LoadIconA(hInstance ptr[inout, intptr], lpIconName ptr[inout, int8])
PrivateExtractIconsA(szFileName ptr[inout, int8], nIconIndex int32, cxIcon int32, cyIcon int32, phicon ptr[inout, ptr[inout, intptr]], piconid ptr[inout, int32], nIcons int32, flags int32)
CreateIcon(hInstance ptr[inout, intptr], nWidth int32, nHeight int32, cPlanes int8, cBitsPixel int8, lpbANDbits ptr[inout, int8], lpbXORbits ptr[inout, int8])
DestroyIcon(hIcon ptr[inout, intptr])
LookupIconIdFromDirectory(presbits ptr[inout, int8], fIcon int32)
LookupIconIdFromDirectoryEx(presbits ptr[inout, int8], fIcon int32, cxDesired int32, cyDesired int32, Flags int32)
CreateIconFromResource(presbits ptr[inout, int8], dwResSize int32, fIcon int32, dwVer int32)
CreateIconFromResourceEx(presbits ptr[inout, int8], dwResSize int32, fIcon int32, dwVer int32, cxDesired int32, cyDesired int32, Flags int32)
LoadImageA(hInst ptr[inout, intptr], name ptr[inout, int8], type int32, cx int32, cy int32, fuLoad int32) HANDLE
CopyImage(h HANDLE, type int32, cx int32, cy int32, flags int32) HANDLE
DrawIconEx(hdc ptr[inout, intptr], xLeft int32, yTop int32, hIcon ptr[inout, intptr], cxWidth int32, cyWidth int32, istepIfAniCur int32, hbrFlickerFreeDraw ptr[inout, intptr], diFlags int32)
CreateIconIndirect(piconinfo ptr[inout, intptr])
CopyIcon(hIcon ptr[inout, intptr])
GetIconInfo(hIcon ptr[inout, intptr], piconinfo ptr[inout, intptr])
GetIconInfoExA(hicon ptr[inout, intptr], piconinfo ptr[inout, intptr])
IsDialogMessageA(hDlg ptr[inout, intptr], lpMsg ptr[inout, intptr])
MapDialogRect(hDlg ptr[inout, intptr], lpRect ptr[inout, intptr])
DlgDirListA(hDlg ptr[inout, intptr], lpPathSpec ptr[inout, int8], nIDListBox int32, nIDStaticPath int32, uFileType int32)
DlgDirSelectExA(hwndDlg ptr[inout, intptr], lpString ptr[inout, int8], chCount int32, idListBox int32)
DlgDirListComboBoxA(hDlg ptr[inout, intptr], lpPathSpec ptr[inout, int8], nIDComboBox int32, nIDStaticPath int32, uFiletype int32)
DlgDirSelectComboBoxExA(hwndDlg ptr[inout, intptr], lpString ptr[inout, int8], cchOut int32, idComboBox int32)
SetScrollInfo(hwnd ptr[inout, intptr], nBar int32, lpsi ptr[inout, intptr], redraw int32)
GetScrollInfo(hwnd ptr[inout, intptr], nBar int32, lpsi ptr[inout, intptr])
DefFrameProcA(hWnd ptr[inout, intptr], hWndMDIClient ptr[inout, intptr], uMsg int32, wParam int64, lParam int64)
DefMDIChildProcA(hWnd ptr[inout, intptr], uMsg int32, wParam int64, lParam int64)
TranslateMDISysAccel(hWndClient ptr[inout, intptr], lpMsg ptr[inout, intptr])
ArrangeIconicWindows(hWnd ptr[inout, intptr])
CreateMDIWindowA(lpClassName ptr[inout, int8], lpWindowName ptr[inout, int8], dwStyle int32, X int32, Y int32, nWidth int32, nHeight int32, hWndParent ptr[inout, intptr], hInstance ptr[inout, intptr])
TileWindows(hwndParent ptr[inout, intptr], wHow int32, lpRect ptr[inout, intptr], cKids int32, lpKids ptr[inout, ptr[inout, intptr]])
CascadeWindows(hwndParent ptr[inout, intptr], wHow int32, lpRect ptr[inout, intptr], cKids int32, lpKids ptr[inout, ptr[inout, intptr]])
WinHelpA(hWndMain ptr[inout, intptr], lpszHelp ptr[inout, int8], uCommand int32, dwData int64)
GetGuiResources(hProcess HANDLE, uiFlags int32)
ChangeDisplaySettingsA(lpDevMode ptr[inout, intptr], dwFlags int32)
ChangeDisplaySettingsExA(lpszDeviceName ptr[inout, int8], lpDevMode ptr[inout, intptr], hwnd ptr[inout, intptr], dwflags int32, lParam ptr[inout, array[int8]])
EnumDisplaySettingsA(lpszDeviceName ptr[inout, int8], iModeNum int32, lpDevMode ptr[inout, intptr])
EnumDisplaySettingsExA(lpszDeviceName ptr[inout, int8], iModeNum int32, lpDevMode ptr[inout, intptr], dwFlags int32)
EnumDisplayDevicesA(lpDevice ptr[inout, int8], iDevNum int32, lpDisplayDevice ptr[inout, intptr], dwFlags int32)
GetDisplayConfigBufferSizes(flags int32, numPathArrayElements ptr[inout, int32], numModeInfoArrayElements ptr[inout, int32])
SetDisplayConfig(numPathArrayElements int32, pathArray ptr[inout, intptr], numModeInfoArrayElements int32, modeInfoArray ptr[inout, intptr], flags int32)
QueryDisplayConfig(flags int32, numPathArrayElements ptr[inout, int32], pathArray ptr[inout, intptr], numModeInfoArrayElements ptr[inout, int32], modeInfoArray ptr[inout, intptr], currentTopologyId ptr[inout, int32])
DisplayConfigGetDeviceInfo(requestPacket ptr[inout, intptr])
DisplayConfigSetDeviceInfo(setPacket ptr[inout, intptr])
SystemParametersInfoA(uiAction int32, uiParam int32, pvParam ptr[inout, array[int8]], fWinIni int32)
SystemParametersInfoForDpi(uiAction int32, uiParam int32, pvParam ptr[inout, array[int8]], fWinIni int32, dpi int32)
SoundSentry()
SetDebugErrorLevel(dwLevel int32)
SetLastErrorEx(dwErrCode int32, dwType int32)
InternalGetWindowText(hWnd ptr[inout, intptr], pString ptr[inout, int16], cchMaxCount int32)
CancelShutdown()
MonitorFromPoint(pt intptr, dwFlags int32)
MonitorFromRect(lprc ptr[inout, intptr], dwFlags int32)
MonitorFromWindow(hwnd ptr[inout, intptr], dwFlags int32)
GetMonitorInfoA(hMonitor ptr[inout, intptr], lpmi ptr[inout, intptr])
EnumDisplayMonitors(hdc ptr[inout, intptr], lprcClip ptr[inout, intptr], lpfnEnum ptr[inout, intptr], dwData int64)
NotifyWinEvent(event int32, hwnd ptr[inout, intptr], idObject int32, idChild int32)
SetWinEventHook(eventMin int32, eventMax int32, hmodWinEventProc ptr[inout, intptr], pfnWinEventProc ptr[inout, intptr], idProcess int32, idThread int32, dwFlags int32)
IsWinEventHookInstalled(event int32)
UnhookWinEvent(hWinEventHook ptr[inout, intptr])
GetGUIThreadInfo(idThread int32, pgui ptr[inout, intptr])
BlockInput(fBlockIt int32)
SetProcessDPIAware()
IsProcessDPIAware()
SetThreadDpiAwarenessContext(dpiContext ptr[inout, intptr])
GetThreadDpiAwarenessContext()
GetWindowDpiAwarenessContext(hwnd ptr[inout, intptr])
GetAwarenessFromDpiAwarenessContext(value ptr[inout, intptr])
AreDpiAwarenessContextsEqual(dpiContextA ptr[inout, intptr], dpiContextB ptr[inout, intptr])
IsValidDpiAwarenessContext(value ptr[inout, intptr])
GetDpiForWindow(hwnd ptr[inout, intptr])
GetDpiForSystem()
EnableNonClientDpiScaling(hwnd ptr[inout, intptr])
InheritWindowMonitor(hwnd ptr[inout, intptr], hwndInherit ptr[inout, intptr])
SetProcessDpiAwarenessContext(value ptr[inout, intptr])
GetWindowModuleFileNameA(hwnd ptr[inout, intptr], pszFileName ptr[inout, int8], cchFileNameMax int32)
GetCursorInfo(pci ptr[inout, intptr])
GetWindowInfo(hwnd ptr[inout, intptr], pwi ptr[inout, intptr])
GetTitleBarInfo(hwnd ptr[inout, intptr], pti ptr[inout, intptr])
GetMenuBarInfo(hwnd ptr[inout, intptr], idObject int32, idItem int32, pmbi ptr[inout, intptr])
GetScrollBarInfo(hwnd ptr[inout, intptr], idObject int32, psbi ptr[inout, intptr])
GetComboBoxInfo(hwndCombo ptr[inout, intptr], pcbi ptr[inout, intptr])
GetAncestor(hwnd ptr[inout, intptr], gaFlags int32)
RealChildWindowFromPoint(hwndParent ptr[inout, intptr], ptParentClientCoords intptr)
RealGetWindowClassA(hwnd ptr[inout, intptr], ptszClassName ptr[inout, int8], cchClassNameMax int32)
GetAltTabInfoA(hwnd ptr[inout, intptr], iItem int32, pati ptr[inout, intptr], pszItemText ptr[inout, int8], cchItemText int32)
GetListBoxInfo(hwnd ptr[inout, intptr])
UserHandleGrantAccess(hUserHandle HANDLE, hJob HANDLE, bGrant int32)
GetRawInputData(hRawInput ptr[inout, intptr], uiCommand int32, pData ptr[inout, array[int8]], pcbSize ptr[inout, int32], cbSizeHeader int32)
GetRawInputDeviceInfoA(hDevice HANDLE, uiCommand int32, pData ptr[inout, array[int8]], pcbSize ptr[inout, int32])
GetRawInputBuffer(pData ptr[inout, intptr], pcbSize ptr[inout, int32], cbSizeHeader int32)
RegisterRawInputDevices(pRawInputDevices ptr[inout, intptr], uiNumDevices int32, cbSize int32)
GetRegisteredRawInputDevices(pRawInputDevices ptr[inout, intptr], puiNumDevices ptr[inout, int32], cbSize int32)
GetRawInputDeviceList(pRawInputDeviceList ptr[inout, intptr], puiNumDevices ptr[inout, int32], cbSize int32)
DefRawInputProc(paRawInput ptr[inout, ptr[inout, intptr]], nInput int32, cbSizeHeader int32)
GetPointerDevices(deviceCount ptr[inout, int32], pointerDevices ptr[inout, intptr])
GetPointerDevice(device HANDLE, pointerDevice ptr[inout, intptr])
GetPointerDeviceProperties(device HANDLE, propertyCount ptr[inout, int32], pointerProperties ptr[inout, intptr])
RegisterPointerDeviceNotifications(window ptr[inout, intptr], notifyRange int32)
GetPointerDeviceRects(device HANDLE, pointerDeviceRect ptr[inout, intptr], displayRect ptr[inout, intptr])
GetPointerDeviceCursors(device HANDLE, cursorCount ptr[inout, int32], deviceCursors ptr[inout, intptr])
GetRawPointerDeviceData(pointerId int32, historyCount int32, propertiesCount int32, pProperties ptr[inout, intptr], pValues ptr[inout, int32])
ChangeWindowMessageFilter(message int32, dwFlag int32)
ChangeWindowMessageFilterEx(hwnd ptr[inout, intptr], message int32, action int32, pChangeFilterStruct ptr[inout, intptr])
GetGestureInfo(hGestureInfo ptr[inout, intptr], pGestureInfo ptr[inout, intptr])
GetGestureExtraArgs(hGestureInfo ptr[inout, intptr], cbExtraArgs int32, pExtraArgs ptr[inout, int8])
CloseGestureInfoHandle(hGestureInfo ptr[inout, intptr])
SetGestureConfig(hwnd ptr[inout, intptr], dwReserved int32, cIDs int32, pGestureConfig ptr[inout, intptr], cbSize int32)
GetGestureConfig(hwnd ptr[inout, intptr], dwReserved int32, dwFlags int32, pcIDs ptr[inout, int32], pGestureConfig ptr[inout, intptr], cbSize int32)
ShutdownBlockReasonCreate(hWnd ptr[inout, intptr], pwszReason ptr[inout, int16])
ShutdownBlockReasonQuery(hWnd ptr[inout, intptr], pwszBuff ptr[inout, int16], pcchBuff ptr[inout, int32])
ShutdownBlockReasonDestroy(hWnd ptr[inout, intptr])
GetCurrentInputMessageSource(inputMessageSource ptr[inout, intptr])
GetCIMSSM(inputMessageSource ptr[inout, intptr])
GetAutoRotationState(pState ptr[inout, int32])
GetDisplayAutoRotationPreferences(pOrientation ptr[inout, int32])
SetDisplayAutoRotationPreferences(orientation int32)
IsImmersiveProcess(hProcess HANDLE)
SetProcessRestrictionExemption(fEnableExemption int32)
GetDateFormatA(Locale int32, dwFlags int32, lpDate ptr[inout, intptr], lpFormat ptr[inout, int8], lpDateStr ptr[inout, int8], cchDate int32)
GetTimeFormatA(Locale int32, dwFlags int32, lpTime ptr[inout, intptr], lpFormat ptr[inout, int8], lpTimeStr ptr[inout, int8], cchTime int32)
GetTimeFormatEx(lpLocaleName ptr[inout, int16], dwFlags int32, lpTime ptr[inout, intptr], lpFormat ptr[inout, int16], lpTimeStr ptr[inout, int16], cchTime int32)
GetDateFormatEx(lpLocaleName ptr[inout, int16], dwFlags int32, lpDate ptr[inout, intptr], lpFormat ptr[inout, int16], lpDateStr ptr[inout, int16], cchDate int32, lpCalendar ptr[inout, int16])
GetDurationFormatEx(lpLocaleName ptr[inout, int16], dwFlags int32, lpDuration ptr[inout, intptr], ullDuration int64, lpFormat ptr[inout, int16], lpDurationStr ptr[inout, int16], cchDuration int32)
CompareStringEx(lpLocaleName ptr[inout, int16], dwCmpFlags int32, lpString1 ptr[inout, int16], cchCount1 int32, lpString2 ptr[inout, int16], cchCount2 int32, lpVersionInformation ptr[inout, intptr], lpReserved ptr[inout, array[int8]], lParam int64)
CompareStringOrdinal(lpString1 ptr[inout, int16], cchCount1 int32, lpString2 ptr[inout, int16], cchCount2 int32, bIgnoreCase int32)
MultiByteToWideChar(CodePage int32, dwFlags int32, lpMultiByteStr ptr[inout, int8], cbMultiByte int32, lpWideCharStr ptr[inout, int16], cchWideChar int32)
WideCharToMultiByte(CodePage int32, dwFlags int32, lpWideCharStr ptr[inout, int16], cchWideChar int32, lpMultiByteStr ptr[inout, int8], cbMultiByte int32, lpDefaultChar ptr[inout, int8], lpUsedDefaultChar ptr[inout, int32])
IsValidCodePage(CodePage int32)
GetACP()
GetOEMCP()
GetCPInfo(CodePage int32, lpCPInfo ptr[inout, intptr])
GetCPInfoExA(CodePage int32, dwFlags int32, lpCPInfoEx ptr[inout, intptr])
CompareStringA(Locale int32, dwCmpFlags int32, lpString1 ptr[inout, int8], cchCount1 int32, lpString2 ptr[inout, int8], cchCount2 int32)
FindNLSString(Locale int32, dwFindNLSStringFlags int32, lpStringSource ptr[inout, int16], cchSource int32, lpStringValue ptr[inout, int16], cchValue int32, pcchFound ptr[inout, int32])
LCMapStringA(Locale int32, dwMapFlags int32, lpSrcStr ptr[inout, int8], cchSrc int32, lpDestStr ptr[inout, int8], cchDest int32)
GetLocaleInfoA(Locale int32, LCType int32, lpLCData ptr[inout, int8], cchData int32)
SetLocaleInfoA(Locale int32, LCType int32, lpLCData ptr[inout, int8])
GetCalendarInfoA(Locale int32, Calendar int32, CalType int32, lpCalData ptr[inout, int8], cchData int32, lpValue ptr[inout, int32])
SetCalendarInfoA(Locale int32, Calendar int32, CalType int32, lpCalData ptr[inout, int8])
IsDBCSLeadByte(TestChar int8)
IsDBCSLeadByteEx(CodePage int32, TestChar int8)
LCIDToLocaleName(Locale int32, lpName ptr[inout, int16], cchName int32, dwFlags int32)
LocaleNameToLCID(lpName ptr[inout, int16], dwFlags int32)
GetDurationFormat(Locale int32, dwFlags int32, lpDuration ptr[inout, intptr], ullDuration int64, lpFormat ptr[inout, int16], lpDurationStr ptr[inout, int16], cchDuration int32)
GetNumberFormatA(Locale int32, dwFlags int32, lpValue ptr[inout, int8], lpFormat ptr[inout, intptr], lpNumberStr ptr[inout, int8], cchNumber int32)
GetCurrencyFormatA(Locale int32, dwFlags int32, lpValue ptr[inout, int8], lpFormat ptr[inout, intptr], lpCurrencyStr ptr[inout, int8], cchCurrency int32)
EnumCalendarInfoA(lpCalInfoEnumProc ptr[inout, intptr], Locale int32, Calendar int32, CalType int32)
EnumCalendarInfoExA(lpCalInfoEnumProcEx ptr[inout, intptr], Locale int32, Calendar int32, CalType int32)
EnumTimeFormatsA(lpTimeFmtEnumProc ptr[inout, intptr], Locale int32, dwFlags int32)
EnumDateFormatsA(lpDateFmtEnumProc ptr[inout, intptr], Locale int32, dwFlags int32)
EnumDateFormatsExA(lpDateFmtEnumProcEx ptr[inout, intptr], Locale int32, dwFlags int32)
IsValidLanguageGroup(LanguageGroup int32, dwFlags int32)
GetNLSVersion(Function int32, Locale int32, lpVersionInformation ptr[inout, intptr])
IsNLSDefinedString(Function int32, dwFlags int32, lpVersionInformation ptr[inout, intptr], lpString ptr[inout, int16], cchStr int32)
IsValidLocale(Locale int32, dwFlags int32)
GetGeoInfoA(Location int32, GeoType int32, lpGeoData ptr[inout, int8], cchData int32, LangId int16)
EnumSystemGeoID(GeoClass int32, ParentGeoId int32, lpGeoEnumProc ptr[inout, intptr])
GetUserGeoID(GeoClass int32)
SetUserGeoID(GeoId int32)
ConvertDefaultLocale(Locale int32)
GetThreadLocale()
SetThreadLocale(Locale int32)
GetSystemDefaultUILanguage()
GetUserDefaultUILanguage()
GetUserDefaultLangID()
GetSystemDefaultLangID()
GetSystemDefaultLCID()
GetUserDefaultLCID()
SetThreadUILanguage(LangId int16)
GetThreadUILanguage()
GetProcessPreferredUILanguages(dwFlags int32, pulNumLanguages ptr[inout, int32], pwszLanguagesBuffer ptr[inout, int16], pcchLanguagesBuffer ptr[inout, int32])
SetProcessPreferredUILanguages(dwFlags int32, pwszLanguagesBuffer ptr[inout, int16], pulNumLanguages ptr[inout, int32])
GetUserPreferredUILanguages(dwFlags int32, pulNumLanguages ptr[inout, int32], pwszLanguagesBuffer ptr[inout, int16], pcchLanguagesBuffer ptr[inout, int32])
GetSystemPreferredUILanguages(dwFlags int32, pulNumLanguages ptr[inout, int32], pwszLanguagesBuffer ptr[inout, int16], pcchLanguagesBuffer ptr[inout, int32])
GetThreadPreferredUILanguages(dwFlags int32, pulNumLanguages ptr[inout, int32], pwszLanguagesBuffer ptr[inout, int16], pcchLanguagesBuffer ptr[inout, int32])
SetThreadPreferredUILanguages(dwFlags int32, pwszLanguagesBuffer ptr[inout, int16], pulNumLanguages ptr[inout, int32])
GetFileMUIInfo(dwFlags int32, pcwszFilePath ptr[inout, int16], pFileMUIInfo ptr[inout, intptr], pcbFileMUIInfo ptr[inout, int32])
GetFileMUIPath(dwFlags int32, pcwszFilePath ptr[inout, int16], pwszLanguage ptr[inout, int16], pcchLanguage ptr[inout, int32], pwszFileMUIPath ptr[inout, int16], pcchFileMUIPath ptr[inout, int32], pululEnumerator ptr[inout, int64])
GetUILanguageInfo(dwFlags int32, pwmszLanguage ptr[inout, int16], pwszFallbackLanguages ptr[inout, int16], pcchFallbackLanguages ptr[inout, int32], pAttributes ptr[inout, int32])
NotifyUILanguageChange(dwFlags int32, pcwstrNewLanguage ptr[inout, int16], pcwstrPreviousLanguage ptr[inout, int16], dwReserved int32, pdwStatusRtrn ptr[inout, int32])
GetStringTypeExA(Locale int32, dwInfoType int32, lpSrcStr ptr[inout, int8], cchSrc int32, lpCharType ptr[inout, int16])
GetStringTypeA(Locale int32, dwInfoType int32, lpSrcStr ptr[inout, int8], cchSrc int32, lpCharType ptr[inout, int16])
FoldStringA(dwMapFlags int32, lpSrcStr ptr[inout, int8], cchSrc int32, lpDestStr ptr[inout, int8], cchDest int32)
EnumSystemLocalesA(lpLocaleEnumProc ptr[inout, intptr], dwFlags int32)
EnumSystemLanguageGroupsA(lpLanguageGroupEnumProc ptr[inout, intptr], dwFlags int32, lParam int64)
EnumLanguageGroupLocalesA(lpLangGroupLocaleEnumProc ptr[inout, intptr], LanguageGroup int32, dwFlags int32, lParam int64)
EnumUILanguagesA(lpUILanguageEnumProc ptr[inout, intptr], dwFlags int32, lParam int64)
EnumSystemCodePagesA(lpCodePageEnumProc ptr[inout, intptr], dwFlags int32)
NormalizeString(NormForm int32, lpSrcString ptr[inout, int16], cwSrcLength int32, lpDstString ptr[inout, int16], cwDstLength int32)
IsNormalizedString(NormForm int32, lpString ptr[inout, int16], cwLength int32)
IdnToAscii(dwFlags int32, lpUnicodeCharStr ptr[inout, int16], cchUnicodeChar int32, lpASCIICharStr ptr[inout, int16], cchASCIIChar int32)
IdnToUnicode(dwFlags int32, lpASCIICharStr ptr[inout, int16], cchASCIIChar int32, lpUnicodeCharStr ptr[inout, int16], cchUnicodeChar int32)
VerifyScripts(dwFlags int32, lpLocaleScripts ptr[inout, int16], cchLocaleScripts int32, lpTestScripts ptr[inout, int16], cchTestScripts int32)
GetStringScripts(dwFlags int32, lpString ptr[inout, int16], cchString int32, lpScripts ptr[inout, int16], cchScripts int32)
GetLocaleInfoEx(lpLocaleName ptr[inout, int16], LCType int32, lpLCData ptr[inout, int16], cchData int32)
GetCalendarInfoEx(lpLocaleName ptr[inout, int16], Calendar int32, lpReserved ptr[inout, int16], CalType int32, lpCalData ptr[inout, int16], cchData int32, lpValue ptr[inout, int32])
GetNumberFormatEx(lpLocaleName ptr[inout, int16], dwFlags int32, lpValue ptr[inout, int16], lpFormat ptr[inout, intptr], lpNumberStr ptr[inout, int16], cchNumber int32)
GetCurrencyFormatEx(lpLocaleName ptr[inout, int16], dwFlags int32, lpValue ptr[inout, int16], lpFormat ptr[inout, intptr], lpCurrencyStr ptr[inout, int16], cchCurrency int32)
GetUserDefaultLocaleName(lpLocaleName ptr[inout, int16], cchLocaleName int32)
GetSystemDefaultLocaleName(lpLocaleName ptr[inout, int16], cchLocaleName int32)
GetNLSVersionEx(function int32, lpLocaleName ptr[inout, int16], lpVersionInformation ptr[inout, intptr])
IsValidNLSVersion(function int32, lpLocaleName ptr[inout, int16], lpVersionInformation ptr[inout, intptr])
FindNLSStringEx(lpLocaleName ptr[inout, int16], dwFindNLSStringFlags int32, lpStringSource ptr[inout, int16], cchSource int32, lpStringValue ptr[inout, int16], cchValue int32, pcchFound ptr[inout, int32], lpVersionInformation ptr[inout, intptr], lpReserved ptr[inout, array[int8]])
LCMapStringEx(lpLocaleName ptr[inout, int16], dwMapFlags int32, lpSrcStr ptr[inout, int16], cchSrc int32, lpDestStr ptr[inout, int16], cchDest int32, lpVersionInformation ptr[inout, intptr], lpReserved ptr[inout, array[int8]], sortHandle int64)
IsValidLocaleName(lpLocaleName ptr[inout, int16])
EnumCalendarInfoExEx(pCalInfoEnumProcExEx ptr[inout, intptr], lpLocaleName ptr[inout, int16], Calendar int32, lpReserved ptr[inout, int16], CalType int32, lParam int64)
EnumDateFormatsExEx(lpDateFmtEnumProcExEx ptr[inout, intptr], lpLocaleName ptr[inout, int16], dwFlags int32, lParam int64)
EnumTimeFormatsEx(lpTimeFmtEnumProcEx ptr[inout, intptr], lpLocaleName ptr[inout, int16], dwFlags int32, lParam int64)
EnumSystemLocalesEx(lpLocaleEnumProcEx ptr[inout, intptr], dwFlags int32, lParam int64, lpReserved ptr[inout, array[int8]])
ResolveLocaleName(lpNameToResolve ptr[inout, int16], lpLocaleName ptr[inout, int16], cchLocaleName int32)
WriteConsoleInputA(hConsoleInput HANDLE, lpBuffer ptr[inout, intptr], nLength int32, lpNumberOfEventsWritten ptr[inout, int32])
ReadConsoleOutputA(hConsoleOutput HANDLE, lpBuffer ptr[inout, intptr], dwBufferSize intptr, dwBufferCoord intptr, lpReadRegion ptr[inout, intptr])
WriteConsoleOutputA(hConsoleOutput HANDLE, lpBuffer ptr[inout, intptr], dwBufferSize intptr, dwBufferCoord intptr, lpWriteRegion ptr[inout, intptr])
ReadConsoleOutputCharacterA(hConsoleOutput HANDLE, lpCharacter ptr[inout, int8], nLength int32, dwReadCoord intptr, lpNumberOfCharsRead ptr[inout, int32])
ReadConsoleOutputAttribute(hConsoleOutput HANDLE, lpAttribute ptr[inout, int16], nLength int32, dwReadCoord intptr, lpNumberOfAttrsRead ptr[inout, int32])
WriteConsoleOutputCharacterA(hConsoleOutput HANDLE, lpCharacter ptr[inout, int8], nLength int32, dwWriteCoord intptr, lpNumberOfCharsWritten ptr[inout, int32])
WriteConsoleOutputAttribute(hConsoleOutput HANDLE, lpAttribute ptr[inout, int16], nLength int32, dwWriteCoord intptr, lpNumberOfAttrsWritten ptr[inout, int32])
FillConsoleOutputCharacterA(hConsoleOutput HANDLE, cCharacter int8, nLength int32, dwWriteCoord intptr, lpNumberOfCharsWritten ptr[inout, int32])
FillConsoleOutputAttribute(hConsoleOutput HANDLE, wAttribute int16, nLength int32, dwWriteCoord intptr, lpNumberOfAttrsWritten ptr[inout, int32])
GetConsoleScreenBufferInfo(hConsoleOutput HANDLE, lpConsoleScreenBufferInfo ptr[inout, intptr])
GetConsoleScreenBufferInfoEx(hConsoleOutput HANDLE, lpConsoleScreenBufferInfoEx ptr[inout, intptr])
SetConsoleScreenBufferInfoEx(hConsoleOutput HANDLE, lpConsoleScreenBufferInfoEx ptr[inout, intptr])
GetLargestConsoleWindowSize(hConsoleOutput HANDLE)
GetConsoleCursorInfo(hConsoleOutput HANDLE, lpConsoleCursorInfo ptr[inout, intptr])
GetCurrentConsoleFont(hConsoleOutput HANDLE, bMaximumWindow int32, lpConsoleCurrentFont ptr[inout, intptr])
GetCurrentConsoleFontEx(hConsoleOutput HANDLE, bMaximumWindow int32, lpConsoleCurrentFontEx ptr[inout, intptr])
SetCurrentConsoleFontEx(hConsoleOutput HANDLE, bMaximumWindow int32, lpConsoleCurrentFontEx ptr[inout, intptr])
GetConsoleHistoryInfo(lpConsoleHistoryInfo ptr[inout, intptr])
SetConsoleHistoryInfo(lpConsoleHistoryInfo ptr[inout, intptr])
GetConsoleFontSize(hConsoleOutput HANDLE, nFont int32)
GetConsoleSelectionInfo(lpConsoleSelectionInfo ptr[inout, intptr])
GetNumberOfConsoleMouseButtons(lpNumberOfMouseButtons ptr[inout, int32])
SetConsoleActiveScreenBuffer(hConsoleOutput HANDLE)
FlushConsoleInputBuffer(hConsoleInput HANDLE)
SetConsoleScreenBufferSize(hConsoleOutput HANDLE, dwSize intptr)
SetConsoleCursorPosition(hConsoleOutput HANDLE, dwCursorPosition intptr)
SetConsoleCursorInfo(hConsoleOutput HANDLE, lpConsoleCursorInfo ptr[inout, intptr])
ScrollConsoleScreenBufferA(hConsoleOutput HANDLE, lpScrollRectangle ptr[inout, intptr], lpClipRectangle ptr[inout, intptr], dwDestinationOrigin intptr, lpFill ptr[inout, intptr])
SetConsoleWindowInfo(hConsoleOutput HANDLE, bAbsolute int32, lpConsoleWindow ptr[inout, intptr])
SetConsoleTextAttribute(hConsoleOutput HANDLE, wAttributes int16)
GenerateConsoleCtrlEvent(dwCtrlEvent int32, dwProcessGroupId int32)
FreeConsole()
AttachConsole(dwProcessId int32)
GetConsoleTitleA(lpConsoleTitle ptr[inout, int8], nSize int32)
GetConsoleOriginalTitleA(lpConsoleTitle ptr[inout, int8], nSize int32)
SetConsoleTitleA(lpConsoleTitle ptr[inout, int8])
AllocConsole()
GetConsoleCP()
GetConsoleMode(hConsoleHandle HANDLE, lpMode ptr[inout, int32])
GetConsoleOutputCP()
GetNumberOfConsoleInputEvents(hConsoleInput HANDLE, lpNumberOfEvents ptr[inout, int32])
PeekConsoleInputA(hConsoleInput HANDLE, lpBuffer ptr[inout, intptr], nLength int32, lpNumberOfEventsRead ptr[inout, int32])
ReadConsoleA(hConsoleInput HANDLE, lpBuffer ptr[inout, array[int8]], nNumberOfCharsToRead int32, lpNumberOfCharsRead ptr[inout, int32], pInputControl ptr[inout, intptr])
ReadConsoleInputA(hConsoleInput HANDLE, lpBuffer ptr[inout, intptr], nLength int32, lpNumberOfEventsRead ptr[inout, int32])
SetConsoleCtrlHandler(HandlerRoutine ptr[inout, intptr], Add int32)
SetConsoleMode(hConsoleHandle HANDLE, dwMode int32)
WriteConsoleA(hConsoleOutput HANDLE, lpBuffer ptr[inout, array[int8]], nNumberOfCharsToWrite int32, lpNumberOfCharsWritten ptr[inout, int32], lpReserved ptr[inout, array[int8]])
CreateConsoleScreenBuffer(dwDesiredAccess int32, dwShareMode int32, lpSecurityAttributes ptr[inout, intptr], dwFlags int32, lpScreenBufferData ptr[inout, array[int8]]) HANDLE
SetConsoleCP(wCodePageID int32)
SetConsoleOutputCP(wCodePageID int32)
GetConsoleDisplayMode(lpModeFlags ptr[inout, int32])
SetConsoleDisplayMode(hConsoleOutput HANDLE, dwFlags int32, lpNewScreenBufferDimensions ptr[inout, intptr])
GetConsoleWindow()
GetConsoleProcessList(lpdwProcessList ptr[inout, int32], dwProcessCount int32)
AddConsoleAliasA(Source ptr[inout, int8], Target ptr[inout, int8], ExeName ptr[inout, int8])
GetConsoleAliasA(Source ptr[inout, int8], TargetBuffer ptr[inout, int8], TargetBufferLength int32, ExeName ptr[inout, int8])
GetConsoleAliasesLengthA(ExeName ptr[inout, int8])
GetConsoleAliasExesLengthA()
GetConsoleAliasesA(AliasBuffer ptr[inout, int8], AliasBufferLength int32, ExeName ptr[inout, int8])
GetConsoleAliasExesA(ExeNameBuffer ptr[inout, int8], ExeNameBufferLength int32)
VerLanguageNameA(wLang int32, szLang ptr[inout, int8], cchLang int32)
RegCloseKey(hKey ptr[inout, intptr])
RegOverridePredefKey(hKey ptr[inout, intptr], hNewHKey ptr[inout, intptr])
RegOpenUserClassesRoot(hToken HANDLE, dwOptions int32, samDesired int32, phkResult ptr[inout, ptr[inout, intptr]])
RegOpenCurrentUser(samDesired int32, phkResult ptr[inout, ptr[inout, intptr]])
RegDisablePredefinedCache()
RegDisablePredefinedCacheEx()
RegConnectRegistryA(lpMachineName ptr[inout, int8], hKey ptr[inout, intptr], phkResult ptr[inout, ptr[inout, intptr]])
RegConnectRegistryExA(lpMachineName ptr[inout, int8], hKey ptr[inout, intptr], Flags int32, phkResult ptr[inout, ptr[inout, intptr]])
RegCreateKeyA(hKey ptr[inout, intptr], lpSubKey ptr[inout, int8], phkResult ptr[inout, ptr[inout, intptr]])
RegCreateKeyExA(hKey ptr[inout, intptr], lpSubKey ptr[inout, int8], Reserved int32, lpClass ptr[inout, int8], dwOptions int32, samDesired int32, lpSecurityAttributes ptr[inout, intptr], phkResult ptr[inout, ptr[inout, intptr]], lpdwDisposition ptr[inout, int32])
RegCreateKeyTransactedA(hKey ptr[inout, intptr], lpSubKey ptr[inout, int8], Reserved int32, lpClass ptr[inout, int8], dwOptions int32, samDesired int32, lpSecurityAttributes ptr[inout, intptr], phkResult ptr[inout, ptr[inout, intptr]], lpdwDisposition ptr[inout, int32])
RegDeleteKeyA(hKey ptr[inout, intptr], lpSubKey ptr[inout, int8])
RegDeleteKeyExA(hKey ptr[inout, intptr], lpSubKey ptr[inout, int8], samDesired int32, Reserved int32)
RegDeleteKeyTransactedA(hKey ptr[inout, intptr], lpSubKey ptr[inout, int8], samDesired int32, Reserved int32, hTransaction HANDLE, pExtendedParameter ptr[inout, array[int8]])
RegDisableReflectionKey(hBase ptr[inout, intptr])
RegEnableReflectionKey(hBase ptr[inout, intptr])
RegQueryReflectionKey(hBase ptr[inout, intptr], bIsReflectionDisabled ptr[inout, int32])
RegDeleteValueA(hKey ptr[inout, intptr], lpValueName ptr[inout, int8])
RegEnumKeyA(hKey ptr[inout, intptr], dwIndex int32, lpName ptr[inout, int8], cchName int32)
RegEnumKeyExA(hKey ptr[inout, intptr], dwIndex int32, lpName ptr[inout, int8], lpcchName ptr[inout, int32], lpReserved ptr[inout, int32], lpClass ptr[inout, int8], lpcchClass ptr[inout, int32], lpftLastWriteTime ptr[inout, intptr])
RegEnumValueA(hKey ptr[inout, intptr], dwIndex int32, lpValueName ptr[inout, int8], lpcchValueName ptr[inout, int32], lpReserved ptr[inout, int32], lpType ptr[inout, int32], lpData ptr[inout, int8], lpcbData ptr[inout, int32])
RegFlushKey(hKey ptr[inout, intptr])
RegGetKeySecurity(hKey ptr[inout, intptr], SecurityInformation int32, pSecurityDescriptor ptr[inout, array[int8]], lpcbSecurityDescriptor ptr[inout, int32])
RegLoadKeyA(hKey ptr[inout, intptr], lpSubKey ptr[inout, int8], lpFile ptr[inout, int8])
RegNotifyChangeKeyValue(hKey ptr[inout, intptr], bWatchSubtree int32, dwNotifyFilter int32, hEvent HANDLE, fAsynchronous int32)
RegOpenKeyA(hKey ptr[inout, intptr], lpSubKey ptr[inout, int8], phkResult ptr[inout, ptr[inout, intptr]])
RegOpenKeyExA(hKey ptr[inout, intptr], lpSubKey ptr[inout, int8], ulOptions int32, samDesired int32, phkResult ptr[inout, ptr[inout, intptr]])
RegOpenKeyTransactedA(hKey ptr[inout, intptr], lpSubKey ptr[inout, int8], ulOptions int32, samDesired int32, phkResult ptr[inout, ptr[inout, intptr]], hTransaction HANDLE, pExtendedParemeter ptr[inout, array[int8]])
RegQueryInfoKeyA(hKey ptr[inout, intptr], lpClass ptr[inout, int8], lpcchClass ptr[inout, int32], lpReserved ptr[inout, int32], lpcSubKeys ptr[inout, int32], lpcbMaxSubKeyLen ptr[inout, int32], lpcbMaxClassLen ptr[inout, int32], lpcValues ptr[inout, int32], lpcbMaxValueNameLen ptr[inout, int32])
RegQueryValueA(hKey ptr[inout, intptr], lpSubKey ptr[inout, int8], lpData ptr[inout, int8], lpcbData ptr[inout, int32])
RegQueryMultipleValuesA(hKey ptr[inout, intptr], val_list ptr[inout, intptr], num_vals int32, lpValueBuf ptr[inout, int8], ldwTotsize ptr[inout, int32])
RegQueryValueExA(hKey ptr[inout, intptr], lpValueName ptr[inout, int8], lpReserved ptr[inout, int32], lpType ptr[inout, int32], lpData ptr[inout, int8], lpcbData ptr[inout, int32])
RegReplaceKeyA(hKey ptr[inout, intptr], lpSubKey ptr[inout, int8], lpNewFile ptr[inout, int8], lpOldFile ptr[inout, int8])
RegRestoreKeyA(hKey ptr[inout, intptr], lpFile ptr[inout, int8], dwFlags int32)
RegRenameKey(hKey ptr[inout, intptr], lpSubKeyName ptr[inout, int16], lpNewKeyName ptr[inout, int16])
RegSaveKeyA(hKey ptr[inout, intptr], lpFile ptr[inout, int8], lpSecurityAttributes ptr[inout, intptr])
RegSetKeySecurity(hKey ptr[inout, intptr], SecurityInformation int32, pSecurityDescriptor ptr[inout, array[int8]])
RegSetValueA(hKey ptr[inout, intptr], lpSubKey ptr[inout, int8], dwType int32, lpData ptr[inout, int8], cbData int32)
RegSetValueExA(hKey ptr[inout, intptr], lpValueName ptr[inout, int8], Reserved int32, dwType int32, lpData ptr[inout, int8], cbData int32)
RegUnLoadKeyA(hKey ptr[inout, intptr], lpSubKey ptr[inout, int8])
RegDeleteKeyValueA(hKey ptr[inout, intptr], lpSubKey ptr[inout, int8], lpValueName ptr[inout, int8])
RegSetKeyValueA(hKey ptr[inout, intptr], lpSubKey ptr[inout, int8], lpValueName ptr[inout, int8], dwType int32, lpData ptr[inout, array[int8]], cbData int32)
RegDeleteTreeA(hKey ptr[inout, intptr], lpSubKey ptr[inout, int8])
RegCopyTreeA(hKeySrc ptr[inout, intptr], lpSubKey ptr[inout, int8], hKeyDest ptr[inout, intptr])
RegGetValueA(hkey ptr[inout, intptr], lpSubKey ptr[inout, int8], lpValue ptr[inout, int8], dwFlags int32, pdwType ptr[inout, int32], pvData ptr[inout, array[int8]], pcbData ptr[inout, int32])
RegLoadMUIStringA(hKey ptr[inout, intptr], pszValue ptr[inout, int8], pszOutBuf ptr[inout, int8], cbOutBuf int32, pcbData ptr[inout, int32], Flags int32, pszDirectory ptr[inout, int8])
RegLoadAppKeyA(lpFile ptr[inout, int8], phkResult ptr[inout, ptr[inout, intptr]], samDesired int32, dwOptions int32, Reserved int32)
AbortSystemShutdownA(lpMachineName ptr[inout, int8])
CheckForHiberboot(pHiberboot ptr[inout, int8], bClearFlag int8)
RegSaveKeyExA(hKey ptr[inout, intptr], lpFile ptr[inout, int8], lpSecurityAttributes ptr[inout, intptr], Flags int32)
WNetAddConnectionA(lpRemoteName ptr[inout, int8], lpPassword ptr[inout, int8], lpLocalName ptr[inout, int8])
WNetAddConnection2A(lpNetResource ptr[inout, intptr], lpPassword ptr[inout, int8], lpUserName ptr[inout, int8], dwFlags int32)
WNetAddConnection3A(hwndOwner ptr[inout, intptr], lpNetResource ptr[inout, intptr], lpPassword ptr[inout, int8], lpUserName ptr[inout, int8], dwFlags int32)
WNetCancelConnectionA(lpName ptr[inout, int8], fForce int32)
WNetCancelConnection2A(lpName ptr[inout, int8], dwFlags int32, fForce int32)
WNetGetConnectionA(lpLocalName ptr[inout, int8], lpRemoteName ptr[inout, int8], lpnLength ptr[inout, int32])
WNetUseConnectionA(hwndOwner ptr[inout, intptr], lpNetResource ptr[inout, intptr], lpPassword ptr[inout, int8], lpUserId ptr[inout, int8], dwFlags int32, lpAccessName ptr[inout, int8], lpBufferSize ptr[inout, int32], lpResult ptr[inout, int32])
WNetConnectionDialog(hwnd ptr[inout, intptr], dwType int32)
WNetDisconnectDialog(hwnd ptr[inout, intptr], dwType int32)
WNetConnectionDialog1A(lpConnDlgStruct ptr[inout, intptr])
WNetDisconnectDialog1A(lpConnDlgStruct ptr[inout, intptr])
WNetOpenEnumA(dwScope int32, dwType int32, dwUsage int32, lpNetResource ptr[inout, intptr], lphEnum ptr[inout, HANDLE])
WNetEnumResourceA(hEnum HANDLE, lpcCount ptr[inout, int32], lpBuffer ptr[inout, array[int8]], lpBufferSize ptr[inout, int32])
WNetCloseEnum(hEnum HANDLE)
WNetGetResourceParentA(lpNetResource ptr[inout, intptr], lpBuffer ptr[inout, array[int8]], lpcbBuffer ptr[inout, int32])
WNetGetResourceInformationA(lpNetResource ptr[inout, intptr], lpBuffer ptr[inout, array[int8]], lpcbBuffer ptr[inout, int32], lplpSystem ptr[inout, ptr[inout, int8]])
WNetGetUniversalNameA(lpLocalPath ptr[inout, int8], dwInfoLevel int32, lpBuffer ptr[inout, array[int8]], lpBufferSize ptr[inout, int32])
WNetGetUserA(lpName ptr[inout, int8], lpUserName ptr[inout, int8], lpnLength ptr[inout, int32])
WNetGetProviderNameA(dwNetType int32, lpProviderName ptr[inout, int8], lpBufferSize ptr[inout, int32])
WNetGetNetworkInformationA(lpProvider ptr[inout, int8], lpNetInfoStruct ptr[inout, intptr])
WNetGetLastErrorA(lpError ptr[inout, int32], lpErrorBuf ptr[inout, int8], nErrorBufSize int32, lpNameBuf ptr[inout, int8], nNameBufSize int32)
MultinetGetConnectionPerformanceA(lpNetResource ptr[inout, intptr], lpNetConnectInfoStruct ptr[inout, intptr])
DdeSetQualityOfService(hwndClient ptr[inout, intptr], pqosNew ptr[inout, intptr], pqosPrev ptr[inout, intptr])
ImpersonateDdeClientWindow(hWndClient ptr[inout, intptr], hWndServer ptr[inout, intptr])
PackDDElParam(msg int32, uiLo int64, uiHi int64)
UnpackDDElParam(msg int32, lParam int64, puiLo ptr[inout, int64], puiHi ptr[inout, int64])
FreeDDElParam(msg int32, lParam int64)
ReuseDDElParam(lParam int64, msgIn int32, msgOut int32, uiLo int64, uiHi int64)
DdeInitializeA(pidInst ptr[inout, int32], pfnCallback ptr[inout, intptr], afCmd int32, ulRes int32)
DdeUninitialize(idInst int32)
DdeConnectList(idInst int32, hszService ptr[inout, intptr], hszTopic ptr[inout, intptr], hConvList ptr[inout, intptr], pCC ptr[inout, intptr])
DdeQueryNextServer(hConvList ptr[inout, intptr], hConvPrev ptr[inout, intptr])
DdeDisconnectList(hConvList ptr[inout, intptr])
DdeConnect(idInst int32, hszService ptr[inout, intptr], hszTopic ptr[inout, intptr], pCC ptr[inout, intptr])
DdeDisconnect(hConv ptr[inout, intptr])
DdeReconnect(hConv ptr[inout, intptr])
DdeQueryConvInfo(hConv ptr[inout, intptr], idTransaction int32, pConvInfo ptr[inout, intptr])
DdeSetUserHandle(hConv ptr[inout, intptr], id int32, hUser int64)
DdeAbandonTransaction(idInst int32, hConv ptr[inout, intptr], idTransaction int32)
DdePostAdvise(idInst int32, hszTopic ptr[inout, intptr], hszItem ptr[inout, intptr])
DdeEnableCallback(idInst int32, hConv ptr[inout, intptr], wCmd int32)
DdeImpersonateClient(hConv ptr[inout, intptr])
DdeNameService(idInst int32, hsz1 ptr[inout, intptr], hsz2 ptr[inout, intptr], afCmd int32)
DdeClientTransaction(pData ptr[inout, int8], cbData int32, hConv ptr[inout, intptr], hszItem ptr[inout, intptr], wFmt int32, wType int32, dwTimeout int32, pdwResult ptr[inout, int32])
DdeCreateDataHandle(idInst int32, pSrc ptr[inout, int8], cb int32, cbOff int32, hszItem ptr[inout, intptr], wFmt int32, afCmd int32)
DdeAddData(hData ptr[inout, intptr], pSrc ptr[inout, int8], cb int32, cbOff int32)
DdeGetData(hData ptr[inout, intptr], pDst ptr[inout, int8], cbMax int32, cbOff int32)
DdeAccessData(hData ptr[inout, intptr], pcbDataSize ptr[inout, int32])
DdeUnaccessData(hData ptr[inout, intptr])
DdeFreeDataHandle(hData ptr[inout, intptr])
DdeGetLastError(idInst int32)
DdeCreateStringHandleA(idInst int32, psz ptr[inout, int8], iCodePage int32)
DdeQueryStringA(idInst int32, hsz ptr[inout, intptr], psz ptr[inout, int8], cchMax int32, iCodePage int32)
DdeFreeStringHandle(idInst int32, hsz ptr[inout, intptr])
DdeKeepStringHandle(idInst int32, hsz ptr[inout, intptr])
DdeCmpStringHandles(hsz1 ptr[inout, intptr], hsz2 ptr[inout, intptr])
LZStart()
LZDone()
CopyLZFile(hfSource int32, hfDest int32)
LZCopy(hfSource int32, hfDest int32)
LZInit(hfSource int32)
GetExpandedNameA(lpszSource ptr[inout, int8], lpszBuffer ptr[inout, int8])
LZOpenFileA(lpFileName ptr[inout, int8], lpReOpenBuf ptr[inout, intptr], wStyle int16)
LZSeek(hFile int32, lOffset int32, iOrigin int32)
LZRead(hFile int32, lpBuffer ptr[inout, int8], cbRead int32)
LZClose(hFile int32)
mciSendCommandA(mciId int32, uMsg int32, dwParam1 int64, dwParam2 int64)
mciSendStringA(lpstrCommand ptr[inout, int8], lpstrReturnString ptr[inout, int8], uReturnLength int32, hwndCallback ptr[inout, intptr])
mciGetDeviceIDA(pszDevice ptr[inout, int8])
mciGetDeviceIDFromElementIDA(dwElementID int32, lpstrType ptr[inout, int8])
mciGetErrorStringA(mcierr int32, pszText ptr[inout, int8], cchText int32)
mciSetYieldProc(mciId int32, fpYieldProc ptr[inout, intptr], dwYieldData int32)
mciGetCreatorTask(mciId int32)
mciGetYieldProc(mciId int32, pdwYieldData ptr[inout, int32])
mciGetDriverData(wDeviceID int32)
mciLoadCommandResource(hInstance HANDLE, lpResName ptr[inout, int16], wType int32)
mciSetDriverData(wDeviceID int32, dwData int64)
mciDriverYield(wDeviceID int32)
mciDriverNotify(hwndCallback HANDLE, wDeviceID int32, uStatus int32)
mciFreeCommandResource(wTable int32)
CloseDriver(hDriver ptr[inout, intptr], lParam1 int64, lParam2 int64)
OpenDriver(szDriverName ptr[inout, int16], szSectionName ptr[inout, int16], lParam2 int64)
SendDriverMessage(hDriver ptr[inout, intptr], message int32, lParam1 int64, lParam2 int64)
DrvGetModuleHandle(hDriver ptr[inout, intptr])
GetDriverModuleHandle(hDriver ptr[inout, intptr])
DefDriverProc(dwDriverIdentifier int64, hdrvr ptr[inout, intptr], uMsg int32, lParam1 int64, lParam2 int64)
DriverCallback(dwCallback int64, dwFlags int32, hDevice ptr[inout, intptr], dwMsg int32, dwUser int64, dwParam1 int64, dwParam2 int64)
mmDrvInstall(hDriver ptr[inout, intptr], wszDrvEntry ptr[inout, int16], drvMessage ptr[inout, intptr], wFlags int32)
mmioStringToFOURCCA(sz ptr[inout, int8], uFlags int32)
mmioInstallIOProcA(fccIOProc int32, pIOProc ptr[inout, intptr], dwFlags int32)
mmioOpenA(pszFileName ptr[inout, int8], pmmioinfo ptr[inout, intptr], fdwOpen int32)
mmioRenameA(pszFileName ptr[inout, int8], pszNewFileName ptr[inout, int8], pmmioinfo ptr[inout, intptr], fdwRename int32)
mmioClose(hmmio ptr[inout, intptr], fuClose int32)
mmioRead(hmmio ptr[inout, intptr], pch ptr[inout, int8], cch int32)
mmioWrite(hmmio ptr[inout, intptr], pch ptr[inout, int8], cch int32)
mmioSeek(hmmio ptr[inout, intptr], lOffset int32, iOrigin int32)
mmioGetInfo(hmmio ptr[inout, intptr], pmmioinfo ptr[inout, intptr], fuInfo int32)
mmioSetInfo(hmmio ptr[inout, intptr], pmmioinfo ptr[inout, intptr], fuInfo int32)
mmioSetBuffer(hmmio ptr[inout, intptr], pchBuffer ptr[inout, int8], cchBuffer int32, fuBuffer int32)
mmioFlush(hmmio ptr[inout, intptr], fuFlush int32)
mmioAdvance(hmmio ptr[inout, intptr], pmmioinfo ptr[inout, intptr], fuAdvance int32)
mmioSendMessage(hmmio ptr[inout, intptr], uMsg int32, lParam1 int64, lParam2 int64)
mmioDescend(hmmio ptr[inout, intptr], pmmcki ptr[inout, intptr], pmmckiParent ptr[inout, intptr], fuDescend int32)
mmioAscend(hmmio ptr[inout, intptr], pmmcki ptr[inout, intptr], fuAscend int32)
mmioCreateChunk(hmmio ptr[inout, intptr], pmmcki ptr[inout, intptr], fuCreate int32)
timeSetEvent(uDelay int32, uResolution int32, fptc ptr[inout, intptr], dwUser int64, fuEvent int32)
timeKillEvent(uTimerID int32)
sndPlaySoundA(pszSound ptr[inout, int8], fuSound int32)
PlaySoundA(pszSound ptr[inout, int8], hmod ptr[inout, intptr], fdwSound int32)
waveOutGetNumDevs()
waveOutGetDevCapsA(uDeviceID int64, pwoc ptr[inout, intptr], cbwoc int32)
waveOutGetVolume(hwo ptr[inout, intptr], pdwVolume ptr[inout, int32])
waveOutSetVolume(hwo ptr[inout, intptr], dwVolume int32)
waveOutGetErrorTextA(mmrError int32, pszText ptr[inout, int8], cchText int32)
waveOutOpen(phwo ptr[inout, ptr[inout, intptr]], uDeviceID int32, pwfx ptr[inout, intptr], dwCallback int64, dwInstance int64, fdwOpen int32)
waveOutClose(hwo ptr[inout, intptr])
waveOutPrepareHeader(hwo ptr[inout, intptr], pwh ptr[inout, intptr], cbwh int32)
waveOutUnprepareHeader(hwo ptr[inout, intptr], pwh ptr[inout, intptr], cbwh int32)
waveOutWrite(hwo ptr[inout, intptr], pwh ptr[inout, intptr], cbwh int32)
waveOutPause(hwo ptr[inout, intptr])
waveOutRestart(hwo ptr[inout, intptr])
waveOutReset(hwo ptr[inout, intptr])
waveOutBreakLoop(hwo ptr[inout, intptr])
waveOutGetPosition(hwo ptr[inout, intptr], pmmt ptr[inout, intptr], cbmmt int32)
waveOutGetPitch(hwo ptr[inout, intptr], pdwPitch ptr[inout, int32])
waveOutSetPitch(hwo ptr[inout, intptr], dwPitch int32)
waveOutGetPlaybackRate(hwo ptr[inout, intptr], pdwRate ptr[inout, int32])
waveOutSetPlaybackRate(hwo ptr[inout, intptr], dwRate int32)
waveOutGetID(hwo ptr[inout, intptr], puDeviceID ptr[inout, int32])
waveOutMessage(hwo ptr[inout, intptr], uMsg int32, dw1 int64, dw2 int64)
waveInGetNumDevs()
waveInGetDevCapsA(uDeviceID int64, pwic ptr[inout, intptr], cbwic int32)
waveInGetErrorTextA(mmrError int32, pszText ptr[inout, int8], cchText int32)
waveInOpen(phwi ptr[inout, ptr[inout, intptr]], uDeviceID int32, pwfx ptr[inout, intptr], dwCallback int64, dwInstance int64, fdwOpen int32)
waveInClose(hwi ptr[inout, intptr])
waveInPrepareHeader(hwi ptr[inout, intptr], pwh ptr[inout, intptr], cbwh int32)
waveInUnprepareHeader(hwi ptr[inout, intptr], pwh ptr[inout, intptr], cbwh int32)
waveInAddBuffer(hwi ptr[inout, intptr], pwh ptr[inout, intptr], cbwh int32)
waveInStart(hwi ptr[inout, intptr])
waveInStop(hwi ptr[inout, intptr])
waveInReset(hwi ptr[inout, intptr])
waveInGetPosition(hwi ptr[inout, intptr], pmmt ptr[inout, intptr], cbmmt int32)
waveInGetID(hwi ptr[inout, intptr], puDeviceID ptr[inout, int32])
waveInMessage(hwi ptr[inout, intptr], uMsg int32, dw1 int64, dw2 int64)
midiOutGetNumDevs()
midiStreamOpen(phms ptr[inout, ptr[inout, intptr]], puDeviceID ptr[inout, int32], cMidi int32, dwCallback int64, dwInstance int64, fdwOpen int32)
midiStreamClose(hms ptr[inout, intptr])
midiStreamProperty(hms ptr[inout, intptr], lppropdata ptr[inout, int8], dwProperty int32)
midiStreamPosition(hms ptr[inout, intptr], lpmmt ptr[inout, intptr], cbmmt int32)
midiStreamOut(hms ptr[inout, intptr], pmh ptr[inout, intptr], cbmh int32)
midiStreamPause(hms ptr[inout, intptr])
midiStreamRestart(hms ptr[inout, intptr])
midiStreamStop(hms ptr[inout, intptr])
midiConnect(hmi ptr[inout, intptr], hmo ptr[inout, intptr], pReserved ptr[inout, array[int8]])
midiDisconnect(hmi ptr[inout, intptr], hmo ptr[inout, intptr], pReserved ptr[inout, array[int8]])
midiOutGetDevCapsA(uDeviceID int64, pmoc ptr[inout, intptr], cbmoc int32)
midiOutGetVolume(hmo ptr[inout, intptr], pdwVolume ptr[inout, int32])
midiOutSetVolume(hmo ptr[inout, intptr], dwVolume int32)
midiOutGetErrorTextA(mmrError int32, pszText ptr[inout, int8], cchText int32)
midiOutOpen(phmo ptr[inout, ptr[inout, intptr]], uDeviceID int32, dwCallback int64, dwInstance int64, fdwOpen int32)
midiOutClose(hmo ptr[inout, intptr])
midiOutPrepareHeader(hmo ptr[inout, intptr], pmh ptr[inout, intptr], cbmh int32)
midiOutUnprepareHeader(hmo ptr[inout, intptr], pmh ptr[inout, intptr], cbmh int32)
midiOutShortMsg(hmo ptr[inout, intptr], dwMsg int32)
midiOutLongMsg(hmo ptr[inout, intptr], pmh ptr[inout, intptr], cbmh int32)
midiOutReset(hmo ptr[inout, intptr])
midiOutCachePatches(hmo ptr[inout, intptr], uBank int32, pwpa ptr[inout, int16], fuCache int32)
midiOutCacheDrumPatches(hmo ptr[inout, intptr], uPatch int32, pwkya ptr[inout, int16], fuCache int32)
midiOutGetID(hmo ptr[inout, intptr], puDeviceID ptr[inout, int32])
midiOutMessage(hmo ptr[inout, intptr], uMsg int32, dw1 int64, dw2 int64)
midiInGetNumDevs()
midiInGetDevCapsA(uDeviceID int64, pmic ptr[inout, intptr], cbmic int32)
midiInGetErrorTextA(mmrError int32, pszText ptr[inout, int8], cchText int32)
midiInOpen(phmi ptr[inout, ptr[inout, intptr]], uDeviceID int32, dwCallback int64, dwInstance int64, fdwOpen int32)
midiInClose(hmi ptr[inout, intptr])
midiInPrepareHeader(hmi ptr[inout, intptr], pmh ptr[inout, intptr], cbmh int32)
midiInUnprepareHeader(hmi ptr[inout, intptr], pmh ptr[inout, intptr], cbmh int32)
midiInAddBuffer(hmi ptr[inout, intptr], pmh ptr[inout, intptr], cbmh int32)
midiInStart(hmi ptr[inout, intptr])
midiInStop(hmi ptr[inout, intptr])
midiInReset(hmi ptr[inout, intptr])
midiInGetID(hmi ptr[inout, intptr], puDeviceID ptr[inout, int32])
midiInMessage(hmi ptr[inout, intptr], uMsg int32, dw1 int64, dw2 int64)
auxGetNumDevs()
auxGetDevCapsA(uDeviceID int64, pac ptr[inout, intptr], cbac int32)
auxSetVolume(uDeviceID int32, dwVolume int32)
auxGetVolume(uDeviceID int32, pdwVolume ptr[inout, int32])
auxOutMessage(uDeviceID int32, uMsg int32, dw1 int64, dw2 int64)
mixerGetNumDevs()
mixerGetDevCapsA(uMxId int64, pmxcaps ptr[inout, intptr], cbmxcaps int32)
mixerOpen(phmx ptr[inout, ptr[inout, intptr]], uMxId int32, dwCallback int64, dwInstance int64, fdwOpen int32)
mixerClose(hmx ptr[inout, intptr])
mixerMessage(hmx ptr[inout, intptr], uMsg int32, dwParam1 int64, dwParam2 int64)
mixerGetLineInfoA(hmxobj ptr[inout, intptr], pmxl ptr[inout, intptr], fdwInfo int32)
mixerGetID(hmxobj ptr[inout, intptr], puMxId ptr[inout, int32], fdwId int32)
mixerGetLineControlsA(hmxobj ptr[inout, intptr], pmxlc ptr[inout, intptr], fdwControls int32)
mixerGetControlDetailsA(hmxobj ptr[inout, intptr], pmxcd ptr[inout, intptr], fdwDetails int32)
mixerSetControlDetails(hmxobj ptr[inout, intptr], pmxcd ptr[inout, intptr], fdwDetails int32)
timeGetSystemTime(pmmt ptr[inout, intptr], cbmmt int32)
timeGetTime()
timeGetDevCaps(ptc ptr[inout, intptr], cbtc int32)
timeBeginPeriod(uPeriod int32)
timeEndPeriod(uPeriod int32)
joyGetPosEx(uJoyID int32, pji ptr[inout, intptr])
joyGetNumDevs()
joyGetDevCapsA(uJoyID int64, pjc ptr[inout, intptr], cbjc int32)
joyGetPos(uJoyID int32, pji ptr[inout, intptr])
joyGetThreshold(uJoyID int32, puThreshold ptr[inout, int32])
joyReleaseCapture(uJoyID int32)
joySetCapture(hwnd ptr[inout, intptr], uJoyID int32, uPeriod int32, fChanged int32)
joySetThreshold(uJoyID int32, uThreshold int32)
joyConfigChanged(dwFlags int32)
RpcBindingCopy(SourceBinding ptr[inout, array[int8]], DestinationBinding ptr[inout, ptr[inout, array[int8]]])
RpcBindingFree(Binding ptr[inout, ptr[inout, array[int8]]])
RpcBindingSetOption(hBinding ptr[inout, array[int8]], option int32, optionValue int64)
RpcBindingInqOption(hBinding ptr[inout, array[int8]], option int32, pOptionValue ptr[inout, int64])
RpcBindingFromStringBindingA(StringBinding ptr[inout, int8], Binding ptr[inout, ptr[inout, array[int8]]])
RpcSsGetContextBinding(ContextHandle ptr[inout, array[int8]], Binding ptr[inout, ptr[inout, array[int8]]])
RpcBindingInqObject(Binding ptr[inout, array[int8]], ObjectUuid ptr[inout, intptr])
RpcBindingReset(Binding ptr[inout, array[int8]])
RpcBindingSetObject(Binding ptr[inout, array[int8]], ObjectUuid ptr[inout, intptr])
RpcMgmtInqDefaultProtectLevel(AuthnSvc int32, AuthnLevel ptr[inout, int32])
RpcBindingToStringBindingA(Binding ptr[inout, array[int8]], StringBinding ptr[inout, ptr[inout, int8]])
RpcBindingVectorFree(BindingVector ptr[inout, ptr[inout, intptr]])
RpcStringBindingComposeA(ObjUuid ptr[inout, int8], ProtSeq ptr[inout, int8], NetworkAddr ptr[inout, int8], Endpoint ptr[inout, int8], Options ptr[inout, int8], StringBinding ptr[inout, ptr[inout, int8]])
RpcStringBindingParseA(StringBinding ptr[inout, int8], ObjUuid ptr[inout, ptr[inout, int8]], Protseq ptr[inout, ptr[inout, int8]], NetworkAddr ptr[inout, ptr[inout, int8]], Endpoint ptr[inout, ptr[inout, int8]], NetworkOptions ptr[inout, ptr[inout, int8]])
RpcStringFreeA(String ptr[inout, ptr[inout, int8]])
RpcIfInqId(RpcIfHandle ptr[inout, array[int8]], RpcIfId ptr[inout, intptr])
RpcNetworkIsProtseqValidA(Protseq ptr[inout, int8])
RpcMgmtInqComTimeout(Binding ptr[inout, array[int8]], Timeout ptr[inout, int32])
RpcMgmtSetComTimeout(Binding ptr[inout, array[int8]], Timeout int32)
RpcMgmtSetCancelTimeout(Timeout int32)
RpcNetworkInqProtseqsA(ProtseqVector ptr[inout, ptr[inout, intptr]])
RpcObjectInqType(ObjUuid ptr[inout, intptr], TypeUuid ptr[inout, intptr])
RpcObjectSetInqFn(InquiryFn ptr[inout, intptr])
RpcObjectSetType(ObjUuid ptr[inout, intptr], TypeUuid ptr[inout, intptr])
RpcProtseqVectorFreeA(ProtseqVector ptr[inout, ptr[inout, intptr]])
RpcMgmtStatsVectorFree(StatsVector ptr[inout, ptr[inout, intptr]])
RpcMgmtInqStats(Binding ptr[inout, array[int8]], Statistics ptr[inout, ptr[inout, intptr]])
RpcMgmtIsServerListening(Binding ptr[inout, array[int8]])
RpcMgmtStopServerListening(Binding ptr[inout, array[int8]])
RpcMgmtWaitServerListen()
RpcMgmtSetServerStackSize(ThreadStackSize int32)
RpcSsDontSerializeContext()
RpcMgmtEnableIdleCleanup()
RpcMgmtInqIfIds(Binding ptr[inout, array[int8]], IfIdVector ptr[inout, ptr[inout, intptr]])
RpcIfIdVectorFree(IfIdVector ptr[inout, ptr[inout, intptr]])
RpcMgmtInqServerPrincNameA(Binding ptr[inout, array[int8]], AuthnSvc int32, ServerPrincName ptr[inout, ptr[inout, int8]])
RpcEpResolveBinding(Binding ptr[inout, array[int8]], IfSpec ptr[inout, array[int8]])
RpcNsBindingInqEntryNameA(Binding ptr[inout, array[int8]], EntryNameSyntax int32, EntryName ptr[inout, ptr[inout, int8]])
RpcBindingCreateA(Template ptr[inout, intptr], Security ptr[inout, intptr], Options ptr[inout, intptr], Binding ptr[inout, ptr[inout, array[int8]]])
RpcImpersonateClient(BindingHandle ptr[inout, array[int8]])
RpcImpersonateClient2(BindingHandle ptr[inout, array[int8]])
RpcRevertToSelfEx(BindingHandle ptr[inout, array[int8]])
RpcRevertToSelf()
RpcImpersonateClientContainer(BindingHandle ptr[inout, array[int8]])
RpcRevertContainerImpersonation()
RpcBindingInqAuthClientA(ClientBinding ptr[inout, array[int8]], Privs ptr[inout, ptr[inout, array[int8]]], ServerPrincName ptr[inout, ptr[inout, int8]], AuthnLevel ptr[inout, int32], AuthnSvc ptr[inout, int32], AuthzSvc ptr[inout, int32])
RpcBindingInqAuthClientExA(ClientBinding ptr[inout, array[int8]], Privs ptr[inout, ptr[inout, array[int8]]], ServerPrincName ptr[inout, ptr[inout, int8]], AuthnLevel ptr[inout, int32], AuthnSvc ptr[inout, int32], AuthzSvc ptr[inout, int32], Flags int32)
RpcBindingInqAuthInfoA(Binding ptr[inout, array[int8]], ServerPrincName ptr[inout, ptr[inout, int8]], AuthnLevel ptr[inout, int32], AuthnSvc ptr[inout, int32], AuthIdentity ptr[inout, ptr[inout, array[int8]]], AuthzSvc ptr[inout, int32])
RpcBindingSetAuthInfoA(Binding ptr[inout, array[int8]], ServerPrincName ptr[inout, int8], AuthnLevel int32, AuthnSvc int32, AuthIdentity ptr[inout, array[int8]], AuthzSvc int32)
RpcBindingSetAuthInfoExA(Binding ptr[inout, array[int8]], ServerPrincName ptr[inout, int8], AuthnLevel int32, AuthnSvc int32, AuthIdentity ptr[inout, array[int8]], AuthzSvc int32, SecurityQos ptr[inout, intptr])
RpcBindingInqAuthInfoExA(Binding ptr[inout, array[int8]], ServerPrincName ptr[inout, ptr[inout, int8]], AuthnLevel ptr[inout, int32], AuthnSvc ptr[inout, int32], AuthIdentity ptr[inout, ptr[inout, array[int8]]], AuthzSvc ptr[inout, int32], RpcQosVersion int32, SecurityQOS ptr[inout, intptr])
RpcBindingServerFromClient(ClientBinding ptr[inout, array[int8]], ServerBinding ptr[inout, ptr[inout, array[int8]]])
RpcRaiseException(exception int32)
RpcTestCancel()
RpcCancelThread(Thread ptr[inout, array[int8]])
RpcCancelThreadEx(Thread ptr[inout, array[int8]], Timeout int32)
UuidCreate(Uuid ptr[inout, intptr])
UuidCreateSequential(Uuid ptr[inout, intptr])
UuidToStringA(Uuid ptr[inout, intptr], StringUuid ptr[inout, ptr[inout, int8]])
UuidFromStringA(StringUuid ptr[inout, int8], Uuid ptr[inout, intptr])
UuidCompare(Uuid1 ptr[inout, intptr], Uuid2 ptr[inout, intptr], Status ptr[inout, int32])
UuidCreateNil(NilUuid ptr[inout, intptr])
UuidEqual(Uuid1 ptr[inout, intptr], Uuid2 ptr[inout, intptr], Status ptr[inout, int32])
UuidHash(Uuid ptr[inout, intptr], Status ptr[inout, int32])
UuidIsNil(Uuid ptr[inout, intptr], Status ptr[inout, int32])
RpcEpRegisterNoReplaceA(IfSpec ptr[inout, array[int8]], BindingVector ptr[inout, intptr], UuidVector ptr[inout, intptr], Annotation ptr[inout, int8])
RpcEpRegisterA(IfSpec ptr[inout, array[int8]], BindingVector ptr[inout, intptr], UuidVector ptr[inout, intptr], Annotation ptr[inout, int8])
RpcEpUnregister(IfSpec ptr[inout, array[int8]], BindingVector ptr[inout, intptr], UuidVector ptr[inout, intptr])
DceErrorInqTextA(RpcStatus int32, ErrorText ptr[inout, int8])
RpcMgmtEpEltInqBegin(EpBinding ptr[inout, array[int8]], InquiryType int32, IfId ptr[inout, intptr], VersOption int32, ObjectUuid ptr[inout, intptr], InquiryContext ptr[inout, ptr[inout, ptr[inout, array[int8]]]])
RpcMgmtEpEltInqDone(InquiryContext ptr[inout, ptr[inout, ptr[inout, array[int8]]]])
RpcMgmtEpEltInqNextA(InquiryContext ptr[inout, ptr[inout, array[int8]]], IfId ptr[inout, intptr], Binding ptr[inout, ptr[inout, array[int8]]], ObjectUuid ptr[inout, intptr], Annotation ptr[inout, ptr[inout, int8]])
RpcMgmtEpUnregister(EpBinding ptr[inout, array[int8]], IfId ptr[inout, intptr], Binding ptr[inout, array[int8]], ObjectUuid ptr[inout, intptr])
RpcMgmtSetAuthorizationFn(AuthorizationFn ptr[inout, intptr])
RpcExceptionFilter(ExceptionCode int32)
I_UuidCreate(Uuid ptr[inout, intptr])
RpcNsBindingExportA(EntryNameSyntax int32, EntryName ptr[inout, int8], IfSpec ptr[inout, array[int8]], BindingVec ptr[inout, intptr], ObjectUuidVec ptr[inout, intptr])
RpcNsBindingUnexportA(EntryNameSyntax int32, EntryName ptr[inout, int8], IfSpec ptr[inout, array[int8]], ObjectUuidVec ptr[inout, intptr])
RpcNsBindingExportPnPA(EntryNameSyntax int32, EntryName ptr[inout, int8], IfSpec ptr[inout, array[int8]], ObjectVector ptr[inout, intptr])
RpcNsBindingUnexportPnPA(EntryNameSyntax int32, EntryName ptr[inout, int8], IfSpec ptr[inout, array[int8]], ObjectVector ptr[inout, intptr])
RpcNsBindingLookupBeginA(EntryNameSyntax int32, EntryName ptr[inout, int8], IfSpec ptr[inout, array[int8]], ObjUuid ptr[inout, intptr], BindingMaxCount int32, LookupContext ptr[inout, ptr[inout, array[int8]]])
RpcNsBindingLookupNext(LookupContext ptr[inout, array[int8]], BindingVec ptr[inout, ptr[inout, intptr]])
RpcNsBindingLookupDone(LookupContext ptr[inout, ptr[inout, array[int8]]])
RpcNsGroupDeleteA(GroupNameSyntax int32, GroupName ptr[inout, int8])
RpcNsGroupMbrAddA(GroupNameSyntax int32, GroupName ptr[inout, int8], MemberNameSyntax int32, MemberName ptr[inout, int8])
RpcNsGroupMbrRemoveA(GroupNameSyntax int32, GroupName ptr[inout, int8], MemberNameSyntax int32, MemberName ptr[inout, int8])
RpcNsGroupMbrInqBeginA(GroupNameSyntax int32, GroupName ptr[inout, int8], MemberNameSyntax int32, InquiryContext ptr[inout, ptr[inout, array[int8]]])
RpcNsGroupMbrInqNextA(InquiryContext ptr[inout, array[int8]], MemberName ptr[inout, ptr[inout, int8]])
RpcNsGroupMbrInqDone(InquiryContext ptr[inout, ptr[inout, array[int8]]])
RpcNsProfileDeleteA(ProfileNameSyntax int32, ProfileName ptr[inout, int8])
RpcNsProfileEltAddA(ProfileNameSyntax int32, ProfileName ptr[inout, int8], IfId ptr[inout, intptr], MemberNameSyntax int32, MemberName ptr[inout, int8], Priority int32, Annotation ptr[inout, int8])
RpcNsProfileEltRemoveA(ProfileNameSyntax int32, ProfileName ptr[inout, int8], IfId ptr[inout, intptr], MemberNameSyntax int32, MemberName ptr[inout, int8])
RpcNsProfileEltInqBeginA(ProfileNameSyntax int32, ProfileName ptr[inout, int8], InquiryType int32, IfId ptr[inout, intptr], VersOption int32, MemberNameSyntax int32, MemberName ptr[inout, int8], InquiryContext ptr[inout, ptr[inout, array[int8]]])
RpcNsProfileEltInqNextA(InquiryContext ptr[inout, array[int8]], IfId ptr[inout, intptr], MemberName ptr[inout, ptr[inout, int8]], Priority ptr[inout, int32], Annotation ptr[inout, ptr[inout, int8]])
RpcNsProfileEltInqDone(InquiryContext ptr[inout, ptr[inout, array[int8]]])
RpcNsEntryObjectInqBeginA(EntryNameSyntax int32, EntryName ptr[inout, int8], InquiryContext ptr[inout, ptr[inout, array[int8]]])
RpcNsEntryObjectInqNext(InquiryContext ptr[inout, array[int8]], ObjUuid ptr[inout, intptr])
RpcNsEntryObjectInqDone(InquiryContext ptr[inout, ptr[inout, array[int8]]])
RpcNsEntryExpandNameA(EntryNameSyntax int32, EntryName ptr[inout, int8], ExpandedName ptr[inout, ptr[inout, int8]])
RpcNsMgmtBindingUnexportA(EntryNameSyntax int32, EntryName ptr[inout, int8], IfId ptr[inout, intptr], VersOption int32, ObjectUuidVec ptr[inout, intptr])
RpcNsMgmtEntryCreateA(EntryNameSyntax int32, EntryName ptr[inout, int8])
RpcNsMgmtEntryDeleteA(EntryNameSyntax int32, EntryName ptr[inout, int8])
RpcNsMgmtEntryInqIfIdsA(EntryNameSyntax int32, EntryName ptr[inout, int8], IfIdVec ptr[inout, ptr[inout, intptr]])
RpcNsMgmtHandleSetExpAge(NsHandle ptr[inout, array[int8]], ExpirationAge int32)
RpcNsMgmtInqExpAge(ExpirationAge ptr[inout, int32])
RpcNsMgmtSetExpAge(ExpirationAge int32)
RpcNsBindingImportBeginA(EntryNameSyntax int32, EntryName ptr[inout, int8], IfSpec ptr[inout, array[int8]], ObjUuid ptr[inout, intptr], ImportContext ptr[inout, ptr[inout, array[int8]]])
RpcNsBindingImportNext(ImportContext ptr[inout, array[int8]], Binding ptr[inout, ptr[inout, array[int8]]])
RpcNsBindingImportDone(ImportContext ptr[inout, ptr[inout, array[int8]]])
RpcNsBindingSelect(BindingVec ptr[inout, intptr], Binding ptr[inout, ptr[inout, array[int8]]])
RpcAsyncRegisterInfo(pAsync ptr[inout, intptr])
RpcAsyncInitializeHandle(pAsync ptr[inout, intptr], Size int32)
RpcAsyncGetCallStatus(pAsync ptr[inout, intptr])
RpcAsyncCompleteCall(pAsync ptr[inout, intptr], Reply ptr[inout, array[int8]])
RpcAsyncAbortCall(pAsync ptr[inout, intptr], ExceptionCode int32)
RpcAsyncCancelCall(pAsync ptr[inout, intptr], fAbort int32)
RpcErrorStartEnumeration(EnumHandle ptr[inout, intptr])
RpcErrorGetNextRecord(EnumHandle ptr[inout, intptr], CopyStrings int32, ErrorInfo ptr[inout, intptr])
RpcErrorEndEnumeration(EnumHandle ptr[inout, intptr])
RpcErrorResetEnumeration(EnumHandle ptr[inout, intptr])
RpcErrorGetNumberOfRecords(EnumHandle ptr[inout, intptr], Records ptr[inout, int32])
RpcErrorSaveErrorInfo(EnumHandle ptr[inout, intptr], ErrorBlob ptr[inout, ptr[inout, array[int8]]], BlobSize ptr[inout, int64])
RpcErrorLoadErrorInfo(ErrorBlob ptr[inout, array[int8]], BlobSize int64, EnumHandle ptr[inout, intptr])
RpcErrorAddRecord(ErrorInfo ptr[inout, intptr])
RpcErrorClearInformation()
RpcGetAuthorizationContextForClient(ClientBinding ptr[inout, array[int8]], ImpersonateOnReturn int32, Reserved1 ptr[inout, array[int8]], pExpirationTime ptr[inout, intptr], Reserved2 intptr, Reserved3 int32, Reserved4 ptr[inout, array[int8]], pAuthzClientContext ptr[inout, ptr[inout, array[int8]]])
RpcFreeAuthorizationContext(pAuthzClientContext ptr[inout, ptr[inout, array[int8]]])
RpcSsContextLockExclusive(ServerBindingHandle ptr[inout, array[int8]], UserContext ptr[inout, array[int8]])
RpcSsContextLockShared(ServerBindingHandle ptr[inout, array[int8]], UserContext ptr[inout, array[int8]])
RpcBindingBind(pAsync ptr[inout, intptr], Binding ptr[inout, array[int8]], IfSpec ptr[inout, array[int8]])
RpcBindingUnbind(Binding ptr[inout, array[int8]])
DragQueryFileA(hDrop ptr[inout, intptr], iFile int32, lpszFile ptr[inout, int8], cch int32)
DragQueryPoint(hDrop ptr[inout, intptr], ppt ptr[inout, intptr])
DragFinish(hDrop ptr[inout, intptr])
DragAcceptFiles(hWnd ptr[inout, intptr], fAccept int32)
ShellExecuteA(hwnd ptr[inout, intptr], lpOperation ptr[inout, int8], lpFile ptr[inout, int8], lpParameters ptr[inout, int8], lpDirectory ptr[inout, int8], nShowCmd int32)
FindExecutableA(lpFile ptr[inout, int8], lpDirectory ptr[inout, int8], lpResult ptr[inout, int8])
ShellAboutA(hWnd ptr[inout, intptr], szApp ptr[inout, int8], szOtherStuff ptr[inout, int8], hIcon ptr[inout, intptr])
DuplicateIcon(hInst ptr[inout, intptr], hIcon ptr[inout, intptr])
ExtractAssociatedIconA(hInst ptr[inout, intptr], pszIconPath ptr[inout, int8], piIcon ptr[inout, int16])
ExtractAssociatedIconExA(hInst ptr[inout, intptr], pszIconPath ptr[inout, int8], piIconIndex ptr[inout, int16], piIconId ptr[inout, int16])
ExtractIconA(hInst ptr[inout, intptr], pszExeFileName ptr[inout, int8], nIconIndex int32)
SHAppBarMessage(dwMessage int32, pData ptr[inout, intptr])
DoEnvironmentSubstA(pszSrc ptr[inout, int8], cchSrc int32)
ExtractIconExA(lpszFile ptr[inout, int8], nIconIndex int32, phiconLarge ptr[inout, ptr[inout, intptr]], phiconSmall ptr[inout, ptr[inout, intptr]], nIcons int32)
SHFileOperationA(lpFileOp ptr[inout, intptr])
SHFreeNameMappings(hNameMappings HANDLE)
ShellExecuteExA(pExecInfo ptr[inout, intptr])
SHEvaluateSystemCommandTemplate(pszCmdTemplate ptr[inout, int16], ppszApplication ptr[inout, ptr[inout, int16]], ppszCommandLine ptr[inout, ptr[inout, int16]], ppszParameters ptr[inout, ptr[inout, int16]])
AssocCreateForClasses(rgClasses ptr[inout, intptr], cClasses int32, riid ptr[inout, intptr], ppv ptr[inout, ptr[inout, array[int8]]])
SHQueryRecycleBinA(pszRootPath ptr[inout, int8], pSHQueryRBInfo ptr[inout, intptr])
SHEmptyRecycleBinA(hwnd ptr[inout, intptr], pszRootPath ptr[inout, int8], dwFlags int32)
SHQueryUserNotificationState(pquns ptr[inout, int32])
SHGetPropertyStoreForWindow(hwnd ptr[inout, intptr], riid ptr[inout, intptr], ppv ptr[inout, ptr[inout, array[int8]]])
Shell_NotifyIconA(dwMessage int32, lpData ptr[inout, intptr])
Shell_NotifyIconGetRect(identifier ptr[inout, intptr], iconLocation ptr[inout, intptr])
SHGetFileInfoA(pszPath ptr[inout, int8], dwFileAttributes int32, psfi ptr[inout, intptr], cbFileInfo int32, uFlags int32)
SHGetStockIconInfo(siid int32, uFlags int32, psii ptr[inout, intptr])
SHGetDiskFreeSpaceExA(pszDirectoryName ptr[inout, int8], pulFreeBytesAvailableToCaller ptr[inout, intptr], pulTotalNumberOfBytes ptr[inout, intptr], pulTotalNumberOfFreeBytes ptr[inout, intptr])
SHGetNewLinkInfoA(pszLinkTo ptr[inout, int8], pszDir ptr[inout, int8], pszName ptr[inout, int8], pfMustCopy ptr[inout, int32], uFlags int32)
SHInvokePrinterCommandA(hwnd ptr[inout, intptr], uAction int32, lpBuf1 ptr[inout, int8], lpBuf2 ptr[inout, int8], fModal int32)
SHLoadNonloadedIconOverlayIdentifiers()
SHIsFileAvailableOffline(pwszPath ptr[inout, int16], pdwStatus ptr[inout, int32])
SHSetLocalizedName(pszPath ptr[inout, int16], pszResModule ptr[inout, int16], idsRes int32)
SHRemoveLocalizedName(pszPath ptr[inout, int16])
SHGetLocalizedName(pszPath ptr[inout, int16], pszResModule ptr[inout, int16], cch int32, pidsRes ptr[inout, int32])
IsLFNDriveA(pszPath ptr[inout, int8])
SHTestTokenMembership(hToken HANDLE, ulRID int32)
SHGetImageList(iImageList int32, riid ptr[inout, intptr], ppvObj ptr[inout, ptr[inout, array[int8]]])
InitNetworkAddressControl()
SHGetDriveMedia(pszDrive ptr[inout, int16], pdwMediaContent ptr[inout, int32])
accept(s int64, addr ptr[inout, intptr], addrlen ptr[inout, int32])
bind(s int64, addr ptr[inout, intptr], namelen int32)
closesocket(s int64)
connect(s int64, name ptr[inout, intptr], namelen int32)
ioctlsocket(s int64, cmd int32, argp ptr[inout, int32])
getpeername(s int64, name ptr[inout, intptr], namelen ptr[inout, int32])
getsockname(s int64, name ptr[inout, intptr], namelen ptr[inout, int32])
getsockopt(s int64, level int32, optname int32, optval ptr[inout, int8], optlen ptr[inout, int32])
htonl(hostlong int32)
htons(hostshort int16)
inet_addr(cp ptr[inout, int8])
inet_ntoa(in intptr)
listen(s int64, backlog int32)
ntohl(netlong int32)
ntohs(netshort int16)
recv(s int64, buf ptr[inout, int8], len int32, flags int32)
recvfrom(s int64, buf ptr[inout, int8], len int32, flags int32, from ptr[inout, intptr], fromlen ptr[inout, int32])
select(nfds int32, readfds ptr[inout, intptr], writefds ptr[inout, intptr], exceptfds ptr[inout, intptr], timeout ptr[inout, intptr])
send(s int64, buf ptr[inout, int8], len int32, flags int32)
sendto(s int64, buf ptr[inout, int8], len int32, flags int32, to ptr[inout, intptr], tolen int32)
setsockopt(s int64, level int32, optname int32, optval ptr[inout, int8], optlen int32)
socket(af int32, type int32, protocol int32)
gethostbyaddr(addr ptr[inout, int8], len int32, type int32)
gethostbyname(name ptr[inout, int8])
gethostname(name ptr[inout, int8], namelen int32)
getservbyport(port int32, proto ptr[inout, int8])
getservbyname(name ptr[inout, int8], proto ptr[inout, int8])
getprotobynumber(proto int32)
getprotobyname(name ptr[inout, int8])
WSAStartup(wVersionRequired int16, lpWSAData ptr[inout, intptr])
WSACleanup()
WSASetLastError(iError int32)
WSAGetLastError()
WSAIsBlocking()
WSAUnhookBlockingHook()
WSASetBlockingHook(lpBlockFunc ptr[inout, intptr])
WSACancelBlockingCall()
WSAAsyncGetServByName(hWnd ptr[inout, intptr], wMsg int32, name ptr[inout, int8], proto ptr[inout, int8], buf ptr[inout, int8], buflen int32) HANDLE
WSAAsyncGetServByPort(hWnd ptr[inout, intptr], wMsg int32, port int32, proto ptr[inout, int8], buf ptr[inout, int8], buflen int32) HANDLE
WSAAsyncGetProtoByName(hWnd ptr[inout, intptr], wMsg int32, name ptr[inout, int8], buf ptr[inout, int8], buflen int32) HANDLE
WSAAsyncGetProtoByNumber(hWnd ptr[inout, intptr], wMsg int32, number int32, buf ptr[inout, int8], buflen int32) HANDLE
WSAAsyncGetHostByName(hWnd ptr[inout, intptr], wMsg int32, name ptr[inout, int8], buf ptr[inout, int8], buflen int32) HANDLE
WSAAsyncGetHostByAddr(hWnd ptr[inout, intptr], wMsg int32, addr ptr[inout, int8], len int32, type int32, buf ptr[inout, int8], buflen int32) HANDLE
WSACancelAsyncRequest(hAsyncTaskHandle HANDLE)
WSAAsyncSelect(s int64, hWnd ptr[inout, intptr], wMsg int32, lEvent int32)
WSARecvEx(s int64, buf ptr[inout, int8], len int32, flags ptr[inout, int32])
TransmitFile(hSocket int64, hFile HANDLE, nNumberOfBytesToWrite int32, nNumberOfBytesPerSend int32, lpOverlapped ptr[inout, intptr], lpTransmitBuffers ptr[inout, intptr], dwReserved int32)
AcceptEx(sListenSocket int64, sAcceptSocket int64, lpOutputBuffer ptr[inout, array[int8]], dwReceiveDataLength int32, dwLocalAddressLength int32, dwRemoteAddressLength int32, lpdwBytesReceived ptr[inout, int32], lpOverlapped ptr[inout, intptr])
GetAcceptExSockaddrs(lpOutputBuffer ptr[inout, array[int8]], dwReceiveDataLength int32, dwLocalAddressLength int32, dwRemoteAddressLength int32, LocalSockaddr ptr[inout, ptr[inout, intptr]], LocalSockaddrLength ptr[inout, int32], RemoteSockaddr ptr[inout, ptr[inout, intptr]], RemoteSockaddrLength ptr[inout, int32])
CryptAcquireContextA(phProv ptr[inout, int64], szContainer ptr[inout, int8], szProvider ptr[inout, int8], dwProvType int32, dwFlags int32)
CryptReleaseContext(hProv int64, dwFlags int32)
CryptGenKey(hProv int64, Algid int32, dwFlags int32, phKey ptr[inout, int64])
CryptDeriveKey(hProv int64, Algid int32, hBaseData int64, dwFlags int32, phKey ptr[inout, int64])
CryptDestroyKey(hKey int64)
CryptSetKeyParam(hKey int64, dwParam int32, pbData ptr[inout, int8], dwFlags int32)
CryptGetKeyParam(hKey int64, dwParam int32, pbData ptr[inout, int8], pdwDataLen ptr[inout, int32], dwFlags int32)
CryptSetHashParam(hHash int64, dwParam int32, pbData ptr[inout, int8], dwFlags int32)
CryptGetHashParam(hHash int64, dwParam int32, pbData ptr[inout, int8], pdwDataLen ptr[inout, int32], dwFlags int32)
CryptSetProvParam(hProv int64, dwParam int32, pbData ptr[inout, int8], dwFlags int32)
CryptGetProvParam(hProv int64, dwParam int32, pbData ptr[inout, int8], pdwDataLen ptr[inout, int32], dwFlags int32)
CryptGenRandom(hProv int64, dwLen int32, pbBuffer ptr[inout, int8])
CryptGetUserKey(hProv int64, dwKeySpec int32, phUserKey ptr[inout, int64])
CryptExportKey(hKey int64, hExpKey int64, dwBlobType int32, dwFlags int32, pbData ptr[inout, int8], pdwDataLen ptr[inout, int32])
CryptImportKey(hProv int64, pbData ptr[inout, int8], dwDataLen int32, hPubKey int64, dwFlags int32, phKey ptr[inout, int64])
CryptEncrypt(hKey int64, hHash int64, Final int32, dwFlags int32, pbData ptr[inout, int8], pdwDataLen ptr[inout, int32], dwBufLen int32)
CryptDecrypt(hKey int64, hHash int64, Final int32, dwFlags int32, pbData ptr[inout, int8], pdwDataLen ptr[inout, int32])
CryptCreateHash(hProv int64, Algid int32, hKey int64, dwFlags int32, phHash ptr[inout, int64])
CryptHashData(hHash int64, pbData ptr[inout, int8], dwDataLen int32, dwFlags int32)
CryptHashSessionKey(hHash int64, hKey int64, dwFlags int32)
CryptDestroyHash(hHash int64)
CryptSignHashA(hHash int64, dwKeySpec int32, szDescription ptr[inout, int8], dwFlags int32, pbSignature ptr[inout, int8], pdwSigLen ptr[inout, int32])
CryptVerifySignatureA(hHash int64, pbSignature ptr[inout, int8], dwSigLen int32, hPubKey int64, szDescription ptr[inout, int8], dwFlags int32)
CryptSetProviderA(pszProvName ptr[inout, int8], dwProvType int32)
CryptSetProviderExA(pszProvName ptr[inout, int8], dwProvType int32, pdwReserved ptr[inout, int32], dwFlags int32)
CryptGetDefaultProviderA(dwProvType int32, pdwReserved ptr[inout, int32], dwFlags int32, pszProvName ptr[inout, int8], pcbProvName ptr[inout, int32])
CryptEnumProviderTypesA(dwIndex int32, pdwReserved ptr[inout, int32], dwFlags int32, pdwProvType ptr[inout, int32], szTypeName ptr[inout, int8], pcbTypeName ptr[inout, int32])
CryptEnumProvidersA(dwIndex int32, pdwReserved ptr[inout, int32], dwFlags int32, pdwProvType ptr[inout, int32], szProvName ptr[inout, int8], pcbProvName ptr[inout, int32])
CryptContextAddRef(hProv int64, pdwReserved ptr[inout, int32], dwFlags int32)
CryptDuplicateKey(hKey int64, pdwReserved ptr[inout, int32], dwFlags int32, phKey ptr[inout, int64])
CryptDuplicateHash(hHash int64, pdwReserved ptr[inout, int32], dwFlags int32, phHash ptr[inout, int64])
BCryptFreeBuffer(pvBuffer ptr[inout, array[int8]])
NCryptOpenStorageProvider(phProvider ptr[inout, int64], pszProviderName ptr[inout, int16], dwFlags int32)
NCryptEnumAlgorithms(hProvider int64, dwAlgOperations int32, pdwAlgCount ptr[inout, int32], ppAlgList ptr[inout, ptr[inout, intptr]], dwFlags int32)
NCryptIsAlgSupported(hProvider int64, pszAlgId ptr[inout, int16], dwFlags int32)
NCryptEnumKeys(hProvider int64, pszScope ptr[inout, int16], ppKeyName ptr[inout, ptr[inout, intptr]], ppEnumState ptr[inout, ptr[inout, array[int8]]], dwFlags int32)
NCryptEnumStorageProviders(pdwProviderCount ptr[inout, int32], ppProviderList ptr[inout, ptr[inout, intptr]], dwFlags int32)
NCryptFreeBuffer(pvInput ptr[inout, array[int8]])
NCryptOpenKey(hProvider int64, phKey ptr[inout, int64], pszKeyName ptr[inout, int16], dwLegacyKeySpec int32, dwFlags int32)
NCryptCreatePersistedKey(hProvider int64, phKey ptr[inout, int64], pszAlgId ptr[inout, int16], pszKeyName ptr[inout, int16], dwLegacyKeySpec int32, dwFlags int32)
NCryptGetProperty(hObject int64, pszProperty ptr[inout, int16], pbOutput ptr[inout, int8], cbOutput int32, pcbResult ptr[inout, int32], dwFlags int32)
NCryptSetProperty(hObject int64, pszProperty ptr[inout, int16], pbInput ptr[inout, int8], cbInput int32, dwFlags int32)
NCryptFinalizeKey(hKey int64, dwFlags int32)
NCryptEncrypt(hKey int64, pbInput ptr[inout, int8], cbInput int32, pPaddingInfo ptr[inout, array[int8]], pbOutput ptr[inout, int8], cbOutput int32, pcbResult ptr[inout, int32], dwFlags int32)
NCryptDecrypt(hKey int64, pbInput ptr[inout, int8], cbInput int32, pPaddingInfo ptr[inout, array[int8]], pbOutput ptr[inout, int8], cbOutput int32, pcbResult ptr[inout, int32], dwFlags int32)
NCryptImportKey(hProvider int64, hImportKey int64, pszBlobType ptr[inout, int16], pParameterList ptr[inout, intptr], phKey ptr[inout, int64], pbData ptr[inout, int8], cbData int32, dwFlags int32)
NCryptExportKey(hKey int64, hExportKey int64, pszBlobType ptr[inout, int16], pParameterList ptr[inout, intptr], pbOutput ptr[inout, int8], cbOutput int32, pcbResult ptr[inout, int32], dwFlags int32)
NCryptSignHash(hKey int64, pPaddingInfo ptr[inout, array[int8]], pbHashValue ptr[inout, int8], cbHashValue int32, pbSignature ptr[inout, int8], cbSignature int32, pcbResult ptr[inout, int32], dwFlags int32)
NCryptVerifySignature(hKey int64, pPaddingInfo ptr[inout, array[int8]], pbHashValue ptr[inout, int8], cbHashValue int32, pbSignature ptr[inout, int8], cbSignature int32, dwFlags int32)
NCryptDeleteKey(hKey int64, dwFlags int32)
NCryptFreeObject(hObject int64)
NCryptIsKeyHandle(hKey int64)
NCryptTranslateHandle(phProvider ptr[inout, int64], phKey ptr[inout, int64], hLegacyProv int64, hLegacyKey int64, dwLegacyKeySpec int32, dwFlags int32)
NCryptNotifyChangeKey(hProvider int64, phEvent ptr[inout, HANDLE], dwFlags int32)
NCryptSecretAgreement(hPrivKey int64, hPubKey int64, phAgreedSecret ptr[inout, int64], dwFlags int32)
NCryptDeriveKey(hSharedSecret int64, pwszKDF ptr[inout, int16], pParameterList ptr[inout, intptr], pbDerivedKey ptr[inout, int8], cbDerivedKey int32, pcbResult ptr[inout, int32], dwFlags int32)
NCryptKeyDerivation(hKey int64, pParameterList ptr[inout, intptr], pbDerivedKey ptr[inout, int8], cbDerivedKey int32, pcbResult ptr[inout, int32], dwFlags int32)
NCryptCreateClaim(hSubjectKey int64, hAuthorityKey int64, dwClaimType int32, pParameterList ptr[inout, intptr], pbClaimBlob ptr[inout, int8], cbClaimBlob int32, pcbResult ptr[inout, int32], dwFlags int32)
NCryptVerifyClaim(hSubjectKey int64, hAuthorityKey int64, dwClaimType int32, pParameterList ptr[inout, intptr], pbClaimBlob ptr[inout, int8], cbClaimBlob int32, pOutput ptr[inout, intptr], dwFlags int32)
CryptFormatObject(dwCertEncodingType int32, dwFormatType int32, dwFormatStrType int32, pFormatStruct ptr[inout, array[int8]], lpszStructType ptr[inout, int8], pbEncoded ptr[inout, int8], cbEncoded int32, pbFormat ptr[inout, array[int8]], pcbFormat ptr[inout, int32])
CryptEncodeObjectEx(dwCertEncodingType int32, lpszStructType ptr[inout, int8], pvStructInfo ptr[inout, array[int8]], dwFlags int32, pEncodePara ptr[inout, intptr], pvEncoded ptr[inout, array[int8]], pcbEncoded ptr[inout, int32])
CryptEncodeObject(dwCertEncodingType int32, lpszStructType ptr[inout, int8], pvStructInfo ptr[inout, array[int8]], pbEncoded ptr[inout, int8], pcbEncoded ptr[inout, int32])
CryptDecodeObjectEx(dwCertEncodingType int32, lpszStructType ptr[inout, int8], pbEncoded ptr[inout, int8], cbEncoded int32, dwFlags int32, pDecodePara ptr[inout, intptr], pvStructInfo ptr[inout, array[int8]], pcbStructInfo ptr[inout, int32])
CryptDecodeObject(dwCertEncodingType int32, lpszStructType ptr[inout, int8], pbEncoded ptr[inout, int8], cbEncoded int32, dwFlags int32, pvStructInfo ptr[inout, array[int8]], pcbStructInfo ptr[inout, int32])
CryptInstallOIDFunctionAddress(hModule ptr[inout, intptr], dwEncodingType int32, pszFuncName ptr[inout, int8], cFuncEntry int32, rgFuncEntry ptr[inout, intptr], dwFlags int32)
CryptInitOIDFunctionSet(pszFuncName ptr[inout, int8], dwFlags int32)
CryptGetOIDFunctionAddress(hFuncSet ptr[inout, array[int8]], dwEncodingType int32, pszOID ptr[inout, int8], dwFlags int32, ppvFuncAddr ptr[inout, ptr[inout, array[int8]]], phFuncAddr ptr[inout, ptr[inout, array[int8]]])
CryptGetDefaultOIDDllList(hFuncSet ptr[inout, array[int8]], dwEncodingType int32, pwszDllList ptr[inout, int16], pcchDllList ptr[inout, int32])
CryptGetDefaultOIDFunctionAddress(hFuncSet ptr[inout, array[int8]], dwEncodingType int32, pwszDll ptr[inout, int16], dwFlags int32, ppvFuncAddr ptr[inout, ptr[inout, array[int8]]], phFuncAddr ptr[inout, ptr[inout, array[int8]]])
CryptFreeOIDFunctionAddress(hFuncAddr ptr[inout, array[int8]], dwFlags int32)
CryptRegisterOIDFunction(dwEncodingType int32, pszFuncName ptr[inout, int8], pszOID ptr[inout, int8], pwszDll ptr[inout, int16], pszOverrideFuncName ptr[inout, int8])
CryptUnregisterOIDFunction(dwEncodingType int32, pszFuncName ptr[inout, int8], pszOID ptr[inout, int8])
CryptRegisterDefaultOIDFunction(dwEncodingType int32, pszFuncName ptr[inout, int8], dwIndex int32, pwszDll ptr[inout, int16])
CryptUnregisterDefaultOIDFunction(dwEncodingType int32, pszFuncName ptr[inout, int8], pwszDll ptr[inout, int16])
CryptSetOIDFunctionValue(dwEncodingType int32, pszFuncName ptr[inout, int8], pszOID ptr[inout, int8], pwszValueName ptr[inout, int16], dwValueType int32, pbValueData ptr[inout, int8], cbValueData int32)
CryptGetOIDFunctionValue(dwEncodingType int32, pszFuncName ptr[inout, int8], pszOID ptr[inout, int8], pwszValueName ptr[inout, int16], pdwValueType ptr[inout, int32], pbValueData ptr[inout, int8], pcbValueData ptr[inout, int32])
CryptEnumOIDFunction(dwEncodingType int32, pszFuncName ptr[inout, int8], pszOID ptr[inout, int8], dwFlags int32, pvArg ptr[inout, array[int8]], pfnEnumOIDFunc ptr[inout, intptr])
CryptFindOIDInfo(dwKeyType int32, pvKey ptr[inout, array[int8]], dwGroupId int32)
CryptRegisterOIDInfo(pInfo ptr[inout, intptr], dwFlags int32)
CryptUnregisterOIDInfo(pInfo ptr[inout, intptr])
CryptEnumOIDInfo(dwGroupId int32, dwFlags int32, pvArg ptr[inout, array[int8]], pfnEnumOIDInfo ptr[inout, intptr])
CryptFindLocalizedName(pwszCryptName ptr[inout, int16])
CryptMsgOpenToEncode(dwMsgEncodingType int32, dwFlags int32, dwMsgType int32, pvMsgEncodeInfo ptr[inout, array[int8]], pszInnerContentObjID ptr[inout, int8], pStreamInfo ptr[inout, intptr])
CryptMsgCalculateEncodedLength(dwMsgEncodingType int32, dwFlags int32, dwMsgType int32, pvMsgEncodeInfo ptr[inout, array[int8]], pszInnerContentObjID ptr[inout, int8], cbData int32)
CryptMsgOpenToDecode(dwMsgEncodingType int32, dwFlags int32, dwMsgType int32, hCryptProv int64, pRecipientInfo ptr[inout, intptr], pStreamInfo ptr[inout, intptr])
CryptMsgDuplicate(hCryptMsg ptr[inout, array[int8]])
CryptMsgClose(hCryptMsg ptr[inout, array[int8]])
CryptMsgUpdate(hCryptMsg ptr[inout, array[int8]], pbData ptr[inout, int8], cbData int32, fFinal int32)
CryptMsgGetParam(hCryptMsg ptr[inout, array[int8]], dwParamType int32, dwIndex int32, pvData ptr[inout, array[int8]], pcbData ptr[inout, int32])
CryptMsgControl(hCryptMsg ptr[inout, array[int8]], dwFlags int32, dwCtrlType int32, pvCtrlPara ptr[inout, array[int8]])
CryptMsgVerifyCountersignatureEncoded(hCryptProv int64, dwEncodingType int32, pbSignerInfo ptr[inout, int8], cbSignerInfo int32, pbSignerInfoCountersignature ptr[inout, int8], cbSignerInfoCountersignature int32, pciCountersigner ptr[inout, intptr])
CryptMsgVerifyCountersignatureEncodedEx(hCryptProv int64, dwEncodingType int32, pbSignerInfo ptr[inout, int8], cbSignerInfo int32, pbSignerInfoCountersignature ptr[inout, int8], cbSignerInfoCountersignature int32, dwSignerType int32, pvSigner ptr[inout, array[int8]], dwFlags int32)
CryptMsgCountersign(hCryptMsg ptr[inout, array[int8]], dwIndex int32, cCountersigners int32, rgCountersigners ptr[inout, intptr])
CryptMsgCountersignEncoded(dwEncodingType int32, pbSignerInfo ptr[inout, int8], cbSignerInfo int32, cCountersigners int32, rgCountersigners ptr[inout, intptr], pbCountersignature ptr[inout, int8], pcbCountersignature ptr[inout, int32])
CertOpenStore(lpszStoreProvider ptr[inout, int8], dwEncodingType int32, hCryptProv int64, dwFlags int32, pvPara ptr[inout, array[int8]])
CertDuplicateStore(hCertStore ptr[inout, array[int8]])
CertSaveStore(hCertStore ptr[inout, array[int8]], dwEncodingType int32, dwSaveAs int32, dwSaveTo int32, pvSaveToPara ptr[inout, array[int8]], dwFlags int32)
CertCloseStore(hCertStore ptr[inout, array[int8]], dwFlags int32)
CertGetSubjectCertificateFromStore(hCertStore ptr[inout, array[int8]], dwCertEncodingType int32, pCertId ptr[inout, intptr])
CertEnumCertificatesInStore(hCertStore ptr[inout, array[int8]], pPrevCertContext ptr[inout, intptr])
CertFindCertificateInStore(hCertStore ptr[inout, array[int8]], dwCertEncodingType int32, dwFindFlags int32, dwFindType int32, pvFindPara ptr[inout, array[int8]], pPrevCertContext ptr[inout, intptr])
CertGetIssuerCertificateFromStore(hCertStore ptr[inout, array[int8]], pSubjectContext ptr[inout, intptr], pPrevIssuerContext ptr[inout, intptr], pdwFlags ptr[inout, int32])
CertVerifySubjectCertificateContext(pSubject ptr[inout, intptr], pIssuer ptr[inout, intptr], pdwFlags ptr[inout, int32])
CertDuplicateCertificateContext(pCertContext ptr[inout, intptr])
CertCreateCertificateContext(dwCertEncodingType int32, pbCertEncoded ptr[inout, int8], cbCertEncoded int32)
CertFreeCertificateContext(pCertContext ptr[inout, intptr])
CertSetCertificateContextProperty(pCertContext ptr[inout, intptr], dwPropId int32, dwFlags int32, pvData ptr[inout, array[int8]])
CertGetCertificateContextProperty(pCertContext ptr[inout, intptr], dwPropId int32, pvData ptr[inout, array[int8]], pcbData ptr[inout, int32])
CertEnumCertificateContextProperties(pCertContext ptr[inout, intptr], dwPropId int32)
CertCreateCTLEntryFromCertificateContextProperties(pCertContext ptr[inout, intptr], cOptAttr int32, rgOptAttr ptr[inout, intptr], dwFlags int32, pvReserved ptr[inout, array[int8]], pCtlEntry ptr[inout, intptr], pcbCtlEntry ptr[inout, int32])
CertSetCertificateContextPropertiesFromCTLEntry(pCertContext ptr[inout, intptr], pCtlEntry ptr[inout, intptr], dwFlags int32)
CertGetCRLFromStore(hCertStore ptr[inout, array[int8]], pIssuerContext ptr[inout, intptr], pPrevCrlContext ptr[inout, intptr], pdwFlags ptr[inout, int32])
CertEnumCRLsInStore(hCertStore ptr[inout, array[int8]], pPrevCrlContext ptr[inout, intptr])
CertFindCRLInStore(hCertStore ptr[inout, array[int8]], dwCertEncodingType int32, dwFindFlags int32, dwFindType int32, pvFindPara ptr[inout, array[int8]], pPrevCrlContext ptr[inout, intptr])
CertDuplicateCRLContext(pCrlContext ptr[inout, intptr])
CertCreateCRLContext(dwCertEncodingType int32, pbCrlEncoded ptr[inout, int8], cbCrlEncoded int32)
CertFreeCRLContext(pCrlContext ptr[inout, intptr])
CertSetCRLContextProperty(pCrlContext ptr[inout, intptr], dwPropId int32, dwFlags int32, pvData ptr[inout, array[int8]])
CertGetCRLContextProperty(pCrlContext ptr[inout, intptr], dwPropId int32, pvData ptr[inout, array[int8]], pcbData ptr[inout, int32])
CertEnumCRLContextProperties(pCrlContext ptr[inout, intptr], dwPropId int32)
CertFindCertificateInCRL(pCert ptr[inout, intptr], pCrlContext ptr[inout, intptr], dwFlags int32, pvReserved ptr[inout, array[int8]], ppCrlEntry ptr[inout, ptr[inout, intptr]])
CertIsValidCRLForCertificate(pCert ptr[inout, intptr], pCrl ptr[inout, intptr], dwFlags int32, pvReserved ptr[inout, array[int8]])
CertAddEncodedCertificateToStore(hCertStore ptr[inout, array[int8]], dwCertEncodingType int32, pbCertEncoded ptr[inout, int8], cbCertEncoded int32, dwAddDisposition int32, ppCertContext ptr[inout, ptr[inout, intptr]])
CertAddCertificateContextToStore(hCertStore ptr[inout, array[int8]], pCertContext ptr[inout, intptr], dwAddDisposition int32, ppStoreContext ptr[inout, ptr[inout, intptr]])
CertAddSerializedElementToStore(hCertStore ptr[inout, array[int8]], pbElement ptr[inout, int8], cbElement int32, dwAddDisposition int32, dwFlags int32, dwContextTypeFlags int32, pdwContextType ptr[inout, int32], ppvContext ptr[inout, ptr[inout, array[int8]]])
CertDeleteCertificateFromStore(pCertContext ptr[inout, intptr])
CertAddEncodedCRLToStore(hCertStore ptr[inout, array[int8]], dwCertEncodingType int32, pbCrlEncoded ptr[inout, int8], cbCrlEncoded int32, dwAddDisposition int32, ppCrlContext ptr[inout, ptr[inout, intptr]])
CertAddCRLContextToStore(hCertStore ptr[inout, array[int8]], pCrlContext ptr[inout, intptr], dwAddDisposition int32, ppStoreContext ptr[inout, ptr[inout, intptr]])
CertDeleteCRLFromStore(pCrlContext ptr[inout, intptr])
CertSerializeCertificateStoreElement(pCertContext ptr[inout, intptr], dwFlags int32, pbElement ptr[inout, int8], pcbElement ptr[inout, int32])
CertSerializeCRLStoreElement(pCrlContext ptr[inout, intptr], dwFlags int32, pbElement ptr[inout, int8], pcbElement ptr[inout, int32])
CertDuplicateCTLContext(pCtlContext ptr[inout, intptr])
CertCreateCTLContext(dwMsgAndCertEncodingType int32, pbCtlEncoded ptr[inout, int8], cbCtlEncoded int32)
CertFreeCTLContext(pCtlContext ptr[inout, intptr])
CertSetCTLContextProperty(pCtlContext ptr[inout, intptr], dwPropId int32, dwFlags int32, pvData ptr[inout, array[int8]])
CertGetCTLContextProperty(pCtlContext ptr[inout, intptr], dwPropId int32, pvData ptr[inout, array[int8]], pcbData ptr[inout, int32])
CertEnumCTLContextProperties(pCtlContext ptr[inout, intptr], dwPropId int32)
CertEnumCTLsInStore(hCertStore ptr[inout, array[int8]], pPrevCtlContext ptr[inout, intptr])
CertFindSubjectInCTL(dwEncodingType int32, dwSubjectType int32, pvSubject ptr[inout, array[int8]], pCtlContext ptr[inout, intptr], dwFlags int32)
CertFindCTLInStore(hCertStore ptr[inout, array[int8]], dwMsgAndCertEncodingType int32, dwFindFlags int32, dwFindType int32, pvFindPara ptr[inout, array[int8]], pPrevCtlContext ptr[inout, intptr])
CertAddEncodedCTLToStore(hCertStore ptr[inout, array[int8]], dwMsgAndCertEncodingType int32, pbCtlEncoded ptr[inout, int8], cbCtlEncoded int32, dwAddDisposition int32, ppCtlContext ptr[inout, ptr[inout, intptr]])
CertAddCTLContextToStore(hCertStore ptr[inout, array[int8]], pCtlContext ptr[inout, intptr], dwAddDisposition int32, ppStoreContext ptr[inout, ptr[inout, intptr]])
CertSerializeCTLStoreElement(pCtlContext ptr[inout, intptr], dwFlags int32, pbElement ptr[inout, int8], pcbElement ptr[inout, int32])
CertDeleteCTLFromStore(pCtlContext ptr[inout, intptr])
CertAddCertificateLinkToStore(hCertStore ptr[inout, array[int8]], pCertContext ptr[inout, intptr], dwAddDisposition int32, ppStoreContext ptr[inout, ptr[inout, intptr]])
CertAddCRLLinkToStore(hCertStore ptr[inout, array[int8]], pCrlContext ptr[inout, intptr], dwAddDisposition int32, ppStoreContext ptr[inout, ptr[inout, intptr]])
CertAddCTLLinkToStore(hCertStore ptr[inout, array[int8]], pCtlContext ptr[inout, intptr], dwAddDisposition int32, ppStoreContext ptr[inout, ptr[inout, intptr]])
CertAddStoreToCollection(hCollectionStore ptr[inout, array[int8]], hSiblingStore ptr[inout, array[int8]], dwUpdateFlags int32, dwPriority int32)
CertRemoveStoreFromCollection(hCollectionStore ptr[inout, array[int8]], hSiblingStore ptr[inout, array[int8]])
CertControlStore(hCertStore ptr[inout, array[int8]], dwFlags int32, dwCtrlType int32, pvCtrlPara ptr[inout, array[int8]])
CertSetStoreProperty(hCertStore ptr[inout, array[int8]], dwPropId int32, dwFlags int32, pvData ptr[inout, array[int8]])
CertGetStoreProperty(hCertStore ptr[inout, array[int8]], dwPropId int32, pvData ptr[inout, array[int8]], pcbData ptr[inout, int32])
CertCreateContext(dwContextType int32, dwEncodingType int32, pbEncoded ptr[inout, int8], cbEncoded int32, dwFlags int32, pCreatePara ptr[inout, intptr])
CertRegisterSystemStore(pvSystemStore ptr[inout, array[int8]], dwFlags int32, pStoreInfo ptr[inout, intptr], pvReserved ptr[inout, array[int8]])
CertRegisterPhysicalStore(pvSystemStore ptr[inout, array[int8]], dwFlags int32, pwszStoreName ptr[inout, int16], pStoreInfo ptr[inout, intptr], pvReserved ptr[inout, array[int8]])
CertUnregisterSystemStore(pvSystemStore ptr[inout, array[int8]], dwFlags int32)
CertUnregisterPhysicalStore(pvSystemStore ptr[inout, array[int8]], dwFlags int32, pwszStoreName ptr[inout, int16])
CertEnumSystemStoreLocation(dwFlags int32, pvArg ptr[inout, array[int8]], pfnEnum ptr[inout, intptr])
CertEnumSystemStore(dwFlags int32, pvSystemStoreLocationPara ptr[inout, array[int8]], pvArg ptr[inout, array[int8]], pfnEnum ptr[inout, intptr])
CertEnumPhysicalStore(pvSystemStore ptr[inout, array[int8]], dwFlags int32, pvArg ptr[inout, array[int8]], pfnEnum ptr[inout, intptr])
CertGetEnhancedKeyUsage(pCertContext ptr[inout, intptr], dwFlags int32, pUsage ptr[inout, intptr], pcbUsage ptr[inout, int32])
CertSetEnhancedKeyUsage(pCertContext ptr[inout, intptr], pUsage ptr[inout, intptr])
CertAddEnhancedKeyUsageIdentifier(pCertContext ptr[inout, intptr], pszUsageIdentifier ptr[inout, int8])
CertRemoveEnhancedKeyUsageIdentifier(pCertContext ptr[inout, intptr], pszUsageIdentifier ptr[inout, int8])
CertGetValidUsages(cCerts int32, rghCerts ptr[inout, ptr[inout, intptr]], cNumOIDs ptr[inout, int32], rghOIDs ptr[inout, ptr[inout, int8]], pcbOIDs ptr[inout, int32])
CryptMsgGetAndVerifySigner(hCryptMsg ptr[inout, array[int8]], cSignerStore int32, rghSignerStore ptr[inout, ptr[inout, array[int8]]], dwFlags int32, ppSigner ptr[inout, ptr[inout, intptr]], pdwSignerIndex ptr[inout, int32])
CryptMsgSignCTL(dwMsgEncodingType int32, pbCtlContent ptr[inout, int8], cbCtlContent int32, pSignInfo ptr[inout, intptr], dwFlags int32, pbEncoded ptr[inout, int8], pcbEncoded ptr[inout, int32])
CryptMsgEncodeAndSignCTL(dwMsgEncodingType int32, pCtlInfo ptr[inout, intptr], pSignInfo ptr[inout, intptr], dwFlags int32, pbEncoded ptr[inout, int8], pcbEncoded ptr[inout, int32])
CertFindSubjectInSortedCTL(pSubjectIdentifier ptr[inout, intptr], pCtlContext ptr[inout, intptr], dwFlags int32, pvReserved ptr[inout, array[int8]], pEncodedAttributes ptr[inout, intptr])
CertEnumSubjectInSortedCTL(pCtlContext ptr[inout, intptr], ppvNextSubject ptr[inout, ptr[inout, array[int8]]], pSubjectIdentifier ptr[inout, intptr], pEncodedAttributes ptr[inout, intptr])
CertVerifyCTLUsage(dwEncodingType int32, dwSubjectType int32, pvSubject ptr[inout, array[int8]], pSubjectUsage ptr[inout, intptr], dwFlags int32, pVerifyUsagePara ptr[inout, intptr], pVerifyUsageStatus ptr[inout, intptr])
CertVerifyRevocation(dwEncodingType int32, dwRevType int32, cContext int32, rgpvContext ptr[inout, ptr[inout, array[int8]]], dwFlags int32, pRevPara ptr[inout, intptr], pRevStatus ptr[inout, intptr])
CertCompareIntegerBlob(pInt1 ptr[inout, intptr], pInt2 ptr[inout, intptr])
CertCompareCertificate(dwCertEncodingType int32, pCertId1 ptr[inout, intptr], pCertId2 ptr[inout, intptr])
CertCompareCertificateName(dwCertEncodingType int32, pCertName1 ptr[inout, intptr], pCertName2 ptr[inout, intptr])
CertIsRDNAttrsInCertificateName(dwCertEncodingType int32, dwFlags int32, pCertName ptr[inout, intptr], pRDN ptr[inout, intptr])
CertComparePublicKeyInfo(dwCertEncodingType int32, pPublicKey1 ptr[inout, intptr], pPublicKey2 ptr[inout, intptr])
CertGetPublicKeyLength(dwCertEncodingType int32, pPublicKey ptr[inout, intptr])
CryptVerifyCertificateSignature(hCryptProv int64, dwCertEncodingType int32, pbEncoded ptr[inout, int8], cbEncoded int32, pPublicKey ptr[inout, intptr])
CryptVerifyCertificateSignatureEx(hCryptProv int64, dwCertEncodingType int32, dwSubjectType int32, pvSubject ptr[inout, array[int8]], dwIssuerType int32, pvIssuer ptr[inout, array[int8]], dwFlags int32, pvExtra ptr[inout, array[int8]])
CertIsStrongHashToSign(pStrongSignPara ptr[inout, intptr], pwszCNGHashAlgid ptr[inout, int16], pSigningCert ptr[inout, intptr])
CryptHashToBeSigned(hCryptProv int64, dwCertEncodingType int32, pbEncoded ptr[inout, int8], cbEncoded int32, pbComputedHash ptr[inout, int8], pcbComputedHash ptr[inout, int32])
CryptHashCertificate(hCryptProv int64, Algid int32, dwFlags int32, pbEncoded ptr[inout, int8], cbEncoded int32, pbComputedHash ptr[inout, int8], pcbComputedHash ptr[inout, int32])
CryptHashCertificate2(pwszCNGHashAlgid ptr[inout, int16], dwFlags int32, pvReserved ptr[inout, array[int8]], pbEncoded ptr[inout, int8], cbEncoded int32, pbComputedHash ptr[inout, int8], pcbComputedHash ptr[inout, int32])
CryptSignCertificate(hCryptProvOrNCryptKey int64, dwKeySpec int32, dwCertEncodingType int32, pbEncodedToBeSigned ptr[inout, int8], cbEncodedToBeSigned int32, pSignatureAlgorithm ptr[inout, intptr], pvHashAuxInfo ptr[inout, array[int8]], pbSignature ptr[inout, int8], pcbSignature ptr[inout, int32])
CryptSignAndEncodeCertificate(hCryptProvOrNCryptKey int64, dwKeySpec int32, dwCertEncodingType int32, lpszStructType ptr[inout, int8], pvStructInfo ptr[inout, array[int8]], pSignatureAlgorithm ptr[inout, intptr], pvHashAuxInfo ptr[inout, array[int8]], pbEncoded ptr[inout, int8], pcbEncoded ptr[inout, int32])
CertVerifyTimeValidity(pTimeToVerify ptr[inout, intptr], pCertInfo ptr[inout, intptr])
CertVerifyCRLTimeValidity(pTimeToVerify ptr[inout, intptr], pCrlInfo ptr[inout, intptr])
CertVerifyValidityNesting(pSubjectInfo ptr[inout, intptr], pIssuerInfo ptr[inout, intptr])
CertVerifyCRLRevocation(dwCertEncodingType int32, pCertId ptr[inout, intptr], cCrlInfo int32, rgpCrlInfo ptr[inout, ptr[inout, intptr]])
CertAlgIdToOID(dwAlgId int32)
CertOIDToAlgId(pszObjId ptr[inout, int8])
CertFindExtension(pszObjId ptr[inout, int8], cExtensions int32, rgExtensions ptr[inout, intptr])
CertFindAttribute(pszObjId ptr[inout, int8], cAttr int32, rgAttr ptr[inout, intptr])
CertFindRDNAttr(pszObjId ptr[inout, int8], pName ptr[inout, intptr])
CertGetIntendedKeyUsage(dwCertEncodingType int32, pCertInfo ptr[inout, intptr], pbKeyUsage ptr[inout, int8], cbKeyUsage int32)
CryptInstallDefaultContext(hCryptProv int64, dwDefaultType int32, pvDefaultPara ptr[inout, array[int8]], dwFlags int32, pvReserved ptr[inout, array[int8]], phDefaultContext ptr[inout, ptr[inout, array[int8]]])
CryptUninstallDefaultContext(hDefaultContext ptr[inout, array[int8]], dwFlags int32, pvReserved ptr[inout, array[int8]])
CryptExportPublicKeyInfo(hCryptProvOrNCryptKey int64, dwKeySpec int32, dwCertEncodingType int32, pInfo ptr[inout, intptr], pcbInfo ptr[inout, int32])
CryptExportPublicKeyInfoEx(hCryptProvOrNCryptKey int64, dwKeySpec int32, dwCertEncodingType int32, pszPublicKeyObjId ptr[inout, int8], dwFlags int32, pvAuxInfo ptr[inout, array[int8]], pInfo ptr[inout, intptr], pcbInfo ptr[inout, int32])
CryptExportPublicKeyInfoFromBCryptKeyHandle(hBCryptKey ptr[inout, array[int8]], dwCertEncodingType int32, pszPublicKeyObjId ptr[inout, int8], dwFlags int32, pvAuxInfo ptr[inout, array[int8]], pInfo ptr[inout, intptr], pcbInfo ptr[inout, int32])
CryptImportPublicKeyInfo(hCryptProv int64, dwCertEncodingType int32, pInfo ptr[inout, intptr], phKey ptr[inout, int64])
CryptImportPublicKeyInfoEx(hCryptProv int64, dwCertEncodingType int32, pInfo ptr[inout, intptr], aiKeyAlg int32, dwFlags int32, pvAuxInfo ptr[inout, array[int8]], phKey ptr[inout, int64])
CryptImportPublicKeyInfoEx2(dwCertEncodingType int32, pInfo ptr[inout, intptr], dwFlags int32, pvAuxInfo ptr[inout, array[int8]], phKey ptr[inout, ptr[inout, array[int8]]])
CryptAcquireCertificatePrivateKey(pCert ptr[inout, intptr], dwFlags int32, pvParameters ptr[inout, array[int8]], phCryptProvOrNCryptKey ptr[inout, int64], pdwKeySpec ptr[inout, int32], pfCallerFreeProvOrNCryptKey ptr[inout, int32])
CryptFindCertificateKeyProvInfo(pCert ptr[inout, intptr], dwFlags int32, pvReserved ptr[inout, array[int8]])
CryptImportPKCS8(sPrivateKeyAndParams intptr, dwFlags int32, phCryptProv ptr[inout, int64], pvAuxInfo ptr[inout, array[int8]])
CryptExportPKCS8(hCryptProv int64, dwKeySpec int32, pszPrivateKeyObjId ptr[inout, int8], dwFlags int32, pvAuxInfo ptr[inout, array[int8]], pbPrivateKeyBlob ptr[inout, int8], pcbPrivateKeyBlob ptr[inout, int32])
CryptHashPublicKeyInfo(hCryptProv int64, Algid int32, dwFlags int32, dwCertEncodingType int32, pInfo ptr[inout, intptr], pbComputedHash ptr[inout, int8], pcbComputedHash ptr[inout, int32])
CertRDNValueToStrA(dwValueType int32, pValue ptr[inout, intptr], psz ptr[inout, int8], csz int32)
CertNameToStrA(dwCertEncodingType int32, pName ptr[inout, intptr], dwStrType int32, psz ptr[inout, int8], csz int32)
CertStrToNameA(dwCertEncodingType int32, pszX500 ptr[inout, int8], dwStrType int32, pvReserved ptr[inout, array[int8]], pbEncoded ptr[inout, int8], pcbEncoded ptr[inout, int32], ppszError ptr[inout, ptr[inout, int8]])
CertGetNameStringA(pCertContext ptr[inout, intptr], dwType int32, dwFlags int32, pvTypePara ptr[inout, array[int8]], pszNameString ptr[inout, int8], cchNameString int32)
CryptSignMessage(pSignPara ptr[inout, intptr], fDetachedSignature int32, cToBeSigned int32, rgpbToBeSigned ptr[inout, ptr[inout, int8]], rgcbToBeSigned ptr[inout, int32], pbSignedBlob ptr[inout, int8], pcbSignedBlob ptr[inout, int32])
CryptVerifyMessageSignature(pVerifyPara ptr[inout, intptr], dwSignerIndex int32, pbSignedBlob ptr[inout, int8], cbSignedBlob int32, pbDecoded ptr[inout, int8], pcbDecoded ptr[inout, int32], ppSignerCert ptr[inout, ptr[inout, intptr]])
CryptGetMessageSignerCount(dwMsgEncodingType int32, pbSignedBlob ptr[inout, int8], cbSignedBlob int32)
CryptGetMessageCertificates(dwMsgAndCertEncodingType int32, hCryptProv int64, dwFlags int32, pbSignedBlob ptr[inout, int8], cbSignedBlob int32)
CryptVerifyDetachedMessageSignature(pVerifyPara ptr[inout, intptr], dwSignerIndex int32, pbDetachedSignBlob ptr[inout, int8], cbDetachedSignBlob int32, cToBeSigned int32, rgpbToBeSigned ptr[inout, ptr[inout, int8]], rgcbToBeSigned ptr[inout, int32], ppSignerCert ptr[inout, ptr[inout, intptr]])
CryptEncryptMessage(pEncryptPara ptr[inout, intptr], cRecipientCert int32, rgpRecipientCert ptr[inout, ptr[inout, intptr]], pbToBeEncrypted ptr[inout, int8], cbToBeEncrypted int32, pbEncryptedBlob ptr[inout, int8], pcbEncryptedBlob ptr[inout, int32])
CryptDecryptMessage(pDecryptPara ptr[inout, intptr], pbEncryptedBlob ptr[inout, int8], cbEncryptedBlob int32, pbDecrypted ptr[inout, int8], pcbDecrypted ptr[inout, int32], ppXchgCert ptr[inout, ptr[inout, intptr]])
CryptSignAndEncryptMessage(pSignPara ptr[inout, intptr], pEncryptPara ptr[inout, intptr], cRecipientCert int32, rgpRecipientCert ptr[inout, ptr[inout, intptr]], pbToBeSignedAndEncrypted ptr[inout, int8], cbToBeSignedAndEncrypted int32, pbSignedAndEncryptedBlob ptr[inout, int8], pcbSignedAndEncryptedBlob ptr[inout, int32])
CryptDecryptAndVerifyMessageSignature(pDecryptPara ptr[inout, intptr], pVerifyPara ptr[inout, intptr], dwSignerIndex int32, pbEncryptedBlob ptr[inout, int8], cbEncryptedBlob int32, pbDecrypted ptr[inout, int8], pcbDecrypted ptr[inout, int32], ppXchgCert ptr[inout, ptr[inout, intptr]], ppSignerCert ptr[inout, ptr[inout, intptr]])
CryptDecodeMessage(dwMsgTypeFlags int32, pDecryptPara ptr[inout, intptr], pVerifyPara ptr[inout, intptr], dwSignerIndex int32, pbEncodedBlob ptr[inout, int8], cbEncodedBlob int32, dwPrevInnerContentType int32, pdwMsgType ptr[inout, int32], pdwInnerContentType ptr[inout, int32])
CryptHashMessage(pHashPara ptr[inout, intptr], fDetachedHash int32, cToBeHashed int32, rgpbToBeHashed ptr[inout, ptr[inout, int8]], rgcbToBeHashed ptr[inout, int32], pbHashedBlob ptr[inout, int8], pcbHashedBlob ptr[inout, int32], pbComputedHash ptr[inout, int8], pcbComputedHash ptr[inout, int32])
CryptVerifyMessageHash(pHashPara ptr[inout, intptr], pbHashedBlob ptr[inout, int8], cbHashedBlob int32, pbToBeHashed ptr[inout, int8], pcbToBeHashed ptr[inout, int32], pbComputedHash ptr[inout, int8], pcbComputedHash ptr[inout, int32])
CryptVerifyDetachedMessageHash(pHashPara ptr[inout, intptr], pbDetachedHashBlob ptr[inout, int8], cbDetachedHashBlob int32, cToBeHashed int32, rgpbToBeHashed ptr[inout, ptr[inout, int8]], rgcbToBeHashed ptr[inout, int32], pbComputedHash ptr[inout, int8], pcbComputedHash ptr[inout, int32])
CryptSignMessageWithKey(pSignPara ptr[inout, intptr], pbToBeSigned ptr[inout, int8], cbToBeSigned int32, pbSignedBlob ptr[inout, int8], pcbSignedBlob ptr[inout, int32])
CryptVerifyMessageSignatureWithKey(pVerifyPara ptr[inout, intptr], pPublicKeyInfo ptr[inout, intptr], pbSignedBlob ptr[inout, int8], cbSignedBlob int32, pbDecoded ptr[inout, int8], pcbDecoded ptr[inout, int32])
CertOpenSystemStoreA(hProv int64, szSubsystemProtocol ptr[inout, int8])
CertAddEncodedCertificateToSystemStoreA(szCertStoreName ptr[inout, int8], pbCertEncoded ptr[inout, int8], cbCertEncoded int32)
CryptQueryObject(dwObjectType int32, pvObject ptr[inout, array[int8]], dwExpectedContentTypeFlags int32, dwExpectedFormatTypeFlags int32, dwFlags int32, pdwMsgAndCertEncodingType ptr[inout, int32], pdwContentType ptr[inout, int32], pdwFormatType ptr[inout, int32], phCertStore ptr[inout, ptr[inout, array[int8]]])
CryptMemAlloc(cbSize int32)
CryptMemRealloc(pv ptr[inout, array[int8]], cbSize int32)
CryptMemFree(pv ptr[inout, array[int8]])
CryptCreateAsyncHandle(dwFlags int32, phAsync ptr[inout, HANDLE])
CryptSetAsyncParam(hAsync ptr[inout, array[int8]], pszParamOid ptr[inout, int8], pvParam ptr[inout, array[int8]], pfnFree ptr[inout, intptr])
CryptGetAsyncParam(hAsync ptr[inout, array[int8]], pszParamOid ptr[inout, int8], ppvParam ptr[inout, ptr[inout, array[int8]]], ppfnFree ptr[inout, ptr[inout, intptr]])
CryptCloseAsyncHandle(hAsync ptr[inout, array[int8]])
CryptRetrieveObjectByUrlA(pszUrl ptr[inout, int8], pszObjectOid ptr[inout, int8], dwRetrievalFlags int32, dwTimeout int32, ppvObject ptr[inout, ptr[inout, array[int8]]], hAsyncRetrieve ptr[inout, array[int8]], pCredentials ptr[inout, intptr], pvVerify ptr[inout, array[int8]], pAuxInfo ptr[inout, intptr])
CryptInstallCancelRetrieval(pfnCancel ptr[inout, intptr], pvArg ptr[inout, array[int8]], dwFlags int32, pvReserved ptr[inout, array[int8]])
CryptUninstallCancelRetrieval(dwFlags int32, pvReserved ptr[inout, array[int8]])
CryptGetObjectUrl(pszUrlOid ptr[inout, int8], pvPara ptr[inout, array[int8]], dwFlags int32, pUrlArray ptr[inout, intptr], pcbUrlArray ptr[inout, int32], pUrlInfo ptr[inout, intptr], pcbUrlInfo ptr[inout, int32], pvReserved ptr[inout, array[int8]])
CertCreateSelfSignCertificate(hCryptProvOrNCryptKey int64, pSubjectIssuerBlob ptr[inout, intptr], dwFlags int32, pKeyProvInfo ptr[inout, intptr], pSignatureAlgorithm ptr[inout, intptr], pStartTime ptr[inout, intptr], pEndTime ptr[inout, intptr], pExtensions ptr[inout, intptr])
CryptGetKeyIdentifierProperty(pKeyIdentifier ptr[inout, intptr], dwPropId int32, dwFlags int32, pwszComputerName ptr[inout, int16], pvReserved ptr[inout, array[int8]], pvData ptr[inout, array[int8]], pcbData ptr[inout, int32])
CryptSetKeyIdentifierProperty(pKeyIdentifier ptr[inout, intptr], dwPropId int32, dwFlags int32, pwszComputerName ptr[inout, int16], pvReserved ptr[inout, array[int8]], pvData ptr[inout, array[int8]])
CryptEnumKeyIdentifierProperties(pKeyIdentifier ptr[inout, intptr], dwPropId int32, dwFlags int32, pwszComputerName ptr[inout, int16], pvReserved ptr[inout, array[int8]], pvArg ptr[inout, array[int8]], pfnEnum ptr[inout, intptr])
CryptCreateKeyIdentifierFromCSP(dwCertEncodingType int32, pszPubKeyOID ptr[inout, int8], pPubKeyStruc ptr[inout, intptr], cbPubKeyStruc int32, dwFlags int32, pvReserved ptr[inout, array[int8]], pbHash ptr[inout, int8], pcbHash ptr[inout, int32])
CertCreateCertificateChainEngine(pConfig ptr[inout, intptr], phChainEngine ptr[inout, ptr[inout, array[int8]]])
CertFreeCertificateChainEngine(hChainEngine ptr[inout, array[int8]])
CertResyncCertificateChainEngine(hChainEngine ptr[inout, array[int8]])
CertGetCertificateChain(hChainEngine ptr[inout, array[int8]], pCertContext ptr[inout, intptr], pTime ptr[inout, intptr], hAdditionalStore ptr[inout, array[int8]], pChainPara ptr[inout, intptr], dwFlags int32, pvReserved ptr[inout, array[int8]], ppChainContext ptr[inout, ptr[inout, intptr]])
CertFreeCertificateChain(pChainContext ptr[inout, intptr])
CertDuplicateCertificateChain(pChainContext ptr[inout, intptr])
CertFindChainInStore(hCertStore ptr[inout, array[int8]], dwCertEncodingType int32, dwFindFlags int32, dwFindType int32, pvFindPara ptr[inout, array[int8]], pPrevChainContext ptr[inout, intptr])
CertVerifyCertificateChainPolicy(pszPolicyOID ptr[inout, int8], pChainContext ptr[inout, intptr], pPolicyPara ptr[inout, intptr], pPolicyStatus ptr[inout, intptr])
CryptStringToBinaryA(pszString ptr[inout, int8], cchString int32, dwFlags int32, pbBinary ptr[inout, int8], pcbBinary ptr[inout, int32], pdwSkip ptr[inout, int32], pdwFlags ptr[inout, int32])
CryptBinaryToStringA(pbBinary ptr[inout, int8], cbBinary int32, dwFlags int32, pszString ptr[inout, int8], pcchString ptr[inout, int32])
PFXImportCertStore(pPFX ptr[inout, intptr], szPassword ptr[inout, int16], dwFlags int32)
PFXIsPFXBlob(pPFX ptr[inout, intptr])
PFXVerifyPassword(pPFX ptr[inout, intptr], szPassword ptr[inout, int16], dwFlags int32)
PFXExportCertStoreEx(hStore ptr[inout, array[int8]], pPFX ptr[inout, intptr], szPassword ptr[inout, int16], pvPara ptr[inout, array[int8]], dwFlags int32)
PFXExportCertStore(hStore ptr[inout, array[int8]], pPFX ptr[inout, intptr], szPassword ptr[inout, int16], dwFlags int32)
CertOpenServerOcspResponse(pChainContext ptr[inout, intptr], dwFlags int32, pOpenPara ptr[inout, intptr])
CertAddRefServerOcspResponse(hServerOcspResponse ptr[inout, array[int8]])
CertCloseServerOcspResponse(hServerOcspResponse ptr[inout, array[int8]], dwFlags int32)
CertGetServerOcspResponseContext(hServerOcspResponse ptr[inout, array[int8]], dwFlags int32, pvReserved ptr[inout, array[int8]])
CertAddRefServerOcspResponseContext(pServerOcspResponseContext ptr[inout, intptr])
CertFreeServerOcspResponseContext(pServerOcspResponseContext ptr[inout, intptr])
CertRetrieveLogoOrBiometricInfo(pCertContext ptr[inout, intptr], lpszLogoOrBiometricType ptr[inout, int8], dwRetrievalFlags int32, dwTimeout int32, dwFlags int32, pvReserved ptr[inout, array[int8]], ppbData ptr[inout, ptr[inout, int8]], pcbData ptr[inout, int32], ppwszMimeType ptr[inout, ptr[inout, int16]])
CertSelectCertificateChains(pSelectionContext ptr[inout, intptr], dwFlags int32, pChainParameters ptr[inout, intptr], cCriteria int32, rgpCriteria ptr[inout, intptr], hStore ptr[inout, array[int8]], pcSelection ptr[inout, int32], pprgpSelection ptr[inout, ptr[inout, ptr[inout, intptr]]])
CertFreeCertificateChainList(prgpSelection ptr[inout, ptr[inout, intptr]])
CryptRetrieveTimeStamp(wszUrl ptr[inout, int16], dwRetrievalFlags int32, dwTimeout int32, pszHashId ptr[inout, int8], pPara ptr[inout, intptr], pbData ptr[inout, int8], cbData int32, ppTsContext ptr[inout, ptr[inout, intptr]], ppTsSigner ptr[inout, ptr[inout, intptr]])
CryptVerifyTimeStampSignature(pbTSContentInfo ptr[inout, int8], cbTSContentInfo int32, pbData ptr[inout, int8], cbData int32, hAdditionalStore ptr[inout, array[int8]], ppTsContext ptr[inout, ptr[inout, intptr]], ppTsSigner ptr[inout, ptr[inout, intptr]], phStore ptr[inout, ptr[inout, array[int8]]])
CertIsWeakHash(dwHashUseType int32, pwszCNGHashAlgid ptr[inout, int16], dwChainFlags int32, pSignerChainContext ptr[inout, intptr], pTimeStamp ptr[inout, intptr], pwszFileName ptr[inout, int16])
CryptProtectData(pDataIn ptr[inout, intptr], szDataDescr ptr[inout, int16], pOptionalEntropy ptr[inout, intptr], pvReserved ptr[inout, array[int8]], pPromptStruct ptr[inout, intptr], dwFlags int32, pDataOut ptr[inout, intptr])
CryptUnprotectData(pDataIn ptr[inout, intptr], ppszDataDescr ptr[inout, ptr[inout, int16]], pOptionalEntropy ptr[inout, intptr], pvReserved ptr[inout, array[int8]], pPromptStruct ptr[inout, intptr], dwFlags int32, pDataOut ptr[inout, intptr])
CryptUpdateProtectedState(pOldSid ptr[inout, array[int8]], pwszOldPassword ptr[inout, int16], dwFlags int32, pdwSuccessCount ptr[inout, int32], pdwFailureCount ptr[inout, int32])
CryptProtectMemory(pDataIn ptr[inout, array[int8]], cbDataIn int32, dwFlags int32)
CryptUnprotectMemory(pDataIn ptr[inout, array[int8]], cbDataIn int32, dwFlags int32)
QueryUsersOnEncryptedFile(lpFileName ptr[inout, int16], pUsers ptr[inout, ptr[inout, intptr]])
QueryRecoveryAgentsOnEncryptedFile(lpFileName ptr[inout, int16], pRecoveryAgents ptr[inout, ptr[inout, intptr]])
RemoveUsersFromEncryptedFile(lpFileName ptr[inout, int16], pHashes ptr[inout, intptr])
AddUsersToEncryptedFile(lpFileName ptr[inout, int16], pEncryptionCertificates ptr[inout, intptr])
SetUserFileEncryptionKey(pEncryptionCertificate ptr[inout, intptr])
SetUserFileEncryptionKeyEx(pEncryptionCertificate ptr[inout, intptr], dwCapabilities int32, dwFlags int32, pvReserved ptr[inout, array[int8]])
FreeEncryptionCertificateHashList(pUsers ptr[inout, intptr])
EncryptionDisable(DirPath ptr[inout, int16], Disable int32)
DuplicateEncryptionInfoFile(SrcFileName ptr[inout, int16], DstFileName ptr[inout, int16], dwCreationDistribution int32, dwAttributes int32, lpSecurityAttributes ptr[inout, intptr])
GetEncryptedFileMetadata(lpFileName ptr[inout, int16], pcbMetadata ptr[inout, int32], ppbMetadata ptr[inout, ptr[inout, int8]])
SetEncryptedFileMetadata(lpFileName ptr[inout, int16], pbOldMetadata ptr[inout, int8], pbNewMetadata ptr[inout, int8], pOwnerHash ptr[inout, intptr], dwOperation int32, pCertificatesAdded ptr[inout, intptr])
FreeEncryptedFileMetadata(pbMetadata ptr[inout, int8])
RpcSsDestroyClientContext(ContextHandle ptr[inout, ptr[inout, array[int8]]])
RpcSsAllocate(Size int64)
RpcSsDisableAllocate()
RpcSsEnableAllocate()
RpcSsFree(NodeToFree ptr[inout, array[int8]])
RpcSsGetThreadHandle()
RpcSsSetClientAllocFree(ClientAlloc ptr[inout, intptr], ClientFree ptr[inout, intptr])
RpcSsSetThreadHandle(Id ptr[inout, array[int8]])
RpcSsSwapClientAllocFree(ClientAlloc ptr[inout, intptr], ClientFree ptr[inout, intptr], OldClientAlloc ptr[inout, ptr[inout, intptr]], OldClientFree ptr[inout, ptr[inout, intptr]])
RpcSmAllocate(Size int64, pStatus ptr[inout, int32])
RpcSmClientFree(pNodeToFree ptr[inout, array[int8]])
RpcSmDestroyClientContext(ContextHandle ptr[inout, ptr[inout, array[int8]]])
RpcSmDisableAllocate()
RpcSmEnableAllocate()
RpcSmFree(NodeToFree ptr[inout, array[int8]])
RpcSmGetThreadHandle(pStatus ptr[inout, int32])
RpcSmSetClientAllocFree(ClientAlloc ptr[inout, intptr], ClientFree ptr[inout, intptr])
RpcSmSetThreadHandle(Id ptr[inout, array[int8]])
RpcSmSwapClientAllocFree(ClientAlloc ptr[inout, intptr], ClientFree ptr[inout, intptr], OldClientAlloc ptr[inout, ptr[inout, intptr]], OldClientFree ptr[inout, ptr[inout, intptr]])
EnumPrintersA(Flags int32, Name ptr[inout, int8], Level int32, pPrinterEnum ptr[inout, int8], cbBuf int32, pcbNeeded ptr[inout, int32], pcReturned ptr[inout, int32])
GetSpoolFileHandle(hPrinter HANDLE) HANDLE
CommitSpoolData(hPrinter HANDLE, hSpoolFile HANDLE, cbCommit int32) HANDLE
CloseSpoolFileHandle(hPrinter HANDLE, hSpoolFile HANDLE)
OpenPrinterA(pPrinterName ptr[inout, int8], phPrinter ptr[inout, HANDLE], pDefault ptr[inout, intptr])
ResetPrinterA(hPrinter HANDLE, pDefault ptr[inout, intptr])
SetJobA(hPrinter HANDLE, JobId int32, Level int32, pJob ptr[inout, int8], Command int32)
GetJobA(hPrinter HANDLE, JobId int32, Level int32, pJob ptr[inout, int8], cbBuf int32, pcbNeeded ptr[inout, int32])
EnumJobsA(hPrinter HANDLE, FirstJob int32, NoJobs int32, Level int32, pJob ptr[inout, int8], cbBuf int32, pcbNeeded ptr[inout, int32], pcReturned ptr[inout, int32])
AddPrinterA(pName ptr[inout, int8], Level int32, pPrinter ptr[inout, int8]) HANDLE
DeletePrinter(hPrinter HANDLE)
SetPrinterA(hPrinter HANDLE, Level int32, pPrinter ptr[inout, int8], Command int32)
GetPrinterA(hPrinter HANDLE, Level int32, pPrinter ptr[inout, int8], cbBuf int32, pcbNeeded ptr[inout, int32])
AddPrinterDriverA(pName ptr[inout, int8], Level int32, pDriverInfo ptr[inout, int8])
AddPrinterDriverExA(pName ptr[inout, int8], Level int32, lpbDriverInfo ptr[inout, int8], dwFileCopyFlags int32)
EnumPrinterDriversA(pName ptr[inout, int8], pEnvironment ptr[inout, int8], Level int32, pDriverInfo ptr[inout, int8], cbBuf int32, pcbNeeded ptr[inout, int32], pcReturned ptr[inout, int32])
GetPrinterDriverA(hPrinter HANDLE, pEnvironment ptr[inout, int8], Level int32, pDriverInfo ptr[inout, int8], cbBuf int32, pcbNeeded ptr[inout, int32])
GetPrinterDriverDirectoryA(pName ptr[inout, int8], pEnvironment ptr[inout, int8], Level int32, pDriverDirectory ptr[inout, int8], cbBuf int32, pcbNeeded ptr[inout, int32])
DeletePrinterDriverA(pName ptr[inout, int8], pEnvironment ptr[inout, int8], pDriverName ptr[inout, int8])
DeletePrinterDriverExA(pName ptr[inout, int8], pEnvironment ptr[inout, int8], pDriverName ptr[inout, int8], dwDeleteFlag int32, dwVersionFlag int32)
AddPrintProcessorA(pName ptr[inout, int8], pEnvironment ptr[inout, int8], pPathName ptr[inout, int8], pPrintProcessorName ptr[inout, int8])
EnumPrintProcessorsA(pName ptr[inout, int8], pEnvironment ptr[inout, int8], Level int32, pPrintProcessorInfo ptr[inout, int8], cbBuf int32, pcbNeeded ptr[inout, int32], pcReturned ptr[inout, int32])
GetPrintProcessorDirectoryA(pName ptr[inout, int8], pEnvironment ptr[inout, int8], Level int32, pPrintProcessorInfo ptr[inout, int8], cbBuf int32, pcbNeeded ptr[inout, int32])
EnumPrintProcessorDatatypesA(pName ptr[inout, int8], pPrintProcessorName ptr[inout, int8], Level int32, pDatatypes ptr[inout, int8], cbBuf int32, pcbNeeded ptr[inout, int32], pcReturned ptr[inout, int32])
DeletePrintProcessorA(pName ptr[inout, int8], pEnvironment ptr[inout, int8], pPrintProcessorName ptr[inout, int8])
StartDocPrinterA(hPrinter HANDLE, Level int32, pDocInfo ptr[inout, int8])
StartPagePrinter(hPrinter HANDLE)
WritePrinter(hPrinter HANDLE, pBuf ptr[inout, array[int8]], cbBuf int32, pcWritten ptr[inout, int32])
FlushPrinter(hPrinter HANDLE, pBuf ptr[inout, array[int8]], cbBuf int32, pcWritten ptr[inout, int32], cSleep int32)
EndPagePrinter(hPrinter HANDLE)
AbortPrinter(hPrinter HANDLE)
ReadPrinter(hPrinter HANDLE, pBuf ptr[inout, array[int8]], cbBuf int32, pNoBytesRead ptr[inout, int32])
EndDocPrinter(hPrinter HANDLE)
AddJobA(hPrinter HANDLE, Level int32, pData ptr[inout, int8], cbBuf int32, pcbNeeded ptr[inout, int32])
ScheduleJob(hPrinter HANDLE, JobId int32)
PrinterProperties(hWnd ptr[inout, intptr], hPrinter HANDLE)
DocumentPropertiesA(hWnd ptr[inout, intptr], hPrinter HANDLE, pDeviceName ptr[inout, int8], pDevModeOutput ptr[inout, intptr], pDevModeInput ptr[inout, intptr], fMode int32)
AdvancedDocumentPropertiesA(hWnd ptr[inout, intptr], hPrinter HANDLE, pDeviceName ptr[inout, int8], pDevModeOutput ptr[inout, intptr], pDevModeInput ptr[inout, intptr])
ExtDeviceMode(hWnd ptr[inout, intptr], hInst HANDLE, pDevModeOutput ptr[inout, intptr], pDeviceName ptr[inout, int8], pPort ptr[inout, int8], pDevModeInput ptr[inout, intptr], pProfile ptr[inout, int8], fMode int32)
GetPrinterDataA(hPrinter HANDLE, pValueName ptr[inout, int8], pType ptr[inout, int32], pData ptr[inout, int8], nSize int32, pcbNeeded ptr[inout, int32])
GetPrinterDataExA(hPrinter HANDLE, pKeyName ptr[inout, int8], pValueName ptr[inout, int8], pType ptr[inout, int32], pData ptr[inout, int8], nSize int32, pcbNeeded ptr[inout, int32])
EnumPrinterDataA(hPrinter HANDLE, dwIndex int32, pValueName ptr[inout, int8], cbValueName int32, pcbValueName ptr[inout, int32], pType ptr[inout, int32], pData ptr[inout, int8], cbData int32, pcbData ptr[inout, int32])
EnumPrinterDataExA(hPrinter HANDLE, pKeyName ptr[inout, int8], pEnumValues ptr[inout, int8], cbEnumValues int32, pcbEnumValues ptr[inout, int32], pnEnumValues ptr[inout, int32])
EnumPrinterKeyA(hPrinter HANDLE, pKeyName ptr[inout, int8], pSubkey ptr[inout, int8], cbSubkey int32, pcbSubkey ptr[inout, int32])
SetPrinterDataA(hPrinter HANDLE, pValueName ptr[inout, int8], Type int32, pData ptr[inout, int8], cbData int32)
SetPrinterDataExA(hPrinter HANDLE, pKeyName ptr[inout, int8], pValueName ptr[inout, int8], Type int32, pData ptr[inout, int8], cbData int32)
DeletePrinterDataA(hPrinter HANDLE, pValueName ptr[inout, int8])
DeletePrinterDataExA(hPrinter HANDLE, pKeyName ptr[inout, int8], pValueName ptr[inout, int8])
DeletePrinterKeyA(hPrinter HANDLE, pKeyName ptr[inout, int8])
WaitForPrinterChange(hPrinter HANDLE, Flags int32)
FindFirstPrinterChangeNotification(hPrinter HANDLE, fdwFilter int32, fdwOptions int32, pPrinterNotifyOptions ptr[inout, array[int8]]) HANDLE
FindNextPrinterChangeNotification(hChange HANDLE, pdwChange ptr[inout, int32], pvReserved ptr[inout, array[int8]], ppPrinterNotifyInfo ptr[inout, ptr[inout, array[int8]]])
FreePrinterNotifyInfo(pPrinterNotifyInfo ptr[inout, intptr])
FindClosePrinterChangeNotification(hChange HANDLE)
PrinterMessageBoxA(hPrinter HANDLE, Error int32, hWnd ptr[inout, intptr], pText ptr[inout, int8], pCaption ptr[inout, int8], dwType int32)
ClosePrinter(hPrinter HANDLE)
AddFormA(hPrinter HANDLE, Level int32, pForm ptr[inout, int8])
DeleteFormA(hPrinter HANDLE, pFormName ptr[inout, int8])
GetFormA(hPrinter HANDLE, pFormName ptr[inout, int8], Level int32, pForm ptr[inout, int8], cbBuf int32, pcbNeeded ptr[inout, int32])
SetFormA(hPrinter HANDLE, pFormName ptr[inout, int8], Level int32, pForm ptr[inout, int8])
EnumFormsA(hPrinter HANDLE, Level int32, pForm ptr[inout, int8], cbBuf int32, pcbNeeded ptr[inout, int32], pcReturned ptr[inout, int32])
EnumMonitorsA(pName ptr[inout, int8], Level int32, pMonitor ptr[inout, int8], cbBuf int32, pcbNeeded ptr[inout, int32], pcReturned ptr[inout, int32])
AddMonitorA(pName ptr[inout, int8], Level int32, pMonitors ptr[inout, int8])
DeleteMonitorA(pName ptr[inout, int8], pEnvironment ptr[inout, int8], pMonitorName ptr[inout, int8])
EnumPortsA(pName ptr[inout, int8], Level int32, pPort ptr[inout, int8], cbBuf int32, pcbNeeded ptr[inout, int32], pcReturned ptr[inout, int32])
AddPortA(pName ptr[inout, int8], hWnd ptr[inout, intptr], pMonitorName ptr[inout, int8])
ConfigurePortA(pName ptr[inout, int8], hWnd ptr[inout, intptr], pPortName ptr[inout, int8])
DeletePortA(pName ptr[inout, int8], hWnd ptr[inout, intptr], pPortName ptr[inout, int8])
GetDefaultPrinterA(pszBuffer ptr[inout, int8], pcchBuffer ptr[inout, int32])
SetDefaultPrinterA(pszPrinter ptr[inout, int8])
SetPortA(pName ptr[inout, int8], pPortName ptr[inout, int8], dwLevel int32, pPortInfo ptr[inout, int8])
AddPrinterConnectionA(pName ptr[inout, int8])
DeletePrinterConnectionA(pName ptr[inout, int8])
ConnectToPrinterDlg(hwnd ptr[inout, intptr], Flags int32) HANDLE
AddPrintProvidorA(pName ptr[inout, int8], Level int32, pProvidorInfo ptr[inout, int8])
DeletePrintProvidorA(pName ptr[inout, int8], pEnvironment ptr[inout, int8], pPrintProvidorName ptr[inout, int8])
IsValidDevmodeA(pDevmode ptr[inout, intptr], DevmodeSize int64)
OpenPrinter2A(pPrinterName ptr[inout, int8], phPrinter ptr[inout, HANDLE], pDefault ptr[inout, intptr], pOptions ptr[inout, intptr])
AddPrinterConnection2A(hWnd ptr[inout, intptr], pszName ptr[inout, int8], dwLevel int32, pConnectionInfo ptr[inout, array[int8]])
InstallPrinterDriverFromPackageA(pszServer ptr[inout, int8], pszInfPath ptr[inout, int8], pszDriverName ptr[inout, int8], pszEnvironment ptr[inout, int8], dwFlags int32)
UploadPrinterDriverPackageA(pszServer ptr[inout, int8], pszInfPath ptr[inout, int8], pszEnvironment ptr[inout, int8], dwFlags int32, hwnd ptr[inout, intptr], pszDestInfPath ptr[inout, int8], pcchDestInfPath ptr[inout, int32])
GetCorePrinterDriversA(pszServer ptr[inout, int8], pszEnvironment ptr[inout, int8], pszzCoreDriverDependencies ptr[inout, int8], cCorePrinterDrivers int32, pCorePrinterDrivers ptr[inout, intptr])
CorePrinterDriverInstalledA(pszServer ptr[inout, int8], pszEnvironment ptr[inout, int8], CoreDriverGUID intptr, ftDriverDate intptr, dwlDriverVersion int64, pbDriverInstalled ptr[inout, int32])
GetPrinterDriverPackagePathA(pszServer ptr[inout, int8], pszEnvironment ptr[inout, int8], pszLanguage ptr[inout, int8], pszPackageID ptr[inout, int8], pszDriverPackageCab ptr[inout, int8], cchDriverPackageCab int32, pcchRequiredSize ptr[inout, int32])
DeletePrinterDriverPackageA(pszServer ptr[inout, int8], pszInfPath ptr[inout, int8], pszEnvironment ptr[inout, int8])
ReportJobProcessingProgress(printerHandle HANDLE, jobId int32, jobOperation int32, jobProgress int32)
GetPrinterDriver2A(hWnd ptr[inout, intptr], hPrinter HANDLE, pEnvironment ptr[inout, int8], Level int32, pDriverInfo ptr[inout, int8], cbBuf int32, pcbNeeded ptr[inout, int32])
GetPrintExecutionData(pData ptr[inout, intptr])
GetJobNamedPropertyValue(hPrinter HANDLE, JobId int32, pszName ptr[inout, int16], pValue ptr[inout, intptr])
FreePrintPropertyValue(pValue ptr[inout, intptr])
FreePrintNamedPropertyArray(cProperties int32, ppProperties ptr[inout, ptr[inout, intptr]])
SetJobNamedProperty(hPrinter HANDLE, JobId int32, pProperty ptr[inout, intptr])
DeleteJobNamedProperty(hPrinter HANDLE, JobId int32, pszName ptr[inout, int16])
EnumJobNamedProperties(hPrinter HANDLE, JobId int32, pcProperties ptr[inout, int32], ppProperties ptr[inout, ptr[inout, intptr]])
GetPrintOutputInfo(hWnd ptr[inout, intptr], pszPrinter ptr[inout, int16], phFile ptr[inout, HANDLE], ppszOutputFile ptr[inout, ptr[inout, int16]])
BSTR_UserSize(arg0 ptr[inout, int32], arg1 int32, arg2 ptr[inout, ptr[inout, int16]])
BSTR_UserMarshal(arg0 ptr[inout, int32], arg1 ptr[inout, int8], arg2 ptr[inout, ptr[inout, int16]])
BSTR_UserUnmarshal(arg0 ptr[inout, int32], arg1 ptr[inout, int8], arg2 ptr[inout, ptr[inout, int16]])
BSTR_UserFree(arg0 ptr[inout, int32], arg1 ptr[inout, ptr[inout, int16]])
VARIANT_UserSize(arg0 ptr[inout, int32], arg1 int32, arg2 ptr[inout, intptr])
VARIANT_UserMarshal(arg0 ptr[inout, int32], arg1 ptr[inout, int8], arg2 ptr[inout, intptr])
VARIANT_UserUnmarshal(arg0 ptr[inout, int32], arg1 ptr[inout, int8], arg2 ptr[inout, intptr])
VARIANT_UserFree(arg0 ptr[inout, int32], arg1 ptr[inout, intptr])
BSTR_UserSize64(arg0 ptr[inout, int32], arg1 int32, arg2 ptr[inout, ptr[inout, int16]])
BSTR_UserMarshal64(arg0 ptr[inout, int32], arg1 ptr[inout, int8], arg2 ptr[inout, ptr[inout, int16]])
BSTR_UserUnmarshal64(arg0 ptr[inout, int32], arg1 ptr[inout, int8], arg2 ptr[inout, ptr[inout, int16]])
BSTR_UserFree64(arg0 ptr[inout, int32], arg1 ptr[inout, ptr[inout, int16]])
VARIANT_UserSize64(arg0 ptr[inout, int32], arg1 int32, arg2 ptr[inout, intptr])
VARIANT_UserMarshal64(arg0 ptr[inout, int32], arg1 ptr[inout, int8], arg2 ptr[inout, intptr])
VARIANT_UserUnmarshal64(arg0 ptr[inout, int32], arg1 ptr[inout, int8], arg2 ptr[inout, intptr])
VARIANT_UserFree64(arg0 ptr[inout, int32], arg1 ptr[inout, intptr])
LPSAFEARRAY_UserSize(arg0 ptr[inout, int32], arg1 int32, arg2 ptr[inout, ptr[inout, intptr]])
LPSAFEARRAY_UserMarshal(arg0 ptr[inout, int32], arg1 ptr[inout, int8], arg2 ptr[inout, ptr[inout, intptr]])
LPSAFEARRAY_UserUnmarshal(arg0 ptr[inout, int32], arg1 ptr[inout, int8], arg2 ptr[inout, ptr[inout, intptr]])
LPSAFEARRAY_UserFree(arg0 ptr[inout, int32], arg1 ptr[inout, ptr[inout, intptr]])
LPSAFEARRAY_UserSize64(arg0 ptr[inout, int32], arg1 int32, arg2 ptr[inout, ptr[inout, intptr]])
LPSAFEARRAY_UserMarshal64(arg0 ptr[inout, int32], arg1 ptr[inout, int8], arg2 ptr[inout, ptr[inout, intptr]])
LPSAFEARRAY_UserUnmarshal64(arg0 ptr[inout, int32], arg1 ptr[inout, int8], arg2 ptr[inout, ptr[inout, intptr]])
LPSAFEARRAY_UserFree64(arg0 ptr[inout, int32], arg1 ptr[inout, ptr[inout, intptr]])
StgCreateDocfile(pwcsName ptr[inout, int16], grfMode int32, reserved int32, ppstgOpen ptr[inout, ptr[inout, intptr]])
StgCreateDocfileOnILockBytes(plkbyt ptr[inout, intptr], grfMode int32, reserved int32, ppstgOpen ptr[inout, ptr[inout, intptr]])
StgOpenStorage(pwcsName ptr[inout, int16], pstgPriority ptr[inout, intptr], grfMode int32, snbExclude ptr[inout, ptr[inout, int16]], reserved int32, ppstgOpen ptr[inout, ptr[inout, intptr]])
StgOpenStorageOnILockBytes(plkbyt ptr[inout, intptr], pstgPriority ptr[inout, intptr], grfMode int32, snbExclude ptr[inout, ptr[inout, int16]], reserved int32, ppstgOpen ptr[inout, ptr[inout, intptr]])
StgIsStorageFile(pwcsName ptr[inout, int16])
StgIsStorageILockBytes(plkbyt ptr[inout, intptr])
StgSetTimes(lpszName ptr[inout, int16], pctime ptr[inout, intptr], patime ptr[inout, intptr], pmtime ptr[inout, intptr])
StgCreateStorageEx(pwcsName ptr[inout, int16], grfMode int32, stgfmt int32, grfAttrs int32, pStgOptions ptr[inout, intptr], pSecurityDescriptor ptr[inout, array[int8]], riid ptr[inout, intptr], ppObjectOpen ptr[inout, ptr[inout, array[int8]]])
StgOpenStorageEx(pwcsName ptr[inout, int16], grfMode int32, stgfmt int32, grfAttrs int32, pStgOptions ptr[inout, intptr], pSecurityDescriptor ptr[inout, array[int8]], riid ptr[inout, intptr], ppObjectOpen ptr[inout, ptr[inout, array[int8]]])
StgCreatePropStg(pUnk ptr[inout, intptr], fmtid ptr[inout, intptr], pclsid ptr[inout, intptr], grfFlags int32, dwReserved int32, ppPropStg ptr[inout, ptr[inout, intptr]])
StgOpenPropStg(pUnk ptr[inout, intptr], fmtid ptr[inout, intptr], grfFlags int32, dwReserved int32, ppPropStg ptr[inout, ptr[inout, intptr]])
StgCreatePropSetStg(pStorage ptr[inout, intptr], dwReserved int32, ppPropSetStg ptr[inout, ptr[inout, intptr]])
FmtIdToPropStgName(pfmtid ptr[inout, intptr], oszName ptr[inout, int16])
PropStgNameToFmtId(oszName ptr[inout, int16], pfmtid ptr[inout, intptr])
ReadClassStg(pStg ptr[inout, intptr], pclsid ptr[inout, intptr])
WriteClassStg(pStg ptr[inout, intptr], rclsid ptr[inout, intptr])
ReadClassStm(pStm ptr[inout, intptr], pclsid ptr[inout, intptr])
WriteClassStm(pStm ptr[inout, intptr], rclsid ptr[inout, intptr])
GetHGlobalFromILockBytes(plkbyt ptr[inout, intptr], phglobal ptr[inout, ptr[inout, array[int8]]])
CreateILockBytesOnHGlobal(hGlobal ptr[inout, array[int8]], fDeleteOnRelease int32, pplkbyt ptr[inout, ptr[inout, intptr]])
GetConvertStg(pStg ptr[inout, intptr])
StgConvertVariantToProperty(pvar ptr[inout, intptr], CodePage int16, pprop ptr[inout, intptr], pcb ptr[inout, int32], pid int32, fReserved int8, pcIndirect ptr[inout, int32])
GetOpenFileNameA(arg0 ptr[inout, intptr])
GetSaveFileNameA(arg0 ptr[inout, intptr])
GetFileTitleA(arg0 ptr[inout, int8], Buf ptr[inout, int8], cchSize int16)
ChooseColorA(arg0 ptr[inout, intptr])
FindTextA(arg0 ptr[inout, intptr])
ReplaceTextA(arg0 ptr[inout, intptr])
ChooseFontA(arg0 ptr[inout, intptr])
PrintDlgA(pPD ptr[inout, intptr])
PrintDlgExA(pPD ptr[inout, intptr])
CommDlgExtendedError()
PageSetupDlgA(arg0 ptr[inout, intptr])
ChangeServiceConfigA(hService ptr[inout, intptr], dwServiceType int32, dwStartType int32, dwErrorControl int32, lpBinaryPathName ptr[inout, int8], lpLoadOrderGroup ptr[inout, int8], lpdwTagId ptr[inout, int32], lpDependencies ptr[inout, int8], lpServiceStartName ptr[inout, int8])
ChangeServiceConfig2A(hService ptr[inout, intptr], dwInfoLevel int32, lpInfo ptr[inout, array[int8]])
CloseServiceHandle(hSCObject ptr[inout, intptr])
ControlService(hService ptr[inout, intptr], dwControl int32, lpServiceStatus ptr[inout, intptr])
CreateServiceA(hSCManager ptr[inout, intptr], lpServiceName ptr[inout, int8], lpDisplayName ptr[inout, int8], dwDesiredAccess int32, dwServiceType int32, dwStartType int32, dwErrorControl int32, lpBinaryPathName ptr[inout, int8], lpLoadOrderGroup ptr[inout, int8])
DeleteService(hService ptr[inout, intptr])
EnumDependentServicesA(hService ptr[inout, intptr], dwServiceState int32, lpServices ptr[inout, intptr], cbBufSize int32, pcbBytesNeeded ptr[inout, int32], lpServicesReturned ptr[inout, int32])
EnumServicesStatusA(hSCManager ptr[inout, intptr], dwServiceType int32, dwServiceState int32, lpServices ptr[inout, intptr], cbBufSize int32, pcbBytesNeeded ptr[inout, int32], lpServicesReturned ptr[inout, int32], lpResumeHandle ptr[inout, int32])
EnumServicesStatusExA(hSCManager ptr[inout, intptr], InfoLevel int32, dwServiceType int32, dwServiceState int32, lpServices ptr[inout, int8], cbBufSize int32, pcbBytesNeeded ptr[inout, int32], lpServicesReturned ptr[inout, int32], lpResumeHandle ptr[inout, int32])
GetServiceKeyNameA(hSCManager ptr[inout, intptr], lpDisplayName ptr[inout, int8], lpServiceName ptr[inout, int8], lpcchBuffer ptr[inout, int32])
GetServiceDisplayNameA(hSCManager ptr[inout, intptr], lpServiceName ptr[inout, int8], lpDisplayName ptr[inout, int8], lpcchBuffer ptr[inout, int32])
LockServiceDatabase(hSCManager ptr[inout, intptr])
NotifyBootConfigStatus(BootAcceptable int32)
OpenSCManagerA(lpMachineName ptr[inout, int8], lpDatabaseName ptr[inout, int8], dwDesiredAccess int32)
OpenServiceA(hSCManager ptr[inout, intptr], lpServiceName ptr[inout, int8], dwDesiredAccess int32)
QueryServiceConfigA(hService ptr[inout, intptr], lpServiceConfig ptr[inout, intptr], cbBufSize int32, pcbBytesNeeded ptr[inout, int32])
QueryServiceConfig2A(hService ptr[inout, intptr], dwInfoLevel int32, lpBuffer ptr[inout, int8], cbBufSize int32, pcbBytesNeeded ptr[inout, int32])
QueryServiceLockStatusA(hSCManager ptr[inout, intptr], lpLockStatus ptr[inout, intptr], cbBufSize int32, pcbBytesNeeded ptr[inout, int32])
QueryServiceObjectSecurity(hService ptr[inout, intptr], dwSecurityInformation int32, lpSecurityDescriptor ptr[inout, array[int8]], cbBufSize int32, pcbBytesNeeded ptr[inout, int32])
QueryServiceStatus(hService ptr[inout, intptr], lpServiceStatus ptr[inout, intptr])
QueryServiceStatusEx(hService ptr[inout, intptr], InfoLevel int32, lpBuffer ptr[inout, int8], cbBufSize int32, pcbBytesNeeded ptr[inout, int32])
RegisterServiceCtrlHandlerA(lpServiceName ptr[inout, int8], lpHandlerProc ptr[inout, intptr])
RegisterServiceCtrlHandlerExA(lpServiceName ptr[inout, int8], lpHandlerProc ptr[inout, intptr], lpContext ptr[inout, array[int8]])
SetServiceObjectSecurity(hService ptr[inout, intptr], dwSecurityInformation int32, lpSecurityDescriptor ptr[inout, array[int8]])
SetServiceStatus(hServiceStatus ptr[inout, intptr], lpServiceStatus ptr[inout, intptr])
StartServiceCtrlDispatcherA(lpServiceStartTable ptr[inout, intptr])
StartServiceA(hService ptr[inout, intptr], dwNumServiceArgs int32, lpServiceArgVectors ptr[inout, ptr[inout, int8]])
UnlockServiceDatabase(ScLock ptr[inout, array[int8]])
NotifyServiceStatusChangeA(hService ptr[inout, intptr], dwNotifyMask int32, pNotifyBuffer ptr[inout, intptr])
ControlServiceExA(hService ptr[inout, intptr], dwControl int32, dwInfoLevel int32, pControlParams ptr[inout, array[int8]])
QueryServiceDynamicInformation(hServiceStatus ptr[inout, intptr], dwInfoLevel int32, ppDynamicInfo ptr[inout, ptr[inout, array[int8]]])
WaitServiceState(hService ptr[inout, intptr], dwNotify int32, dwTimeout int32, hCancelEvent HANDLE)
ImmInstallIMEA(lpszIMEFileName ptr[inout, int8], lpszLayoutText ptr[inout, int8])
ImmGetDefaultIMEWnd(arg0 ptr[inout, intptr])
ImmGetDescriptionA(arg0 ptr[inout, intptr], lpszDescription ptr[inout, int8], uBufLen int32)
ImmGetIMEFileNameA(arg0 ptr[inout, intptr], lpszFileName ptr[inout, int8], uBufLen int32)
ImmGetProperty(arg0 ptr[inout, intptr], arg1 int32)
ImmIsIME(arg0 ptr[inout, intptr])
ImmSimulateHotKey(arg0 ptr[inout, intptr], arg1 int32)
ImmCreateContext()
ImmDestroyContext(arg0 ptr[inout, intptr])
ImmGetContext(arg0 ptr[inout, intptr])
ImmReleaseContext(arg0 ptr[inout, intptr], arg1 ptr[inout, intptr])
ImmAssociateContext(arg0 ptr[inout, intptr], arg1 ptr[inout, intptr])
ImmAssociateContextEx(arg0 ptr[inout, intptr], arg1 ptr[inout, intptr], arg2 int32)
ImmGetCompositionStringA(arg0 ptr[inout, intptr], arg1 int32, lpBuf ptr[inout, array[int8]], dwBufLen int32)
ImmSetCompositionStringA(arg0 ptr[inout, intptr], dwIndex int32, lpComp ptr[inout, array[int8]], dwCompLen int32, lpRead ptr[inout, array[int8]], dwReadLen int32)
ImmGetCandidateListCountA(arg0 ptr[inout, intptr], lpdwListCount ptr[inout, int32])
ImmGetCandidateListA(arg0 ptr[inout, intptr], deIndex int32, lpCandList ptr[inout, intptr], dwBufLen int32)
ImmGetGuideLineA(arg0 ptr[inout, intptr], dwIndex int32, lpBuf ptr[inout, int8], dwBufLen int32)
ImmGetConversionStatus(arg0 ptr[inout, intptr], lpfdwConversion ptr[inout, int32], lpfdwSentence ptr[inout, int32])
ImmSetConversionStatus(arg0 ptr[inout, intptr], arg1 int32, arg2 int32)
ImmGetOpenStatus(arg0 ptr[inout, intptr])
ImmSetOpenStatus(arg0 ptr[inout, intptr], arg1 int32)
ImmGetCompositionFontA(arg0 ptr[inout, intptr], lplf ptr[inout, intptr])
ImmSetCompositionFontA(arg0 ptr[inout, intptr], lplf ptr[inout, intptr])
ImmConfigureIMEA(arg0 ptr[inout, intptr], arg1 ptr[inout, intptr], arg2 int32, arg3 ptr[inout, array[int8]])
ImmEscapeA(arg0 ptr[inout, intptr], arg1 ptr[inout, intptr], arg2 int32, arg3 ptr[inout, array[int8]])
ImmGetConversionListA(arg0 ptr[inout, intptr], arg1 ptr[inout, intptr], lpSrc ptr[inout, int8], lpDst ptr[inout, intptr], dwBufLen int32, uFlag int32)
ImmNotifyIME(arg0 ptr[inout, intptr], dwAction int32, dwIndex int32, dwValue int32)
ImmGetStatusWindowPos(arg0 ptr[inout, intptr], lpptPos ptr[inout, intptr])
ImmSetStatusWindowPos(arg0 ptr[inout, intptr], lpptPos ptr[inout, intptr])
ImmGetCompositionWindow(arg0 ptr[inout, intptr], lpCompForm ptr[inout, intptr])
ImmSetCompositionWindow(arg0 ptr[inout, intptr], lpCompForm ptr[inout, intptr])
ImmGetCandidateWindow(arg0 ptr[inout, intptr], arg1 int32, lpCandidate ptr[inout, intptr])
ImmSetCandidateWindow(arg0 ptr[inout, intptr], lpCandidate ptr[inout, intptr])
ImmIsUIMessageA(arg0 ptr[inout, intptr], arg1 int32, arg2 int64, arg3 int64)
ImmGetVirtualKey(arg0 ptr[inout, intptr])
ImmRegisterWordA(arg0 ptr[inout, intptr], lpszReading ptr[inout, int8], arg2 int32, lpszRegister ptr[inout, int8])
ImmUnregisterWordA(arg0 ptr[inout, intptr], lpszReading ptr[inout, int8], arg2 int32, lpszUnregister ptr[inout, int8])
ImmGetRegisterWordStyleA(arg0 ptr[inout, intptr], nItem int32, lpStyleBuf ptr[inout, intptr])
ImmEnumRegisterWordA(arg0 ptr[inout, intptr], arg1 ptr[inout, intptr], lpszReading ptr[inout, int8], arg3 int32, lpszRegister ptr[inout, int8], arg5 ptr[inout, array[int8]])
ImmDisableIME(arg0 int32)
ImmEnumInputContext(idThread int32, lpfn ptr[inout, intptr], lParam int64)
ImmGetImeMenuItemsA(arg0 ptr[inout, intptr], arg1 int32, arg2 int32, lpImeParentMenu ptr[inout, intptr], lpImeMenu ptr[inout, intptr], dwSize int32)
ImmDisableTextFrameService(idThread int32)
ImmDisableLegacyIME()
