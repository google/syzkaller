// Code generated by "stringer -type=operation -trimprefix=op"; DO NOT EDIT.

package gogrep

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[opInvalid-0]
	_ = x[opNode-1]
	_ = x[opNamedNode-2]
	_ = x[opNodeSeq-3]
	_ = x[opNamedNodeSeq-4]
	_ = x[opOptNode-5]
	_ = x[opNamedOptNode-6]
	_ = x[opFieldNode-7]
	_ = x[opNamedFieldNode-8]
	_ = x[opMultiStmt-9]
	_ = x[opMultiExpr-10]
	_ = x[opMultiDecl-11]
	_ = x[opEnd-12]
	_ = x[opBasicLit-13]
	_ = x[opStrictIntLit-14]
	_ = x[opStrictFloatLit-15]
	_ = x[opStrictCharLit-16]
	_ = x[opStrictStringLit-17]
	_ = x[opStrictComplexLit-18]
	_ = x[opIdent-19]
	_ = x[opPkg-20]
	_ = x[opIndexExpr-21]
	_ = x[opSliceExpr-22]
	_ = x[opSliceFromExpr-23]
	_ = x[opSliceToExpr-24]
	_ = x[opSliceFromToExpr-25]
	_ = x[opSliceToCapExpr-26]
	_ = x[opSliceFromToCapExpr-27]
	_ = x[opFuncLit-28]
	_ = x[opCompositeLit-29]
	_ = x[opTypedCompositeLit-30]
	_ = x[opSimpleSelectorExpr-31]
	_ = x[opSelectorExpr-32]
	_ = x[opTypeAssertExpr-33]
	_ = x[opTypeSwitchAssertExpr-34]
	_ = x[opStructType-35]
	_ = x[opInterfaceType-36]
	_ = x[opVoidFuncType-37]
	_ = x[opFuncType-38]
	_ = x[opArrayType-39]
	_ = x[opSliceType-40]
	_ = x[opMapType-41]
	_ = x[opChanType-42]
	_ = x[opKeyValueExpr-43]
	_ = x[opEllipsis-44]
	_ = x[opTypedEllipsis-45]
	_ = x[opStarExpr-46]
	_ = x[opUnaryExpr-47]
	_ = x[opBinaryExpr-48]
	_ = x[opParenExpr-49]
	_ = x[opArgList-50]
	_ = x[opSimpleArgList-51]
	_ = x[opVariadicCallExpr-52]
	_ = x[opNonVariadicCallExpr-53]
	_ = x[opCallExpr-54]
	_ = x[opAssignStmt-55]
	_ = x[opMultiAssignStmt-56]
	_ = x[opBranchStmt-57]
	_ = x[opSimpleLabeledBranchStmt-58]
	_ = x[opLabeledBranchStmt-59]
	_ = x[opSimpleLabeledStmt-60]
	_ = x[opLabeledStmt-61]
	_ = x[opBlockStmt-62]
	_ = x[opExprStmt-63]
	_ = x[opGoStmt-64]
	_ = x[opDeferStmt-65]
	_ = x[opSendStmt-66]
	_ = x[opEmptyStmt-67]
	_ = x[opIncDecStmt-68]
	_ = x[opReturnStmt-69]
	_ = x[opIfStmt-70]
	_ = x[opIfInitStmt-71]
	_ = x[opIfElseStmt-72]
	_ = x[opIfInitElseStmt-73]
	_ = x[opIfNamedOptStmt-74]
	_ = x[opIfNamedOptElseStmt-75]
	_ = x[opSwitchStmt-76]
	_ = x[opSwitchTagStmt-77]
	_ = x[opSwitchInitStmt-78]
	_ = x[opSwitchInitTagStmt-79]
	_ = x[opSelectStmt-80]
	_ = x[opTypeSwitchStmt-81]
	_ = x[opTypeSwitchInitStmt-82]
	_ = x[opCaseClause-83]
	_ = x[opDefaultCaseClause-84]
	_ = x[opCommClause-85]
	_ = x[opDefaultCommClause-86]
	_ = x[opForStmt-87]
	_ = x[opForPostStmt-88]
	_ = x[opForCondStmt-89]
	_ = x[opForCondPostStmt-90]
	_ = x[opForInitStmt-91]
	_ = x[opForInitPostStmt-92]
	_ = x[opForInitCondStmt-93]
	_ = x[opForInitCondPostStmt-94]
	_ = x[opRangeStmt-95]
	_ = x[opRangeKeyStmt-96]
	_ = x[opRangeKeyValueStmt-97]
	_ = x[opRangeClause-98]
	_ = x[opRangeHeader-99]
	_ = x[opRangeKeyHeader-100]
	_ = x[opRangeKeyValueHeader-101]
	_ = x[opFieldList-102]
	_ = x[opUnnamedField-103]
	_ = x[opSimpleField-104]
	_ = x[opField-105]
	_ = x[opMultiField-106]
	_ = x[opValueSpec-107]
	_ = x[opValueInitSpec-108]
	_ = x[opTypedValueInitSpec-109]
	_ = x[opTypedValueSpec-110]
	_ = x[opTypeSpec-111]
	_ = x[opTypeAliasSpec-112]
	_ = x[opFuncDecl-113]
	_ = x[opMethodDecl-114]
	_ = x[opFuncProtoDecl-115]
	_ = x[opMethodProtoDecl-116]
	_ = x[opDeclStmt-117]
	_ = x[opConstDecl-118]
	_ = x[opVarDecl-119]
	_ = x[opTypeDecl-120]
	_ = x[opAnyImportDecl-121]
	_ = x[opImportDecl-122]
	_ = x[opEmptyPackage-123]
}

const _operation_name = "InvalidNodeNamedNodeNodeSeqNamedNodeSeqOptNodeNamedOptNodeFieldNodeNamedFieldNodeMultiStmtMultiExprMultiDeclEndBasicLitStrictIntLitStrictFloatLitStrictCharLitStrictStringLitStrictComplexLitIdentPkgIndexExprSliceExprSliceFromExprSliceToExprSliceFromToExprSliceToCapExprSliceFromToCapExprFuncLitCompositeLitTypedCompositeLitSimpleSelectorExprSelectorExprTypeAssertExprTypeSwitchAssertExprStructTypeInterfaceTypeVoidFuncTypeFuncTypeArrayTypeSliceTypeMapTypeChanTypeKeyValueExprEllipsisTypedEllipsisStarExprUnaryExprBinaryExprParenExprArgListSimpleArgListVariadicCallExprNonVariadicCallExprCallExprAssignStmtMultiAssignStmtBranchStmtSimpleLabeledBranchStmtLabeledBranchStmtSimpleLabeledStmtLabeledStmtBlockStmtExprStmtGoStmtDeferStmtSendStmtEmptyStmtIncDecStmtReturnStmtIfStmtIfInitStmtIfElseStmtIfInitElseStmtIfNamedOptStmtIfNamedOptElseStmtSwitchStmtSwitchTagStmtSwitchInitStmtSwitchInitTagStmtSelectStmtTypeSwitchStmtTypeSwitchInitStmtCaseClauseDefaultCaseClauseCommClauseDefaultCommClauseForStmtForPostStmtForCondStmtForCondPostStmtForInitStmtForInitPostStmtForInitCondStmtForInitCondPostStmtRangeStmtRangeKeyStmtRangeKeyValueStmtRangeClauseRangeHeaderRangeKeyHeaderRangeKeyValueHeaderFieldListUnnamedFieldSimpleFieldFieldMultiFieldValueSpecValueInitSpecTypedValueInitSpecTypedValueSpecTypeSpecTypeAliasSpecFuncDeclMethodDeclFuncProtoDeclMethodProtoDeclDeclStmtConstDeclVarDeclTypeDeclAnyImportDeclImportDeclEmptyPackage"

var _operation_index = [...]uint16{0, 7, 11, 20, 27, 39, 46, 58, 67, 81, 90, 99, 108, 111, 119, 131, 145, 158, 173, 189, 194, 197, 206, 215, 228, 239, 254, 268, 286, 293, 305, 322, 340, 352, 366, 386, 396, 409, 421, 429, 438, 447, 454, 462, 474, 482, 495, 503, 512, 522, 531, 538, 551, 567, 586, 594, 604, 619, 629, 652, 669, 686, 697, 706, 714, 720, 729, 737, 746, 756, 766, 772, 782, 792, 806, 820, 838, 848, 861, 875, 892, 902, 916, 934, 944, 961, 971, 988, 995, 1006, 1017, 1032, 1043, 1058, 1073, 1092, 1101, 1113, 1130, 1141, 1152, 1166, 1185, 1194, 1206, 1217, 1222, 1232, 1241, 1254, 1272, 1286, 1294, 1307, 1315, 1325, 1338, 1353, 1361, 1370, 1377, 1385, 1398, 1408, 1420}

func (i operation) String() string {
	if i >= operation(len(_operation_index)-1) {
		return "operation(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _operation_name[_operation_index[i]:_operation_index[i+1]]
}
